function _mergeNamespaces(n, m) {
    for (var i = 0; i < m.length; i++) {
        const e = m[i]
        if (typeof e !== 'string' && !Array.isArray(e)) {
            for (const k2 in e) {
                if (k2 !== 'default' && !(k2 in n)) {
                    const d = Object.getOwnPropertyDescriptor(e, k2)
                    if (d) {
                        Object.defineProperty(
                            n,
                            k2,
                            d.get
                                ? d
                                : {
                                      enumerable: true,
                                      get: () => e[k2]
                                  }
                        )
                    }
                }
            }
        }
    }
    return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: 'Module' }))
}
var commonjsGlobal =
    typeof globalThis !== 'undefined'
        ? globalThis
        : typeof window !== 'undefined'
          ? window
          : typeof global !== 'undefined'
            ? global
            : typeof self !== 'undefined'
              ? self
              : {}
function getDefaultExportFromCjs(x2) {
    return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, 'default')
        ? x2['default']
        : x2
}
var jsxRuntime = { exports: {} }
var reactJsxRuntime_production = {}
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production
function requireReactJsxRuntime_production() {
    if (hasRequiredReactJsxRuntime_production) return reactJsxRuntime_production
    hasRequiredReactJsxRuntime_production = 1
    var REACT_ELEMENT_TYPE = Symbol.for('react.transitional.element'),
        REACT_FRAGMENT_TYPE = Symbol.for('react.fragment')
    function jsxProd(type, config2, maybeKey) {
        var key = null
        void 0 !== maybeKey && (key = '' + maybeKey)
        void 0 !== config2.key && (key = '' + config2.key)
        if ('key' in config2) {
            maybeKey = {}
            for (var propName in config2)
                'key' !== propName && (maybeKey[propName] = config2[propName])
        } else maybeKey = config2
        config2 = maybeKey.ref
        return {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref: void 0 !== config2 ? config2 : null,
            props: maybeKey
        }
    }
    reactJsxRuntime_production.Fragment = REACT_FRAGMENT_TYPE
    reactJsxRuntime_production.jsx = jsxProd
    reactJsxRuntime_production.jsxs = jsxProd
    return reactJsxRuntime_production
}
var hasRequiredJsxRuntime
function requireJsxRuntime() {
    if (hasRequiredJsxRuntime) return jsxRuntime.exports
    hasRequiredJsxRuntime = 1
    {
        jsxRuntime.exports = requireReactJsxRuntime_production()
    }
    return jsxRuntime.exports
}
var jsxRuntimeExports = requireJsxRuntime()
var bootstrap_bundle_min$1 = { exports: {} }
/*!
 * Bootstrap v5.3.3 (https://getbootstrap.com/)
 * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */
var bootstrap_bundle_min = bootstrap_bundle_min$1.exports
var hasRequiredBootstrap_bundle_min
function requireBootstrap_bundle_min() {
    if (hasRequiredBootstrap_bundle_min) return bootstrap_bundle_min$1.exports
    hasRequiredBootstrap_bundle_min = 1
    ;(function (module, exports) {
        !(function (t, e) {
            module.exports = e()
        })(bootstrap_bundle_min, function () {
            const t = /* @__PURE__ */ new Map(),
                e = {
                    set(e3, i2, n2) {
                        t.has(e3) || t.set(e3, /* @__PURE__ */ new Map())
                        const s3 = t.get(e3)
                        s3.has(i2) || 0 === s3.size
                            ? s3.set(i2, n2)
                            : console.error(
                                  `Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(s3.keys())[0]}.`
                              )
                    },
                    get: (e3, i2) => (t.has(e3) && t.get(e3).get(i2)) || null,
                    remove(e3, i2) {
                        if (!t.has(e3)) return
                        const n2 = t.get(e3)
                        n2.delete(i2), 0 === n2.size && t.delete(e3)
                    }
                },
                i = 'transitionend',
                n = (t2) => (
                    t2 &&
                        window.CSS &&
                        window.CSS.escape &&
                        (t2 = t2.replace(/#([^\s"#']+)/g, (t3, e3) => `#${CSS.escape(e3)}`)),
                    t2
                ),
                s2 = (t2) => {
                    t2.dispatchEvent(new Event(i))
                },
                o = (t2) =>
                    !(!t2 || 'object' != typeof t2) &&
                    (void 0 !== t2.jquery && (t2 = t2[0]), void 0 !== t2.nodeType),
                r2 = (t2) =>
                    o(t2)
                        ? t2.jquery
                            ? t2[0]
                            : t2
                        : 'string' == typeof t2 && t2.length > 0
                          ? document.querySelector(n(t2))
                          : null,
                a2 = (t2) => {
                    if (!o(t2) || 0 === t2.getClientRects().length) return false
                    const e3 = 'visible' === getComputedStyle(t2).getPropertyValue('visibility'),
                        i2 = t2.closest('details:not([open])')
                    if (!i2) return e3
                    if (i2 !== t2) {
                        const e4 = t2.closest('summary')
                        if (e4 && e4.parentNode !== i2) return false
                        if (null === e4) return false
                    }
                    return e3
                },
                l = (t2) =>
                    !t2 ||
                    t2.nodeType !== Node.ELEMENT_NODE ||
                    !!t2.classList.contains('disabled') ||
                    (void 0 !== t2.disabled
                        ? t2.disabled
                        : t2.hasAttribute('disabled') && 'false' !== t2.getAttribute('disabled')),
                c2 = (t2) => {
                    if (!document.documentElement.attachShadow) return null
                    if ('function' == typeof t2.getRootNode) {
                        const e3 = t2.getRootNode()
                        return e3 instanceof ShadowRoot ? e3 : null
                    }
                    return t2 instanceof ShadowRoot ? t2 : t2.parentNode ? c2(t2.parentNode) : null
                },
                h = () => {},
                d = (t2) => {
                    t2.offsetHeight
                },
                u = () =>
                    window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')
                        ? window.jQuery
                        : null,
                f = [],
                p = () => 'rtl' === document.documentElement.dir,
                m = (t2) => {
                    var e3
                    ;(e3 = () => {
                        const e4 = u()
                        if (e4) {
                            const i2 = t2.NAME,
                                n2 = e4.fn[i2]
                            ;(e4.fn[i2] = t2.jQueryInterface),
                                (e4.fn[i2].Constructor = t2),
                                (e4.fn[i2].noConflict = () => (
                                    (e4.fn[i2] = n2), t2.jQueryInterface
                                ))
                        }
                    }),
                        'loading' === document.readyState
                            ? (f.length ||
                                  document.addEventListener('DOMContentLoaded', () => {
                                      for (const t3 of f) t3()
                                  }),
                              f.push(e3))
                            : e3()
                },
                g = (t2, e3 = [], i2 = t2) => ('function' == typeof t2 ? t2(...e3) : i2),
                _ = (t2, e3, n2 = true) => {
                    if (!n2) return void g(t2)
                    const o2 =
                        ((t3) => {
                            if (!t3) return 0
                            let { transitionDuration: e4, transitionDelay: i2 } =
                                window.getComputedStyle(t3)
                            const n3 = Number.parseFloat(e4),
                                s3 = Number.parseFloat(i2)
                            return n3 || s3
                                ? ((e4 = e4.split(',')[0]),
                                  (i2 = i2.split(',')[0]),
                                  1e3 * (Number.parseFloat(e4) + Number.parseFloat(i2)))
                                : 0
                        })(e3) + 5
                    let r3 = false
                    const a3 = ({ target: n3 }) => {
                        n3 === e3 && ((r3 = true), e3.removeEventListener(i, a3), g(t2))
                    }
                    e3.addEventListener(i, a3),
                        setTimeout(() => {
                            r3 || s2(e3)
                        }, o2)
                },
                b = (t2, e3, i2, n2) => {
                    const s3 = t2.length
                    let o2 = t2.indexOf(e3)
                    return -1 === o2
                        ? !i2 && n2
                            ? t2[s3 - 1]
                            : t2[0]
                        : ((o2 += i2 ? 1 : -1),
                          n2 && (o2 = (o2 + s3) % s3),
                          t2[Math.max(0, Math.min(o2, s3 - 1))])
                },
                v = /[^.]*(?=\..*)\.|.*/,
                y2 = /\..*/,
                w2 = /::\d+$/,
                A = {}
            let E = 1
            const T = { mouseenter: 'mouseover', mouseleave: 'mouseout' },
                C = /* @__PURE__ */ new Set([
                    'click',
                    'dblclick',
                    'mouseup',
                    'mousedown',
                    'contextmenu',
                    'mousewheel',
                    'DOMMouseScroll',
                    'mouseover',
                    'mouseout',
                    'mousemove',
                    'selectstart',
                    'selectend',
                    'keydown',
                    'keypress',
                    'keyup',
                    'orientationchange',
                    'touchstart',
                    'touchmove',
                    'touchend',
                    'touchcancel',
                    'pointerdown',
                    'pointermove',
                    'pointerup',
                    'pointerleave',
                    'pointercancel',
                    'gesturestart',
                    'gesturechange',
                    'gestureend',
                    'focus',
                    'blur',
                    'change',
                    'reset',
                    'select',
                    'submit',
                    'focusin',
                    'focusout',
                    'load',
                    'unload',
                    'beforeunload',
                    'resize',
                    'move',
                    'DOMContentLoaded',
                    'readystatechange',
                    'error',
                    'abort',
                    'scroll'
                ])
            function O(t2, e3) {
                return (e3 && `${e3}::${E++}`) || t2.uidEvent || E++
            }
            function x2(t2) {
                const e3 = O(t2)
                return (t2.uidEvent = e3), (A[e3] = A[e3] || {}), A[e3]
            }
            function k2(t2, e3, i2 = null) {
                return Object.values(t2).find(
                    (t3) => t3.callable === e3 && t3.delegationSelector === i2
                )
            }
            function L(t2, e3, i2) {
                const n2 = 'string' == typeof e3,
                    s3 = n2 ? i2 : e3 || i2
                let o2 = I(t2)
                return C.has(o2) || (o2 = t2), [n2, s3, o2]
            }
            function S(t2, e3, i2, n2, s3) {
                if ('string' != typeof e3 || !t2) return
                let [o2, r3, a3] = L(e3, i2, n2)
                if (e3 in T) {
                    const t3 = (t4) =>
                        function (e4) {
                            if (
                                !e4.relatedTarget ||
                                (e4.relatedTarget !== e4.delegateTarget &&
                                    !e4.delegateTarget.contains(e4.relatedTarget))
                            )
                                return t4.call(this, e4)
                        }
                    r3 = t3(r3)
                }
                const l2 = x2(t2),
                    c3 = l2[a3] || (l2[a3] = {}),
                    h2 = k2(c3, r3, o2 ? i2 : null)
                if (h2) return void (h2.oneOff = h2.oneOff && s3)
                const d2 = O(r3, e3.replace(v, '')),
                    u2 = o2
                        ? /* @__PURE__ */ (function (t3, e4, i3) {
                              return function n3(s4) {
                                  const o3 = t3.querySelectorAll(e4)
                                  for (
                                      let { target: r4 } = s4;
                                      r4 && r4 !== this;
                                      r4 = r4.parentNode
                                  )
                                      for (const a4 of o3)
                                          if (a4 === r4)
                                              return (
                                                  P2(s4, { delegateTarget: r4 }),
                                                  n3.oneOff && N.off(t3, s4.type, e4, i3),
                                                  i3.apply(r4, [s4])
                                              )
                              }
                          })(t2, i2, r3)
                        : /* @__PURE__ */ (function (t3, e4) {
                              return function i3(n3) {
                                  return (
                                      P2(n3, { delegateTarget: t3 }),
                                      i3.oneOff && N.off(t3, n3.type, e4),
                                      e4.apply(t3, [n3])
                                  )
                              }
                          })(t2, r3)
                ;(u2.delegationSelector = o2 ? i2 : null),
                    (u2.callable = r3),
                    (u2.oneOff = s3),
                    (u2.uidEvent = d2),
                    (c3[d2] = u2),
                    t2.addEventListener(a3, u2, o2)
            }
            function D(t2, e3, i2, n2, s3) {
                const o2 = k2(e3[i2], n2, s3)
                o2 && (t2.removeEventListener(i2, o2, Boolean(s3)), delete e3[i2][o2.uidEvent])
            }
            function $(t2, e3, i2, n2) {
                const s3 = e3[i2] || {}
                for (const [o2, r3] of Object.entries(s3))
                    o2.includes(n2) && D(t2, e3, i2, r3.callable, r3.delegationSelector)
            }
            function I(t2) {
                return (t2 = t2.replace(y2, '')), T[t2] || t2
            }
            const N = {
                on(t2, e3, i2, n2) {
                    S(t2, e3, i2, n2, false)
                },
                one(t2, e3, i2, n2) {
                    S(t2, e3, i2, n2, true)
                },
                off(t2, e3, i2, n2) {
                    if ('string' != typeof e3 || !t2) return
                    const [s3, o2, r3] = L(e3, i2, n2),
                        a3 = r3 !== e3,
                        l2 = x2(t2),
                        c3 = l2[r3] || {},
                        h2 = e3.startsWith('.')
                    if (void 0 === o2) {
                        if (h2) for (const i3 of Object.keys(l2)) $(t2, l2, i3, e3.slice(1))
                        for (const [i3, n3] of Object.entries(c3)) {
                            const s4 = i3.replace(w2, '')
                            ;(a3 && !e3.includes(s4)) ||
                                D(t2, l2, r3, n3.callable, n3.delegationSelector)
                        }
                    } else {
                        if (!Object.keys(c3).length) return
                        D(t2, l2, r3, o2, s3 ? i2 : null)
                    }
                },
                trigger(t2, e3, i2) {
                    if ('string' != typeof e3 || !t2) return null
                    const n2 = u()
                    let s3 = null,
                        o2 = true,
                        r3 = true,
                        a3 = false
                    e3 !== I(e3) &&
                        n2 &&
                        ((s3 = n2.Event(e3, i2)),
                        n2(t2).trigger(s3),
                        (o2 = !s3.isPropagationStopped()),
                        (r3 = !s3.isImmediatePropagationStopped()),
                        (a3 = s3.isDefaultPrevented()))
                    const l2 = P2(new Event(e3, { bubbles: o2, cancelable: true }), i2)
                    return (
                        a3 && l2.preventDefault(),
                        r3 && t2.dispatchEvent(l2),
                        l2.defaultPrevented && s3 && s3.preventDefault(),
                        l2
                    )
                }
            }
            function P2(t2, e3 = {}) {
                for (const [i2, n2] of Object.entries(e3))
                    try {
                        t2[i2] = n2
                    } catch (e4) {
                        Object.defineProperty(t2, i2, { configurable: true, get: () => n2 })
                    }
                return t2
            }
            function j(t2) {
                if ('true' === t2) return true
                if ('false' === t2) return false
                if (t2 === Number(t2).toString()) return Number(t2)
                if ('' === t2 || 'null' === t2) return null
                if ('string' != typeof t2) return t2
                try {
                    return JSON.parse(decodeURIComponent(t2))
                } catch (e3) {
                    return t2
                }
            }
            function M(t2) {
                return t2.replace(/[A-Z]/g, (t3) => `-${t3.toLowerCase()}`)
            }
            const F = {
                setDataAttribute(t2, e3, i2) {
                    t2.setAttribute(`data-bs-${M(e3)}`, i2)
                },
                removeDataAttribute(t2, e3) {
                    t2.removeAttribute(`data-bs-${M(e3)}`)
                },
                getDataAttributes(t2) {
                    if (!t2) return {}
                    const e3 = {},
                        i2 = Object.keys(t2.dataset).filter(
                            (t3) => t3.startsWith('bs') && !t3.startsWith('bsConfig')
                        )
                    for (const n2 of i2) {
                        let i3 = n2.replace(/^bs/, '')
                        ;(i3 = i3.charAt(0).toLowerCase() + i3.slice(1, i3.length)),
                            (e3[i3] = j(t2.dataset[n2]))
                    }
                    return e3
                },
                getDataAttribute: (t2, e3) => j(t2.getAttribute(`data-bs-${M(e3)}`))
            }
            class H {
                static get Default() {
                    return {}
                }
                static get DefaultType() {
                    return {}
                }
                static get NAME() {
                    throw new Error(
                        'You have to implement the static method "NAME", for each component!'
                    )
                }
                _getConfig(t2) {
                    return (
                        (t2 = this._mergeConfigObj(t2)),
                        (t2 = this._configAfterMerge(t2)),
                        this._typeCheckConfig(t2),
                        t2
                    )
                }
                _configAfterMerge(t2) {
                    return t2
                }
                _mergeConfigObj(t2, e3) {
                    const i2 = o(e3) ? F.getDataAttribute(e3, 'config') : {}
                    return {
                        ...this.constructor.Default,
                        ...('object' == typeof i2 ? i2 : {}),
                        ...(o(e3) ? F.getDataAttributes(e3) : {}),
                        ...('object' == typeof t2 ? t2 : {})
                    }
                }
                _typeCheckConfig(t2, e3 = this.constructor.DefaultType) {
                    for (const [n2, s3] of Object.entries(e3)) {
                        const e4 = t2[n2],
                            r3 = o(e4)
                                ? 'element'
                                : null == (i2 = e4)
                                  ? `${i2}`
                                  : Object.prototype.toString
                                        .call(i2)
                                        .match(/\s([a-z]+)/i)[1]
                                        .toLowerCase()
                        if (!new RegExp(s3).test(r3))
                            throw new TypeError(
                                `${this.constructor.NAME.toUpperCase()}: Option "${n2}" provided type "${r3}" but expected type "${s3}".`
                            )
                    }
                    var i2
                }
            }
            class W extends H {
                constructor(t2, i2) {
                    super(),
                        (t2 = r2(t2)) &&
                            ((this._element = t2),
                            (this._config = this._getConfig(i2)),
                            e.set(this._element, this.constructor.DATA_KEY, this))
                }
                dispose() {
                    e.remove(this._element, this.constructor.DATA_KEY),
                        N.off(this._element, this.constructor.EVENT_KEY)
                    for (const t2 of Object.getOwnPropertyNames(this)) this[t2] = null
                }
                _queueCallback(t2, e3, i2 = true) {
                    _(t2, e3, i2)
                }
                _getConfig(t2) {
                    return (
                        (t2 = this._mergeConfigObj(t2, this._element)),
                        (t2 = this._configAfterMerge(t2)),
                        this._typeCheckConfig(t2),
                        t2
                    )
                }
                static getInstance(t2) {
                    return e.get(r2(t2), this.DATA_KEY)
                }
                static getOrCreateInstance(t2, e3 = {}) {
                    return this.getInstance(t2) || new this(t2, 'object' == typeof e3 ? e3 : null)
                }
                static get VERSION() {
                    return '5.3.3'
                }
                static get DATA_KEY() {
                    return `bs.${this.NAME}`
                }
                static get EVENT_KEY() {
                    return `.${this.DATA_KEY}`
                }
                static eventName(t2) {
                    return `${t2}${this.EVENT_KEY}`
                }
            }
            const B = (t2) => {
                    let e3 = t2.getAttribute('data-bs-target')
                    if (!e3 || '#' === e3) {
                        let i2 = t2.getAttribute('href')
                        if (!i2 || (!i2.includes('#') && !i2.startsWith('.'))) return null
                        i2.includes('#') && !i2.startsWith('#') && (i2 = `#${i2.split('#')[1]}`),
                            (e3 = i2 && '#' !== i2 ? i2.trim() : null)
                    }
                    return e3
                        ? e3
                              .split(',')
                              .map((t3) => n(t3))
                              .join(',')
                        : null
                },
                z = {
                    find: (t2, e3 = document.documentElement) =>
                        [].concat(...Element.prototype.querySelectorAll.call(e3, t2)),
                    findOne: (t2, e3 = document.documentElement) =>
                        Element.prototype.querySelector.call(e3, t2),
                    children: (t2, e3) => [].concat(...t2.children).filter((t3) => t3.matches(e3)),
                    parents(t2, e3) {
                        const i2 = []
                        let n2 = t2.parentNode.closest(e3)
                        for (; n2; ) i2.push(n2), (n2 = n2.parentNode.closest(e3))
                        return i2
                    },
                    prev(t2, e3) {
                        let i2 = t2.previousElementSibling
                        for (; i2; ) {
                            if (i2.matches(e3)) return [i2]
                            i2 = i2.previousElementSibling
                        }
                        return []
                    },
                    next(t2, e3) {
                        let i2 = t2.nextElementSibling
                        for (; i2; ) {
                            if (i2.matches(e3)) return [i2]
                            i2 = i2.nextElementSibling
                        }
                        return []
                    },
                    focusableChildren(t2) {
                        const e3 = [
                            'a',
                            'button',
                            'input',
                            'textarea',
                            'select',
                            'details',
                            '[tabindex]',
                            '[contenteditable="true"]'
                        ]
                            .map((t3) => `${t3}:not([tabindex^="-"])`)
                            .join(',')
                        return this.find(e3, t2).filter((t3) => !l(t3) && a2(t3))
                    },
                    getSelectorFromElement(t2) {
                        const e3 = B(t2)
                        return e3 && z.findOne(e3) ? e3 : null
                    },
                    getElementFromSelector(t2) {
                        const e3 = B(t2)
                        return e3 ? z.findOne(e3) : null
                    },
                    getMultipleElementsFromSelector(t2) {
                        const e3 = B(t2)
                        return e3 ? z.find(e3) : []
                    }
                },
                R = (t2, e3 = 'hide') => {
                    const i2 = `click.dismiss${t2.EVENT_KEY}`,
                        n2 = t2.NAME
                    N.on(document, i2, `[data-bs-dismiss="${n2}"]`, function (i3) {
                        if ((['A', 'AREA'].includes(this.tagName) && i3.preventDefault(), l(this)))
                            return
                        const s3 = z.getElementFromSelector(this) || this.closest(`.${n2}`)
                        t2.getOrCreateInstance(s3)[e3]()
                    })
                },
                q = '.bs.alert',
                V = `close${q}`,
                K = `closed${q}`
            class Q extends W {
                static get NAME() {
                    return 'alert'
                }
                close() {
                    if (N.trigger(this._element, V).defaultPrevented) return
                    this._element.classList.remove('show')
                    const t2 = this._element.classList.contains('fade')
                    this._queueCallback(() => this._destroyElement(), this._element, t2)
                }
                _destroyElement() {
                    this._element.remove(), N.trigger(this._element, K), this.dispose()
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = Q.getOrCreateInstance(this)
                        if ('string' == typeof t2) {
                            if (void 0 === e3[t2] || t2.startsWith('_') || 'constructor' === t2)
                                throw new TypeError(`No method named "${t2}"`)
                            e3[t2](this)
                        }
                    })
                }
            }
            R(Q, 'close'), m(Q)
            const X = '[data-bs-toggle="button"]'
            class Y extends W {
                static get NAME() {
                    return 'button'
                }
                toggle() {
                    this._element.setAttribute(
                        'aria-pressed',
                        this._element.classList.toggle('active')
                    )
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = Y.getOrCreateInstance(this)
                        'toggle' === t2 && e3[t2]()
                    })
                }
            }
            N.on(document, 'click.bs.button.data-api', X, (t2) => {
                t2.preventDefault()
                const e3 = t2.target.closest(X)
                Y.getOrCreateInstance(e3).toggle()
            }),
                m(Y)
            const U = '.bs.swipe',
                G = `touchstart${U}`,
                J = `touchmove${U}`,
                Z = `touchend${U}`,
                tt = `pointerdown${U}`,
                et = `pointerup${U}`,
                it = { endCallback: null, leftCallback: null, rightCallback: null },
                nt = {
                    endCallback: '(function|null)',
                    leftCallback: '(function|null)',
                    rightCallback: '(function|null)'
                }
            class st extends H {
                constructor(t2, e3) {
                    super(),
                        (this._element = t2),
                        t2 &&
                            st.isSupported() &&
                            ((this._config = this._getConfig(e3)),
                            (this._deltaX = 0),
                            (this._supportPointerEvents = Boolean(window.PointerEvent)),
                            this._initEvents())
                }
                static get Default() {
                    return it
                }
                static get DefaultType() {
                    return nt
                }
                static get NAME() {
                    return 'swipe'
                }
                dispose() {
                    N.off(this._element, U)
                }
                _start(t2) {
                    this._supportPointerEvents
                        ? this._eventIsPointerPenTouch(t2) && (this._deltaX = t2.clientX)
                        : (this._deltaX = t2.touches[0].clientX)
                }
                _end(t2) {
                    this._eventIsPointerPenTouch(t2) && (this._deltaX = t2.clientX - this._deltaX),
                        this._handleSwipe(),
                        g(this._config.endCallback)
                }
                _move(t2) {
                    this._deltaX =
                        t2.touches && t2.touches.length > 1
                            ? 0
                            : t2.touches[0].clientX - this._deltaX
                }
                _handleSwipe() {
                    const t2 = Math.abs(this._deltaX)
                    if (t2 <= 40) return
                    const e3 = t2 / this._deltaX
                    ;(this._deltaX = 0),
                        e3 && g(e3 > 0 ? this._config.rightCallback : this._config.leftCallback)
                }
                _initEvents() {
                    this._supportPointerEvents
                        ? (N.on(this._element, tt, (t2) => this._start(t2)),
                          N.on(this._element, et, (t2) => this._end(t2)),
                          this._element.classList.add('pointer-event'))
                        : (N.on(this._element, G, (t2) => this._start(t2)),
                          N.on(this._element, J, (t2) => this._move(t2)),
                          N.on(this._element, Z, (t2) => this._end(t2)))
                }
                _eventIsPointerPenTouch(t2) {
                    return (
                        this._supportPointerEvents &&
                        ('pen' === t2.pointerType || 'touch' === t2.pointerType)
                    )
                }
                static isSupported() {
                    return (
                        'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0
                    )
                }
            }
            const ot = '.bs.carousel',
                rt = '.data-api',
                at = 'next',
                lt = 'prev',
                ct = 'left',
                ht = 'right',
                dt = `slide${ot}`,
                ut = `slid${ot}`,
                ft = `keydown${ot}`,
                pt = `mouseenter${ot}`,
                mt = `mouseleave${ot}`,
                gt = `dragstart${ot}`,
                _t = `load${ot}${rt}`,
                bt = `click${ot}${rt}`,
                vt = 'carousel',
                yt = 'active',
                wt = '.active',
                At = '.carousel-item',
                Et = wt + At,
                Tt = { ArrowLeft: ht, ArrowRight: ct },
                Ct = {
                    interval: 5e3,
                    keyboard: true,
                    pause: 'hover',
                    ride: false,
                    touch: true,
                    wrap: true
                },
                Ot = {
                    interval: '(number|boolean)',
                    keyboard: 'boolean',
                    pause: '(string|boolean)',
                    ride: '(boolean|string)',
                    touch: 'boolean',
                    wrap: 'boolean'
                }
            class xt extends W {
                constructor(t2, e3) {
                    super(t2, e3),
                        (this._interval = null),
                        (this._activeElement = null),
                        (this._isSliding = false),
                        (this.touchTimeout = null),
                        (this._swipeHelper = null),
                        (this._indicatorsElement = z.findOne(
                            '.carousel-indicators',
                            this._element
                        )),
                        this._addEventListeners(),
                        this._config.ride === vt && this.cycle()
                }
                static get Default() {
                    return Ct
                }
                static get DefaultType() {
                    return Ot
                }
                static get NAME() {
                    return 'carousel'
                }
                next() {
                    this._slide(at)
                }
                nextWhenVisible() {
                    !document.hidden && a2(this._element) && this.next()
                }
                prev() {
                    this._slide(lt)
                }
                pause() {
                    this._isSliding && s2(this._element), this._clearInterval()
                }
                cycle() {
                    this._clearInterval(),
                        this._updateInterval(),
                        (this._interval = setInterval(
                            () => this.nextWhenVisible(),
                            this._config.interval
                        ))
                }
                _maybeEnableCycle() {
                    this._config.ride &&
                        (this._isSliding
                            ? N.one(this._element, ut, () => this.cycle())
                            : this.cycle())
                }
                to(t2) {
                    const e3 = this._getItems()
                    if (t2 > e3.length - 1 || t2 < 0) return
                    if (this._isSliding) return void N.one(this._element, ut, () => this.to(t2))
                    const i2 = this._getItemIndex(this._getActive())
                    if (i2 === t2) return
                    const n2 = t2 > i2 ? at : lt
                    this._slide(n2, e3[t2])
                }
                dispose() {
                    this._swipeHelper && this._swipeHelper.dispose(), super.dispose()
                }
                _configAfterMerge(t2) {
                    return (t2.defaultInterval = t2.interval), t2
                }
                _addEventListeners() {
                    this._config.keyboard && N.on(this._element, ft, (t2) => this._keydown(t2)),
                        'hover' === this._config.pause &&
                            (N.on(this._element, pt, () => this.pause()),
                            N.on(this._element, mt, () => this._maybeEnableCycle())),
                        this._config.touch && st.isSupported() && this._addTouchEventListeners()
                }
                _addTouchEventListeners() {
                    for (const t3 of z.find('.carousel-item img', this._element))
                        N.on(t3, gt, (t4) => t4.preventDefault())
                    const t2 = {
                        leftCallback: () => this._slide(this._directionToOrder(ct)),
                        rightCallback: () => this._slide(this._directionToOrder(ht)),
                        endCallback: () => {
                            'hover' === this._config.pause &&
                                (this.pause(),
                                this.touchTimeout && clearTimeout(this.touchTimeout),
                                (this.touchTimeout = setTimeout(
                                    () => this._maybeEnableCycle(),
                                    500 + this._config.interval
                                )))
                        }
                    }
                    this._swipeHelper = new st(this._element, t2)
                }
                _keydown(t2) {
                    if (/input|textarea/i.test(t2.target.tagName)) return
                    const e3 = Tt[t2.key]
                    e3 && (t2.preventDefault(), this._slide(this._directionToOrder(e3)))
                }
                _getItemIndex(t2) {
                    return this._getItems().indexOf(t2)
                }
                _setActiveIndicatorElement(t2) {
                    if (!this._indicatorsElement) return
                    const e3 = z.findOne(wt, this._indicatorsElement)
                    e3.classList.remove(yt), e3.removeAttribute('aria-current')
                    const i2 = z.findOne(`[data-bs-slide-to="${t2}"]`, this._indicatorsElement)
                    i2 && (i2.classList.add(yt), i2.setAttribute('aria-current', 'true'))
                }
                _updateInterval() {
                    const t2 = this._activeElement || this._getActive()
                    if (!t2) return
                    const e3 = Number.parseInt(t2.getAttribute('data-bs-interval'), 10)
                    this._config.interval = e3 || this._config.defaultInterval
                }
                _slide(t2, e3 = null) {
                    if (this._isSliding) return
                    const i2 = this._getActive(),
                        n2 = t2 === at,
                        s3 = e3 || b(this._getItems(), i2, n2, this._config.wrap)
                    if (s3 === i2) return
                    const o2 = this._getItemIndex(s3),
                        r3 = (e4) =>
                            N.trigger(this._element, e4, {
                                relatedTarget: s3,
                                direction: this._orderToDirection(t2),
                                from: this._getItemIndex(i2),
                                to: o2
                            })
                    if (r3(dt).defaultPrevented) return
                    if (!i2 || !s3) return
                    const a3 = Boolean(this._interval)
                    this.pause(),
                        (this._isSliding = true),
                        this._setActiveIndicatorElement(o2),
                        (this._activeElement = s3)
                    const l2 = n2 ? 'carousel-item-start' : 'carousel-item-end',
                        c3 = n2 ? 'carousel-item-next' : 'carousel-item-prev'
                    s3.classList.add(c3),
                        d(s3),
                        i2.classList.add(l2),
                        s3.classList.add(l2),
                        this._queueCallback(
                            () => {
                                s3.classList.remove(l2, c3),
                                    s3.classList.add(yt),
                                    i2.classList.remove(yt, c3, l2),
                                    (this._isSliding = false),
                                    r3(ut)
                            },
                            i2,
                            this._isAnimated()
                        ),
                        a3 && this.cycle()
                }
                _isAnimated() {
                    return this._element.classList.contains('slide')
                }
                _getActive() {
                    return z.findOne(Et, this._element)
                }
                _getItems() {
                    return z.find(At, this._element)
                }
                _clearInterval() {
                    this._interval && (clearInterval(this._interval), (this._interval = null))
                }
                _directionToOrder(t2) {
                    return p() ? (t2 === ct ? lt : at) : t2 === ct ? at : lt
                }
                _orderToDirection(t2) {
                    return p() ? (t2 === lt ? ct : ht) : t2 === lt ? ht : ct
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = xt.getOrCreateInstance(this, t2)
                        if ('number' != typeof t2) {
                            if ('string' == typeof t2) {
                                if (void 0 === e3[t2] || t2.startsWith('_') || 'constructor' === t2)
                                    throw new TypeError(`No method named "${t2}"`)
                                e3[t2]()
                            }
                        } else e3.to(t2)
                    })
                }
            }
            N.on(document, bt, '[data-bs-slide], [data-bs-slide-to]', function (t2) {
                const e3 = z.getElementFromSelector(this)
                if (!e3 || !e3.classList.contains(vt)) return
                t2.preventDefault()
                const i2 = xt.getOrCreateInstance(e3),
                    n2 = this.getAttribute('data-bs-slide-to')
                return n2
                    ? (i2.to(n2), void i2._maybeEnableCycle())
                    : 'next' === F.getDataAttribute(this, 'slide')
                      ? (i2.next(), void i2._maybeEnableCycle())
                      : (i2.prev(), void i2._maybeEnableCycle())
            }),
                N.on(window, _t, () => {
                    const t2 = z.find('[data-bs-ride="carousel"]')
                    for (const e3 of t2) xt.getOrCreateInstance(e3)
                }),
                m(xt)
            const kt = '.bs.collapse',
                Lt = `show${kt}`,
                St = `shown${kt}`,
                Dt = `hide${kt}`,
                $t = `hidden${kt}`,
                It = `click${kt}.data-api`,
                Nt = 'show',
                Pt = 'collapse',
                jt = 'collapsing',
                Mt = `:scope .${Pt} .${Pt}`,
                Ft = '[data-bs-toggle="collapse"]',
                Ht = { parent: null, toggle: true },
                Wt = { parent: '(null|element)', toggle: 'boolean' }
            class Bt extends W {
                constructor(t2, e3) {
                    super(t2, e3), (this._isTransitioning = false), (this._triggerArray = [])
                    const i2 = z.find(Ft)
                    for (const t3 of i2) {
                        const e4 = z.getSelectorFromElement(t3),
                            i3 = z.find(e4).filter((t4) => t4 === this._element)
                        null !== e4 && i3.length && this._triggerArray.push(t3)
                    }
                    this._initializeChildren(),
                        this._config.parent ||
                            this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()),
                        this._config.toggle && this.toggle()
                }
                static get Default() {
                    return Ht
                }
                static get DefaultType() {
                    return Wt
                }
                static get NAME() {
                    return 'collapse'
                }
                toggle() {
                    this._isShown() ? this.hide() : this.show()
                }
                show() {
                    if (this._isTransitioning || this._isShown()) return
                    let t2 = []
                    if (
                        (this._config.parent &&
                            (t2 = this._getFirstLevelChildren(
                                '.collapse.show, .collapse.collapsing'
                            )
                                .filter((t3) => t3 !== this._element)
                                .map((t3) => Bt.getOrCreateInstance(t3, { toggle: false }))),
                        t2.length && t2[0]._isTransitioning)
                    )
                        return
                    if (N.trigger(this._element, Lt).defaultPrevented) return
                    for (const e4 of t2) e4.hide()
                    const e3 = this._getDimension()
                    this._element.classList.remove(Pt),
                        this._element.classList.add(jt),
                        (this._element.style[e3] = 0),
                        this._addAriaAndCollapsedClass(this._triggerArray, true),
                        (this._isTransitioning = true)
                    const i2 = `scroll${e3[0].toUpperCase() + e3.slice(1)}`
                    this._queueCallback(
                        () => {
                            ;(this._isTransitioning = false),
                                this._element.classList.remove(jt),
                                this._element.classList.add(Pt, Nt),
                                (this._element.style[e3] = ''),
                                N.trigger(this._element, St)
                        },
                        this._element,
                        true
                    ),
                        (this._element.style[e3] = `${this._element[i2]}px`)
                }
                hide() {
                    if (this._isTransitioning || !this._isShown()) return
                    if (N.trigger(this._element, Dt).defaultPrevented) return
                    const t2 = this._getDimension()
                    ;(this._element.style[t2] = `${this._element.getBoundingClientRect()[t2]}px`),
                        d(this._element),
                        this._element.classList.add(jt),
                        this._element.classList.remove(Pt, Nt)
                    for (const t3 of this._triggerArray) {
                        const e3 = z.getElementFromSelector(t3)
                        e3 && !this._isShown(e3) && this._addAriaAndCollapsedClass([t3], false)
                    }
                    ;(this._isTransitioning = true),
                        (this._element.style[t2] = ''),
                        this._queueCallback(
                            () => {
                                ;(this._isTransitioning = false),
                                    this._element.classList.remove(jt),
                                    this._element.classList.add(Pt),
                                    N.trigger(this._element, $t)
                            },
                            this._element,
                            true
                        )
                }
                _isShown(t2 = this._element) {
                    return t2.classList.contains(Nt)
                }
                _configAfterMerge(t2) {
                    return (t2.toggle = Boolean(t2.toggle)), (t2.parent = r2(t2.parent)), t2
                }
                _getDimension() {
                    return this._element.classList.contains('collapse-horizontal')
                        ? 'width'
                        : 'height'
                }
                _initializeChildren() {
                    if (!this._config.parent) return
                    const t2 = this._getFirstLevelChildren(Ft)
                    for (const e3 of t2) {
                        const t3 = z.getElementFromSelector(e3)
                        t3 && this._addAriaAndCollapsedClass([e3], this._isShown(t3))
                    }
                }
                _getFirstLevelChildren(t2) {
                    const e3 = z.find(Mt, this._config.parent)
                    return z.find(t2, this._config.parent).filter((t3) => !e3.includes(t3))
                }
                _addAriaAndCollapsedClass(t2, e3) {
                    if (t2.length)
                        for (const i2 of t2)
                            i2.classList.toggle('collapsed', !e3),
                                i2.setAttribute('aria-expanded', e3)
                }
                static jQueryInterface(t2) {
                    const e3 = {}
                    return (
                        'string' == typeof t2 && /show|hide/.test(t2) && (e3.toggle = false),
                        this.each(function () {
                            const i2 = Bt.getOrCreateInstance(this, e3)
                            if ('string' == typeof t2) {
                                if (void 0 === i2[t2])
                                    throw new TypeError(`No method named "${t2}"`)
                                i2[t2]()
                            }
                        })
                    )
                }
            }
            N.on(document, It, Ft, function (t2) {
                ;('A' === t2.target.tagName ||
                    (t2.delegateTarget && 'A' === t2.delegateTarget.tagName)) &&
                    t2.preventDefault()
                for (const t3 of z.getMultipleElementsFromSelector(this))
                    Bt.getOrCreateInstance(t3, { toggle: false }).toggle()
            }),
                m(Bt)
            var zt = 'top',
                Rt = 'bottom',
                qt = 'right',
                Vt = 'left',
                Kt = 'auto',
                Qt = [zt, Rt, qt, Vt],
                Xt = 'start',
                Yt = 'end',
                Ut = 'clippingParents',
                Gt = 'viewport',
                Jt = 'popper',
                Zt = 'reference',
                te = Qt.reduce(function (t2, e3) {
                    return t2.concat([e3 + '-' + Xt, e3 + '-' + Yt])
                }, []),
                ee = [].concat(Qt, [Kt]).reduce(function (t2, e3) {
                    return t2.concat([e3, e3 + '-' + Xt, e3 + '-' + Yt])
                }, []),
                ie = 'beforeRead',
                ne = 'read',
                se = 'afterRead',
                oe = 'beforeMain',
                re2 = 'main',
                ae = 'afterMain',
                le = 'beforeWrite',
                ce = 'write',
                he = 'afterWrite',
                de = [ie, ne, se, oe, re2, ae, le, ce, he]
            function ue(t2) {
                return t2 ? (t2.nodeName || '').toLowerCase() : null
            }
            function fe(t2) {
                if (null == t2) return window
                if ('[object Window]' !== t2.toString()) {
                    var e3 = t2.ownerDocument
                    return (e3 && e3.defaultView) || window
                }
                return t2
            }
            function pe(t2) {
                return t2 instanceof fe(t2).Element || t2 instanceof Element
            }
            function me(t2) {
                return t2 instanceof fe(t2).HTMLElement || t2 instanceof HTMLElement
            }
            function ge(t2) {
                return (
                    'undefined' != typeof ShadowRoot &&
                    (t2 instanceof fe(t2).ShadowRoot || t2 instanceof ShadowRoot)
                )
            }
            const _e = {
                name: 'applyStyles',
                enabled: true,
                phase: 'write',
                fn: function (t2) {
                    var e3 = t2.state
                    Object.keys(e3.elements).forEach(function (t3) {
                        var i2 = e3.styles[t3] || {},
                            n2 = e3.attributes[t3] || {},
                            s3 = e3.elements[t3]
                        me(s3) &&
                            ue(s3) &&
                            (Object.assign(s3.style, i2),
                            Object.keys(n2).forEach(function (t4) {
                                var e4 = n2[t4]
                                false === e4
                                    ? s3.removeAttribute(t4)
                                    : s3.setAttribute(t4, true === e4 ? '' : e4)
                            }))
                    })
                },
                effect: function (t2) {
                    var e3 = t2.state,
                        i2 = {
                            popper: {
                                position: e3.options.strategy,
                                left: '0',
                                top: '0',
                                margin: '0'
                            },
                            arrow: { position: 'absolute' },
                            reference: {}
                        }
                    return (
                        Object.assign(e3.elements.popper.style, i2.popper),
                        (e3.styles = i2),
                        e3.elements.arrow && Object.assign(e3.elements.arrow.style, i2.arrow),
                        function () {
                            Object.keys(e3.elements).forEach(function (t3) {
                                var n2 = e3.elements[t3],
                                    s3 = e3.attributes[t3] || {},
                                    o2 = Object.keys(
                                        e3.styles.hasOwnProperty(t3) ? e3.styles[t3] : i2[t3]
                                    ).reduce(function (t4, e4) {
                                        return (t4[e4] = ''), t4
                                    }, {})
                                me(n2) &&
                                    ue(n2) &&
                                    (Object.assign(n2.style, o2),
                                    Object.keys(s3).forEach(function (t4) {
                                        n2.removeAttribute(t4)
                                    }))
                            })
                        }
                    )
                },
                requires: ['computeStyles']
            }
            function be(t2) {
                return t2.split('-')[0]
            }
            var ve = Math.max,
                ye = Math.min,
                we = Math.round
            function Ae() {
                var t2 = navigator.userAgentData
                return null != t2 && t2.brands && Array.isArray(t2.brands)
                    ? t2.brands
                          .map(function (t3) {
                              return t3.brand + '/' + t3.version
                          })
                          .join(' ')
                    : navigator.userAgent
            }
            function Ee() {
                return !/^((?!chrome|android).)*safari/i.test(Ae())
            }
            function Te(t2, e3, i2) {
                void 0 === e3 && (e3 = false), void 0 === i2 && (i2 = false)
                var n2 = t2.getBoundingClientRect(),
                    s3 = 1,
                    o2 = 1
                e3 &&
                    me(t2) &&
                    ((s3 = (t2.offsetWidth > 0 && we(n2.width) / t2.offsetWidth) || 1),
                    (o2 = (t2.offsetHeight > 0 && we(n2.height) / t2.offsetHeight) || 1))
                var r3 = (pe(t2) ? fe(t2) : window).visualViewport,
                    a3 = !Ee() && i2,
                    l2 = (n2.left + (a3 && r3 ? r3.offsetLeft : 0)) / s3,
                    c3 = (n2.top + (a3 && r3 ? r3.offsetTop : 0)) / o2,
                    h2 = n2.width / s3,
                    d2 = n2.height / o2
                return {
                    width: h2,
                    height: d2,
                    top: c3,
                    right: l2 + h2,
                    bottom: c3 + d2,
                    left: l2,
                    x: l2,
                    y: c3
                }
            }
            function Ce(t2) {
                var e3 = Te(t2),
                    i2 = t2.offsetWidth,
                    n2 = t2.offsetHeight
                return (
                    Math.abs(e3.width - i2) <= 1 && (i2 = e3.width),
                    Math.abs(e3.height - n2) <= 1 && (n2 = e3.height),
                    { x: t2.offsetLeft, y: t2.offsetTop, width: i2, height: n2 }
                )
            }
            function Oe(t2, e3) {
                var i2 = e3.getRootNode && e3.getRootNode()
                if (t2.contains(e3)) return true
                if (i2 && ge(i2)) {
                    var n2 = e3
                    do {
                        if (n2 && t2.isSameNode(n2)) return true
                        n2 = n2.parentNode || n2.host
                    } while (n2)
                }
                return false
            }
            function xe(t2) {
                return fe(t2).getComputedStyle(t2)
            }
            function ke(t2) {
                return ['table', 'td', 'th'].indexOf(ue(t2)) >= 0
            }
            function Le(t2) {
                return ((pe(t2) ? t2.ownerDocument : t2.document) || window.document)
                    .documentElement
            }
            function Se(t2) {
                return 'html' === ue(t2)
                    ? t2
                    : t2.assignedSlot || t2.parentNode || (ge(t2) ? t2.host : null) || Le(t2)
            }
            function De(t2) {
                return me(t2) && 'fixed' !== xe(t2).position ? t2.offsetParent : null
            }
            function $e(t2) {
                for (var e3 = fe(t2), i2 = De(t2); i2 && ke(i2) && 'static' === xe(i2).position; )
                    i2 = De(i2)
                return i2 &&
                    ('html' === ue(i2) || ('body' === ue(i2) && 'static' === xe(i2).position))
                    ? e3
                    : i2 ||
                          (function (t3) {
                              var e4 = /firefox/i.test(Ae())
                              if (/Trident/i.test(Ae()) && me(t3) && 'fixed' === xe(t3).position)
                                  return null
                              var i3 = Se(t3)
                              for (
                                  ge(i3) && (i3 = i3.host);
                                  me(i3) && ['html', 'body'].indexOf(ue(i3)) < 0;

                              ) {
                                  var n2 = xe(i3)
                                  if (
                                      'none' !== n2.transform ||
                                      'none' !== n2.perspective ||
                                      'paint' === n2.contain ||
                                      -1 !== ['transform', 'perspective'].indexOf(n2.willChange) ||
                                      (e4 && 'filter' === n2.willChange) ||
                                      (e4 && n2.filter && 'none' !== n2.filter)
                                  )
                                      return i3
                                  i3 = i3.parentNode
                              }
                              return null
                          })(t2) ||
                          e3
            }
            function Ie(t2) {
                return ['top', 'bottom'].indexOf(t2) >= 0 ? 'x' : 'y'
            }
            function Ne(t2, e3, i2) {
                return ve(t2, ye(e3, i2))
            }
            function Pe(t2) {
                return Object.assign({}, { top: 0, right: 0, bottom: 0, left: 0 }, t2)
            }
            function je(t2, e3) {
                return e3.reduce(function (e4, i2) {
                    return (e4[i2] = t2), e4
                }, {})
            }
            const Me = {
                name: 'arrow',
                enabled: true,
                phase: 'main',
                fn: function (t2) {
                    var e3,
                        i2 = t2.state,
                        n2 = t2.name,
                        s3 = t2.options,
                        o2 = i2.elements.arrow,
                        r3 = i2.modifiersData.popperOffsets,
                        a3 = be(i2.placement),
                        l2 = Ie(a3),
                        c3 = [Vt, qt].indexOf(a3) >= 0 ? 'height' : 'width'
                    if (o2 && r3) {
                        var h2 = (function (t3, e4) {
                                return Pe(
                                    'number' !=
                                        typeof (t3 =
                                            'function' == typeof t3
                                                ? t3(
                                                      Object.assign({}, e4.rects, {
                                                          placement: e4.placement
                                                      })
                                                  )
                                                : t3)
                                        ? t3
                                        : je(t3, Qt)
                                )
                            })(s3.padding, i2),
                            d2 = Ce(o2),
                            u2 = 'y' === l2 ? zt : Vt,
                            f2 = 'y' === l2 ? Rt : qt,
                            p2 =
                                i2.rects.reference[c3] +
                                i2.rects.reference[l2] -
                                r3[l2] -
                                i2.rects.popper[c3],
                            m2 = r3[l2] - i2.rects.reference[l2],
                            g2 = $e(o2),
                            _2 = g2 ? ('y' === l2 ? g2.clientHeight || 0 : g2.clientWidth || 0) : 0,
                            b2 = p2 / 2 - m2 / 2,
                            v2 = h2[u2],
                            y3 = _2 - d2[c3] - h2[f2],
                            w3 = _2 / 2 - d2[c3] / 2 + b2,
                            A2 = Ne(v2, w3, y3),
                            E2 = l2
                        i2.modifiersData[n2] =
                            (((e3 = {})[E2] = A2), (e3.centerOffset = A2 - w3), e3)
                    }
                },
                effect: function (t2) {
                    var e3 = t2.state,
                        i2 = t2.options.element,
                        n2 = void 0 === i2 ? '[data-popper-arrow]' : i2
                    null != n2 &&
                        ('string' != typeof n2 || (n2 = e3.elements.popper.querySelector(n2))) &&
                        Oe(e3.elements.popper, n2) &&
                        (e3.elements.arrow = n2)
                },
                requires: ['popperOffsets'],
                requiresIfExists: ['preventOverflow']
            }
            function Fe(t2) {
                return t2.split('-')[1]
            }
            var He = { top: 'auto', right: 'auto', bottom: 'auto', left: 'auto' }
            function We(t2) {
                var e3,
                    i2 = t2.popper,
                    n2 = t2.popperRect,
                    s3 = t2.placement,
                    o2 = t2.variation,
                    r3 = t2.offsets,
                    a3 = t2.position,
                    l2 = t2.gpuAcceleration,
                    c3 = t2.adaptive,
                    h2 = t2.roundOffsets,
                    d2 = t2.isFixed,
                    u2 = r3.x,
                    f2 = void 0 === u2 ? 0 : u2,
                    p2 = r3.y,
                    m2 = void 0 === p2 ? 0 : p2,
                    g2 = 'function' == typeof h2 ? h2({ x: f2, y: m2 }) : { x: f2, y: m2 }
                ;(f2 = g2.x), (m2 = g2.y)
                var _2 = r3.hasOwnProperty('x'),
                    b2 = r3.hasOwnProperty('y'),
                    v2 = Vt,
                    y3 = zt,
                    w3 = window
                if (c3) {
                    var A2 = $e(i2),
                        E2 = 'clientHeight',
                        T2 = 'clientWidth'
                    A2 === fe(i2) &&
                        'static' !== xe((A2 = Le(i2))).position &&
                        'absolute' === a3 &&
                        ((E2 = 'scrollHeight'), (T2 = 'scrollWidth')),
                        (s3 === zt || ((s3 === Vt || s3 === qt) && o2 === Yt)) &&
                            ((y3 = Rt),
                            (m2 -=
                                (d2 && A2 === w3 && w3.visualViewport
                                    ? w3.visualViewport.height
                                    : A2[E2]) - n2.height),
                            (m2 *= l2 ? 1 : -1)),
                        (s3 !== Vt && ((s3 !== zt && s3 !== Rt) || o2 !== Yt)) ||
                            ((v2 = qt),
                            (f2 -=
                                (d2 && A2 === w3 && w3.visualViewport
                                    ? w3.visualViewport.width
                                    : A2[T2]) - n2.width),
                            (f2 *= l2 ? 1 : -1))
                }
                var C2,
                    O2 = Object.assign({ position: a3 }, c3 && He),
                    x3 =
                        true === h2
                            ? (function (t3, e4) {
                                  var i3 = t3.x,
                                      n3 = t3.y,
                                      s4 = e4.devicePixelRatio || 1
                                  return { x: we(i3 * s4) / s4 || 0, y: we(n3 * s4) / s4 || 0 }
                              })({ x: f2, y: m2 }, fe(i2))
                            : { x: f2, y: m2 }
                return (
                    (f2 = x3.x),
                    (m2 = x3.y),
                    l2
                        ? Object.assign(
                              {},
                              O2,
                              (((C2 = {})[y3] = b2 ? '0' : ''),
                              (C2[v2] = _2 ? '0' : ''),
                              (C2.transform =
                                  (w3.devicePixelRatio || 1) <= 1
                                      ? 'translate(' + f2 + 'px, ' + m2 + 'px)'
                                      : 'translate3d(' + f2 + 'px, ' + m2 + 'px, 0)'),
                              C2)
                          )
                        : Object.assign(
                              {},
                              O2,
                              (((e3 = {})[y3] = b2 ? m2 + 'px' : ''),
                              (e3[v2] = _2 ? f2 + 'px' : ''),
                              (e3.transform = ''),
                              e3)
                          )
                )
            }
            const Be = {
                name: 'computeStyles',
                enabled: true,
                phase: 'beforeWrite',
                fn: function (t2) {
                    var e3 = t2.state,
                        i2 = t2.options,
                        n2 = i2.gpuAcceleration,
                        s3 = void 0 === n2 || n2,
                        o2 = i2.adaptive,
                        r3 = void 0 === o2 || o2,
                        a3 = i2.roundOffsets,
                        l2 = void 0 === a3 || a3,
                        c3 = {
                            placement: be(e3.placement),
                            variation: Fe(e3.placement),
                            popper: e3.elements.popper,
                            popperRect: e3.rects.popper,
                            gpuAcceleration: s3,
                            isFixed: 'fixed' === e3.options.strategy
                        }
                    null != e3.modifiersData.popperOffsets &&
                        (e3.styles.popper = Object.assign(
                            {},
                            e3.styles.popper,
                            We(
                                Object.assign({}, c3, {
                                    offsets: e3.modifiersData.popperOffsets,
                                    position: e3.options.strategy,
                                    adaptive: r3,
                                    roundOffsets: l2
                                })
                            )
                        )),
                        null != e3.modifiersData.arrow &&
                            (e3.styles.arrow = Object.assign(
                                {},
                                e3.styles.arrow,
                                We(
                                    Object.assign({}, c3, {
                                        offsets: e3.modifiersData.arrow,
                                        position: 'absolute',
                                        adaptive: false,
                                        roundOffsets: l2
                                    })
                                )
                            )),
                        (e3.attributes.popper = Object.assign({}, e3.attributes.popper, {
                            'data-popper-placement': e3.placement
                        }))
                },
                data: {}
            }
            var ze = { passive: true }
            const Re = {
                name: 'eventListeners',
                enabled: true,
                phase: 'write',
                fn: function () {},
                effect: function (t2) {
                    var e3 = t2.state,
                        i2 = t2.instance,
                        n2 = t2.options,
                        s3 = n2.scroll,
                        o2 = void 0 === s3 || s3,
                        r3 = n2.resize,
                        a3 = void 0 === r3 || r3,
                        l2 = fe(e3.elements.popper),
                        c3 = [].concat(e3.scrollParents.reference, e3.scrollParents.popper)
                    return (
                        o2 &&
                            c3.forEach(function (t3) {
                                t3.addEventListener('scroll', i2.update, ze)
                            }),
                        a3 && l2.addEventListener('resize', i2.update, ze),
                        function () {
                            o2 &&
                                c3.forEach(function (t3) {
                                    t3.removeEventListener('scroll', i2.update, ze)
                                }),
                                a3 && l2.removeEventListener('resize', i2.update, ze)
                        }
                    )
                },
                data: {}
            }
            var qe = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' }
            function Ve(t2) {
                return t2.replace(/left|right|bottom|top/g, function (t3) {
                    return qe[t3]
                })
            }
            var Ke = { start: 'end', end: 'start' }
            function Qe(t2) {
                return t2.replace(/start|end/g, function (t3) {
                    return Ke[t3]
                })
            }
            function Xe(t2) {
                var e3 = fe(t2)
                return { scrollLeft: e3.pageXOffset, scrollTop: e3.pageYOffset }
            }
            function Ye(t2) {
                return Te(Le(t2)).left + Xe(t2).scrollLeft
            }
            function Ue(t2) {
                var e3 = xe(t2),
                    i2 = e3.overflow,
                    n2 = e3.overflowX,
                    s3 = e3.overflowY
                return /auto|scroll|overlay|hidden/.test(i2 + s3 + n2)
            }
            function Ge(t2) {
                return ['html', 'body', '#document'].indexOf(ue(t2)) >= 0
                    ? t2.ownerDocument.body
                    : me(t2) && Ue(t2)
                      ? t2
                      : Ge(Se(t2))
            }
            function Je(t2, e3) {
                var i2
                void 0 === e3 && (e3 = [])
                var n2 = Ge(t2),
                    s3 = n2 === (null == (i2 = t2.ownerDocument) ? void 0 : i2.body),
                    o2 = fe(n2),
                    r3 = s3 ? [o2].concat(o2.visualViewport || [], Ue(n2) ? n2 : []) : n2,
                    a3 = e3.concat(r3)
                return s3 ? a3 : a3.concat(Je(Se(r3)))
            }
            function Ze(t2) {
                return Object.assign({}, t2, {
                    left: t2.x,
                    top: t2.y,
                    right: t2.x + t2.width,
                    bottom: t2.y + t2.height
                })
            }
            function ti(t2, e3, i2) {
                return e3 === Gt
                    ? Ze(
                          (function (t3, e4) {
                              var i3 = fe(t3),
                                  n2 = Le(t3),
                                  s3 = i3.visualViewport,
                                  o2 = n2.clientWidth,
                                  r3 = n2.clientHeight,
                                  a3 = 0,
                                  l2 = 0
                              if (s3) {
                                  ;(o2 = s3.width), (r3 = s3.height)
                                  var c3 = Ee()
                                  ;(c3 || (!c3 && 'fixed' === e4)) &&
                                      ((a3 = s3.offsetLeft), (l2 = s3.offsetTop))
                              }
                              return { width: o2, height: r3, x: a3 + Ye(t3), y: l2 }
                          })(t2, i2)
                      )
                    : pe(e3)
                      ? (function (t3, e4) {
                            var i3 = Te(t3, false, 'fixed' === e4)
                            return (
                                (i3.top = i3.top + t3.clientTop),
                                (i3.left = i3.left + t3.clientLeft),
                                (i3.bottom = i3.top + t3.clientHeight),
                                (i3.right = i3.left + t3.clientWidth),
                                (i3.width = t3.clientWidth),
                                (i3.height = t3.clientHeight),
                                (i3.x = i3.left),
                                (i3.y = i3.top),
                                i3
                            )
                        })(e3, i2)
                      : Ze(
                            (function (t3) {
                                var e4,
                                    i3 = Le(t3),
                                    n2 = Xe(t3),
                                    s3 = null == (e4 = t3.ownerDocument) ? void 0 : e4.body,
                                    o2 = ve(
                                        i3.scrollWidth,
                                        i3.clientWidth,
                                        s3 ? s3.scrollWidth : 0,
                                        s3 ? s3.clientWidth : 0
                                    ),
                                    r3 = ve(
                                        i3.scrollHeight,
                                        i3.clientHeight,
                                        s3 ? s3.scrollHeight : 0,
                                        s3 ? s3.clientHeight : 0
                                    ),
                                    a3 = -n2.scrollLeft + Ye(t3),
                                    l2 = -n2.scrollTop
                                return (
                                    'rtl' === xe(s3 || i3).direction &&
                                        (a3 += ve(i3.clientWidth, s3 ? s3.clientWidth : 0) - o2),
                                    { width: o2, height: r3, x: a3, y: l2 }
                                )
                            })(Le(t2))
                        )
            }
            function ei(t2) {
                var e3,
                    i2 = t2.reference,
                    n2 = t2.element,
                    s3 = t2.placement,
                    o2 = s3 ? be(s3) : null,
                    r3 = s3 ? Fe(s3) : null,
                    a3 = i2.x + i2.width / 2 - n2.width / 2,
                    l2 = i2.y + i2.height / 2 - n2.height / 2
                switch (o2) {
                    case zt:
                        e3 = { x: a3, y: i2.y - n2.height }
                        break
                    case Rt:
                        e3 = { x: a3, y: i2.y + i2.height }
                        break
                    case qt:
                        e3 = { x: i2.x + i2.width, y: l2 }
                        break
                    case Vt:
                        e3 = { x: i2.x - n2.width, y: l2 }
                        break
                    default:
                        e3 = { x: i2.x, y: i2.y }
                }
                var c3 = o2 ? Ie(o2) : null
                if (null != c3) {
                    var h2 = 'y' === c3 ? 'height' : 'width'
                    switch (r3) {
                        case Xt:
                            e3[c3] = e3[c3] - (i2[h2] / 2 - n2[h2] / 2)
                            break
                        case Yt:
                            e3[c3] = e3[c3] + (i2[h2] / 2 - n2[h2] / 2)
                    }
                }
                return e3
            }
            function ii(t2, e3) {
                void 0 === e3 && (e3 = {})
                var i2 = e3,
                    n2 = i2.placement,
                    s3 = void 0 === n2 ? t2.placement : n2,
                    o2 = i2.strategy,
                    r3 = void 0 === o2 ? t2.strategy : o2,
                    a3 = i2.boundary,
                    l2 = void 0 === a3 ? Ut : a3,
                    c3 = i2.rootBoundary,
                    h2 = void 0 === c3 ? Gt : c3,
                    d2 = i2.elementContext,
                    u2 = void 0 === d2 ? Jt : d2,
                    f2 = i2.altBoundary,
                    p2 = void 0 !== f2 && f2,
                    m2 = i2.padding,
                    g2 = void 0 === m2 ? 0 : m2,
                    _2 = Pe('number' != typeof g2 ? g2 : je(g2, Qt)),
                    b2 = u2 === Jt ? Zt : Jt,
                    v2 = t2.rects.popper,
                    y3 = t2.elements[p2 ? b2 : u2],
                    w3 = (function (t3, e4, i3, n3) {
                        var s4 =
                                'clippingParents' === e4
                                    ? (function (t4) {
                                          var e6 = Je(Se(t4)),
                                              i4 =
                                                  ['absolute', 'fixed'].indexOf(xe(t4).position) >=
                                                      0 && me(t4)
                                                      ? $e(t4)
                                                      : t4
                                          return pe(i4)
                                              ? e6.filter(function (t5) {
                                                    return pe(t5) && Oe(t5, i4) && 'body' !== ue(t5)
                                                })
                                              : []
                                      })(t3)
                                    : [].concat(e4),
                            o3 = [].concat(s4, [i3]),
                            r4 = o3[0],
                            a4 = o3.reduce(
                                function (e6, i4) {
                                    var s5 = ti(t3, i4, n3)
                                    return (
                                        (e6.top = ve(s5.top, e6.top)),
                                        (e6.right = ye(s5.right, e6.right)),
                                        (e6.bottom = ye(s5.bottom, e6.bottom)),
                                        (e6.left = ve(s5.left, e6.left)),
                                        e6
                                    )
                                },
                                ti(t3, r4, n3)
                            )
                        return (
                            (a4.width = a4.right - a4.left),
                            (a4.height = a4.bottom - a4.top),
                            (a4.x = a4.left),
                            (a4.y = a4.top),
                            a4
                        )
                    })(pe(y3) ? y3 : y3.contextElement || Le(t2.elements.popper), l2, h2, r3),
                    A2 = Te(t2.elements.reference),
                    E2 = ei({ reference: A2, element: v2, placement: s3 }),
                    T2 = Ze(Object.assign({}, v2, E2)),
                    C2 = u2 === Jt ? T2 : A2,
                    O2 = {
                        top: w3.top - C2.top + _2.top,
                        bottom: C2.bottom - w3.bottom + _2.bottom,
                        left: w3.left - C2.left + _2.left,
                        right: C2.right - w3.right + _2.right
                    },
                    x3 = t2.modifiersData.offset
                if (u2 === Jt && x3) {
                    var k3 = x3[s3]
                    Object.keys(O2).forEach(function (t3) {
                        var e4 = [qt, Rt].indexOf(t3) >= 0 ? 1 : -1,
                            i3 = [zt, Rt].indexOf(t3) >= 0 ? 'y' : 'x'
                        O2[t3] += k3[i3] * e4
                    })
                }
                return O2
            }
            function ni(t2, e3) {
                void 0 === e3 && (e3 = {})
                var i2 = e3,
                    n2 = i2.placement,
                    s3 = i2.boundary,
                    o2 = i2.rootBoundary,
                    r3 = i2.padding,
                    a3 = i2.flipVariations,
                    l2 = i2.allowedAutoPlacements,
                    c3 = void 0 === l2 ? ee : l2,
                    h2 = Fe(n2),
                    d2 = h2
                        ? a3
                            ? te
                            : te.filter(function (t3) {
                                  return Fe(t3) === h2
                              })
                        : Qt,
                    u2 = d2.filter(function (t3) {
                        return c3.indexOf(t3) >= 0
                    })
                0 === u2.length && (u2 = d2)
                var f2 = u2.reduce(function (e4, i3) {
                    return (
                        (e4[i3] = ii(t2, {
                            placement: i3,
                            boundary: s3,
                            rootBoundary: o2,
                            padding: r3
                        })[be(i3)]),
                        e4
                    )
                }, {})
                return Object.keys(f2).sort(function (t3, e4) {
                    return f2[t3] - f2[e4]
                })
            }
            const si = {
                name: 'flip',
                enabled: true,
                phase: 'main',
                fn: function (t2) {
                    var e3 = t2.state,
                        i2 = t2.options,
                        n2 = t2.name
                    if (!e3.modifiersData[n2]._skip) {
                        for (
                            var s3 = i2.mainAxis,
                                o2 = void 0 === s3 || s3,
                                r3 = i2.altAxis,
                                a3 = void 0 === r3 || r3,
                                l2 = i2.fallbackPlacements,
                                c3 = i2.padding,
                                h2 = i2.boundary,
                                d2 = i2.rootBoundary,
                                u2 = i2.altBoundary,
                                f2 = i2.flipVariations,
                                p2 = void 0 === f2 || f2,
                                m2 = i2.allowedAutoPlacements,
                                g2 = e3.options.placement,
                                _2 = be(g2),
                                b2 =
                                    l2 ||
                                    (_2 !== g2 && p2
                                        ? (function (t3) {
                                              if (be(t3) === Kt) return []
                                              var e4 = Ve(t3)
                                              return [Qe(t3), e4, Qe(e4)]
                                          })(g2)
                                        : [Ve(g2)]),
                                v2 = [g2].concat(b2).reduce(function (t3, i3) {
                                    return t3.concat(
                                        be(i3) === Kt
                                            ? ni(e3, {
                                                  placement: i3,
                                                  boundary: h2,
                                                  rootBoundary: d2,
                                                  padding: c3,
                                                  flipVariations: p2,
                                                  allowedAutoPlacements: m2
                                              })
                                            : i3
                                    )
                                }, []),
                                y3 = e3.rects.reference,
                                w3 = e3.rects.popper,
                                A2 = /* @__PURE__ */ new Map(),
                                E2 = true,
                                T2 = v2[0],
                                C2 = 0;
                            C2 < v2.length;
                            C2++
                        ) {
                            var O2 = v2[C2],
                                x3 = be(O2),
                                k3 = Fe(O2) === Xt,
                                L2 = [zt, Rt].indexOf(x3) >= 0,
                                S2 = L2 ? 'width' : 'height',
                                D2 = ii(e3, {
                                    placement: O2,
                                    boundary: h2,
                                    rootBoundary: d2,
                                    altBoundary: u2,
                                    padding: c3
                                }),
                                $2 = L2 ? (k3 ? qt : Vt) : k3 ? Rt : zt
                            y3[S2] > w3[S2] && ($2 = Ve($2))
                            var I2 = Ve($2),
                                N2 = []
                            if (
                                (o2 && N2.push(D2[x3] <= 0),
                                a3 && N2.push(D2[$2] <= 0, D2[I2] <= 0),
                                N2.every(function (t3) {
                                    return t3
                                }))
                            ) {
                                ;(T2 = O2), (E2 = false)
                                break
                            }
                            A2.set(O2, N2)
                        }
                        if (E2)
                            for (
                                var P3 = function (t3) {
                                        var e4 = v2.find(function (e6) {
                                            var i3 = A2.get(e6)
                                            if (i3)
                                                return i3.slice(0, t3).every(function (t4) {
                                                    return t4
                                                })
                                        })
                                        if (e4) return (T2 = e4), 'break'
                                    },
                                    j2 = p2 ? 3 : 1;
                                j2 > 0 && 'break' !== P3(j2);
                                j2--
                            );
                        e3.placement !== T2 &&
                            ((e3.modifiersData[n2]._skip = true),
                            (e3.placement = T2),
                            (e3.reset = true))
                    }
                },
                requiresIfExists: ['offset'],
                data: { _skip: false }
            }
            function oi(t2, e3, i2) {
                return (
                    void 0 === i2 && (i2 = { x: 0, y: 0 }),
                    {
                        top: t2.top - e3.height - i2.y,
                        right: t2.right - e3.width + i2.x,
                        bottom: t2.bottom - e3.height + i2.y,
                        left: t2.left - e3.width - i2.x
                    }
                )
            }
            function ri(t2) {
                return [zt, qt, Rt, Vt].some(function (e3) {
                    return t2[e3] >= 0
                })
            }
            const ai = {
                    name: 'hide',
                    enabled: true,
                    phase: 'main',
                    requiresIfExists: ['preventOverflow'],
                    fn: function (t2) {
                        var e3 = t2.state,
                            i2 = t2.name,
                            n2 = e3.rects.reference,
                            s3 = e3.rects.popper,
                            o2 = e3.modifiersData.preventOverflow,
                            r3 = ii(e3, { elementContext: 'reference' }),
                            a3 = ii(e3, { altBoundary: true }),
                            l2 = oi(r3, n2),
                            c3 = oi(a3, s3, o2),
                            h2 = ri(l2),
                            d2 = ri(c3)
                        ;(e3.modifiersData[i2] = {
                            referenceClippingOffsets: l2,
                            popperEscapeOffsets: c3,
                            isReferenceHidden: h2,
                            hasPopperEscaped: d2
                        }),
                            (e3.attributes.popper = Object.assign({}, e3.attributes.popper, {
                                'data-popper-reference-hidden': h2,
                                'data-popper-escaped': d2
                            }))
                    }
                },
                li = {
                    name: 'offset',
                    enabled: true,
                    phase: 'main',
                    requires: ['popperOffsets'],
                    fn: function (t2) {
                        var e3 = t2.state,
                            i2 = t2.options,
                            n2 = t2.name,
                            s3 = i2.offset,
                            o2 = void 0 === s3 ? [0, 0] : s3,
                            r3 = ee.reduce(function (t3, i3) {
                                return (
                                    (t3[i3] = (function (t4, e4, i4) {
                                        var n3 = be(t4),
                                            s4 = [Vt, zt].indexOf(n3) >= 0 ? -1 : 1,
                                            o3 =
                                                'function' == typeof i4
                                                    ? i4(Object.assign({}, e4, { placement: t4 }))
                                                    : i4,
                                            r4 = o3[0],
                                            a4 = o3[1]
                                        return (
                                            (r4 = r4 || 0),
                                            (a4 = (a4 || 0) * s4),
                                            [Vt, qt].indexOf(n3) >= 0
                                                ? { x: a4, y: r4 }
                                                : { x: r4, y: a4 }
                                        )
                                    })(i3, e3.rects, o2)),
                                    t3
                                )
                            }, {}),
                            a3 = r3[e3.placement],
                            l2 = a3.x,
                            c3 = a3.y
                        null != e3.modifiersData.popperOffsets &&
                            ((e3.modifiersData.popperOffsets.x += l2),
                            (e3.modifiersData.popperOffsets.y += c3)),
                            (e3.modifiersData[n2] = r3)
                    }
                },
                ci = {
                    name: 'popperOffsets',
                    enabled: true,
                    phase: 'read',
                    fn: function (t2) {
                        var e3 = t2.state,
                            i2 = t2.name
                        e3.modifiersData[i2] = ei({
                            reference: e3.rects.reference,
                            element: e3.rects.popper,
                            placement: e3.placement
                        })
                    },
                    data: {}
                },
                hi = {
                    name: 'preventOverflow',
                    enabled: true,
                    phase: 'main',
                    fn: function (t2) {
                        var e3 = t2.state,
                            i2 = t2.options,
                            n2 = t2.name,
                            s3 = i2.mainAxis,
                            o2 = void 0 === s3 || s3,
                            r3 = i2.altAxis,
                            a3 = void 0 !== r3 && r3,
                            l2 = i2.boundary,
                            c3 = i2.rootBoundary,
                            h2 = i2.altBoundary,
                            d2 = i2.padding,
                            u2 = i2.tether,
                            f2 = void 0 === u2 || u2,
                            p2 = i2.tetherOffset,
                            m2 = void 0 === p2 ? 0 : p2,
                            g2 = ii(e3, {
                                boundary: l2,
                                rootBoundary: c3,
                                padding: d2,
                                altBoundary: h2
                            }),
                            _2 = be(e3.placement),
                            b2 = Fe(e3.placement),
                            v2 = !b2,
                            y3 = Ie(_2),
                            w3 = 'x' === y3 ? 'y' : 'x',
                            A2 = e3.modifiersData.popperOffsets,
                            E2 = e3.rects.reference,
                            T2 = e3.rects.popper,
                            C2 =
                                'function' == typeof m2
                                    ? m2(Object.assign({}, e3.rects, { placement: e3.placement }))
                                    : m2,
                            O2 =
                                'number' == typeof C2
                                    ? { mainAxis: C2, altAxis: C2 }
                                    : Object.assign({ mainAxis: 0, altAxis: 0 }, C2),
                            x3 = e3.modifiersData.offset
                                ? e3.modifiersData.offset[e3.placement]
                                : null,
                            k3 = { x: 0, y: 0 }
                        if (A2) {
                            if (o2) {
                                var L2,
                                    S2 = 'y' === y3 ? zt : Vt,
                                    D2 = 'y' === y3 ? Rt : qt,
                                    $2 = 'y' === y3 ? 'height' : 'width',
                                    I2 = A2[y3],
                                    N2 = I2 + g2[S2],
                                    P3 = I2 - g2[D2],
                                    j2 = f2 ? -T2[$2] / 2 : 0,
                                    M2 = b2 === Xt ? E2[$2] : T2[$2],
                                    F2 = b2 === Xt ? -T2[$2] : -E2[$2],
                                    H2 = e3.elements.arrow,
                                    W2 = f2 && H2 ? Ce(H2) : { width: 0, height: 0 },
                                    B2 = e3.modifiersData['arrow#persistent']
                                        ? e3.modifiersData['arrow#persistent'].padding
                                        : { top: 0, right: 0, bottom: 0, left: 0 },
                                    z2 = B2[S2],
                                    R2 = B2[D2],
                                    q2 = Ne(0, E2[$2], W2[$2]),
                                    V2 = v2
                                        ? E2[$2] / 2 - j2 - q2 - z2 - O2.mainAxis
                                        : M2 - q2 - z2 - O2.mainAxis,
                                    K2 = v2
                                        ? -E2[$2] / 2 + j2 + q2 + R2 + O2.mainAxis
                                        : F2 + q2 + R2 + O2.mainAxis,
                                    Q2 = e3.elements.arrow && $e(e3.elements.arrow),
                                    X2 = Q2
                                        ? 'y' === y3
                                            ? Q2.clientTop || 0
                                            : Q2.clientLeft || 0
                                        : 0,
                                    Y2 = null != (L2 = null == x3 ? void 0 : x3[y3]) ? L2 : 0,
                                    U2 = I2 + K2 - Y2,
                                    G2 = Ne(
                                        f2 ? ye(N2, I2 + V2 - Y2 - X2) : N2,
                                        I2,
                                        f2 ? ve(P3, U2) : P3
                                    )
                                ;(A2[y3] = G2), (k3[y3] = G2 - I2)
                            }
                            if (a3) {
                                var J2,
                                    Z2 = 'x' === y3 ? zt : Vt,
                                    tt2 = 'x' === y3 ? Rt : qt,
                                    et2 = A2[w3],
                                    it2 = 'y' === w3 ? 'height' : 'width',
                                    nt2 = et2 + g2[Z2],
                                    st2 = et2 - g2[tt2],
                                    ot2 = -1 !== [zt, Vt].indexOf(_2),
                                    rt2 = null != (J2 = null == x3 ? void 0 : x3[w3]) ? J2 : 0,
                                    at2 = ot2 ? nt2 : et2 - E2[it2] - T2[it2] - rt2 + O2.altAxis,
                                    lt2 = ot2 ? et2 + E2[it2] + T2[it2] - rt2 - O2.altAxis : st2,
                                    ct2 =
                                        f2 && ot2
                                            ? (function (t3, e4, i3) {
                                                  var n3 = Ne(t3, e4, i3)
                                                  return n3 > i3 ? i3 : n3
                                              })(at2, et2, lt2)
                                            : Ne(f2 ? at2 : nt2, et2, f2 ? lt2 : st2)
                                ;(A2[w3] = ct2), (k3[w3] = ct2 - et2)
                            }
                            e3.modifiersData[n2] = k3
                        }
                    },
                    requiresIfExists: ['offset']
                }
            function di(t2, e3, i2) {
                void 0 === i2 && (i2 = false)
                var n2,
                    s3,
                    o2 = me(e3),
                    r3 =
                        me(e3) &&
                        (function (t3) {
                            var e4 = t3.getBoundingClientRect(),
                                i3 = we(e4.width) / t3.offsetWidth || 1,
                                n3 = we(e4.height) / t3.offsetHeight || 1
                            return 1 !== i3 || 1 !== n3
                        })(e3),
                    a3 = Le(e3),
                    l2 = Te(t2, r3, i2),
                    c3 = { scrollLeft: 0, scrollTop: 0 },
                    h2 = { x: 0, y: 0 }
                return (
                    (o2 || (!o2 && !i2)) &&
                        (('body' !== ue(e3) || Ue(a3)) &&
                            (c3 =
                                (n2 = e3) !== fe(n2) && me(n2)
                                    ? { scrollLeft: (s3 = n2).scrollLeft, scrollTop: s3.scrollTop }
                                    : Xe(n2)),
                        me(e3)
                            ? (((h2 = Te(e3, true)).x += e3.clientLeft), (h2.y += e3.clientTop))
                            : a3 && (h2.x = Ye(a3))),
                    {
                        x: l2.left + c3.scrollLeft - h2.x,
                        y: l2.top + c3.scrollTop - h2.y,
                        width: l2.width,
                        height: l2.height
                    }
                )
            }
            function ui(t2) {
                var e3 = /* @__PURE__ */ new Map(),
                    i2 = /* @__PURE__ */ new Set(),
                    n2 = []
                function s3(t3) {
                    i2.add(t3.name),
                        []
                            .concat(t3.requires || [], t3.requiresIfExists || [])
                            .forEach(function (t4) {
                                if (!i2.has(t4)) {
                                    var n3 = e3.get(t4)
                                    n3 && s3(n3)
                                }
                            }),
                        n2.push(t3)
                }
                return (
                    t2.forEach(function (t3) {
                        e3.set(t3.name, t3)
                    }),
                    t2.forEach(function (t3) {
                        i2.has(t3.name) || s3(t3)
                    }),
                    n2
                )
            }
            var fi = { placement: 'bottom', modifiers: [], strategy: 'absolute' }
            function pi2() {
                for (var t2 = arguments.length, e3 = new Array(t2), i2 = 0; i2 < t2; i2++)
                    e3[i2] = arguments[i2]
                return !e3.some(function (t3) {
                    return !(t3 && 'function' == typeof t3.getBoundingClientRect)
                })
            }
            function mi(t2) {
                void 0 === t2 && (t2 = {})
                var e3 = t2,
                    i2 = e3.defaultModifiers,
                    n2 = void 0 === i2 ? [] : i2,
                    s3 = e3.defaultOptions,
                    o2 = void 0 === s3 ? fi : s3
                return function (t3, e4, i3) {
                    void 0 === i3 && (i3 = o2)
                    var s4,
                        r3,
                        a3 = {
                            placement: 'bottom',
                            orderedModifiers: [],
                            options: Object.assign({}, fi, o2),
                            modifiersData: {},
                            elements: { reference: t3, popper: e4 },
                            attributes: {},
                            styles: {}
                        },
                        l2 = [],
                        c3 = false,
                        h2 = {
                            state: a3,
                            setOptions: function (i4) {
                                var s5 = 'function' == typeof i4 ? i4(a3.options) : i4
                                d2(),
                                    (a3.options = Object.assign({}, o2, a3.options, s5)),
                                    (a3.scrollParents = {
                                        reference: pe(t3)
                                            ? Je(t3)
                                            : t3.contextElement
                                              ? Je(t3.contextElement)
                                              : [],
                                        popper: Je(e4)
                                    })
                                var r4,
                                    c4,
                                    u2 = (function (t4) {
                                        var e6 = ui(t4)
                                        return de.reduce(function (t5, i5) {
                                            return t5.concat(
                                                e6.filter(function (t6) {
                                                    return t6.phase === i5
                                                })
                                            )
                                        }, [])
                                    })(
                                        ((r4 = [].concat(n2, a3.options.modifiers)),
                                        (c4 = r4.reduce(function (t4, e6) {
                                            var i5 = t4[e6.name]
                                            return (
                                                (t4[e6.name] = i5
                                                    ? Object.assign({}, i5, e6, {
                                                          options: Object.assign(
                                                              {},
                                                              i5.options,
                                                              e6.options
                                                          ),
                                                          data: Object.assign({}, i5.data, e6.data)
                                                      })
                                                    : e6),
                                                t4
                                            )
                                        }, {})),
                                        Object.keys(c4).map(function (t4) {
                                            return c4[t4]
                                        }))
                                    )
                                return (
                                    (a3.orderedModifiers = u2.filter(function (t4) {
                                        return t4.enabled
                                    })),
                                    a3.orderedModifiers.forEach(function (t4) {
                                        var e6 = t4.name,
                                            i5 = t4.options,
                                            n3 = void 0 === i5 ? {} : i5,
                                            s6 = t4.effect
                                        if ('function' == typeof s6) {
                                            var o3 = s6({
                                                state: a3,
                                                name: e6,
                                                instance: h2,
                                                options: n3
                                            })
                                            l2.push(o3 || function () {})
                                        }
                                    }),
                                    h2.update()
                                )
                            },
                            forceUpdate: function () {
                                if (!c3) {
                                    var t4 = a3.elements,
                                        e6 = t4.reference,
                                        i4 = t4.popper
                                    if (pi2(e6, i4)) {
                                        ;(a3.rects = {
                                            reference: di(
                                                e6,
                                                $e(i4),
                                                'fixed' === a3.options.strategy
                                            ),
                                            popper: Ce(i4)
                                        }),
                                            (a3.reset = false),
                                            (a3.placement = a3.options.placement),
                                            a3.orderedModifiers.forEach(function (t5) {
                                                return (a3.modifiersData[t5.name] = Object.assign(
                                                    {},
                                                    t5.data
                                                ))
                                            })
                                        for (var n3 = 0; n3 < a3.orderedModifiers.length; n3++)
                                            if (true !== a3.reset) {
                                                var s5 = a3.orderedModifiers[n3],
                                                    o3 = s5.fn,
                                                    r4 = s5.options,
                                                    l3 = void 0 === r4 ? {} : r4,
                                                    d3 = s5.name
                                                'function' == typeof o3 &&
                                                    (a3 =
                                                        o3({
                                                            state: a3,
                                                            options: l3,
                                                            name: d3,
                                                            instance: h2
                                                        }) || a3)
                                            } else (a3.reset = false), (n3 = -1)
                                    }
                                }
                            },
                            update:
                                ((s4 = function () {
                                    return new Promise(function (t4) {
                                        h2.forceUpdate(), t4(a3)
                                    })
                                }),
                                function () {
                                    return (
                                        r3 ||
                                            (r3 = new Promise(function (t4) {
                                                Promise.resolve().then(function () {
                                                    ;(r3 = void 0), t4(s4())
                                                })
                                            })),
                                        r3
                                    )
                                }),
                            destroy: function () {
                                d2(), (c3 = true)
                            }
                        }
                    if (!pi2(t3, e4)) return h2
                    function d2() {
                        l2.forEach(function (t4) {
                            return t4()
                        }),
                            (l2 = [])
                    }
                    return (
                        h2.setOptions(i3).then(function (t4) {
                            !c3 && i3.onFirstUpdate && i3.onFirstUpdate(t4)
                        }),
                        h2
                    )
                }
            }
            var gi = mi(),
                _i = mi({ defaultModifiers: [Re, ci, Be, _e] }),
                bi = mi({ defaultModifiers: [Re, ci, Be, _e, li, si, hi, Me, ai] })
            const vi = Object.freeze(
                    Object.defineProperty(
                        {
                            __proto__: null,
                            afterMain: ae,
                            afterRead: se,
                            afterWrite: he,
                            applyStyles: _e,
                            arrow: Me,
                            auto: Kt,
                            basePlacements: Qt,
                            beforeMain: oe,
                            beforeRead: ie,
                            beforeWrite: le,
                            bottom: Rt,
                            clippingParents: Ut,
                            computeStyles: Be,
                            createPopper: bi,
                            createPopperBase: gi,
                            createPopperLite: _i,
                            detectOverflow: ii,
                            end: Yt,
                            eventListeners: Re,
                            flip: si,
                            hide: ai,
                            left: Vt,
                            main: re2,
                            modifierPhases: de,
                            offset: li,
                            placements: ee,
                            popper: Jt,
                            popperGenerator: mi,
                            popperOffsets: ci,
                            preventOverflow: hi,
                            read: ne,
                            reference: Zt,
                            right: qt,
                            start: Xt,
                            top: zt,
                            variationPlacements: te,
                            viewport: Gt,
                            write: ce
                        },
                        Symbol.toStringTag,
                        { value: 'Module' }
                    )
                ),
                yi = 'dropdown',
                wi = '.bs.dropdown',
                Ai = '.data-api',
                Ei = 'ArrowUp',
                Ti = 'ArrowDown',
                Ci = `hide${wi}`,
                Oi = `hidden${wi}`,
                xi = `show${wi}`,
                ki = `shown${wi}`,
                Li = `click${wi}${Ai}`,
                Si = `keydown${wi}${Ai}`,
                Di = `keyup${wi}${Ai}`,
                $i = 'show',
                Ii = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',
                Ni = `${Ii}.${$i}`,
                Pi = '.dropdown-menu',
                ji = p() ? 'top-end' : 'top-start',
                Mi = p() ? 'top-start' : 'top-end',
                Fi = p() ? 'bottom-end' : 'bottom-start',
                Hi = p() ? 'bottom-start' : 'bottom-end',
                Wi = p() ? 'left-start' : 'right-start',
                Bi = p() ? 'right-start' : 'left-start',
                zi = {
                    autoClose: true,
                    boundary: 'clippingParents',
                    display: 'dynamic',
                    offset: [0, 2],
                    popperConfig: null,
                    reference: 'toggle'
                },
                Ri = {
                    autoClose: '(boolean|string)',
                    boundary: '(string|element)',
                    display: 'string',
                    offset: '(array|string|function)',
                    popperConfig: '(null|object|function)',
                    reference: '(string|element|object)'
                }
            class qi extends W {
                constructor(t2, e3) {
                    super(t2, e3),
                        (this._popper = null),
                        (this._parent = this._element.parentNode),
                        (this._menu =
                            z.next(this._element, Pi)[0] ||
                            z.prev(this._element, Pi)[0] ||
                            z.findOne(Pi, this._parent)),
                        (this._inNavbar = this._detectNavbar())
                }
                static get Default() {
                    return zi
                }
                static get DefaultType() {
                    return Ri
                }
                static get NAME() {
                    return yi
                }
                toggle() {
                    return this._isShown() ? this.hide() : this.show()
                }
                show() {
                    if (l(this._element) || this._isShown()) return
                    const t2 = { relatedTarget: this._element }
                    if (!N.trigger(this._element, xi, t2).defaultPrevented) {
                        if (
                            (this._createPopper(),
                            'ontouchstart' in document.documentElement &&
                                !this._parent.closest('.navbar-nav'))
                        )
                            for (const t3 of [].concat(...document.body.children))
                                N.on(t3, 'mouseover', h)
                        this._element.focus(),
                            this._element.setAttribute('aria-expanded', true),
                            this._menu.classList.add($i),
                            this._element.classList.add($i),
                            N.trigger(this._element, ki, t2)
                    }
                }
                hide() {
                    if (l(this._element) || !this._isShown()) return
                    const t2 = { relatedTarget: this._element }
                    this._completeHide(t2)
                }
                dispose() {
                    this._popper && this._popper.destroy(), super.dispose()
                }
                update() {
                    ;(this._inNavbar = this._detectNavbar()), this._popper && this._popper.update()
                }
                _completeHide(t2) {
                    if (!N.trigger(this._element, Ci, t2).defaultPrevented) {
                        if ('ontouchstart' in document.documentElement)
                            for (const t3 of [].concat(...document.body.children))
                                N.off(t3, 'mouseover', h)
                        this._popper && this._popper.destroy(),
                            this._menu.classList.remove($i),
                            this._element.classList.remove($i),
                            this._element.setAttribute('aria-expanded', 'false'),
                            F.removeDataAttribute(this._menu, 'popper'),
                            N.trigger(this._element, Oi, t2)
                    }
                }
                _getConfig(t2) {
                    if (
                        'object' == typeof (t2 = super._getConfig(t2)).reference &&
                        !o(t2.reference) &&
                        'function' != typeof t2.reference.getBoundingClientRect
                    )
                        throw new TypeError(
                            `${yi.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`
                        )
                    return t2
                }
                _createPopper() {
                    if (void 0 === vi)
                        throw new TypeError(
                            "Bootstrap's dropdowns require Popper (https://popper.js.org)"
                        )
                    let t2 = this._element
                    'parent' === this._config.reference
                        ? (t2 = this._parent)
                        : o(this._config.reference)
                          ? (t2 = r2(this._config.reference))
                          : 'object' == typeof this._config.reference &&
                            (t2 = this._config.reference)
                    const e3 = this._getPopperConfig()
                    this._popper = bi(t2, this._menu, e3)
                }
                _isShown() {
                    return this._menu.classList.contains($i)
                }
                _getPlacement() {
                    const t2 = this._parent
                    if (t2.classList.contains('dropend')) return Wi
                    if (t2.classList.contains('dropstart')) return Bi
                    if (t2.classList.contains('dropup-center')) return 'top'
                    if (t2.classList.contains('dropdown-center')) return 'bottom'
                    const e3 =
                        'end' ===
                        getComputedStyle(this._menu).getPropertyValue('--bs-position').trim()
                    return t2.classList.contains('dropup') ? (e3 ? Mi : ji) : e3 ? Hi : Fi
                }
                _detectNavbar() {
                    return null !== this._element.closest('.navbar')
                }
                _getOffset() {
                    const { offset: t2 } = this._config
                    return 'string' == typeof t2
                        ? t2.split(',').map((t3) => Number.parseInt(t3, 10))
                        : 'function' == typeof t2
                          ? (e3) => t2(e3, this._element)
                          : t2
                }
                _getPopperConfig() {
                    const t2 = {
                        placement: this._getPlacement(),
                        modifiers: [
                            {
                                name: 'preventOverflow',
                                options: { boundary: this._config.boundary }
                            },
                            { name: 'offset', options: { offset: this._getOffset() } }
                        ]
                    }
                    return (
                        (this._inNavbar || 'static' === this._config.display) &&
                            (F.setDataAttribute(this._menu, 'popper', 'static'),
                            (t2.modifiers = [{ name: 'applyStyles', enabled: false }])),
                        { ...t2, ...g(this._config.popperConfig, [t2]) }
                    )
                }
                _selectMenuItem({ key: t2, target: e3 }) {
                    const i2 = z
                        .find(
                            '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)',
                            this._menu
                        )
                        .filter((t3) => a2(t3))
                    i2.length && b(i2, e3, t2 === Ti, !i2.includes(e3)).focus()
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = qi.getOrCreateInstance(this, t2)
                        if ('string' == typeof t2) {
                            if (void 0 === e3[t2]) throw new TypeError(`No method named "${t2}"`)
                            e3[t2]()
                        }
                    })
                }
                static clearMenus(t2) {
                    if (2 === t2.button || ('keyup' === t2.type && 'Tab' !== t2.key)) return
                    const e3 = z.find(Ni)
                    for (const i2 of e3) {
                        const e4 = qi.getInstance(i2)
                        if (!e4 || false === e4._config.autoClose) continue
                        const n2 = t2.composedPath(),
                            s3 = n2.includes(e4._menu)
                        if (
                            n2.includes(e4._element) ||
                            ('inside' === e4._config.autoClose && !s3) ||
                            ('outside' === e4._config.autoClose && s3)
                        )
                            continue
                        if (
                            e4._menu.contains(t2.target) &&
                            (('keyup' === t2.type && 'Tab' === t2.key) ||
                                /input|select|option|textarea|form/i.test(t2.target.tagName))
                        )
                            continue
                        const o2 = { relatedTarget: e4._element }
                        'click' === t2.type && (o2.clickEvent = t2), e4._completeHide(o2)
                    }
                }
                static dataApiKeydownHandler(t2) {
                    const e3 = /input|textarea/i.test(t2.target.tagName),
                        i2 = 'Escape' === t2.key,
                        n2 = [Ei, Ti].includes(t2.key)
                    if (!n2 && !i2) return
                    if (e3 && !i2) return
                    t2.preventDefault()
                    const s3 = this.matches(Ii)
                            ? this
                            : z.prev(this, Ii)[0] ||
                              z.next(this, Ii)[0] ||
                              z.findOne(Ii, t2.delegateTarget.parentNode),
                        o2 = qi.getOrCreateInstance(s3)
                    if (n2) return t2.stopPropagation(), o2.show(), void o2._selectMenuItem(t2)
                    o2._isShown() && (t2.stopPropagation(), o2.hide(), s3.focus())
                }
            }
            N.on(document, Si, Ii, qi.dataApiKeydownHandler),
                N.on(document, Si, Pi, qi.dataApiKeydownHandler),
                N.on(document, Li, qi.clearMenus),
                N.on(document, Di, qi.clearMenus),
                N.on(document, Li, Ii, function (t2) {
                    t2.preventDefault(), qi.getOrCreateInstance(this).toggle()
                }),
                m(qi)
            const Vi = 'backdrop',
                Ki = 'show',
                Qi = `mousedown.bs.${Vi}`,
                Xi = {
                    className: 'modal-backdrop',
                    clickCallback: null,
                    isAnimated: false,
                    isVisible: true,
                    rootElement: 'body'
                },
                Yi = {
                    className: 'string',
                    clickCallback: '(function|null)',
                    isAnimated: 'boolean',
                    isVisible: 'boolean',
                    rootElement: '(element|string)'
                }
            class Ui extends H {
                constructor(t2) {
                    super(),
                        (this._config = this._getConfig(t2)),
                        (this._isAppended = false),
                        (this._element = null)
                }
                static get Default() {
                    return Xi
                }
                static get DefaultType() {
                    return Yi
                }
                static get NAME() {
                    return Vi
                }
                show(t2) {
                    if (!this._config.isVisible) return void g(t2)
                    this._append()
                    const e3 = this._getElement()
                    this._config.isAnimated && d(e3),
                        e3.classList.add(Ki),
                        this._emulateAnimation(() => {
                            g(t2)
                        })
                }
                hide(t2) {
                    this._config.isVisible
                        ? (this._getElement().classList.remove(Ki),
                          this._emulateAnimation(() => {
                              this.dispose(), g(t2)
                          }))
                        : g(t2)
                }
                dispose() {
                    this._isAppended &&
                        (N.off(this._element, Qi),
                        this._element.remove(),
                        (this._isAppended = false))
                }
                _getElement() {
                    if (!this._element) {
                        const t2 = document.createElement('div')
                        ;(t2.className = this._config.className),
                            this._config.isAnimated && t2.classList.add('fade'),
                            (this._element = t2)
                    }
                    return this._element
                }
                _configAfterMerge(t2) {
                    return (t2.rootElement = r2(t2.rootElement)), t2
                }
                _append() {
                    if (this._isAppended) return
                    const t2 = this._getElement()
                    this._config.rootElement.append(t2),
                        N.on(t2, Qi, () => {
                            g(this._config.clickCallback)
                        }),
                        (this._isAppended = true)
                }
                _emulateAnimation(t2) {
                    _(t2, this._getElement(), this._config.isAnimated)
                }
            }
            const Gi = '.bs.focustrap',
                Ji = `focusin${Gi}`,
                Zi = `keydown.tab${Gi}`,
                tn = 'backward',
                en = { autofocus: true, trapElement: null },
                nn = { autofocus: 'boolean', trapElement: 'element' }
            class sn extends H {
                constructor(t2) {
                    super(),
                        (this._config = this._getConfig(t2)),
                        (this._isActive = false),
                        (this._lastTabNavDirection = null)
                }
                static get Default() {
                    return en
                }
                static get DefaultType() {
                    return nn
                }
                static get NAME() {
                    return 'focustrap'
                }
                activate() {
                    this._isActive ||
                        (this._config.autofocus && this._config.trapElement.focus(),
                        N.off(document, Gi),
                        N.on(document, Ji, (t2) => this._handleFocusin(t2)),
                        N.on(document, Zi, (t2) => this._handleKeydown(t2)),
                        (this._isActive = true))
                }
                deactivate() {
                    this._isActive && ((this._isActive = false), N.off(document, Gi))
                }
                _handleFocusin(t2) {
                    const { trapElement: e3 } = this._config
                    if (t2.target === document || t2.target === e3 || e3.contains(t2.target)) return
                    const i2 = z.focusableChildren(e3)
                    0 === i2.length
                        ? e3.focus()
                        : this._lastTabNavDirection === tn
                          ? i2[i2.length - 1].focus()
                          : i2[0].focus()
                }
                _handleKeydown(t2) {
                    'Tab' === t2.key && (this._lastTabNavDirection = t2.shiftKey ? tn : 'forward')
                }
            }
            const on = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
                rn = '.sticky-top',
                an = 'padding-right',
                ln2 = 'margin-right'
            class cn {
                constructor() {
                    this._element = document.body
                }
                getWidth() {
                    const t2 = document.documentElement.clientWidth
                    return Math.abs(window.innerWidth - t2)
                }
                hide() {
                    const t2 = this.getWidth()
                    this._disableOverFlow(),
                        this._setElementAttributes(this._element, an, (e3) => e3 + t2),
                        this._setElementAttributes(on, an, (e3) => e3 + t2),
                        this._setElementAttributes(rn, ln2, (e3) => e3 - t2)
                }
                reset() {
                    this._resetElementAttributes(this._element, 'overflow'),
                        this._resetElementAttributes(this._element, an),
                        this._resetElementAttributes(on, an),
                        this._resetElementAttributes(rn, ln2)
                }
                isOverflowing() {
                    return this.getWidth() > 0
                }
                _disableOverFlow() {
                    this._saveInitialAttribute(this._element, 'overflow'),
                        (this._element.style.overflow = 'hidden')
                }
                _setElementAttributes(t2, e3, i2) {
                    const n2 = this.getWidth()
                    this._applyManipulationCallback(t2, (t3) => {
                        if (t3 !== this._element && window.innerWidth > t3.clientWidth + n2) return
                        this._saveInitialAttribute(t3, e3)
                        const s3 = window.getComputedStyle(t3).getPropertyValue(e3)
                        t3.style.setProperty(e3, `${i2(Number.parseFloat(s3))}px`)
                    })
                }
                _saveInitialAttribute(t2, e3) {
                    const i2 = t2.style.getPropertyValue(e3)
                    i2 && F.setDataAttribute(t2, e3, i2)
                }
                _resetElementAttributes(t2, e3) {
                    this._applyManipulationCallback(t2, (t3) => {
                        const i2 = F.getDataAttribute(t3, e3)
                        null !== i2
                            ? (F.removeDataAttribute(t3, e3), t3.style.setProperty(e3, i2))
                            : t3.style.removeProperty(e3)
                    })
                }
                _applyManipulationCallback(t2, e3) {
                    if (o(t2)) e3(t2)
                    else for (const i2 of z.find(t2, this._element)) e3(i2)
                }
            }
            const hn = '.bs.modal',
                dn = `hide${hn}`,
                un = `hidePrevented${hn}`,
                fn = `hidden${hn}`,
                pn = `show${hn}`,
                mn = `shown${hn}`,
                gn = `resize${hn}`,
                _n = `click.dismiss${hn}`,
                bn = `mousedown.dismiss${hn}`,
                vn = `keydown.dismiss${hn}`,
                yn = `click${hn}.data-api`,
                wn = 'modal-open',
                An = 'show',
                En = 'modal-static',
                Tn = { backdrop: true, focus: true, keyboard: true },
                Cn = { backdrop: '(boolean|string)', focus: 'boolean', keyboard: 'boolean' }
            class On extends W {
                constructor(t2, e3) {
                    super(t2, e3),
                        (this._dialog = z.findOne('.modal-dialog', this._element)),
                        (this._backdrop = this._initializeBackDrop()),
                        (this._focustrap = this._initializeFocusTrap()),
                        (this._isShown = false),
                        (this._isTransitioning = false),
                        (this._scrollBar = new cn()),
                        this._addEventListeners()
                }
                static get Default() {
                    return Tn
                }
                static get DefaultType() {
                    return Cn
                }
                static get NAME() {
                    return 'modal'
                }
                toggle(t2) {
                    return this._isShown ? this.hide() : this.show(t2)
                }
                show(t2) {
                    this._isShown ||
                        this._isTransitioning ||
                        N.trigger(this._element, pn, { relatedTarget: t2 }).defaultPrevented ||
                        ((this._isShown = true),
                        (this._isTransitioning = true),
                        this._scrollBar.hide(),
                        document.body.classList.add(wn),
                        this._adjustDialog(),
                        this._backdrop.show(() => this._showElement(t2)))
                }
                hide() {
                    this._isShown &&
                        !this._isTransitioning &&
                        (N.trigger(this._element, dn).defaultPrevented ||
                            ((this._isShown = false),
                            (this._isTransitioning = true),
                            this._focustrap.deactivate(),
                            this._element.classList.remove(An),
                            this._queueCallback(
                                () => this._hideModal(),
                                this._element,
                                this._isAnimated()
                            )))
                }
                dispose() {
                    N.off(window, hn),
                        N.off(this._dialog, hn),
                        this._backdrop.dispose(),
                        this._focustrap.deactivate(),
                        super.dispose()
                }
                handleUpdate() {
                    this._adjustDialog()
                }
                _initializeBackDrop() {
                    return new Ui({
                        isVisible: Boolean(this._config.backdrop),
                        isAnimated: this._isAnimated()
                    })
                }
                _initializeFocusTrap() {
                    return new sn({ trapElement: this._element })
                }
                _showElement(t2) {
                    document.body.contains(this._element) || document.body.append(this._element),
                        (this._element.style.display = 'block'),
                        this._element.removeAttribute('aria-hidden'),
                        this._element.setAttribute('aria-modal', true),
                        this._element.setAttribute('role', 'dialog'),
                        (this._element.scrollTop = 0)
                    const e3 = z.findOne('.modal-body', this._dialog)
                    e3 && (e3.scrollTop = 0),
                        d(this._element),
                        this._element.classList.add(An),
                        this._queueCallback(
                            () => {
                                this._config.focus && this._focustrap.activate(),
                                    (this._isTransitioning = false),
                                    N.trigger(this._element, mn, { relatedTarget: t2 })
                            },
                            this._dialog,
                            this._isAnimated()
                        )
                }
                _addEventListeners() {
                    N.on(this._element, vn, (t2) => {
                        'Escape' === t2.key &&
                            (this._config.keyboard
                                ? this.hide()
                                : this._triggerBackdropTransition())
                    }),
                        N.on(window, gn, () => {
                            this._isShown && !this._isTransitioning && this._adjustDialog()
                        }),
                        N.on(this._element, bn, (t2) => {
                            N.one(this._element, _n, (e3) => {
                                this._element === t2.target &&
                                    this._element === e3.target &&
                                    ('static' !== this._config.backdrop
                                        ? this._config.backdrop && this.hide()
                                        : this._triggerBackdropTransition())
                            })
                        })
                }
                _hideModal() {
                    ;(this._element.style.display = 'none'),
                        this._element.setAttribute('aria-hidden', true),
                        this._element.removeAttribute('aria-modal'),
                        this._element.removeAttribute('role'),
                        (this._isTransitioning = false),
                        this._backdrop.hide(() => {
                            document.body.classList.remove(wn),
                                this._resetAdjustments(),
                                this._scrollBar.reset(),
                                N.trigger(this._element, fn)
                        })
                }
                _isAnimated() {
                    return this._element.classList.contains('fade')
                }
                _triggerBackdropTransition() {
                    if (N.trigger(this._element, un).defaultPrevented) return
                    const t2 = this._element.scrollHeight > document.documentElement.clientHeight,
                        e3 = this._element.style.overflowY
                    'hidden' === e3 ||
                        this._element.classList.contains(En) ||
                        (t2 || (this._element.style.overflowY = 'hidden'),
                        this._element.classList.add(En),
                        this._queueCallback(() => {
                            this._element.classList.remove(En),
                                this._queueCallback(() => {
                                    this._element.style.overflowY = e3
                                }, this._dialog)
                        }, this._dialog),
                        this._element.focus())
                }
                _adjustDialog() {
                    const t2 = this._element.scrollHeight > document.documentElement.clientHeight,
                        e3 = this._scrollBar.getWidth(),
                        i2 = e3 > 0
                    if (i2 && !t2) {
                        const t3 = p() ? 'paddingLeft' : 'paddingRight'
                        this._element.style[t3] = `${e3}px`
                    }
                    if (!i2 && t2) {
                        const t3 = p() ? 'paddingRight' : 'paddingLeft'
                        this._element.style[t3] = `${e3}px`
                    }
                }
                _resetAdjustments() {
                    ;(this._element.style.paddingLeft = ''), (this._element.style.paddingRight = '')
                }
                static jQueryInterface(t2, e3) {
                    return this.each(function () {
                        const i2 = On.getOrCreateInstance(this, t2)
                        if ('string' == typeof t2) {
                            if (void 0 === i2[t2]) throw new TypeError(`No method named "${t2}"`)
                            i2[t2](e3)
                        }
                    })
                }
            }
            N.on(document, yn, '[data-bs-toggle="modal"]', function (t2) {
                const e3 = z.getElementFromSelector(this)
                ;['A', 'AREA'].includes(this.tagName) && t2.preventDefault(),
                    N.one(e3, pn, (t3) => {
                        t3.defaultPrevented ||
                            N.one(e3, fn, () => {
                                a2(this) && this.focus()
                            })
                    })
                const i2 = z.findOne('.modal.show')
                i2 && On.getInstance(i2).hide(), On.getOrCreateInstance(e3).toggle(this)
            }),
                R(On),
                m(On)
            const xn = '.bs.offcanvas',
                kn = '.data-api',
                Ln = `load${xn}${kn}`,
                Sn = 'show',
                Dn = 'showing',
                $n = 'hiding',
                In = '.offcanvas.show',
                Nn = `show${xn}`,
                Pn = `shown${xn}`,
                jn = `hide${xn}`,
                Mn = `hidePrevented${xn}`,
                Fn = `hidden${xn}`,
                Hn = `resize${xn}`,
                Wn = `click${xn}${kn}`,
                Bn = `keydown.dismiss${xn}`,
                zn = { backdrop: true, keyboard: true, scroll: false },
                Rn = { backdrop: '(boolean|string)', keyboard: 'boolean', scroll: 'boolean' }
            class qn extends W {
                constructor(t2, e3) {
                    super(t2, e3),
                        (this._isShown = false),
                        (this._backdrop = this._initializeBackDrop()),
                        (this._focustrap = this._initializeFocusTrap()),
                        this._addEventListeners()
                }
                static get Default() {
                    return zn
                }
                static get DefaultType() {
                    return Rn
                }
                static get NAME() {
                    return 'offcanvas'
                }
                toggle(t2) {
                    return this._isShown ? this.hide() : this.show(t2)
                }
                show(t2) {
                    this._isShown ||
                        N.trigger(this._element, Nn, { relatedTarget: t2 }).defaultPrevented ||
                        ((this._isShown = true),
                        this._backdrop.show(),
                        this._config.scroll || new cn().hide(),
                        this._element.setAttribute('aria-modal', true),
                        this._element.setAttribute('role', 'dialog'),
                        this._element.classList.add(Dn),
                        this._queueCallback(
                            () => {
                                ;(this._config.scroll && !this._config.backdrop) ||
                                    this._focustrap.activate(),
                                    this._element.classList.add(Sn),
                                    this._element.classList.remove(Dn),
                                    N.trigger(this._element, Pn, { relatedTarget: t2 })
                            },
                            this._element,
                            true
                        ))
                }
                hide() {
                    this._isShown &&
                        (N.trigger(this._element, jn).defaultPrevented ||
                            (this._focustrap.deactivate(),
                            this._element.blur(),
                            (this._isShown = false),
                            this._element.classList.add($n),
                            this._backdrop.hide(),
                            this._queueCallback(
                                () => {
                                    this._element.classList.remove(Sn, $n),
                                        this._element.removeAttribute('aria-modal'),
                                        this._element.removeAttribute('role'),
                                        this._config.scroll || new cn().reset(),
                                        N.trigger(this._element, Fn)
                                },
                                this._element,
                                true
                            )))
                }
                dispose() {
                    this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose()
                }
                _initializeBackDrop() {
                    const t2 = Boolean(this._config.backdrop)
                    return new Ui({
                        className: 'offcanvas-backdrop',
                        isVisible: t2,
                        isAnimated: true,
                        rootElement: this._element.parentNode,
                        clickCallback: t2
                            ? () => {
                                  'static' !== this._config.backdrop
                                      ? this.hide()
                                      : N.trigger(this._element, Mn)
                              }
                            : null
                    })
                }
                _initializeFocusTrap() {
                    return new sn({ trapElement: this._element })
                }
                _addEventListeners() {
                    N.on(this._element, Bn, (t2) => {
                        'Escape' === t2.key &&
                            (this._config.keyboard ? this.hide() : N.trigger(this._element, Mn))
                    })
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = qn.getOrCreateInstance(this, t2)
                        if ('string' == typeof t2) {
                            if (void 0 === e3[t2] || t2.startsWith('_') || 'constructor' === t2)
                                throw new TypeError(`No method named "${t2}"`)
                            e3[t2](this)
                        }
                    })
                }
            }
            N.on(document, Wn, '[data-bs-toggle="offcanvas"]', function (t2) {
                const e3 = z.getElementFromSelector(this)
                if ((['A', 'AREA'].includes(this.tagName) && t2.preventDefault(), l(this))) return
                N.one(e3, Fn, () => {
                    a2(this) && this.focus()
                })
                const i2 = z.findOne(In)
                i2 && i2 !== e3 && qn.getInstance(i2).hide(),
                    qn.getOrCreateInstance(e3).toggle(this)
            }),
                N.on(window, Ln, () => {
                    for (const t2 of z.find(In)) qn.getOrCreateInstance(t2).show()
                }),
                N.on(window, Hn, () => {
                    for (const t2 of z.find('[aria-modal][class*=show][class*=offcanvas-]'))
                        'fixed' !== getComputedStyle(t2).position &&
                            qn.getOrCreateInstance(t2).hide()
                }),
                R(qn),
                m(qn)
            const Vn = {
                    '*': ['class', 'dir', 'id', 'lang', 'role', /^aria-[\w-]*$/i],
                    a: ['target', 'href', 'title', 'rel'],
                    area: [],
                    b: [],
                    br: [],
                    col: [],
                    code: [],
                    dd: [],
                    div: [],
                    dl: [],
                    dt: [],
                    em: [],
                    hr: [],
                    h1: [],
                    h2: [],
                    h3: [],
                    h4: [],
                    h5: [],
                    h6: [],
                    i: [],
                    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
                    li: [],
                    ol: [],
                    p: [],
                    pre: [],
                    s: [],
                    small: [],
                    span: [],
                    sub: [],
                    sup: [],
                    strong: [],
                    u: [],
                    ul: []
                },
                Kn = /* @__PURE__ */ new Set([
                    'background',
                    'cite',
                    'href',
                    'itemtype',
                    'longdesc',
                    'poster',
                    'src',
                    'xlink:href'
                ]),
                Qn = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,
                Xn = (t2, e3) => {
                    const i2 = t2.nodeName.toLowerCase()
                    return e3.includes(i2)
                        ? !Kn.has(i2) || Boolean(Qn.test(t2.nodeValue))
                        : e3.filter((t3) => t3 instanceof RegExp).some((t3) => t3.test(i2))
                },
                Yn = {
                    allowList: Vn,
                    content: {},
                    extraClass: '',
                    html: false,
                    sanitize: true,
                    sanitizeFn: null,
                    template: '<div></div>'
                },
                Un = {
                    allowList: 'object',
                    content: 'object',
                    extraClass: '(string|function)',
                    html: 'boolean',
                    sanitize: 'boolean',
                    sanitizeFn: '(null|function)',
                    template: 'string'
                },
                Gn = { entry: '(string|element|function|null)', selector: '(string|element)' }
            class Jn extends H {
                constructor(t2) {
                    super(), (this._config = this._getConfig(t2))
                }
                static get Default() {
                    return Yn
                }
                static get DefaultType() {
                    return Un
                }
                static get NAME() {
                    return 'TemplateFactory'
                }
                getContent() {
                    return Object.values(this._config.content)
                        .map((t2) => this._resolvePossibleFunction(t2))
                        .filter(Boolean)
                }
                hasContent() {
                    return this.getContent().length > 0
                }
                changeContent(t2) {
                    return (
                        this._checkContent(t2),
                        (this._config.content = { ...this._config.content, ...t2 }),
                        this
                    )
                }
                toHtml() {
                    const t2 = document.createElement('div')
                    t2.innerHTML = this._maybeSanitize(this._config.template)
                    for (const [e4, i3] of Object.entries(this._config.content))
                        this._setContent(t2, i3, e4)
                    const e3 = t2.children[0],
                        i2 = this._resolvePossibleFunction(this._config.extraClass)
                    return i2 && e3.classList.add(...i2.split(' ')), e3
                }
                _typeCheckConfig(t2) {
                    super._typeCheckConfig(t2), this._checkContent(t2.content)
                }
                _checkContent(t2) {
                    for (const [e3, i2] of Object.entries(t2))
                        super._typeCheckConfig({ selector: e3, entry: i2 }, Gn)
                }
                _setContent(t2, e3, i2) {
                    const n2 = z.findOne(i2, t2)
                    n2 &&
                        ((e3 = this._resolvePossibleFunction(e3))
                            ? o(e3)
                                ? this._putElementInTemplate(r2(e3), n2)
                                : this._config.html
                                  ? (n2.innerHTML = this._maybeSanitize(e3))
                                  : (n2.textContent = e3)
                            : n2.remove())
                }
                _maybeSanitize(t2) {
                    return this._config.sanitize
                        ? (function (t3, e3, i2) {
                              if (!t3.length) return t3
                              if (i2 && 'function' == typeof i2) return i2(t3)
                              const n2 = new window.DOMParser().parseFromString(t3, 'text/html'),
                                  s3 = [].concat(...n2.body.querySelectorAll('*'))
                              for (const t4 of s3) {
                                  const i3 = t4.nodeName.toLowerCase()
                                  if (!Object.keys(e3).includes(i3)) {
                                      t4.remove()
                                      continue
                                  }
                                  const n3 = [].concat(...t4.attributes),
                                      s4 = [].concat(e3['*'] || [], e3[i3] || [])
                                  for (const e4 of n3) Xn(e4, s4) || t4.removeAttribute(e4.nodeName)
                              }
                              return n2.body.innerHTML
                          })(t2, this._config.allowList, this._config.sanitizeFn)
                        : t2
                }
                _resolvePossibleFunction(t2) {
                    return g(t2, [this])
                }
                _putElementInTemplate(t2, e3) {
                    if (this._config.html) return (e3.innerHTML = ''), void e3.append(t2)
                    e3.textContent = t2.textContent
                }
            }
            const Zn = /* @__PURE__ */ new Set(['sanitize', 'allowList', 'sanitizeFn']),
                ts = 'fade',
                es = 'show',
                is = '.modal',
                ns = 'hide.bs.modal',
                ss = 'hover',
                os = 'focus',
                rs = {
                    AUTO: 'auto',
                    TOP: 'top',
                    RIGHT: p() ? 'left' : 'right',
                    BOTTOM: 'bottom',
                    LEFT: p() ? 'right' : 'left'
                },
                as = {
                    allowList: Vn,
                    animation: true,
                    boundary: 'clippingParents',
                    container: false,
                    customClass: '',
                    delay: 0,
                    fallbackPlacements: ['top', 'right', 'bottom', 'left'],
                    html: false,
                    offset: [0, 6],
                    placement: 'top',
                    popperConfig: null,
                    sanitize: true,
                    sanitizeFn: null,
                    selector: false,
                    template:
                        '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
                    title: '',
                    trigger: 'hover focus'
                },
                ls = {
                    allowList: 'object',
                    animation: 'boolean',
                    boundary: '(string|element)',
                    container: '(string|element|boolean)',
                    customClass: '(string|function)',
                    delay: '(number|object)',
                    fallbackPlacements: 'array',
                    html: 'boolean',
                    offset: '(array|string|function)',
                    placement: '(string|function)',
                    popperConfig: '(null|object|function)',
                    sanitize: 'boolean',
                    sanitizeFn: '(null|function)',
                    selector: '(string|boolean)',
                    template: 'string',
                    title: '(string|element|function)',
                    trigger: 'string'
                }
            class cs extends W {
                constructor(t2, e3) {
                    if (void 0 === vi)
                        throw new TypeError(
                            "Bootstrap's tooltips require Popper (https://popper.js.org)"
                        )
                    super(t2, e3),
                        (this._isEnabled = true),
                        (this._timeout = 0),
                        (this._isHovered = null),
                        (this._activeTrigger = {}),
                        (this._popper = null),
                        (this._templateFactory = null),
                        (this._newContent = null),
                        (this.tip = null),
                        this._setListeners(),
                        this._config.selector || this._fixTitle()
                }
                static get Default() {
                    return as
                }
                static get DefaultType() {
                    return ls
                }
                static get NAME() {
                    return 'tooltip'
                }
                enable() {
                    this._isEnabled = true
                }
                disable() {
                    this._isEnabled = false
                }
                toggleEnabled() {
                    this._isEnabled = !this._isEnabled
                }
                toggle() {
                    this._isEnabled &&
                        ((this._activeTrigger.click = !this._activeTrigger.click),
                        this._isShown() ? this._leave() : this._enter())
                }
                dispose() {
                    clearTimeout(this._timeout),
                        N.off(this._element.closest(is), ns, this._hideModalHandler),
                        this._element.getAttribute('data-bs-original-title') &&
                            this._element.setAttribute(
                                'title',
                                this._element.getAttribute('data-bs-original-title')
                            ),
                        this._disposePopper(),
                        super.dispose()
                }
                show() {
                    if ('none' === this._element.style.display)
                        throw new Error('Please use show on visible elements')
                    if (!this._isWithContent() || !this._isEnabled) return
                    const t2 = N.trigger(this._element, this.constructor.eventName('show')),
                        e3 = (
                            c2(this._element) || this._element.ownerDocument.documentElement
                        ).contains(this._element)
                    if (t2.defaultPrevented || !e3) return
                    this._disposePopper()
                    const i2 = this._getTipElement()
                    this._element.setAttribute('aria-describedby', i2.getAttribute('id'))
                    const { container: n2 } = this._config
                    if (
                        (this._element.ownerDocument.documentElement.contains(this.tip) ||
                            (n2.append(i2),
                            N.trigger(this._element, this.constructor.eventName('inserted'))),
                        (this._popper = this._createPopper(i2)),
                        i2.classList.add(es),
                        'ontouchstart' in document.documentElement)
                    )
                        for (const t3 of [].concat(...document.body.children))
                            N.on(t3, 'mouseover', h)
                    this._queueCallback(
                        () => {
                            N.trigger(this._element, this.constructor.eventName('shown')),
                                false === this._isHovered && this._leave(),
                                (this._isHovered = false)
                        },
                        this.tip,
                        this._isAnimated()
                    )
                }
                hide() {
                    if (
                        this._isShown() &&
                        !N.trigger(this._element, this.constructor.eventName('hide'))
                            .defaultPrevented
                    ) {
                        if (
                            (this._getTipElement().classList.remove(es),
                            'ontouchstart' in document.documentElement)
                        )
                            for (const t2 of [].concat(...document.body.children))
                                N.off(t2, 'mouseover', h)
                        ;(this._activeTrigger.click = false),
                            (this._activeTrigger[os] = false),
                            (this._activeTrigger[ss] = false),
                            (this._isHovered = null),
                            this._queueCallback(
                                () => {
                                    this._isWithActiveTrigger() ||
                                        (this._isHovered || this._disposePopper(),
                                        this._element.removeAttribute('aria-describedby'),
                                        N.trigger(
                                            this._element,
                                            this.constructor.eventName('hidden')
                                        ))
                                },
                                this.tip,
                                this._isAnimated()
                            )
                    }
                }
                update() {
                    this._popper && this._popper.update()
                }
                _isWithContent() {
                    return Boolean(this._getTitle())
                }
                _getTipElement() {
                    return (
                        this.tip ||
                            (this.tip = this._createTipElement(
                                this._newContent || this._getContentForTemplate()
                            )),
                        this.tip
                    )
                }
                _createTipElement(t2) {
                    const e3 = this._getTemplateFactory(t2).toHtml()
                    if (!e3) return null
                    e3.classList.remove(ts, es),
                        e3.classList.add(`bs-${this.constructor.NAME}-auto`)
                    const i2 = ((t3) => {
                        do {
                            t3 += Math.floor(1e6 * Math.random())
                        } while (document.getElementById(t3))
                        return t3
                    })(this.constructor.NAME).toString()
                    return e3.setAttribute('id', i2), this._isAnimated() && e3.classList.add(ts), e3
                }
                setContent(t2) {
                    ;(this._newContent = t2),
                        this._isShown() && (this._disposePopper(), this.show())
                }
                _getTemplateFactory(t2) {
                    return (
                        this._templateFactory
                            ? this._templateFactory.changeContent(t2)
                            : (this._templateFactory = new Jn({
                                  ...this._config,
                                  content: t2,
                                  extraClass: this._resolvePossibleFunction(
                                      this._config.customClass
                                  )
                              })),
                        this._templateFactory
                    )
                }
                _getContentForTemplate() {
                    return { '.tooltip-inner': this._getTitle() }
                }
                _getTitle() {
                    return (
                        this._resolvePossibleFunction(this._config.title) ||
                        this._element.getAttribute('data-bs-original-title')
                    )
                }
                _initializeOnDelegatedTarget(t2) {
                    return this.constructor.getOrCreateInstance(
                        t2.delegateTarget,
                        this._getDelegateConfig()
                    )
                }
                _isAnimated() {
                    return this._config.animation || (this.tip && this.tip.classList.contains(ts))
                }
                _isShown() {
                    return this.tip && this.tip.classList.contains(es)
                }
                _createPopper(t2) {
                    const e3 = g(this._config.placement, [this, t2, this._element]),
                        i2 = rs[e3.toUpperCase()]
                    return bi(this._element, t2, this._getPopperConfig(i2))
                }
                _getOffset() {
                    const { offset: t2 } = this._config
                    return 'string' == typeof t2
                        ? t2.split(',').map((t3) => Number.parseInt(t3, 10))
                        : 'function' == typeof t2
                          ? (e3) => t2(e3, this._element)
                          : t2
                }
                _resolvePossibleFunction(t2) {
                    return g(t2, [this._element])
                }
                _getPopperConfig(t2) {
                    const e3 = {
                        placement: t2,
                        modifiers: [
                            {
                                name: 'flip',
                                options: { fallbackPlacements: this._config.fallbackPlacements }
                            },
                            { name: 'offset', options: { offset: this._getOffset() } },
                            {
                                name: 'preventOverflow',
                                options: { boundary: this._config.boundary }
                            },
                            {
                                name: 'arrow',
                                options: { element: `.${this.constructor.NAME}-arrow` }
                            },
                            {
                                name: 'preSetPlacement',
                                enabled: true,
                                phase: 'beforeMain',
                                fn: (t3) => {
                                    this._getTipElement().setAttribute(
                                        'data-popper-placement',
                                        t3.state.placement
                                    )
                                }
                            }
                        ]
                    }
                    return { ...e3, ...g(this._config.popperConfig, [e3]) }
                }
                _setListeners() {
                    const t2 = this._config.trigger.split(' ')
                    for (const e3 of t2)
                        if ('click' === e3)
                            N.on(
                                this._element,
                                this.constructor.eventName('click'),
                                this._config.selector,
                                (t3) => {
                                    this._initializeOnDelegatedTarget(t3).toggle()
                                }
                            )
                        else if ('manual' !== e3) {
                            const t3 =
                                    e3 === ss
                                        ? this.constructor.eventName('mouseenter')
                                        : this.constructor.eventName('focusin'),
                                i2 =
                                    e3 === ss
                                        ? this.constructor.eventName('mouseleave')
                                        : this.constructor.eventName('focusout')
                            N.on(this._element, t3, this._config.selector, (t4) => {
                                const e4 = this._initializeOnDelegatedTarget(t4)
                                ;(e4._activeTrigger['focusin' === t4.type ? os : ss] = true),
                                    e4._enter()
                            }),
                                N.on(this._element, i2, this._config.selector, (t4) => {
                                    const e4 = this._initializeOnDelegatedTarget(t4)
                                    ;(e4._activeTrigger['focusout' === t4.type ? os : ss] =
                                        e4._element.contains(t4.relatedTarget)),
                                        e4._leave()
                                })
                        }
                    ;(this._hideModalHandler = () => {
                        this._element && this.hide()
                    }),
                        N.on(this._element.closest(is), ns, this._hideModalHandler)
                }
                _fixTitle() {
                    const t2 = this._element.getAttribute('title')
                    t2 &&
                        (this._element.getAttribute('aria-label') ||
                            this._element.textContent.trim() ||
                            this._element.setAttribute('aria-label', t2),
                        this._element.setAttribute('data-bs-original-title', t2),
                        this._element.removeAttribute('title'))
                }
                _enter() {
                    this._isShown() || this._isHovered
                        ? (this._isHovered = true)
                        : ((this._isHovered = true),
                          this._setTimeout(() => {
                              this._isHovered && this.show()
                          }, this._config.delay.show))
                }
                _leave() {
                    this._isWithActiveTrigger() ||
                        ((this._isHovered = false),
                        this._setTimeout(() => {
                            this._isHovered || this.hide()
                        }, this._config.delay.hide))
                }
                _setTimeout(t2, e3) {
                    clearTimeout(this._timeout), (this._timeout = setTimeout(t2, e3))
                }
                _isWithActiveTrigger() {
                    return Object.values(this._activeTrigger).includes(true)
                }
                _getConfig(t2) {
                    const e3 = F.getDataAttributes(this._element)
                    for (const t3 of Object.keys(e3)) Zn.has(t3) && delete e3[t3]
                    return (
                        (t2 = { ...e3, ...('object' == typeof t2 && t2 ? t2 : {}) }),
                        (t2 = this._mergeConfigObj(t2)),
                        (t2 = this._configAfterMerge(t2)),
                        this._typeCheckConfig(t2),
                        t2
                    )
                }
                _configAfterMerge(t2) {
                    return (
                        (t2.container = false === t2.container ? document.body : r2(t2.container)),
                        'number' == typeof t2.delay &&
                            (t2.delay = { show: t2.delay, hide: t2.delay }),
                        'number' == typeof t2.title && (t2.title = t2.title.toString()),
                        'number' == typeof t2.content && (t2.content = t2.content.toString()),
                        t2
                    )
                }
                _getDelegateConfig() {
                    const t2 = {}
                    for (const [e3, i2] of Object.entries(this._config))
                        this.constructor.Default[e3] !== i2 && (t2[e3] = i2)
                    return (t2.selector = false), (t2.trigger = 'manual'), t2
                }
                _disposePopper() {
                    this._popper && (this._popper.destroy(), (this._popper = null)),
                        this.tip && (this.tip.remove(), (this.tip = null))
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = cs.getOrCreateInstance(this, t2)
                        if ('string' == typeof t2) {
                            if (void 0 === e3[t2]) throw new TypeError(`No method named "${t2}"`)
                            e3[t2]()
                        }
                    })
                }
            }
            m(cs)
            const hs = {
                    ...cs.Default,
                    content: '',
                    offset: [0, 8],
                    placement: 'right',
                    template:
                        '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
                    trigger: 'click'
                },
                ds = { ...cs.DefaultType, content: '(null|string|element|function)' }
            class us extends cs {
                static get Default() {
                    return hs
                }
                static get DefaultType() {
                    return ds
                }
                static get NAME() {
                    return 'popover'
                }
                _isWithContent() {
                    return this._getTitle() || this._getContent()
                }
                _getContentForTemplate() {
                    return {
                        '.popover-header': this._getTitle(),
                        '.popover-body': this._getContent()
                    }
                }
                _getContent() {
                    return this._resolvePossibleFunction(this._config.content)
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = us.getOrCreateInstance(this, t2)
                        if ('string' == typeof t2) {
                            if (void 0 === e3[t2]) throw new TypeError(`No method named "${t2}"`)
                            e3[t2]()
                        }
                    })
                }
            }
            m(us)
            const fs = '.bs.scrollspy',
                ps = `activate${fs}`,
                ms = `click${fs}`,
                gs = `load${fs}.data-api`,
                _s = 'active',
                bs = '[href]',
                vs = '.nav-link',
                ys = `${vs}, .nav-item > ${vs}, .list-group-item`,
                ws = {
                    offset: null,
                    rootMargin: '0px 0px -25%',
                    smoothScroll: false,
                    target: null,
                    threshold: [0.1, 0.5, 1]
                },
                As = {
                    offset: '(number|null)',
                    rootMargin: 'string',
                    smoothScroll: 'boolean',
                    target: 'element',
                    threshold: 'array'
                }
            class Es extends W {
                constructor(t2, e3) {
                    super(t2, e3),
                        (this._targetLinks = /* @__PURE__ */ new Map()),
                        (this._observableSections = /* @__PURE__ */ new Map()),
                        (this._rootElement =
                            'visible' === getComputedStyle(this._element).overflowY
                                ? null
                                : this._element),
                        (this._activeTarget = null),
                        (this._observer = null),
                        (this._previousScrollData = { visibleEntryTop: 0, parentScrollTop: 0 }),
                        this.refresh()
                }
                static get Default() {
                    return ws
                }
                static get DefaultType() {
                    return As
                }
                static get NAME() {
                    return 'scrollspy'
                }
                refresh() {
                    this._initializeTargetsAndObservables(),
                        this._maybeEnableSmoothScroll(),
                        this._observer
                            ? this._observer.disconnect()
                            : (this._observer = this._getNewObserver())
                    for (const t2 of this._observableSections.values()) this._observer.observe(t2)
                }
                dispose() {
                    this._observer.disconnect(), super.dispose()
                }
                _configAfterMerge(t2) {
                    return (
                        (t2.target = r2(t2.target) || document.body),
                        (t2.rootMargin = t2.offset ? `${t2.offset}px 0px -30%` : t2.rootMargin),
                        'string' == typeof t2.threshold &&
                            (t2.threshold = t2.threshold
                                .split(',')
                                .map((t3) => Number.parseFloat(t3))),
                        t2
                    )
                }
                _maybeEnableSmoothScroll() {
                    this._config.smoothScroll &&
                        (N.off(this._config.target, ms),
                        N.on(this._config.target, ms, bs, (t2) => {
                            const e3 = this._observableSections.get(t2.target.hash)
                            if (e3) {
                                t2.preventDefault()
                                const i2 = this._rootElement || window,
                                    n2 = e3.offsetTop - this._element.offsetTop
                                if (i2.scrollTo)
                                    return void i2.scrollTo({ top: n2, behavior: 'smooth' })
                                i2.scrollTop = n2
                            }
                        }))
                }
                _getNewObserver() {
                    const t2 = {
                        root: this._rootElement,
                        threshold: this._config.threshold,
                        rootMargin: this._config.rootMargin
                    }
                    return new IntersectionObserver((t3) => this._observerCallback(t3), t2)
                }
                _observerCallback(t2) {
                    const e3 = (t3) => this._targetLinks.get(`#${t3.target.id}`),
                        i2 = (t3) => {
                            ;(this._previousScrollData.visibleEntryTop = t3.target.offsetTop),
                                this._process(e3(t3))
                        },
                        n2 = (this._rootElement || document.documentElement).scrollTop,
                        s3 = n2 >= this._previousScrollData.parentScrollTop
                    this._previousScrollData.parentScrollTop = n2
                    for (const o2 of t2) {
                        if (!o2.isIntersecting) {
                            ;(this._activeTarget = null), this._clearActiveClass(e3(o2))
                            continue
                        }
                        const t3 = o2.target.offsetTop >= this._previousScrollData.visibleEntryTop
                        if (s3 && t3) {
                            if ((i2(o2), !n2)) return
                        } else s3 || t3 || i2(o2)
                    }
                }
                _initializeTargetsAndObservables() {
                    ;(this._targetLinks = /* @__PURE__ */ new Map()),
                        (this._observableSections = /* @__PURE__ */ new Map())
                    const t2 = z.find(bs, this._config.target)
                    for (const e3 of t2) {
                        if (!e3.hash || l(e3)) continue
                        const t3 = z.findOne(decodeURI(e3.hash), this._element)
                        a2(t3) &&
                            (this._targetLinks.set(decodeURI(e3.hash), e3),
                            this._observableSections.set(e3.hash, t3))
                    }
                }
                _process(t2) {
                    this._activeTarget !== t2 &&
                        (this._clearActiveClass(this._config.target),
                        (this._activeTarget = t2),
                        t2.classList.add(_s),
                        this._activateParents(t2),
                        N.trigger(this._element, ps, { relatedTarget: t2 }))
                }
                _activateParents(t2) {
                    if (t2.classList.contains('dropdown-item'))
                        z.findOne('.dropdown-toggle', t2.closest('.dropdown')).classList.add(_s)
                    else
                        for (const e3 of z.parents(t2, '.nav, .list-group'))
                            for (const t3 of z.prev(e3, ys)) t3.classList.add(_s)
                }
                _clearActiveClass(t2) {
                    t2.classList.remove(_s)
                    const e3 = z.find(`${bs}.${_s}`, t2)
                    for (const t3 of e3) t3.classList.remove(_s)
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = Es.getOrCreateInstance(this, t2)
                        if ('string' == typeof t2) {
                            if (void 0 === e3[t2] || t2.startsWith('_') || 'constructor' === t2)
                                throw new TypeError(`No method named "${t2}"`)
                            e3[t2]()
                        }
                    })
                }
            }
            N.on(window, gs, () => {
                for (const t2 of z.find('[data-bs-spy="scroll"]')) Es.getOrCreateInstance(t2)
            }),
                m(Es)
            const Ts = '.bs.tab',
                Cs = `hide${Ts}`,
                Os = `hidden${Ts}`,
                xs = `show${Ts}`,
                ks = `shown${Ts}`,
                Ls = `click${Ts}`,
                Ss = `keydown${Ts}`,
                Ds = `load${Ts}`,
                $s = 'ArrowLeft',
                Is = 'ArrowRight',
                Ns = 'ArrowUp',
                Ps = 'ArrowDown',
                js = 'Home',
                Ms = 'End',
                Fs = 'active',
                Hs = 'fade',
                Ws = 'show',
                Bs = '.dropdown-toggle',
                zs = `:not(${Bs})`,
                Rs = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',
                qs = `.nav-link${zs}, .list-group-item${zs}, [role="tab"]${zs}, ${Rs}`,
                Vs = `.${Fs}[data-bs-toggle="tab"], .${Fs}[data-bs-toggle="pill"], .${Fs}[data-bs-toggle="list"]`
            class Ks extends W {
                constructor(t2) {
                    super(t2),
                        (this._parent = this._element.closest(
                            '.list-group, .nav, [role="tablist"]'
                        )),
                        this._parent &&
                            (this._setInitialAttributes(this._parent, this._getChildren()),
                            N.on(this._element, Ss, (t3) => this._keydown(t3)))
                }
                static get NAME() {
                    return 'tab'
                }
                show() {
                    const t2 = this._element
                    if (this._elemIsActive(t2)) return
                    const e3 = this._getActiveElem(),
                        i2 = e3 ? N.trigger(e3, Cs, { relatedTarget: t2 }) : null
                    N.trigger(t2, xs, { relatedTarget: e3 }).defaultPrevented ||
                        (i2 && i2.defaultPrevented) ||
                        (this._deactivate(e3, t2), this._activate(t2, e3))
                }
                _activate(t2, e3) {
                    t2 &&
                        (t2.classList.add(Fs),
                        this._activate(z.getElementFromSelector(t2)),
                        this._queueCallback(
                            () => {
                                'tab' === t2.getAttribute('role')
                                    ? (t2.removeAttribute('tabindex'),
                                      t2.setAttribute('aria-selected', true),
                                      this._toggleDropDown(t2, true),
                                      N.trigger(t2, ks, { relatedTarget: e3 }))
                                    : t2.classList.add(Ws)
                            },
                            t2,
                            t2.classList.contains(Hs)
                        ))
                }
                _deactivate(t2, e3) {
                    t2 &&
                        (t2.classList.remove(Fs),
                        t2.blur(),
                        this._deactivate(z.getElementFromSelector(t2)),
                        this._queueCallback(
                            () => {
                                'tab' === t2.getAttribute('role')
                                    ? (t2.setAttribute('aria-selected', false),
                                      t2.setAttribute('tabindex', '-1'),
                                      this._toggleDropDown(t2, false),
                                      N.trigger(t2, Os, { relatedTarget: e3 }))
                                    : t2.classList.remove(Ws)
                            },
                            t2,
                            t2.classList.contains(Hs)
                        ))
                }
                _keydown(t2) {
                    if (![$s, Is, Ns, Ps, js, Ms].includes(t2.key)) return
                    t2.stopPropagation(), t2.preventDefault()
                    const e3 = this._getChildren().filter((t3) => !l(t3))
                    let i2
                    if ([js, Ms].includes(t2.key)) i2 = e3[t2.key === js ? 0 : e3.length - 1]
                    else {
                        const n2 = [Is, Ps].includes(t2.key)
                        i2 = b(e3, t2.target, n2, true)
                    }
                    i2 && (i2.focus({ preventScroll: true }), Ks.getOrCreateInstance(i2).show())
                }
                _getChildren() {
                    return z.find(qs, this._parent)
                }
                _getActiveElem() {
                    return this._getChildren().find((t2) => this._elemIsActive(t2)) || null
                }
                _setInitialAttributes(t2, e3) {
                    this._setAttributeIfNotExists(t2, 'role', 'tablist')
                    for (const t3 of e3) this._setInitialAttributesOnChild(t3)
                }
                _setInitialAttributesOnChild(t2) {
                    t2 = this._getInnerElement(t2)
                    const e3 = this._elemIsActive(t2),
                        i2 = this._getOuterElement(t2)
                    t2.setAttribute('aria-selected', e3),
                        i2 !== t2 && this._setAttributeIfNotExists(i2, 'role', 'presentation'),
                        e3 || t2.setAttribute('tabindex', '-1'),
                        this._setAttributeIfNotExists(t2, 'role', 'tab'),
                        this._setInitialAttributesOnTargetPanel(t2)
                }
                _setInitialAttributesOnTargetPanel(t2) {
                    const e3 = z.getElementFromSelector(t2)
                    e3 &&
                        (this._setAttributeIfNotExists(e3, 'role', 'tabpanel'),
                        t2.id && this._setAttributeIfNotExists(e3, 'aria-labelledby', `${t2.id}`))
                }
                _toggleDropDown(t2, e3) {
                    const i2 = this._getOuterElement(t2)
                    if (!i2.classList.contains('dropdown')) return
                    const n2 = (t3, n3) => {
                        const s3 = z.findOne(t3, i2)
                        s3 && s3.classList.toggle(n3, e3)
                    }
                    n2(Bs, Fs), n2('.dropdown-menu', Ws), i2.setAttribute('aria-expanded', e3)
                }
                _setAttributeIfNotExists(t2, e3, i2) {
                    t2.hasAttribute(e3) || t2.setAttribute(e3, i2)
                }
                _elemIsActive(t2) {
                    return t2.classList.contains(Fs)
                }
                _getInnerElement(t2) {
                    return t2.matches(qs) ? t2 : z.findOne(qs, t2)
                }
                _getOuterElement(t2) {
                    return t2.closest('.nav-item, .list-group-item') || t2
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = Ks.getOrCreateInstance(this)
                        if ('string' == typeof t2) {
                            if (void 0 === e3[t2] || t2.startsWith('_') || 'constructor' === t2)
                                throw new TypeError(`No method named "${t2}"`)
                            e3[t2]()
                        }
                    })
                }
            }
            N.on(document, Ls, Rs, function (t2) {
                ;['A', 'AREA'].includes(this.tagName) && t2.preventDefault(),
                    l(this) || Ks.getOrCreateInstance(this).show()
            }),
                N.on(window, Ds, () => {
                    for (const t2 of z.find(Vs)) Ks.getOrCreateInstance(t2)
                }),
                m(Ks)
            const Qs = '.bs.toast',
                Xs = `mouseover${Qs}`,
                Ys = `mouseout${Qs}`,
                Us = `focusin${Qs}`,
                Gs = `focusout${Qs}`,
                Js = `hide${Qs}`,
                Zs = `hidden${Qs}`,
                to = `show${Qs}`,
                eo = `shown${Qs}`,
                io = 'hide',
                no = 'show',
                so = 'showing',
                oo = { animation: 'boolean', autohide: 'boolean', delay: 'number' },
                ro = { animation: true, autohide: true, delay: 5e3 }
            class ao extends W {
                constructor(t2, e3) {
                    super(t2, e3),
                        (this._timeout = null),
                        (this._hasMouseInteraction = false),
                        (this._hasKeyboardInteraction = false),
                        this._setListeners()
                }
                static get Default() {
                    return ro
                }
                static get DefaultType() {
                    return oo
                }
                static get NAME() {
                    return 'toast'
                }
                show() {
                    N.trigger(this._element, to).defaultPrevented ||
                        (this._clearTimeout(),
                        this._config.animation && this._element.classList.add('fade'),
                        this._element.classList.remove(io),
                        d(this._element),
                        this._element.classList.add(no, so),
                        this._queueCallback(
                            () => {
                                this._element.classList.remove(so),
                                    N.trigger(this._element, eo),
                                    this._maybeScheduleHide()
                            },
                            this._element,
                            this._config.animation
                        ))
                }
                hide() {
                    this.isShown() &&
                        (N.trigger(this._element, Js).defaultPrevented ||
                            (this._element.classList.add(so),
                            this._queueCallback(
                                () => {
                                    this._element.classList.add(io),
                                        this._element.classList.remove(so, no),
                                        N.trigger(this._element, Zs)
                                },
                                this._element,
                                this._config.animation
                            )))
                }
                dispose() {
                    this._clearTimeout(),
                        this.isShown() && this._element.classList.remove(no),
                        super.dispose()
                }
                isShown() {
                    return this._element.classList.contains(no)
                }
                _maybeScheduleHide() {
                    this._config.autohide &&
                        (this._hasMouseInteraction ||
                            this._hasKeyboardInteraction ||
                            (this._timeout = setTimeout(() => {
                                this.hide()
                            }, this._config.delay)))
                }
                _onInteraction(t2, e3) {
                    switch (t2.type) {
                        case 'mouseover':
                        case 'mouseout':
                            this._hasMouseInteraction = e3
                            break
                        case 'focusin':
                        case 'focusout':
                            this._hasKeyboardInteraction = e3
                    }
                    if (e3) return void this._clearTimeout()
                    const i2 = t2.relatedTarget
                    this._element === i2 || this._element.contains(i2) || this._maybeScheduleHide()
                }
                _setListeners() {
                    N.on(this._element, Xs, (t2) => this._onInteraction(t2, true)),
                        N.on(this._element, Ys, (t2) => this._onInteraction(t2, false)),
                        N.on(this._element, Us, (t2) => this._onInteraction(t2, true)),
                        N.on(this._element, Gs, (t2) => this._onInteraction(t2, false))
                }
                _clearTimeout() {
                    clearTimeout(this._timeout), (this._timeout = null)
                }
                static jQueryInterface(t2) {
                    return this.each(function () {
                        const e3 = ao.getOrCreateInstance(this, t2)
                        if ('string' == typeof t2) {
                            if (void 0 === e3[t2]) throw new TypeError(`No method named "${t2}"`)
                            e3[t2](this)
                        }
                    })
                }
            }
            return (
                R(ao),
                m(ao),
                {
                    Alert: Q,
                    Button: Y,
                    Carousel: xt,
                    Collapse: Bt,
                    Dropdown: qi,
                    Modal: On,
                    Offcanvas: qn,
                    Popover: us,
                    ScrollSpy: Es,
                    Tab: Ks,
                    Toast: ao,
                    Tooltip: cs
                }
            )
        })
    })(bootstrap_bundle_min$1)
    return bootstrap_bundle_min$1.exports
}
var bootstrap_bundle_minExports = requireBootstrap_bundle_min()
var react = { exports: {} }
var react_production = {}
/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReact_production
function requireReact_production() {
    if (hasRequiredReact_production) return react_production
    hasRequiredReact_production = 1
    var REACT_ELEMENT_TYPE = Symbol.for('react.transitional.element'),
        REACT_PORTAL_TYPE = Symbol.for('react.portal'),
        REACT_FRAGMENT_TYPE = Symbol.for('react.fragment'),
        REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode'),
        REACT_PROFILER_TYPE = Symbol.for('react.profiler'),
        REACT_CONSUMER_TYPE = Symbol.for('react.consumer'),
        REACT_CONTEXT_TYPE = Symbol.for('react.context'),
        REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref'),
        REACT_SUSPENSE_TYPE = Symbol.for('react.suspense'),
        REACT_MEMO_TYPE = Symbol.for('react.memo'),
        REACT_LAZY_TYPE = Symbol.for('react.lazy'),
        MAYBE_ITERATOR_SYMBOL = Symbol.iterator
    function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || 'object' !== typeof maybeIterable) return null
        maybeIterable =
            (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
            maybeIterable['@@iterator']
        return 'function' === typeof maybeIterable ? maybeIterable : null
    }
    var ReactNoopUpdateQueue = {
            isMounted: function () {
                return false
            },
            enqueueForceUpdate: function () {},
            enqueueReplaceState: function () {},
            enqueueSetState: function () {}
        },
        assign2 = Object.assign,
        emptyObject = {}
    function Component(props, context, updater) {
        this.props = props
        this.context = context
        this.refs = emptyObject
        this.updater = updater || ReactNoopUpdateQueue
    }
    Component.prototype.isReactComponent = {}
    Component.prototype.setState = function (partialState, callback) {
        if (
            'object' !== typeof partialState &&
            'function' !== typeof partialState &&
            null != partialState
        )
            throw Error(
                'takes an object of state variables to update or a function which returns an object of state variables.'
            )
        this.updater.enqueueSetState(this, partialState, callback, 'setState')
    }
    Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate')
    }
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype
    function PureComponent(props, context, updater) {
        this.props = props
        this.context = context
        this.refs = emptyObject
        this.updater = updater || ReactNoopUpdateQueue
    }
    var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy())
    pureComponentPrototype.constructor = PureComponent
    assign2(pureComponentPrototype, Component.prototype)
    pureComponentPrototype.isPureReactComponent = true
    var isArrayImpl = Array.isArray,
        ReactSharedInternals = { H: null, A: null, T: null, S: null, V: null },
        hasOwnProperty2 = Object.prototype.hasOwnProperty
    function ReactElement(type, key, self2, source, owner, props) {
        self2 = props.ref
        return {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref: void 0 !== self2 ? self2 : null,
            props
        }
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        return ReactElement(oldElement.type, newKey, void 0, void 0, void 0, oldElement.props)
    }
    function isValidElement(object2) {
        return (
            'object' === typeof object2 &&
            null !== object2 &&
            object2.$$typeof === REACT_ELEMENT_TYPE
        )
    }
    function escape(key) {
        var escaperLookup = { '=': '=0', ':': '=2' }
        return (
            '$' +
            key.replace(/[=:]/g, function (match2) {
                return escaperLookup[match2]
            })
        )
    }
    var userProvidedKeyEscapeRegex = /\/+/g
    function getElementKey(element, index2) {
        return 'object' === typeof element && null !== element && null != element.key
            ? escape('' + element.key)
            : index2.toString(36)
    }
    function noop$12() {}
    function resolveThenable(thenable) {
        switch (thenable.status) {
            case 'fulfilled':
                return thenable.value
            case 'rejected':
                throw thenable.reason
            default:
                switch (
                    ('string' === typeof thenable.status
                        ? thenable.then(noop$12, noop$12)
                        : ((thenable.status = 'pending'),
                          thenable.then(
                              function (fulfilledValue) {
                                  'pending' === thenable.status &&
                                      ((thenable.status = 'fulfilled'),
                                      (thenable.value = fulfilledValue))
                              },
                              function (error) {
                                  'pending' === thenable.status &&
                                      ((thenable.status = 'rejected'), (thenable.reason = error))
                              }
                          )),
                    thenable.status)
                ) {
                    case 'fulfilled':
                        return thenable.value
                    case 'rejected':
                        throw thenable.reason
                }
        }
        throw thenable
    }
    function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
        var type = typeof children
        if ('undefined' === type || 'boolean' === type) children = null
        var invokeCallback = false
        if (null === children) invokeCallback = true
        else
            switch (type) {
                case 'bigint':
                case 'string':
                case 'number':
                    invokeCallback = true
                    break
                case 'object':
                    switch (children.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                            invokeCallback = true
                            break
                        case REACT_LAZY_TYPE:
                            return (
                                (invokeCallback = children._init),
                                mapIntoArray(
                                    invokeCallback(children._payload),
                                    array2,
                                    escapedPrefix,
                                    nameSoFar,
                                    callback
                                )
                            )
                    }
            }
        if (invokeCallback)
            return (
                (callback = callback(children)),
                (invokeCallback = '' === nameSoFar ? '.' + getElementKey(children, 0) : nameSoFar),
                isArrayImpl(callback)
                    ? ((escapedPrefix = ''),
                      null != invokeCallback &&
                          (escapedPrefix =
                              invokeCallback.replace(userProvidedKeyEscapeRegex, '$&/') + '/'),
                      mapIntoArray(callback, array2, escapedPrefix, '', function (c2) {
                          return c2
                      }))
                    : null != callback &&
                      (isValidElement(callback) &&
                          (callback = cloneAndReplaceKey(
                              callback,
                              escapedPrefix +
                                  (null == callback.key ||
                                  (children && children.key === callback.key)
                                      ? ''
                                      : ('' + callback.key).replace(
                                            userProvidedKeyEscapeRegex,
                                            '$&/'
                                        ) + '/') +
                                  invokeCallback
                          )),
                      array2.push(callback)),
                1
            )
        invokeCallback = 0
        var nextNamePrefix = '' === nameSoFar ? '.' : nameSoFar + ':'
        if (isArrayImpl(children))
            for (var i = 0; i < children.length; i++)
                (nameSoFar = children[i]),
                    (type = nextNamePrefix + getElementKey(nameSoFar, i)),
                    (invokeCallback += mapIntoArray(
                        nameSoFar,
                        array2,
                        escapedPrefix,
                        type,
                        callback
                    ))
        else if (((i = getIteratorFn(children)), 'function' === typeof i))
            for (children = i.call(children), i = 0; !(nameSoFar = children.next()).done; )
                (nameSoFar = nameSoFar.value),
                    (type = nextNamePrefix + getElementKey(nameSoFar, i++)),
                    (invokeCallback += mapIntoArray(
                        nameSoFar,
                        array2,
                        escapedPrefix,
                        type,
                        callback
                    ))
        else if ('object' === type) {
            if ('function' === typeof children.then)
                return mapIntoArray(
                    resolveThenable(children),
                    array2,
                    escapedPrefix,
                    nameSoFar,
                    callback
                )
            array2 = String(children)
            throw Error(
                'Objects are not valid as a React child (found: ' +
                    ('[object Object]' === array2
                        ? 'object with keys {' + Object.keys(children).join(', ') + '}'
                        : array2) +
                    '). If you meant to render a collection of children, use an array instead.'
            )
        }
        return invokeCallback
    }
    function mapChildren(children, func, context) {
        if (null == children) return children
        var result = [],
            count2 = 0
        mapIntoArray(children, result, '', '', function (child) {
            return func.call(context, child, count2++)
        })
        return result
    }
    function lazyInitializer(payload) {
        if (-1 === payload._status) {
            var ctor = payload._result
            ctor = ctor()
            ctor.then(
                function (moduleObject) {
                    if (0 === payload._status || -1 === payload._status)
                        (payload._status = 1), (payload._result = moduleObject)
                },
                function (error) {
                    if (0 === payload._status || -1 === payload._status)
                        (payload._status = 2), (payload._result = error)
                }
            )
            ;-1 === payload._status && ((payload._status = 0), (payload._result = ctor))
        }
        if (1 === payload._status) return payload._result.default
        throw payload._result
    }
    var reportGlobalError =
        'function' === typeof reportError
            ? reportError
            : function (error) {
                  if ('object' === typeof window && 'function' === typeof window.ErrorEvent) {
                      var event = new window.ErrorEvent('error', {
                          bubbles: true,
                          cancelable: true,
                          message:
                              'object' === typeof error &&
                              null !== error &&
                              'string' === typeof error.message
                                  ? String(error.message)
                                  : String(error),
                          error
                      })
                      if (!window.dispatchEvent(event)) return
                  } else if ('object' === typeof process && 'function' === typeof process.emit) {
                      process.emit('uncaughtException', error)
                      return
                  }
                  console.error(error)
              }
    function noop3() {}
    react_production.Children = {
        map: mapChildren,
        forEach: function (children, forEachFunc, forEachContext) {
            mapChildren(
                children,
                function () {
                    forEachFunc.apply(this, arguments)
                },
                forEachContext
            )
        },
        count: function (children) {
            var n = 0
            mapChildren(children, function () {
                n++
            })
            return n
        },
        toArray: function (children) {
            return (
                mapChildren(children, function (child) {
                    return child
                }) || []
            )
        },
        only: function (children) {
            if (!isValidElement(children))
                throw Error('React.Children.only expected to receive a single React element child.')
            return children
        }
    }
    react_production.Component = Component
    react_production.Fragment = REACT_FRAGMENT_TYPE
    react_production.Profiler = REACT_PROFILER_TYPE
    react_production.PureComponent = PureComponent
    react_production.StrictMode = REACT_STRICT_MODE_TYPE
    react_production.Suspense = REACT_SUSPENSE_TYPE
    react_production.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
        ReactSharedInternals
    react_production.__COMPILER_RUNTIME = {
        __proto__: null,
        c: function (size) {
            return ReactSharedInternals.H.useMemoCache(size)
        }
    }
    react_production.cache = function (fn) {
        return function () {
            return fn.apply(null, arguments)
        }
    }
    react_production.cloneElement = function (element, config2, children) {
        if (null === element || void 0 === element)
            throw Error('The argument must be a React element, but you passed ' + element + '.')
        var props = assign2({}, element.props),
            key = element.key,
            owner = void 0
        if (null != config2)
            for (propName in (void 0 !== config2.ref && (owner = void 0),
            void 0 !== config2.key && (key = '' + config2.key),
            config2))
                !hasOwnProperty2.call(config2, propName) ||
                    'key' === propName ||
                    '__self' === propName ||
                    '__source' === propName ||
                    ('ref' === propName && void 0 === config2.ref) ||
                    (props[propName] = config2[propName])
        var propName = arguments.length - 2
        if (1 === propName) props.children = children
        else if (1 < propName) {
            for (var childArray = Array(propName), i = 0; i < propName; i++)
                childArray[i] = arguments[i + 2]
            props.children = childArray
        }
        return ReactElement(element.type, key, void 0, void 0, owner, props)
    }
    react_production.createContext = function (defaultValue) {
        defaultValue = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
        }
        defaultValue.Provider = defaultValue
        defaultValue.Consumer = {
            $$typeof: REACT_CONSUMER_TYPE,
            _context: defaultValue
        }
        return defaultValue
    }
    react_production.createElement = function (type, config2, children) {
        var propName,
            props = {},
            key = null
        if (null != config2)
            for (propName in (void 0 !== config2.key && (key = '' + config2.key), config2))
                hasOwnProperty2.call(config2, propName) &&
                    'key' !== propName &&
                    '__self' !== propName &&
                    '__source' !== propName &&
                    (props[propName] = config2[propName])
        var childrenLength = arguments.length - 2
        if (1 === childrenLength) props.children = children
        else if (1 < childrenLength) {
            for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
                childArray[i] = arguments[i + 2]
            props.children = childArray
        }
        if (type && type.defaultProps)
            for (propName in ((childrenLength = type.defaultProps), childrenLength))
                void 0 === props[propName] && (props[propName] = childrenLength[propName])
        return ReactElement(type, key, void 0, void 0, null, props)
    }
    react_production.createRef = function () {
        return { current: null }
    }
    react_production.forwardRef = function (render) {
        return { $$typeof: REACT_FORWARD_REF_TYPE, render }
    }
    react_production.isValidElement = isValidElement
    react_production.lazy = function (ctor) {
        return {
            $$typeof: REACT_LAZY_TYPE,
            _payload: { _status: -1, _result: ctor },
            _init: lazyInitializer
        }
    }
    react_production.memo = function (type, compare) {
        return {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: void 0 === compare ? null : compare
        }
    }
    react_production.startTransition = function (scope) {
        var prevTransition = ReactSharedInternals.T,
            currentTransition = {}
        ReactSharedInternals.T = currentTransition
        try {
            var returnValue = scope(),
                onStartTransitionFinish = ReactSharedInternals.S
            null !== onStartTransitionFinish &&
                onStartTransitionFinish(currentTransition, returnValue)
            'object' === typeof returnValue &&
                null !== returnValue &&
                'function' === typeof returnValue.then &&
                returnValue.then(noop3, reportGlobalError)
        } catch (error) {
            reportGlobalError(error)
        } finally {
            ReactSharedInternals.T = prevTransition
        }
    }
    react_production.unstable_useCacheRefresh = function () {
        return ReactSharedInternals.H.useCacheRefresh()
    }
    react_production.use = function (usable) {
        return ReactSharedInternals.H.use(usable)
    }
    react_production.useActionState = function (action, initialState, permalink) {
        return ReactSharedInternals.H.useActionState(action, initialState, permalink)
    }
    react_production.useCallback = function (callback, deps) {
        return ReactSharedInternals.H.useCallback(callback, deps)
    }
    react_production.useContext = function (Context) {
        return ReactSharedInternals.H.useContext(Context)
    }
    react_production.useDebugValue = function () {}
    react_production.useDeferredValue = function (value, initialValue) {
        return ReactSharedInternals.H.useDeferredValue(value, initialValue)
    }
    react_production.useEffect = function (create, createDeps, update) {
        var dispatcher = ReactSharedInternals.H
        if ('function' === typeof update)
            throw Error('useEffect CRUD overload is not enabled in this build of React.')
        return dispatcher.useEffect(create, createDeps)
    }
    react_production.useId = function () {
        return ReactSharedInternals.H.useId()
    }
    react_production.useImperativeHandle = function (ref, create, deps) {
        return ReactSharedInternals.H.useImperativeHandle(ref, create, deps)
    }
    react_production.useInsertionEffect = function (create, deps) {
        return ReactSharedInternals.H.useInsertionEffect(create, deps)
    }
    react_production.useLayoutEffect = function (create, deps) {
        return ReactSharedInternals.H.useLayoutEffect(create, deps)
    }
    react_production.useMemo = function (create, deps) {
        return ReactSharedInternals.H.useMemo(create, deps)
    }
    react_production.useOptimistic = function (passthrough, reducer) {
        return ReactSharedInternals.H.useOptimistic(passthrough, reducer)
    }
    react_production.useReducer = function (reducer, initialArg, init) {
        return ReactSharedInternals.H.useReducer(reducer, initialArg, init)
    }
    react_production.useRef = function (initialValue) {
        return ReactSharedInternals.H.useRef(initialValue)
    }
    react_production.useState = function (initialState) {
        return ReactSharedInternals.H.useState(initialState)
    }
    react_production.useSyncExternalStore = function (subscribe, getSnapshot, getServerSnapshot) {
        return ReactSharedInternals.H.useSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
        )
    }
    react_production.useTransition = function () {
        return ReactSharedInternals.H.useTransition()
    }
    react_production.version = '19.1.0'
    return react_production
}
var hasRequiredReact
function requireReact() {
    if (hasRequiredReact) return react.exports
    hasRequiredReact = 1
    {
        react.exports = requireReact_production()
    }
    return react.exports
}
var reactExports = requireReact()
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports)
const React$1 = /* @__PURE__ */ _mergeNamespaces(
    {
        __proto__: null,
        default: React
    },
    [reactExports]
)
var client = { exports: {} }
var reactDomClient_production = {}
var scheduler = { exports: {} }
var scheduler_production = {}
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredScheduler_production
function requireScheduler_production() {
    if (hasRequiredScheduler_production) return scheduler_production
    hasRequiredScheduler_production = 1
    ;(function (exports) {
        function push(heap, node2) {
            var index2 = heap.length
            heap.push(node2)
            a: for (; 0 < index2; ) {
                var parentIndex = (index2 - 1) >>> 1,
                    parent = heap[parentIndex]
                if (0 < compare(parent, node2))
                    (heap[parentIndex] = node2), (heap[index2] = parent), (index2 = parentIndex)
                else break a
            }
        }
        function peek2(heap) {
            return 0 === heap.length ? null : heap[0]
        }
        function pop(heap) {
            if (0 === heap.length) return null
            var first2 = heap[0],
                last2 = heap.pop()
            if (last2 !== first2) {
                heap[0] = last2
                a: for (
                    var index2 = 0, length2 = heap.length, halfLength = length2 >>> 1;
                    index2 < halfLength;

                ) {
                    var leftIndex = 2 * (index2 + 1) - 1,
                        left = heap[leftIndex],
                        rightIndex = leftIndex + 1,
                        right = heap[rightIndex]
                    if (0 > compare(left, last2))
                        rightIndex < length2 && 0 > compare(right, left)
                            ? ((heap[index2] = right),
                              (heap[rightIndex] = last2),
                              (index2 = rightIndex))
                            : ((heap[index2] = left),
                              (heap[leftIndex] = last2),
                              (index2 = leftIndex))
                    else if (rightIndex < length2 && 0 > compare(right, last2))
                        (heap[index2] = right), (heap[rightIndex] = last2), (index2 = rightIndex)
                    else break a
                }
            }
            return first2
        }
        function compare(a2, b) {
            var diff = a2.sortIndex - b.sortIndex
            return 0 !== diff ? diff : a2.id - b.id
        }
        exports.unstable_now = void 0
        if ('object' === typeof performance && 'function' === typeof performance.now) {
            var localPerformance = performance
            exports.unstable_now = function () {
                return localPerformance.now()
            }
        } else {
            var localDate2 = Date,
                initialTime = localDate2.now()
            exports.unstable_now = function () {
                return localDate2.now() - initialTime
            }
        }
        var taskQueue = [],
            timerQueue = [],
            taskIdCounter = 1,
            currentTask = null,
            currentPriorityLevel = 3,
            isPerformingWork = false,
            isHostCallbackScheduled = false,
            isHostTimeoutScheduled = false,
            needsPaint = false,
            localSetTimeout = 'function' === typeof setTimeout ? setTimeout : null,
            localClearTimeout = 'function' === typeof clearTimeout ? clearTimeout : null,
            localSetImmediate = 'undefined' !== typeof setImmediate ? setImmediate : null
        function advanceTimers(currentTime) {
            for (var timer = peek2(timerQueue); null !== timer; ) {
                if (null === timer.callback) pop(timerQueue)
                else if (timer.startTime <= currentTime)
                    pop(timerQueue),
                        (timer.sortIndex = timer.expirationTime),
                        push(taskQueue, timer)
                else break
                timer = peek2(timerQueue)
            }
        }
        function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false
            advanceTimers(currentTime)
            if (!isHostCallbackScheduled)
                if (null !== peek2(taskQueue))
                    (isHostCallbackScheduled = true),
                        isMessageLoopRunning ||
                            ((isMessageLoopRunning = true), schedulePerformWorkUntilDeadline())
                else {
                    var firstTimer = peek2(timerQueue)
                    null !== firstTimer &&
                        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime)
                }
        }
        var isMessageLoopRunning = false,
            taskTimeoutID = -1,
            frameInterval = 5,
            startTime = -1
        function shouldYieldToHost() {
            return needsPaint
                ? true
                : exports.unstable_now() - startTime < frameInterval
                  ? false
                  : true
        }
        function performWorkUntilDeadline() {
            needsPaint = false
            if (isMessageLoopRunning) {
                var currentTime = exports.unstable_now()
                startTime = currentTime
                var hasMoreWork = true
                try {
                    a: {
                        isHostCallbackScheduled = false
                        isHostTimeoutScheduled &&
                            ((isHostTimeoutScheduled = false),
                            localClearTimeout(taskTimeoutID),
                            (taskTimeoutID = -1))
                        isPerformingWork = true
                        var previousPriorityLevel = currentPriorityLevel
                        try {
                            b: {
                                advanceTimers(currentTime)
                                for (
                                    currentTask = peek2(taskQueue);
                                    null !== currentTask &&
                                    !(
                                        currentTask.expirationTime > currentTime &&
                                        shouldYieldToHost()
                                    );

                                ) {
                                    var callback = currentTask.callback
                                    if ('function' === typeof callback) {
                                        currentTask.callback = null
                                        currentPriorityLevel = currentTask.priorityLevel
                                        var continuationCallback = callback(
                                            currentTask.expirationTime <= currentTime
                                        )
                                        currentTime = exports.unstable_now()
                                        if ('function' === typeof continuationCallback) {
                                            currentTask.callback = continuationCallback
                                            advanceTimers(currentTime)
                                            hasMoreWork = true
                                            break b
                                        }
                                        currentTask === peek2(taskQueue) && pop(taskQueue)
                                        advanceTimers(currentTime)
                                    } else pop(taskQueue)
                                    currentTask = peek2(taskQueue)
                                }
                                if (null !== currentTask) hasMoreWork = true
                                else {
                                    var firstTimer = peek2(timerQueue)
                                    null !== firstTimer &&
                                        requestHostTimeout(
                                            handleTimeout,
                                            firstTimer.startTime - currentTime
                                        )
                                    hasMoreWork = false
                                }
                            }
                            break a
                        } finally {
                            ;(currentTask = null),
                                (currentPriorityLevel = previousPriorityLevel),
                                (isPerformingWork = false)
                        }
                        hasMoreWork = void 0
                    }
                } finally {
                    hasMoreWork
                        ? schedulePerformWorkUntilDeadline()
                        : (isMessageLoopRunning = false)
                }
            }
        }
        var schedulePerformWorkUntilDeadline
        if ('function' === typeof localSetImmediate)
            schedulePerformWorkUntilDeadline = function () {
                localSetImmediate(performWorkUntilDeadline)
            }
        else if ('undefined' !== typeof MessageChannel) {
            var channel = new MessageChannel(),
                port = channel.port2
            channel.port1.onmessage = performWorkUntilDeadline
            schedulePerformWorkUntilDeadline = function () {
                port.postMessage(null)
            }
        } else
            schedulePerformWorkUntilDeadline = function () {
                localSetTimeout(performWorkUntilDeadline, 0)
            }
        function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function () {
                callback(exports.unstable_now())
            }, ms)
        }
        exports.unstable_IdlePriority = 5
        exports.unstable_ImmediatePriority = 1
        exports.unstable_LowPriority = 4
        exports.unstable_NormalPriority = 3
        exports.unstable_Profiling = null
        exports.unstable_UserBlockingPriority = 2
        exports.unstable_cancelCallback = function (task) {
            task.callback = null
        }
        exports.unstable_forceFrameRate = function (fps) {
            0 > fps || 125 < fps
                ? console.error(
                      'forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported'
                  )
                : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5)
        }
        exports.unstable_getCurrentPriorityLevel = function () {
            return currentPriorityLevel
        }
        exports.unstable_next = function (eventHandler) {
            switch (currentPriorityLevel) {
                case 1:
                case 2:
                case 3:
                    var priorityLevel = 3
                    break
                default:
                    priorityLevel = currentPriorityLevel
            }
            var previousPriorityLevel = currentPriorityLevel
            currentPriorityLevel = priorityLevel
            try {
                return eventHandler()
            } finally {
                currentPriorityLevel = previousPriorityLevel
            }
        }
        exports.unstable_requestPaint = function () {
            needsPaint = true
        }
        exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
            switch (priorityLevel) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break
                default:
                    priorityLevel = 3
            }
            var previousPriorityLevel = currentPriorityLevel
            currentPriorityLevel = priorityLevel
            try {
                return eventHandler()
            } finally {
                currentPriorityLevel = previousPriorityLevel
            }
        }
        exports.unstable_scheduleCallback = function (priorityLevel, callback, options2) {
            var currentTime = exports.unstable_now()
            'object' === typeof options2 && null !== options2
                ? ((options2 = options2.delay),
                  (options2 =
                      'number' === typeof options2 && 0 < options2
                          ? currentTime + options2
                          : currentTime))
                : (options2 = currentTime)
            switch (priorityLevel) {
                case 1:
                    var timeout = -1
                    break
                case 2:
                    timeout = 250
                    break
                case 5:
                    timeout = 1073741823
                    break
                case 4:
                    timeout = 1e4
                    break
                default:
                    timeout = 5e3
            }
            timeout = options2 + timeout
            priorityLevel = {
                id: taskIdCounter++,
                callback,
                priorityLevel,
                startTime: options2,
                expirationTime: timeout,
                sortIndex: -1
            }
            options2 > currentTime
                ? ((priorityLevel.sortIndex = options2),
                  push(timerQueue, priorityLevel),
                  null === peek2(taskQueue) &&
                      priorityLevel === peek2(timerQueue) &&
                      (isHostTimeoutScheduled
                          ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
                          : (isHostTimeoutScheduled = true),
                      requestHostTimeout(handleTimeout, options2 - currentTime)))
                : ((priorityLevel.sortIndex = timeout),
                  push(taskQueue, priorityLevel),
                  isHostCallbackScheduled ||
                      isPerformingWork ||
                      ((isHostCallbackScheduled = true),
                      isMessageLoopRunning ||
                          ((isMessageLoopRunning = true), schedulePerformWorkUntilDeadline())))
            return priorityLevel
        }
        exports.unstable_shouldYield = shouldYieldToHost
        exports.unstable_wrapCallback = function (callback) {
            var parentPriorityLevel = currentPriorityLevel
            return function () {
                var previousPriorityLevel = currentPriorityLevel
                currentPriorityLevel = parentPriorityLevel
                try {
                    return callback.apply(this, arguments)
                } finally {
                    currentPriorityLevel = previousPriorityLevel
                }
            }
        }
    })(scheduler_production)
    return scheduler_production
}
var hasRequiredScheduler
function requireScheduler() {
    if (hasRequiredScheduler) return scheduler.exports
    hasRequiredScheduler = 1
    {
        scheduler.exports = requireScheduler_production()
    }
    return scheduler.exports
}
var reactDom = { exports: {} }
var reactDom_production = {}
/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactDom_production
function requireReactDom_production() {
    if (hasRequiredReactDom_production) return reactDom_production
    hasRequiredReactDom_production = 1
    var React2 = requireReact()
    function formatProdErrorMessage(code) {
        var url = 'https://react.dev/errors/' + code
        if (1 < arguments.length) {
            url += '?args[]=' + encodeURIComponent(arguments[1])
            for (var i = 2; i < arguments.length; i++)
                url += '&args[]=' + encodeURIComponent(arguments[i])
        }
        return (
            'Minified React error #' +
            code +
            '; visit ' +
            url +
            ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.'
        )
    }
    function noop3() {}
    var Internals = {
            d: {
                f: noop3,
                r: function () {
                    throw Error(formatProdErrorMessage(522))
                },
                D: noop3,
                C: noop3,
                L: noop3,
                m: noop3,
                X: noop3,
                S: noop3,
                M: noop3
            },
            p: 0,
            findDOMNode: null
        },
        REACT_PORTAL_TYPE = Symbol.for('react.portal')
    function createPortal$1(children, containerInfo, implementation) {
        var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null
        return {
            $$typeof: REACT_PORTAL_TYPE,
            key: null == key ? null : '' + key,
            children,
            containerInfo,
            implementation
        }
    }
    var ReactSharedInternals =
        React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
    function getCrossOriginStringAs(as, input) {
        if ('font' === as) return ''
        if ('string' === typeof input) return 'use-credentials' === input ? input : ''
    }
    reactDom_production.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals
    reactDom_production.createPortal = function (children, container) {
        var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null
        if (
            !container ||
            (1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
        )
            throw Error(formatProdErrorMessage(299))
        return createPortal$1(children, container, null, key)
    }
    reactDom_production.flushSync = function (fn) {
        var previousTransition = ReactSharedInternals.T,
            previousUpdatePriority = Internals.p
        try {
            if (((ReactSharedInternals.T = null), (Internals.p = 2), fn)) return fn()
        } finally {
            ;(ReactSharedInternals.T = previousTransition),
                (Internals.p = previousUpdatePriority),
                Internals.d.f()
        }
    }
    reactDom_production.preconnect = function (href, options2) {
        'string' === typeof href &&
            (options2
                ? ((options2 = options2.crossOrigin),
                  (options2 =
                      'string' === typeof options2
                          ? 'use-credentials' === options2
                              ? options2
                              : ''
                          : void 0))
                : (options2 = null),
            Internals.d.C(href, options2))
    }
    reactDom_production.prefetchDNS = function (href) {
        'string' === typeof href && Internals.d.D(href)
    }
    reactDom_production.preinit = function (href, options2) {
        if ('string' === typeof href && options2 && 'string' === typeof options2.as) {
            var as = options2.as,
                crossOrigin = getCrossOriginStringAs(as, options2.crossOrigin),
                integrity = 'string' === typeof options2.integrity ? options2.integrity : void 0,
                fetchPriority =
                    'string' === typeof options2.fetchPriority ? options2.fetchPriority : void 0
            'style' === as
                ? Internals.d.S(
                      href,
                      'string' === typeof options2.precedence ? options2.precedence : void 0,
                      {
                          crossOrigin,
                          integrity,
                          fetchPriority
                      }
                  )
                : 'script' === as &&
                  Internals.d.X(href, {
                      crossOrigin,
                      integrity,
                      fetchPriority,
                      nonce: 'string' === typeof options2.nonce ? options2.nonce : void 0
                  })
        }
    }
    reactDom_production.preinitModule = function (href, options2) {
        if ('string' === typeof href)
            if ('object' === typeof options2 && null !== options2) {
                if (null == options2.as || 'script' === options2.as) {
                    var crossOrigin = getCrossOriginStringAs(options2.as, options2.crossOrigin)
                    Internals.d.M(href, {
                        crossOrigin,
                        integrity:
                            'string' === typeof options2.integrity ? options2.integrity : void 0,
                        nonce: 'string' === typeof options2.nonce ? options2.nonce : void 0
                    })
                }
            } else null == options2 && Internals.d.M(href)
    }
    reactDom_production.preload = function (href, options2) {
        if (
            'string' === typeof href &&
            'object' === typeof options2 &&
            null !== options2 &&
            'string' === typeof options2.as
        ) {
            var as = options2.as,
                crossOrigin = getCrossOriginStringAs(as, options2.crossOrigin)
            Internals.d.L(href, as, {
                crossOrigin,
                integrity: 'string' === typeof options2.integrity ? options2.integrity : void 0,
                nonce: 'string' === typeof options2.nonce ? options2.nonce : void 0,
                type: 'string' === typeof options2.type ? options2.type : void 0,
                fetchPriority:
                    'string' === typeof options2.fetchPriority ? options2.fetchPriority : void 0,
                referrerPolicy:
                    'string' === typeof options2.referrerPolicy ? options2.referrerPolicy : void 0,
                imageSrcSet:
                    'string' === typeof options2.imageSrcSet ? options2.imageSrcSet : void 0,
                imageSizes: 'string' === typeof options2.imageSizes ? options2.imageSizes : void 0,
                media: 'string' === typeof options2.media ? options2.media : void 0
            })
        }
    }
    reactDom_production.preloadModule = function (href, options2) {
        if ('string' === typeof href)
            if (options2) {
                var crossOrigin = getCrossOriginStringAs(options2.as, options2.crossOrigin)
                Internals.d.m(href, {
                    as:
                        'string' === typeof options2.as && 'script' !== options2.as
                            ? options2.as
                            : void 0,
                    crossOrigin,
                    integrity: 'string' === typeof options2.integrity ? options2.integrity : void 0
                })
            } else Internals.d.m(href)
    }
    reactDom_production.requestFormReset = function (form) {
        Internals.d.r(form)
    }
    reactDom_production.unstable_batchedUpdates = function (fn, a2) {
        return fn(a2)
    }
    reactDom_production.useFormState = function (action, initialState, permalink) {
        return ReactSharedInternals.H.useFormState(action, initialState, permalink)
    }
    reactDom_production.useFormStatus = function () {
        return ReactSharedInternals.H.useHostTransitionStatus()
    }
    reactDom_production.version = '19.1.0'
    return reactDom_production
}
var hasRequiredReactDom
function requireReactDom() {
    if (hasRequiredReactDom) return reactDom.exports
    hasRequiredReactDom = 1
    function checkDCE() {
        if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
        ) {
            return
        }
        try {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE)
        } catch (err) {
            console.error(err)
        }
    }
    {
        checkDCE()
        reactDom.exports = requireReactDom_production()
    }
    return reactDom.exports
}
/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactDomClient_production
function requireReactDomClient_production() {
    if (hasRequiredReactDomClient_production) return reactDomClient_production
    hasRequiredReactDomClient_production = 1
    var Scheduler = requireScheduler(),
        React2 = requireReact(),
        ReactDOM2 = requireReactDom()
    function formatProdErrorMessage(code) {
        var url = 'https://react.dev/errors/' + code
        if (1 < arguments.length) {
            url += '?args[]=' + encodeURIComponent(arguments[1])
            for (var i = 2; i < arguments.length; i++)
                url += '&args[]=' + encodeURIComponent(arguments[i])
        }
        return (
            'Minified React error #' +
            code +
            '; visit ' +
            url +
            ' for the full message or use the non-minified dev environment for full errors and additional helpful warnings.'
        )
    }
    function isValidContainer(node2) {
        return !(!node2 || (1 !== node2.nodeType && 9 !== node2.nodeType && 11 !== node2.nodeType))
    }
    function getNearestMountedFiber(fiber) {
        var node2 = fiber,
            nearestMounted = fiber
        if (fiber.alternate) for (; node2.return; ) node2 = node2.return
        else {
            fiber = node2
            do
                (node2 = fiber),
                    0 !== (node2.flags & 4098) && (nearestMounted = node2.return),
                    (fiber = node2.return)
            while (fiber)
        }
        return 3 === node2.tag ? nearestMounted : null
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (13 === fiber.tag) {
            var suspenseState = fiber.memoizedState
            null === suspenseState &&
                ((fiber = fiber.alternate), null !== fiber && (suspenseState = fiber.memoizedState))
            if (null !== suspenseState) return suspenseState.dehydrated
        }
        return null
    }
    function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) throw Error(formatProdErrorMessage(188))
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate
        if (!alternate) {
            alternate = getNearestMountedFiber(fiber)
            if (null === alternate) throw Error(formatProdErrorMessage(188))
            return alternate !== fiber ? null : fiber
        }
        for (var a2 = fiber, b = alternate; ; ) {
            var parentA = a2.return
            if (null === parentA) break
            var parentB = parentA.alternate
            if (null === parentB) {
                b = parentA.return
                if (null !== b) {
                    a2 = b
                    continue
                }
                break
            }
            if (parentA.child === parentB.child) {
                for (parentB = parentA.child; parentB; ) {
                    if (parentB === a2) return assertIsMounted(parentA), fiber
                    if (parentB === b) return assertIsMounted(parentA), alternate
                    parentB = parentB.sibling
                }
                throw Error(formatProdErrorMessage(188))
            }
            if (a2.return !== b.return) (a2 = parentA), (b = parentB)
            else {
                for (var didFindChild = false, child$0 = parentA.child; child$0; ) {
                    if (child$0 === a2) {
                        didFindChild = true
                        a2 = parentA
                        b = parentB
                        break
                    }
                    if (child$0 === b) {
                        didFindChild = true
                        b = parentA
                        a2 = parentB
                        break
                    }
                    child$0 = child$0.sibling
                }
                if (!didFindChild) {
                    for (child$0 = parentB.child; child$0; ) {
                        if (child$0 === a2) {
                            didFindChild = true
                            a2 = parentB
                            b = parentA
                            break
                        }
                        if (child$0 === b) {
                            didFindChild = true
                            b = parentB
                            a2 = parentA
                            break
                        }
                        child$0 = child$0.sibling
                    }
                    if (!didFindChild) throw Error(formatProdErrorMessage(189))
                }
            }
            if (a2.alternate !== b) throw Error(formatProdErrorMessage(190))
        }
        if (3 !== a2.tag) throw Error(formatProdErrorMessage(188))
        return a2.stateNode.current === a2 ? fiber : alternate
    }
    function findCurrentHostFiberImpl(node2) {
        var tag = node2.tag
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node2
        for (node2 = node2.child; null !== node2; ) {
            tag = findCurrentHostFiberImpl(node2)
            if (null !== tag) return tag
            node2 = node2.sibling
        }
        return null
    }
    var assign2 = Object.assign,
        REACT_LEGACY_ELEMENT_TYPE = Symbol.for('react.element'),
        REACT_ELEMENT_TYPE = Symbol.for('react.transitional.element'),
        REACT_PORTAL_TYPE = Symbol.for('react.portal'),
        REACT_FRAGMENT_TYPE = Symbol.for('react.fragment'),
        REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode'),
        REACT_PROFILER_TYPE = Symbol.for('react.profiler'),
        REACT_PROVIDER_TYPE = Symbol.for('react.provider'),
        REACT_CONSUMER_TYPE = Symbol.for('react.consumer'),
        REACT_CONTEXT_TYPE = Symbol.for('react.context'),
        REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref'),
        REACT_SUSPENSE_TYPE = Symbol.for('react.suspense'),
        REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list'),
        REACT_MEMO_TYPE = Symbol.for('react.memo'),
        REACT_LAZY_TYPE = Symbol.for('react.lazy')
    var REACT_ACTIVITY_TYPE = Symbol.for('react.activity')
    var REACT_MEMO_CACHE_SENTINEL = Symbol.for('react.memo_cache_sentinel')
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator
    function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || 'object' !== typeof maybeIterable) return null
        maybeIterable =
            (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
            maybeIterable['@@iterator']
        return 'function' === typeof maybeIterable ? maybeIterable : null
    }
    var REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference')
    function getComponentNameFromType(type) {
        if (null == type) return null
        if ('function' === typeof type)
            return type.$$typeof === REACT_CLIENT_REFERENCE
                ? null
                : type.displayName || type.name || null
        if ('string' === typeof type) return type
        switch (type) {
            case REACT_FRAGMENT_TYPE:
                return 'Fragment'
            case REACT_PROFILER_TYPE:
                return 'Profiler'
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode'
            case REACT_SUSPENSE_TYPE:
                return 'Suspense'
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList'
            case REACT_ACTIVITY_TYPE:
                return 'Activity'
        }
        if ('object' === typeof type)
            switch (type.$$typeof) {
                case REACT_PORTAL_TYPE:
                    return 'Portal'
                case REACT_CONTEXT_TYPE:
                    return (type.displayName || 'Context') + '.Provider'
                case REACT_CONSUMER_TYPE:
                    return (type._context.displayName || 'Context') + '.Consumer'
                case REACT_FORWARD_REF_TYPE:
                    var innerType = type.render
                    type = type.displayName
                    type ||
                        ((type = innerType.displayName || innerType.name || ''),
                        (type = '' !== type ? 'ForwardRef(' + type + ')' : 'ForwardRef'))
                    return type
                case REACT_MEMO_TYPE:
                    return (
                        (innerType = type.displayName || null),
                        null !== innerType
                            ? innerType
                            : getComponentNameFromType(type.type) || 'Memo'
                    )
                case REACT_LAZY_TYPE:
                    innerType = type._payload
                    type = type._init
                    try {
                        return getComponentNameFromType(type(innerType))
                    } catch (x2) {}
            }
        return null
    }
    var isArrayImpl = Array.isArray,
        ReactSharedInternals =
            React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
        ReactDOMSharedInternals =
            ReactDOM2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
        sharedNotPendingObject = {
            pending: false,
            data: null,
            method: null,
            action: null
        },
        valueStack = [],
        index2 = -1
    function createCursor(defaultValue) {
        return { current: defaultValue }
    }
    function pop(cursor2) {
        0 > index2 ||
            ((cursor2.current = valueStack[index2]), (valueStack[index2] = null), index2--)
    }
    function push(cursor2, value) {
        index2++
        valueStack[index2] = cursor2.current
        cursor2.current = value
    }
    var contextStackCursor = createCursor(null),
        contextFiberStackCursor = createCursor(null),
        rootInstanceStackCursor = createCursor(null),
        hostTransitionProviderCursor = createCursor(null)
    function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance)
        push(contextFiberStackCursor, fiber)
        push(contextStackCursor, null)
        switch (nextRootInstance.nodeType) {
            case 9:
            case 11:
                fiber = (fiber = nextRootInstance.documentElement)
                    ? (fiber = fiber.namespaceURI)
                        ? getOwnHostContext(fiber)
                        : 0
                    : 0
                break
            default:
                if (
                    ((fiber = nextRootInstance.tagName),
                    (nextRootInstance = nextRootInstance.namespaceURI))
                )
                    (nextRootInstance = getOwnHostContext(nextRootInstance)),
                        (fiber = getChildHostContextProd(nextRootInstance, fiber))
                else
                    switch (fiber) {
                        case 'svg':
                            fiber = 1
                            break
                        case 'math':
                            fiber = 2
                            break
                        default:
                            fiber = 0
                    }
        }
        pop(contextStackCursor)
        push(contextStackCursor, fiber)
    }
    function popHostContainer() {
        pop(contextStackCursor)
        pop(contextFiberStackCursor)
        pop(rootInstanceStackCursor)
    }
    function pushHostContext(fiber) {
        null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber)
        var context = contextStackCursor.current
        var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type)
        context !== JSCompiler_inline_result &&
            (push(contextFiberStackCursor, fiber),
            push(contextStackCursor, JSCompiler_inline_result))
    }
    function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber &&
            (pop(contextStackCursor), pop(contextFiberStackCursor))
        hostTransitionProviderCursor.current === fiber &&
            (pop(hostTransitionProviderCursor),
            (HostTransitionContext._currentValue = sharedNotPendingObject))
    }
    var hasOwnProperty2 = Object.prototype.hasOwnProperty,
        scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
        cancelCallback$1 = Scheduler.unstable_cancelCallback,
        shouldYield = Scheduler.unstable_shouldYield,
        requestPaint = Scheduler.unstable_requestPaint,
        now = Scheduler.unstable_now,
        getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
        ImmediatePriority = Scheduler.unstable_ImmediatePriority,
        UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
        NormalPriority$1 = Scheduler.unstable_NormalPriority,
        LowPriority = Scheduler.unstable_LowPriority,
        IdlePriority = Scheduler.unstable_IdlePriority,
        log$1 = Scheduler.log,
        unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
        rendererID = null,
        injectedHook = null
    function setIsStrictModeForDevtools(newIsStrictMode) {
        'function' === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode)
        if (injectedHook && 'function' === typeof injectedHook.setStrictMode)
            try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode)
            } catch (err) {}
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
        log2 = Math.log,
        LN2 = Math.LN2
    function clz32Fallback(x2) {
        x2 >>>= 0
        return 0 === x2 ? 32 : (31 - ((log2(x2) / LN2) | 0)) | 0
    }
    var nextTransitionLane = 256,
        nextRetryLane = 4194304
    function getHighestPriorityLanes(lanes) {
        var pendingSyncLanes = lanes & 42
        if (0 !== pendingSyncLanes) return pendingSyncLanes
        switch (lanes & -lanes) {
            case 1:
                return 1
            case 2:
                return 2
            case 4:
                return 4
            case 8:
                return 8
            case 16:
                return 16
            case 32:
                return 32
            case 64:
                return 64
            case 128:
                return 128
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
                return lanes & 4194048
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
                return lanes & 62914560
            case 67108864:
                return 67108864
            case 134217728:
                return 134217728
            case 268435456:
                return 268435456
            case 536870912:
                return 536870912
            case 1073741824:
                return 0
            default:
                return lanes
        }
    }
    function getNextLanes(root2, wipLanes, rootHasPendingCommit) {
        var pendingLanes = root2.pendingLanes
        if (0 === pendingLanes) return 0
        var nextLanes = 0,
            suspendedLanes = root2.suspendedLanes,
            pingedLanes = root2.pingedLanes
        root2 = root2.warmLanes
        var nonIdlePendingLanes = pendingLanes & 134217727
        0 !== nonIdlePendingLanes
            ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),
              0 !== pendingLanes
                  ? (nextLanes = getHighestPriorityLanes(pendingLanes))
                  : ((pingedLanes &= nonIdlePendingLanes),
                    0 !== pingedLanes
                        ? (nextLanes = getHighestPriorityLanes(pingedLanes))
                        : rootHasPendingCommit ||
                          ((rootHasPendingCommit = nonIdlePendingLanes & ~root2),
                          0 !== rootHasPendingCommit &&
                              (nextLanes = getHighestPriorityLanes(rootHasPendingCommit)))))
            : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
              0 !== nonIdlePendingLanes
                  ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
                  : 0 !== pingedLanes
                    ? (nextLanes = getHighestPriorityLanes(pingedLanes))
                    : rootHasPendingCommit ||
                      ((rootHasPendingCommit = pendingLanes & ~root2),
                      0 !== rootHasPendingCommit &&
                          (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))
        return 0 === nextLanes
            ? 0
            : 0 !== wipLanes &&
                wipLanes !== nextLanes &&
                0 === (wipLanes & suspendedLanes) &&
                ((suspendedLanes = nextLanes & -nextLanes),
                (rootHasPendingCommit = wipLanes & -wipLanes),
                suspendedLanes >= rootHasPendingCommit ||
                    (32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)))
              ? wipLanes
              : nextLanes
    }
    function checkIfRootIsPrerendering(root2, renderLanes2) {
        return (
            0 === (root2.pendingLanes & ~(root2.suspendedLanes & ~root2.pingedLanes) & renderLanes2)
        )
    }
    function computeExpirationTime(lane, currentTime) {
        switch (lane) {
            case 1:
            case 2:
            case 4:
            case 8:
            case 64:
                return currentTime + 250
            case 16:
            case 32:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
                return currentTime + 5e3
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
                return -1
            case 67108864:
            case 134217728:
            case 268435456:
            case 536870912:
            case 1073741824:
                return -1
            default:
                return -1
        }
    }
    function claimNextTransitionLane() {
        var lane = nextTransitionLane
        nextTransitionLane <<= 1
        0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256)
        return lane
    }
    function claimNextRetryLane() {
        var lane = nextRetryLane
        nextRetryLane <<= 1
        0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304)
        return lane
    }
    function createLaneMap(initial) {
        for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial)
        return laneMap
    }
    function markRootUpdated$1(root2, updateLane) {
        root2.pendingLanes |= updateLane
        268435456 !== updateLane &&
            ((root2.suspendedLanes = 0), (root2.pingedLanes = 0), (root2.warmLanes = 0))
    }
    function markRootFinished(
        root2,
        finishedLanes,
        remainingLanes,
        spawnedLane,
        updatedLanes,
        suspendedRetryLanes
    ) {
        var previouslyPendingLanes = root2.pendingLanes
        root2.pendingLanes = remainingLanes
        root2.suspendedLanes = 0
        root2.pingedLanes = 0
        root2.warmLanes = 0
        root2.expiredLanes &= remainingLanes
        root2.entangledLanes &= remainingLanes
        root2.errorRecoveryDisabledLanes &= remainingLanes
        root2.shellSuspendCounter = 0
        var entanglements = root2.entanglements,
            expirationTimes = root2.expirationTimes,
            hiddenUpdates = root2.hiddenUpdates
        for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes; ) {
            var index$5 = 31 - clz32(remainingLanes),
                lane = 1 << index$5
            entanglements[index$5] = 0
            expirationTimes[index$5] = -1
            var hiddenUpdatesForLane = hiddenUpdates[index$5]
            if (null !== hiddenUpdatesForLane)
                for (
                    hiddenUpdates[index$5] = null, index$5 = 0;
                    index$5 < hiddenUpdatesForLane.length;
                    index$5++
                ) {
                    var update = hiddenUpdatesForLane[index$5]
                    null !== update && (update.lane &= -536870913)
                }
            remainingLanes &= ~lane
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, 0)
        0 !== suspendedRetryLanes &&
            0 === updatedLanes &&
            0 !== root2.tag &&
            (root2.suspendedLanes |=
                suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes))
    }
    function markSpawnedDeferredLane(root2, spawnedLane, entangledLanes) {
        root2.pendingLanes |= spawnedLane
        root2.suspendedLanes &= ~spawnedLane
        var spawnedLaneIndex = 31 - clz32(spawnedLane)
        root2.entangledLanes |= spawnedLane
        root2.entanglements[spawnedLaneIndex] =
            root2.entanglements[spawnedLaneIndex] | 1073741824 | (entangledLanes & 4194090)
    }
    function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = (root2.entangledLanes |= entangledLanes)
        for (root2 = root2.entanglements; rootEntangledLanes; ) {
            var index$6 = 31 - clz32(rootEntangledLanes),
                lane = 1 << index$6
            ;(lane & entangledLanes) | (root2[index$6] & entangledLanes) &&
                (root2[index$6] |= entangledLanes)
            rootEntangledLanes &= ~lane
        }
    }
    function getBumpedLaneForHydrationByLane(lane) {
        switch (lane) {
            case 2:
                lane = 1
                break
            case 8:
                lane = 4
                break
            case 32:
                lane = 16
                break
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
                lane = 128
                break
            case 268435456:
                lane = 134217728
                break
            default:
                lane = 0
        }
        return lane
    }
    function lanesToEventPriority(lanes) {
        lanes &= -lanes
        return 2 < lanes ? (8 < lanes ? (0 !== (lanes & 134217727) ? 32 : 268435456) : 8) : 2
    }
    function resolveUpdatePriority() {
        var updatePriority = ReactDOMSharedInternals.p
        if (0 !== updatePriority) return updatePriority
        updatePriority = window.event
        return void 0 === updatePriority ? 32 : getEventPriority(updatePriority.type)
    }
    function runWithPriority(priority, fn) {
        var previousPriority = ReactDOMSharedInternals.p
        try {
            return (ReactDOMSharedInternals.p = priority), fn()
        } finally {
            ReactDOMSharedInternals.p = previousPriority
        }
    }
    var randomKey = Math.random().toString(36).slice(2),
        internalInstanceKey = '__reactFiber$' + randomKey,
        internalPropsKey = '__reactProps$' + randomKey,
        internalContainerInstanceKey = '__reactContainer$' + randomKey,
        internalEventHandlersKey = '__reactEvents$' + randomKey,
        internalEventHandlerListenersKey = '__reactListeners$' + randomKey,
        internalEventHandlesSetKey = '__reactHandles$' + randomKey,
        internalRootNodeResourcesKey = '__reactResources$' + randomKey,
        internalHoistableMarker = '__reactMarker$' + randomKey
    function detachDeletedInstance(node2) {
        delete node2[internalInstanceKey]
        delete node2[internalPropsKey]
        delete node2[internalEventHandlersKey]
        delete node2[internalEventHandlerListenersKey]
        delete node2[internalEventHandlesSetKey]
    }
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey]
        if (targetInst) return targetInst
        for (var parentNode = targetNode.parentNode; parentNode; ) {
            if (
                (targetInst =
                    parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey])
            ) {
                parentNode = targetInst.alternate
                if (null !== targetInst.child || (null !== parentNode && null !== parentNode.child))
                    for (
                        targetNode = getParentSuspenseInstance(targetNode);
                        null !== targetNode;

                    ) {
                        if ((parentNode = targetNode[internalInstanceKey])) return parentNode
                        targetNode = getParentSuspenseInstance(targetNode)
                    }
                return targetInst
            }
            targetNode = parentNode
            parentNode = targetNode.parentNode
        }
        return null
    }
    function getInstanceFromNode(node2) {
        if ((node2 = node2[internalInstanceKey] || node2[internalContainerInstanceKey])) {
            var tag = node2.tag
            if (5 === tag || 6 === tag || 13 === tag || 26 === tag || 27 === tag || 3 === tag)
                return node2
        }
        return null
    }
    function getNodeFromInstance(inst) {
        var tag = inst.tag
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode
        throw Error(formatProdErrorMessage(33))
    }
    function getResourcesFromRoot(root2) {
        var resources = root2[internalRootNodeResourcesKey]
        resources ||
            (resources = root2[internalRootNodeResourcesKey] =
                {
                    hoistableStyles: /* @__PURE__ */ new Map(),
                    hoistableScripts: /* @__PURE__ */ new Map()
                })
        return resources
    }
    function markNodeAsHoistable(node2) {
        node2[internalHoistableMarker] = true
    }
    var allNativeEvents = /* @__PURE__ */ new Set(),
        registrationNameDependencies = {}
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies)
        registerDirectEvent(registrationName + 'Capture', dependencies)
    }
    function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] = dependencies
        for (registrationName = 0; registrationName < dependencies.length; registrationName++)
            allNativeEvents.add(dependencies[registrationName])
    }
    var VALID_ATTRIBUTE_NAME_REGEX = RegExp(
            '^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$'
        ),
        illegalAttributeNameCache = {},
        validatedAttributeNameCache = {}
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) return true
        if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) return false
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
            return (validatedAttributeNameCache[attributeName] = true)
        illegalAttributeNameCache[attributeName] = true
        return false
    }
    function setValueForAttribute(node2, name, value) {
        if (isAttributeNameSafe(name))
            if (null === value) node2.removeAttribute(name)
            else {
                switch (typeof value) {
                    case 'undefined':
                    case 'function':
                    case 'symbol':
                        node2.removeAttribute(name)
                        return
                    case 'boolean':
                        var prefix$8 = name.toLowerCase().slice(0, 5)
                        if ('data-' !== prefix$8 && 'aria-' !== prefix$8) {
                            node2.removeAttribute(name)
                            return
                        }
                }
                node2.setAttribute(name, '' + value)
            }
    }
    function setValueForKnownAttribute(node2, name, value) {
        if (null === value) node2.removeAttribute(name)
        else {
            switch (typeof value) {
                case 'undefined':
                case 'function':
                case 'symbol':
                case 'boolean':
                    node2.removeAttribute(name)
                    return
            }
            node2.setAttribute(name, '' + value)
        }
    }
    function setValueForNamespacedAttribute(node2, namespace, name, value) {
        if (null === value) node2.removeAttribute(name)
        else {
            switch (typeof value) {
                case 'undefined':
                case 'function':
                case 'symbol':
                case 'boolean':
                    node2.removeAttribute(name)
                    return
            }
            node2.setAttributeNS(namespace, name, '' + value)
        }
    }
    var prefix2, suffix
    function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix2)
            try {
                throw Error()
            } catch (x2) {
                var match2 = x2.stack.trim().match(/\n( *(at )?)/)
                prefix2 = (match2 && match2[1]) || ''
                suffix =
                    -1 < x2.stack.indexOf('\n    at')
                        ? ' (<anonymous>)'
                        : -1 < x2.stack.indexOf('@')
                          ? '@unknown:0:0'
                          : ''
            }
        return '\n' + prefix2 + name + suffix
    }
    var reentry = false
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return ''
        reentry = true
        var previousPrepareStackTrace = Error.prepareStackTrace
        Error.prepareStackTrace = void 0
        try {
            var RunInRootFrame = {
                DetermineComponentFrameRoot: function () {
                    try {
                        if (construct) {
                            var Fake = function () {
                                throw Error()
                            }
                            Object.defineProperty(Fake.prototype, 'props', {
                                set: function () {
                                    throw Error()
                                }
                            })
                            if ('object' === typeof Reflect && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, [])
                                } catch (x2) {
                                    var control = x2
                                }
                                Reflect.construct(fn, [], Fake)
                            } else {
                                try {
                                    Fake.call()
                                } catch (x$9) {
                                    control = x$9
                                }
                                fn.call(Fake.prototype)
                            }
                        } else {
                            try {
                                throw Error()
                            } catch (x$10) {
                                control = x$10
                            }
                            ;(Fake = fn()) &&
                                'function' === typeof Fake.catch &&
                                Fake.catch(function () {})
                        }
                    } catch (sample) {
                        if (sample && control && 'string' === typeof sample.stack)
                            return [sample.stack, control.stack]
                    }
                    return [null, null]
                }
            }
            RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot'
            var namePropDescriptor = Object.getOwnPropertyDescriptor(
                RunInRootFrame.DetermineComponentFrameRoot,
                'name'
            )
            namePropDescriptor &&
                namePropDescriptor.configurable &&
                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, 'name', {
                    value: 'DetermineComponentFrameRoot'
                })
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),
                sampleStack = _RunInRootFrame$Deter[0],
                controlStack = _RunInRootFrame$Deter[1]
            if (sampleStack && controlStack) {
                var sampleLines = sampleStack.split('\n'),
                    controlLines = controlStack.split('\n')
                for (
                    namePropDescriptor = RunInRootFrame = 0;
                    RunInRootFrame < sampleLines.length &&
                    !sampleLines[RunInRootFrame].includes('DetermineComponentFrameRoot');

                )
                    RunInRootFrame++
                for (
                    ;
                    namePropDescriptor < controlLines.length &&
                    !controlLines[namePropDescriptor].includes('DetermineComponentFrameRoot');

                )
                    namePropDescriptor++
                if (
                    RunInRootFrame === sampleLines.length ||
                    namePropDescriptor === controlLines.length
                )
                    for (
                        RunInRootFrame = sampleLines.length - 1,
                            namePropDescriptor = controlLines.length - 1;
                        1 <= RunInRootFrame &&
                        0 <= namePropDescriptor &&
                        sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];

                    )
                        namePropDescriptor--
                for (
                    ;
                    1 <= RunInRootFrame && 0 <= namePropDescriptor;
                    RunInRootFrame--, namePropDescriptor--
                )
                    if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                        if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                            do
                                if (
                                    (RunInRootFrame--,
                                    namePropDescriptor--,
                                    0 > namePropDescriptor ||
                                        sampleLines[RunInRootFrame] !==
                                            controlLines[namePropDescriptor])
                                ) {
                                    var frame =
                                        '\n' +
                                        sampleLines[RunInRootFrame].replace(' at new ', ' at ')
                                    fn.displayName &&
                                        frame.includes('<anonymous>') &&
                                        (frame = frame.replace('<anonymous>', fn.displayName))
                                    return frame
                                }
                            while (1 <= RunInRootFrame && 0 <= namePropDescriptor)
                        }
                        break
                    }
            }
        } finally {
            ;(reentry = false), (Error.prepareStackTrace = previousPrepareStackTrace)
        }
        return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : '')
            ? describeBuiltInComponentFrame(previousPrepareStackTrace)
            : ''
    }
    function describeFiber(fiber) {
        switch (fiber.tag) {
            case 26:
            case 27:
            case 5:
                return describeBuiltInComponentFrame(fiber.type)
            case 16:
                return describeBuiltInComponentFrame('Lazy')
            case 13:
                return describeBuiltInComponentFrame('Suspense')
            case 19:
                return describeBuiltInComponentFrame('SuspenseList')
            case 0:
            case 15:
                return describeNativeComponentFrame(fiber.type, false)
            case 11:
                return describeNativeComponentFrame(fiber.type.render, false)
            case 1:
                return describeNativeComponentFrame(fiber.type, true)
            case 31:
                return describeBuiltInComponentFrame('Activity')
            default:
                return ''
        }
    }
    function getStackByFiberInDevAndProd(workInProgress2) {
        try {
            var info = ''
            do (info += describeFiber(workInProgress2)), (workInProgress2 = workInProgress2.return)
            while (workInProgress2)
            return info
        } catch (x2) {
            return '\nError generating stack: ' + x2.message + '\n' + x2.stack
        }
    }
    function getToStringValue(value) {
        switch (typeof value) {
            case 'bigint':
            case 'boolean':
            case 'number':
            case 'string':
            case 'undefined':
                return value
            case 'object':
                return value
            default:
                return ''
        }
    }
    function isCheckable(elem) {
        var type = elem.type
        return (
            (elem = elem.nodeName) &&
            'input' === elem.toLowerCase() &&
            ('checkbox' === type || 'radio' === type)
        )
    }
    function trackValueOnNode(node2) {
        var valueField = isCheckable(node2) ? 'checked' : 'value',
            descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField),
            currentValue = '' + node2[valueField]
        if (
            !node2.hasOwnProperty(valueField) &&
            'undefined' !== typeof descriptor &&
            'function' === typeof descriptor.get &&
            'function' === typeof descriptor.set
        ) {
            var get2 = descriptor.get,
                set = descriptor.set
            Object.defineProperty(node2, valueField, {
                configurable: true,
                get: function () {
                    return get2.call(this)
                },
                set: function (value) {
                    currentValue = '' + value
                    set.call(this, value)
                }
            })
            Object.defineProperty(node2, valueField, {
                enumerable: descriptor.enumerable
            })
            return {
                getValue: function () {
                    return currentValue
                },
                setValue: function (value) {
                    currentValue = '' + value
                },
                stopTracking: function () {
                    node2._valueTracker = null
                    delete node2[valueField]
                }
            }
        }
    }
    function track(node2) {
        node2._valueTracker || (node2._valueTracker = trackValueOnNode(node2))
    }
    function updateValueIfChanged(node2) {
        if (!node2) return false
        var tracker = node2._valueTracker
        if (!tracker) return true
        var lastValue = tracker.getValue()
        var value = ''
        node2 && (value = isCheckable(node2) ? (node2.checked ? 'true' : 'false') : node2.value)
        node2 = value
        return node2 !== lastValue ? (tracker.setValue(node2), true) : false
    }
    function getActiveElement(doc) {
        doc = doc || ('undefined' !== typeof document ? document : void 0)
        if ('undefined' === typeof doc) return null
        try {
            return doc.activeElement || doc.body
        } catch (e) {
            return doc.body
        }
    }
    var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g
    function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
        return value.replace(escapeSelectorAttributeValueInsideDoubleQuotesRegex, function (ch) {
            return '\\' + ch.charCodeAt(0).toString(16) + ' '
        })
    }
    function updateInput(
        element,
        value,
        defaultValue,
        lastDefaultValue,
        checked,
        defaultChecked,
        type,
        name
    ) {
        element.name = ''
        null != type &&
        'function' !== typeof type &&
        'symbol' !== typeof type &&
        'boolean' !== typeof type
            ? (element.type = type)
            : element.removeAttribute('type')
        if (null != value)
            if ('number' === type) {
                if ((0 === value && '' === element.value) || element.value != value)
                    element.value = '' + getToStringValue(value)
            } else
                element.value !== '' + getToStringValue(value) &&
                    (element.value = '' + getToStringValue(value))
        else ('submit' !== type && 'reset' !== type) || element.removeAttribute('value')
        null != value
            ? setDefaultValue(element, type, getToStringValue(value))
            : null != defaultValue
              ? setDefaultValue(element, type, getToStringValue(defaultValue))
              : null != lastDefaultValue && element.removeAttribute('value')
        null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked)
        null != checked &&
            (element.checked =
                checked && 'function' !== typeof checked && 'symbol' !== typeof checked)
        null != name &&
        'function' !== typeof name &&
        'symbol' !== typeof name &&
        'boolean' !== typeof name
            ? (element.name = '' + getToStringValue(name))
            : element.removeAttribute('name')
    }
    function initInput(
        element,
        value,
        defaultValue,
        checked,
        defaultChecked,
        type,
        name,
        isHydrating2
    ) {
        null != type &&
            'function' !== typeof type &&
            'symbol' !== typeof type &&
            'boolean' !== typeof type &&
            (element.type = type)
        if (null != value || null != defaultValue) {
            if (!(('submit' !== type && 'reset' !== type) || (void 0 !== value && null !== value)))
                return
            defaultValue = null != defaultValue ? '' + getToStringValue(defaultValue) : ''
            value = null != value ? '' + getToStringValue(value) : defaultValue
            isHydrating2 || value === element.value || (element.value = value)
            element.defaultValue = value
        }
        checked = null != checked ? checked : defaultChecked
        checked = 'function' !== typeof checked && 'symbol' !== typeof checked && !!checked
        element.checked = isHydrating2 ? element.checked : !!checked
        element.defaultChecked = !!checked
        null != name &&
            'function' !== typeof name &&
            'symbol' !== typeof name &&
            'boolean' !== typeof name &&
            (element.name = name)
    }
    function setDefaultValue(node2, type, value) {
        ;('number' === type && getActiveElement(node2.ownerDocument) === node2) ||
            node2.defaultValue === '' + value ||
            (node2.defaultValue = '' + value)
    }
    function updateOptions(node2, multiple, propValue, setDefaultSelected) {
        node2 = node2.options
        if (multiple) {
            multiple = {}
            for (var i = 0; i < propValue.length; i++) multiple['$' + propValue[i]] = true
            for (propValue = 0; propValue < node2.length; propValue++)
                (i = multiple.hasOwnProperty('$' + node2[propValue].value)),
                    node2[propValue].selected !== i && (node2[propValue].selected = i),
                    i && setDefaultSelected && (node2[propValue].defaultSelected = true)
        } else {
            propValue = '' + getToStringValue(propValue)
            multiple = null
            for (i = 0; i < node2.length; i++) {
                if (node2[i].value === propValue) {
                    node2[i].selected = true
                    setDefaultSelected && (node2[i].defaultSelected = true)
                    return
                }
                null !== multiple || node2[i].disabled || (multiple = node2[i])
            }
            null !== multiple && (multiple.selected = true)
        }
    }
    function updateTextarea(element, value, defaultValue) {
        if (
            null != value &&
            ((value = '' + getToStringValue(value)),
            value !== element.value && (element.value = value),
            null == defaultValue)
        ) {
            element.defaultValue !== value && (element.defaultValue = value)
            return
        }
        element.defaultValue = null != defaultValue ? '' + getToStringValue(defaultValue) : ''
    }
    function initTextarea(element, value, defaultValue, children) {
        if (null == value) {
            if (null != children) {
                if (null != defaultValue) throw Error(formatProdErrorMessage(92))
                if (isArrayImpl(children)) {
                    if (1 < children.length) throw Error(formatProdErrorMessage(93))
                    children = children[0]
                }
                defaultValue = children
            }
            null == defaultValue && (defaultValue = '')
            value = defaultValue
        }
        defaultValue = getToStringValue(value)
        element.defaultValue = defaultValue
        children = element.textContent
        children === defaultValue &&
            '' !== children &&
            null !== children &&
            (element.value = children)
    }
    function setTextContent(node2, text2) {
        if (text2) {
            var firstChild = node2.firstChild
            if (firstChild && firstChild === node2.lastChild && 3 === firstChild.nodeType) {
                firstChild.nodeValue = text2
                return
            }
        }
        node2.textContent = text2
    }
    var unitlessNumbers = new Set(
        'animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp'.split(
            ' '
        )
    )
    function setValueForStyle(style2, styleName, value) {
        var isCustomProperty3 = 0 === styleName.indexOf('--')
        null == value || 'boolean' === typeof value || '' === value
            ? isCustomProperty3
                ? style2.setProperty(styleName, '')
                : 'float' === styleName
                  ? (style2.cssFloat = '')
                  : (style2[styleName] = '')
            : isCustomProperty3
              ? style2.setProperty(styleName, value)
              : 'number' !== typeof value || 0 === value || unitlessNumbers.has(styleName)
                ? 'float' === styleName
                    ? (style2.cssFloat = value)
                    : (style2[styleName] = ('' + value).trim())
                : (style2[styleName] = value + 'px')
    }
    function setValueForStyles(node2, styles, prevStyles) {
        if (null != styles && 'object' !== typeof styles) throw Error(formatProdErrorMessage(62))
        node2 = node2.style
        if (null != prevStyles) {
            for (var styleName in prevStyles)
                !prevStyles.hasOwnProperty(styleName) ||
                    (null != styles && styles.hasOwnProperty(styleName)) ||
                    (0 === styleName.indexOf('--')
                        ? node2.setProperty(styleName, '')
                        : 'float' === styleName
                          ? (node2.cssFloat = '')
                          : (node2[styleName] = ''))
            for (var styleName$16 in styles)
                (styleName = styles[styleName$16]),
                    styles.hasOwnProperty(styleName$16) &&
                        prevStyles[styleName$16] !== styleName &&
                        setValueForStyle(node2, styleName$16, styleName)
        } else
            for (var styleName$17 in styles)
                styles.hasOwnProperty(styleName$17) &&
                    setValueForStyle(node2, styleName$17, styles[styleName$17])
    }
    function isCustomElement(tagName) {
        if (-1 === tagName.indexOf('-')) return false
        switch (tagName) {
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false
            default:
                return true
        }
    }
    var aliases = /* @__PURE__ */ new Map([
            ['acceptCharset', 'accept-charset'],
            ['htmlFor', 'for'],
            ['httpEquiv', 'http-equiv'],
            ['crossOrigin', 'crossorigin'],
            ['accentHeight', 'accent-height'],
            ['alignmentBaseline', 'alignment-baseline'],
            ['arabicForm', 'arabic-form'],
            ['baselineShift', 'baseline-shift'],
            ['capHeight', 'cap-height'],
            ['clipPath', 'clip-path'],
            ['clipRule', 'clip-rule'],
            ['colorInterpolation', 'color-interpolation'],
            ['colorInterpolationFilters', 'color-interpolation-filters'],
            ['colorProfile', 'color-profile'],
            ['colorRendering', 'color-rendering'],
            ['dominantBaseline', 'dominant-baseline'],
            ['enableBackground', 'enable-background'],
            ['fillOpacity', 'fill-opacity'],
            ['fillRule', 'fill-rule'],
            ['floodColor', 'flood-color'],
            ['floodOpacity', 'flood-opacity'],
            ['fontFamily', 'font-family'],
            ['fontSize', 'font-size'],
            ['fontSizeAdjust', 'font-size-adjust'],
            ['fontStretch', 'font-stretch'],
            ['fontStyle', 'font-style'],
            ['fontVariant', 'font-variant'],
            ['fontWeight', 'font-weight'],
            ['glyphName', 'glyph-name'],
            ['glyphOrientationHorizontal', 'glyph-orientation-horizontal'],
            ['glyphOrientationVertical', 'glyph-orientation-vertical'],
            ['horizAdvX', 'horiz-adv-x'],
            ['horizOriginX', 'horiz-origin-x'],
            ['imageRendering', 'image-rendering'],
            ['letterSpacing', 'letter-spacing'],
            ['lightingColor', 'lighting-color'],
            ['markerEnd', 'marker-end'],
            ['markerMid', 'marker-mid'],
            ['markerStart', 'marker-start'],
            ['overlinePosition', 'overline-position'],
            ['overlineThickness', 'overline-thickness'],
            ['paintOrder', 'paint-order'],
            ['panose-1', 'panose-1'],
            ['pointerEvents', 'pointer-events'],
            ['renderingIntent', 'rendering-intent'],
            ['shapeRendering', 'shape-rendering'],
            ['stopColor', 'stop-color'],
            ['stopOpacity', 'stop-opacity'],
            ['strikethroughPosition', 'strikethrough-position'],
            ['strikethroughThickness', 'strikethrough-thickness'],
            ['strokeDasharray', 'stroke-dasharray'],
            ['strokeDashoffset', 'stroke-dashoffset'],
            ['strokeLinecap', 'stroke-linecap'],
            ['strokeLinejoin', 'stroke-linejoin'],
            ['strokeMiterlimit', 'stroke-miterlimit'],
            ['strokeOpacity', 'stroke-opacity'],
            ['strokeWidth', 'stroke-width'],
            ['textAnchor', 'text-anchor'],
            ['textDecoration', 'text-decoration'],
            ['textRendering', 'text-rendering'],
            ['transformOrigin', 'transform-origin'],
            ['underlinePosition', 'underline-position'],
            ['underlineThickness', 'underline-thickness'],
            ['unicodeBidi', 'unicode-bidi'],
            ['unicodeRange', 'unicode-range'],
            ['unitsPerEm', 'units-per-em'],
            ['vAlphabetic', 'v-alphabetic'],
            ['vHanging', 'v-hanging'],
            ['vIdeographic', 'v-ideographic'],
            ['vMathematical', 'v-mathematical'],
            ['vectorEffect', 'vector-effect'],
            ['vertAdvY', 'vert-adv-y'],
            ['vertOriginX', 'vert-origin-x'],
            ['vertOriginY', 'vert-origin-y'],
            ['wordSpacing', 'word-spacing'],
            ['writingMode', 'writing-mode'],
            ['xmlnsXlink', 'xmlns:xlink'],
            ['xHeight', 'x-height']
        ]),
        isJavaScriptProtocol =
            /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i
    function sanitizeURL(url) {
        return isJavaScriptProtocol.test('' + url)
            ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')"
            : url
    }
    var currentReplayingEvent = null
    function getEventTarget(nativeEvent) {
        nativeEvent = nativeEvent.target || nativeEvent.srcElement || window
        nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement)
        return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent
    }
    var restoreTarget = null,
        restoreQueue = null
    function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target)
        if (internalInstance && (target = internalInstance.stateNode)) {
            var props = target[internalPropsKey] || null
            a: switch (((target = internalInstance.stateNode), internalInstance.type)) {
                case 'input':
                    updateInput(
                        target,
                        props.value,
                        props.defaultValue,
                        props.defaultValue,
                        props.checked,
                        props.defaultChecked,
                        props.type,
                        props.name
                    )
                    internalInstance = props.name
                    if ('radio' === props.type && null != internalInstance) {
                        for (props = target; props.parentNode; ) props = props.parentNode
                        props = props.querySelectorAll(
                            'input[name="' +
                                escapeSelectorAttributeValueInsideDoubleQuotes(
                                    '' + internalInstance
                                ) +
                                '"][type="radio"]'
                        )
                        for (
                            internalInstance = 0;
                            internalInstance < props.length;
                            internalInstance++
                        ) {
                            var otherNode = props[internalInstance]
                            if (otherNode !== target && otherNode.form === target.form) {
                                var otherProps = otherNode[internalPropsKey] || null
                                if (!otherProps) throw Error(formatProdErrorMessage(90))
                                updateInput(
                                    otherNode,
                                    otherProps.value,
                                    otherProps.defaultValue,
                                    otherProps.defaultValue,
                                    otherProps.checked,
                                    otherProps.defaultChecked,
                                    otherProps.type,
                                    otherProps.name
                                )
                            }
                        }
                        for (
                            internalInstance = 0;
                            internalInstance < props.length;
                            internalInstance++
                        )
                            (otherNode = props[internalInstance]),
                                otherNode.form === target.form && updateValueIfChanged(otherNode)
                    }
                    break a
                case 'textarea':
                    updateTextarea(target, props.value, props.defaultValue)
                    break a
                case 'select':
                    ;(internalInstance = props.value),
                        null != internalInstance &&
                            updateOptions(target, !!props.multiple, internalInstance, false)
            }
        }
    }
    var isInsideEventHandler = false
    function batchedUpdates$1(fn, a2, b) {
        if (isInsideEventHandler) return fn(a2, b)
        isInsideEventHandler = true
        try {
            var JSCompiler_inline_result = fn(a2)
            return JSCompiler_inline_result
        } finally {
            if (((isInsideEventHandler = false), null !== restoreTarget || null !== restoreQueue)) {
                if (
                    (flushSyncWork$1(),
                    restoreTarget &&
                        ((a2 = restoreTarget),
                        (fn = restoreQueue),
                        (restoreQueue = restoreTarget = null),
                        restoreStateOfTarget(a2),
                        fn))
                )
                    for (a2 = 0; a2 < fn.length; a2++) restoreStateOfTarget(fn[a2])
            }
        }
    }
    function getListener(inst, registrationName) {
        var stateNode = inst.stateNode
        if (null === stateNode) return null
        var props = stateNode[internalPropsKey] || null
        if (null === props) return null
        stateNode = props[registrationName]
        a: switch (registrationName) {
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                ;(props = !props.disabled) ||
                    ((inst = inst.type),
                    (props = !(
                        'button' === inst ||
                        'input' === inst ||
                        'select' === inst ||
                        'textarea' === inst
                    )))
                inst = !props
                break a
            default:
                inst = false
        }
        if (inst) return null
        if (stateNode && 'function' !== typeof stateNode)
            throw Error(formatProdErrorMessage(231, registrationName, typeof stateNode))
        return stateNode
    }
    var canUseDOM2 = !(
            'undefined' === typeof window ||
            'undefined' === typeof window.document ||
            'undefined' === typeof window.document.createElement
        ),
        passiveBrowserEventsSupported = false
    if (canUseDOM2)
        try {
            var options2 = {}
            Object.defineProperty(options2, 'passive', {
                get: function () {
                    passiveBrowserEventsSupported = true
                }
            })
            window.addEventListener('test', options2, options2)
            window.removeEventListener('test', options2, options2)
        } catch (e) {
            passiveBrowserEventsSupported = false
        }
    var root = null,
        startText = null,
        fallbackText = null
    function getData() {
        if (fallbackText) return fallbackText
        var start,
            startValue = startText,
            startLength = startValue.length,
            end,
            endValue = 'value' in root ? root.value : root.textContent,
            endLength = endValue.length
        for (start = 0; start < startLength && startValue[start] === endValue[start]; start++);
        var minEnd = startLength - start
        for (
            end = 1;
            end <= minEnd && startValue[startLength - end] === endValue[endLength - end];
            end++
        );
        return (fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0))
    }
    function getEventCharCode(nativeEvent) {
        var keyCode = nativeEvent.keyCode
        'charCode' in nativeEvent
            ? ((nativeEvent = nativeEvent.charCode),
              0 === nativeEvent && 13 === keyCode && (nativeEvent = 13))
            : (nativeEvent = keyCode)
        10 === nativeEvent && (nativeEvent = 13)
        return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0
    }
    function functionThatReturnsTrue() {
        return true
    }
    function functionThatReturnsFalse() {
        return false
    }
    function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(
            reactName,
            reactEventType,
            targetInst,
            nativeEvent,
            nativeEventTarget
        ) {
            this._reactName = reactName
            this._targetInst = targetInst
            this.type = reactEventType
            this.nativeEvent = nativeEvent
            this.target = nativeEventTarget
            this.currentTarget = null
            for (var propName in Interface)
                Interface.hasOwnProperty(propName) &&
                    ((reactName = Interface[propName]),
                    (this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]))
            this.isDefaultPrevented = (
                null != nativeEvent.defaultPrevented
                    ? nativeEvent.defaultPrevented
                    : false === nativeEvent.returnValue
            )
                ? functionThatReturnsTrue
                : functionThatReturnsFalse
            this.isPropagationStopped = functionThatReturnsFalse
            return this
        }
        assign2(SyntheticBaseEvent.prototype, {
            preventDefault: function () {
                this.defaultPrevented = true
                var event = this.nativeEvent
                event &&
                    (event.preventDefault
                        ? event.preventDefault()
                        : 'unknown' !== typeof event.returnValue && (event.returnValue = false),
                    (this.isDefaultPrevented = functionThatReturnsTrue))
            },
            stopPropagation: function () {
                var event = this.nativeEvent
                event &&
                    (event.stopPropagation
                        ? event.stopPropagation()
                        : 'unknown' !== typeof event.cancelBubble && (event.cancelBubble = true),
                    (this.isPropagationStopped = functionThatReturnsTrue))
            },
            persist: function () {},
            isPersistent: functionThatReturnsTrue
        })
        return SyntheticBaseEvent
    }
    var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function (event) {
                return event.timeStamp || Date.now()
            },
            defaultPrevented: 0,
            isTrusted: 0
        },
        SyntheticEvent = createSyntheticEvent(EventInterface),
        UIEventInterface = assign2({}, EventInterface, { view: 0, detail: 0 }),
        SyntheticUIEvent = createSyntheticEvent(UIEventInterface),
        lastMovementX,
        lastMovementY,
        lastMouseEvent,
        MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function (event) {
                return void 0 === event.relatedTarget
                    ? event.fromElement === event.srcElement
                        ? event.toElement
                        : event.fromElement
                    : event.relatedTarget
            },
            movementX: function (event) {
                if ('movementX' in event) return event.movementX
                event !== lastMouseEvent &&
                    (lastMouseEvent && 'mousemove' === event.type
                        ? ((lastMovementX = event.screenX - lastMouseEvent.screenX),
                          (lastMovementY = event.screenY - lastMouseEvent.screenY))
                        : (lastMovementY = lastMovementX = 0),
                    (lastMouseEvent = event))
                return lastMovementX
            },
            movementY: function (event) {
                return 'movementY' in event ? event.movementY : lastMovementY
            }
        }),
        SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface),
        DragEventInterface = assign2({}, MouseEventInterface, { dataTransfer: 0 }),
        SyntheticDragEvent = createSyntheticEvent(DragEventInterface),
        FocusEventInterface = assign2({}, UIEventInterface, { relatedTarget: 0 }),
        SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface),
        AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
        }),
        SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface),
        ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function (event) {
                return 'clipboardData' in event ? event.clipboardData : window.clipboardData
            }
        }),
        SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface),
        CompositionEventInterface = assign2({}, EventInterface, { data: 0 }),
        SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface),
        normalizeKey = {
            Esc: 'Escape',
            Spacebar: ' ',
            Left: 'ArrowLeft',
            Up: 'ArrowUp',
            Right: 'ArrowRight',
            Down: 'ArrowDown',
            Del: 'Delete',
            Win: 'OS',
            Menu: 'ContextMenu',
            Apps: 'ContextMenu',
            Scroll: 'ScrollLock',
            MozPrintableKey: 'Unidentified'
        },
        translateToKey = {
            8: 'Backspace',
            9: 'Tab',
            12: 'Clear',
            13: 'Enter',
            16: 'Shift',
            17: 'Control',
            18: 'Alt',
            19: 'Pause',
            20: 'CapsLock',
            27: 'Escape',
            32: ' ',
            33: 'PageUp',
            34: 'PageDown',
            35: 'End',
            36: 'Home',
            37: 'ArrowLeft',
            38: 'ArrowUp',
            39: 'ArrowRight',
            40: 'ArrowDown',
            45: 'Insert',
            46: 'Delete',
            112: 'F1',
            113: 'F2',
            114: 'F3',
            115: 'F4',
            116: 'F5',
            117: 'F6',
            118: 'F7',
            119: 'F8',
            120: 'F9',
            121: 'F10',
            122: 'F11',
            123: 'F12',
            144: 'NumLock',
            145: 'ScrollLock',
            224: 'Meta'
        },
        modifierKeyToProp = {
            Alt: 'altKey',
            Control: 'ctrlKey',
            Meta: 'metaKey',
            Shift: 'shiftKey'
        }
    function modifierStateGetter(keyArg) {
        var nativeEvent = this.nativeEvent
        return nativeEvent.getModifierState
            ? nativeEvent.getModifierState(keyArg)
            : (keyArg = modifierKeyToProp[keyArg])
              ? !!nativeEvent[keyArg]
              : false
    }
    function getEventModifierState() {
        return modifierStateGetter
    }
    var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: function (nativeEvent) {
                if (nativeEvent.key) {
                    var key = normalizeKey[nativeEvent.key] || nativeEvent.key
                    if ('Unidentified' !== key) return key
                }
                return 'keypress' === nativeEvent.type
                    ? ((nativeEvent = getEventCharCode(nativeEvent)),
                      13 === nativeEvent ? 'Enter' : String.fromCharCode(nativeEvent))
                    : 'keydown' === nativeEvent.type || 'keyup' === nativeEvent.type
                      ? translateToKey[nativeEvent.keyCode] || 'Unidentified'
                      : ''
            },
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function (event) {
                return 'keypress' === event.type ? getEventCharCode(event) : 0
            },
            keyCode: function (event) {
                return 'keydown' === event.type || 'keyup' === event.type ? event.keyCode : 0
            },
            which: function (event) {
                return 'keypress' === event.type
                    ? getEventCharCode(event)
                    : 'keydown' === event.type || 'keyup' === event.type
                      ? event.keyCode
                      : 0
            }
        }),
        SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface),
        PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
        }),
        SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface),
        TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
        }),
        SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface),
        TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
        }),
        SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface),
        WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function (event) {
                return 'deltaX' in event
                    ? event.deltaX
                    : 'wheelDeltaX' in event
                      ? -event.wheelDeltaX
                      : 0
            },
            deltaY: function (event) {
                return 'deltaY' in event
                    ? event.deltaY
                    : 'wheelDeltaY' in event
                      ? -event.wheelDeltaY
                      : 'wheelDelta' in event
                        ? -event.wheelDelta
                        : 0
            },
            deltaZ: 0,
            deltaMode: 0
        }),
        SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface),
        ToggleEventInterface = assign2({}, EventInterface, {
            newState: 0,
            oldState: 0
        }),
        SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface),
        END_KEYCODES = [9, 13, 27, 32],
        canUseCompositionEvent = canUseDOM2 && 'CompositionEvent' in window,
        documentMode = null
    canUseDOM2 && 'documentMode' in document && (documentMode = document.documentMode)
    var canUseTextInputEvent = canUseDOM2 && 'TextEvent' in window && !documentMode,
        useFallbackCompositionData =
            canUseDOM2 &&
            (!canUseCompositionEvent || (documentMode && 8 < documentMode && 11 >= documentMode)),
        SPACEBAR_CHAR = String.fromCharCode(32),
        hasSpaceKeypress = false
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
            case 'keyup':
                return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode)
            case 'keydown':
                return 229 !== nativeEvent.keyCode
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                return true
            default:
                return false
        }
    }
    function getDataFromCustomEvent(nativeEvent) {
        nativeEvent = nativeEvent.detail
        return 'object' === typeof nativeEvent && 'data' in nativeEvent ? nativeEvent.data : null
    }
    var isComposing = false
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent)
            case 'keypress':
                if (32 !== nativeEvent.which) return null
                hasSpaceKeypress = true
                return SPACEBAR_CHAR
            case 'textInput':
                return (
                    (domEventName = nativeEvent.data),
                    domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName
                )
            default:
                return null
        }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing)
            return 'compositionend' === domEventName ||
                (!canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent))
                ? ((domEventName = getData()),
                  (fallbackText = startText = root = null),
                  (isComposing = false),
                  domEventName)
                : null
        switch (domEventName) {
            case 'paste':
                return null
            case 'keypress':
                if (
                    !(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) ||
                    (nativeEvent.ctrlKey && nativeEvent.altKey)
                ) {
                    if (nativeEvent.char && 1 < nativeEvent.char.length) return nativeEvent.char
                    if (nativeEvent.which) return String.fromCharCode(nativeEvent.which)
                }
                return null
            case 'compositionend':
                return useFallbackCompositionData && 'ko' !== nativeEvent.locale
                    ? null
                    : nativeEvent.data
            default:
                return null
        }
    }
    var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    }
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase()
        return 'input' === nodeName
            ? !!supportedInputTypes[elem.type]
            : 'textarea' === nodeName
              ? true
              : false
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        restoreTarget
            ? restoreQueue
                ? restoreQueue.push(target)
                : (restoreQueue = [target])
            : (restoreTarget = target)
        inst = accumulateTwoPhaseListeners(inst, 'onChange')
        0 < inst.length &&
            ((nativeEvent = new SyntheticEvent('onChange', 'change', null, nativeEvent, target)),
            dispatchQueue.push({ event: nativeEvent, listeners: inst }))
    }
    var activeElement$1 = null,
        activeElementInst$1 = null
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0)
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst)
        if (updateValueIfChanged(targetNode)) return targetInst
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if ('change' === domEventName) return targetInst
    }
    var isInputEventSupported = false
    if (canUseDOM2) {
        var JSCompiler_inline_result$jscomp$282
        if (canUseDOM2) {
            var isSupported$jscomp$inline_417 = 'oninput' in document
            if (!isSupported$jscomp$inline_417) {
                var element$jscomp$inline_418 = document.createElement('div')
                element$jscomp$inline_418.setAttribute('oninput', 'return;')
                isSupported$jscomp$inline_417 =
                    'function' === typeof element$jscomp$inline_418.oninput
            }
            JSCompiler_inline_result$jscomp$282 = isSupported$jscomp$inline_417
        } else JSCompiler_inline_result$jscomp$282 = false
        isInputEventSupported =
            JSCompiler_inline_result$jscomp$282 &&
            (!document.documentMode || 9 < document.documentMode)
    }
    function stopWatchingForValueChange() {
        activeElement$1 &&
            (activeElement$1.detachEvent('onpropertychange', handlePropertyChange),
            (activeElementInst$1 = activeElement$1 = null))
    }
    function handlePropertyChange(nativeEvent) {
        if ('value' === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
            var dispatchQueue = []
            createAndAccumulateChangeEvent(
                dispatchQueue,
                activeElementInst$1,
                nativeEvent,
                getEventTarget(nativeEvent)
            )
            batchedUpdates$1(runEventInBatch, dispatchQueue)
        }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        'focusin' === domEventName
            ? (stopWatchingForValueChange(),
              (activeElement$1 = target),
              (activeElementInst$1 = targetInst),
              activeElement$1.attachEvent('onpropertychange', handlePropertyChange))
            : 'focusout' === domEventName && stopWatchingForValueChange()
    }
    function getTargetInstForInputEventPolyfill(domEventName) {
        if (
            'selectionchange' === domEventName ||
            'keyup' === domEventName ||
            'keydown' === domEventName
        )
            return getInstIfValueChanged(activeElementInst$1)
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if ('click' === domEventName) return getInstIfValueChanged(targetInst)
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if ('input' === domEventName || 'change' === domEventName)
            return getInstIfValueChanged(targetInst)
    }
    function is(x2, y2) {
        return (x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2)) || (x2 !== x2 && y2 !== y2)
    }
    var objectIs = 'function' === typeof Object.is ? Object.is : is
    function shallowEqual2(objA, objB) {
        if (objectIs(objA, objB)) return true
        if ('object' !== typeof objA || null === objA || 'object' !== typeof objB || null === objB)
            return false
        var keysA = Object.keys(objA),
            keysB = Object.keys(objB)
        if (keysA.length !== keysB.length) return false
        for (keysB = 0; keysB < keysA.length; keysB++) {
            var currentKey = keysA[keysB]
            if (
                !hasOwnProperty2.call(objB, currentKey) ||
                !objectIs(objA[currentKey], objB[currentKey])
            )
                return false
        }
        return true
    }
    function getLeafNode(node2) {
        for (; node2 && node2.firstChild; ) node2 = node2.firstChild
        return node2
    }
    function getNodeForCharacterOffset(root2, offset) {
        var node2 = getLeafNode(root2)
        root2 = 0
        for (var nodeEnd; node2; ) {
            if (3 === node2.nodeType) {
                nodeEnd = root2 + node2.textContent.length
                if (root2 <= offset && nodeEnd >= offset)
                    return { node: node2, offset: offset - root2 }
                root2 = nodeEnd
            }
            a: {
                for (; node2; ) {
                    if (node2.nextSibling) {
                        node2 = node2.nextSibling
                        break a
                    }
                    node2 = node2.parentNode
                }
                node2 = void 0
            }
            node2 = getLeafNode(node2)
        }
    }
    function containsNode(outerNode, innerNode) {
        return outerNode && innerNode
            ? outerNode === innerNode
                ? true
                : outerNode && 3 === outerNode.nodeType
                  ? false
                  : innerNode && 3 === innerNode.nodeType
                    ? containsNode(outerNode, innerNode.parentNode)
                    : 'contains' in outerNode
                      ? outerNode.contains(innerNode)
                      : outerNode.compareDocumentPosition
                        ? !!(outerNode.compareDocumentPosition(innerNode) & 16)
                        : false
            : false
    }
    function getActiveElementDeep(containerInfo) {
        containerInfo =
            null != containerInfo &&
            null != containerInfo.ownerDocument &&
            null != containerInfo.ownerDocument.defaultView
                ? containerInfo.ownerDocument.defaultView
                : window
        for (
            var element = getActiveElement(containerInfo.document);
            element instanceof containerInfo.HTMLIFrameElement;

        ) {
            try {
                var JSCompiler_inline_result =
                    'string' === typeof element.contentWindow.location.href
            } catch (err) {
                JSCompiler_inline_result = false
            }
            if (JSCompiler_inline_result) containerInfo = element.contentWindow
            else break
            element = getActiveElement(containerInfo.document)
        }
        return element
    }
    function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase()
        return (
            nodeName &&
            (('input' === nodeName &&
                ('text' === elem.type ||
                    'search' === elem.type ||
                    'tel' === elem.type ||
                    'url' === elem.type ||
                    'password' === elem.type)) ||
                'textarea' === nodeName ||
                'true' === elem.contentEditable)
        )
    }
    var skipSelectionChangeEvent =
            canUseDOM2 && 'documentMode' in document && 11 >= document.documentMode,
        activeElement = null,
        activeElementInst = null,
        lastSelection = null,
        mouseDown = false
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc =
            nativeEventTarget.window === nativeEventTarget
                ? nativeEventTarget.document
                : 9 === nativeEventTarget.nodeType
                  ? nativeEventTarget
                  : nativeEventTarget.ownerDocument
        mouseDown ||
            null == activeElement ||
            activeElement !== getActiveElement(doc) ||
            ((doc = activeElement),
            'selectionStart' in doc && hasSelectionCapabilities(doc)
                ? (doc = { start: doc.selectionStart, end: doc.selectionEnd })
                : ((doc = (
                      (doc.ownerDocument && doc.ownerDocument.defaultView) ||
                      window
                  ).getSelection()),
                  (doc = {
                      anchorNode: doc.anchorNode,
                      anchorOffset: doc.anchorOffset,
                      focusNode: doc.focusNode,
                      focusOffset: doc.focusOffset
                  })),
            (lastSelection && shallowEqual2(lastSelection, doc)) ||
                ((lastSelection = doc),
                (doc = accumulateTwoPhaseListeners(activeElementInst, 'onSelect')),
                0 < doc.length &&
                    ((nativeEvent = new SyntheticEvent(
                        'onSelect',
                        'select',
                        null,
                        nativeEvent,
                        nativeEventTarget
                    )),
                    dispatchQueue.push({ event: nativeEvent, listeners: doc }),
                    (nativeEvent.target = activeElement))))
    }
    function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {}
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase()
        prefixes2['Webkit' + styleProp] = 'webkit' + eventName
        prefixes2['Moz' + styleProp] = 'moz' + eventName
        return prefixes2
    }
    var vendorPrefixes = {
            animationend: makePrefixMap('Animation', 'AnimationEnd'),
            animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
            animationstart: makePrefixMap('Animation', 'AnimationStart'),
            transitionrun: makePrefixMap('Transition', 'TransitionRun'),
            transitionstart: makePrefixMap('Transition', 'TransitionStart'),
            transitioncancel: makePrefixMap('Transition', 'TransitionCancel'),
            transitionend: makePrefixMap('Transition', 'TransitionEnd')
        },
        prefixedEventNames = {},
        style = {}
    canUseDOM2 &&
        ((style = document.createElement('div').style),
        'AnimationEvent' in window ||
            (delete vendorPrefixes.animationend.animation,
            delete vendorPrefixes.animationiteration.animation,
            delete vendorPrefixes.animationstart.animation),
        'TransitionEvent' in window || delete vendorPrefixes.transitionend.transition)
    function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName]
        if (!vendorPrefixes[eventName]) return eventName
        var prefixMap = vendorPrefixes[eventName],
            styleProp
        for (styleProp in prefixMap)
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
                return (prefixedEventNames[eventName] = prefixMap[styleProp])
        return eventName
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend'),
        ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration'),
        ANIMATION_START = getVendorPrefixedEventName('animationstart'),
        TRANSITION_RUN = getVendorPrefixedEventName('transitionrun'),
        TRANSITION_START = getVendorPrefixedEventName('transitionstart'),
        TRANSITION_CANCEL = getVendorPrefixedEventName('transitioncancel'),
        TRANSITION_END = getVendorPrefixedEventName('transitionend'),
        topLevelEventsToReactNames = /* @__PURE__ */ new Map(),
        simpleEventPluginEvents =
            'abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel'.split(
                ' '
            )
    simpleEventPluginEvents.push('scrollEnd')
    function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName)
        registerTwoPhaseEvent(reactName, [domEventName])
    }
    var CapturedStacks = /* @__PURE__ */ new WeakMap()
    function createCapturedValueAtFiber(value, source) {
        if ('object' === typeof value && null !== value) {
            var existing = CapturedStacks.get(value)
            if (void 0 !== existing) return existing
            source = {
                value,
                source,
                stack: getStackByFiberInDevAndProd(source)
            }
            CapturedStacks.set(value, source)
            return source
        }
        return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
        }
    }
    var concurrentQueues = [],
        concurrentQueuesIndex = 0,
        concurrentlyUpdatedLanes = 0
    function finishQueueingConcurrentUpdates() {
        for (
            var endIndex = concurrentQueuesIndex,
                i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);
            i < endIndex;

        ) {
            var fiber = concurrentQueues[i]
            concurrentQueues[i++] = null
            var queue = concurrentQueues[i]
            concurrentQueues[i++] = null
            var update = concurrentQueues[i]
            concurrentQueues[i++] = null
            var lane = concurrentQueues[i]
            concurrentQueues[i++] = null
            if (null !== queue && null !== update) {
                var pending = queue.pending
                null === pending
                    ? (update.next = update)
                    : ((update.next = pending.next), (pending.next = update))
                queue.pending = update
            }
            0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane)
        }
    }
    function enqueueUpdate$1(fiber, queue, update, lane) {
        concurrentQueues[concurrentQueuesIndex++] = fiber
        concurrentQueues[concurrentQueuesIndex++] = queue
        concurrentQueues[concurrentQueuesIndex++] = update
        concurrentQueues[concurrentQueuesIndex++] = lane
        concurrentlyUpdatedLanes |= lane
        fiber.lanes |= lane
        fiber = fiber.alternate
        null !== fiber && (fiber.lanes |= lane)
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        enqueueUpdate$1(fiber, queue, update, lane)
        return getRootForUpdatedFiber(fiber)
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
        enqueueUpdate$1(fiber, null, null, lane)
        return getRootForUpdatedFiber(fiber)
    }
    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
        sourceFiber.lanes |= lane
        var alternate = sourceFiber.alternate
        null !== alternate && (alternate.lanes |= lane)
        for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
            (parent.childLanes |= lane),
                (alternate = parent.alternate),
                null !== alternate && (alternate.childLanes |= lane),
                22 === parent.tag &&
                    ((sourceFiber = parent.stateNode),
                    null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = true)),
                (sourceFiber = parent),
                (parent = parent.return)
        return 3 === sourceFiber.tag
            ? ((parent = sourceFiber.stateNode),
              isHidden &&
                  null !== update &&
                  ((isHidden = 31 - clz32(lane)),
                  (sourceFiber = parent.hiddenUpdates),
                  (alternate = sourceFiber[isHidden]),
                  null === alternate ? (sourceFiber[isHidden] = [update]) : alternate.push(update),
                  (update.lane = lane | 536870912)),
              parent)
            : null
    }
    function getRootForUpdatedFiber(sourceFiber) {
        if (50 < nestedUpdateCount)
            throw (
                ((nestedUpdateCount = 0),
                (rootWithNestedUpdates = null),
                Error(formatProdErrorMessage(185)))
            )
        for (var parent = sourceFiber.return; null !== parent; )
            (sourceFiber = parent), (parent = sourceFiber.return)
        return 3 === sourceFiber.tag ? sourceFiber.stateNode : null
    }
    var emptyContextObject = {}
    function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag
        this.key = key
        this.sibling =
            this.child =
            this.return =
            this.stateNode =
            this.type =
            this.elementType =
                null
        this.index = 0
        this.refCleanup = this.ref = null
        this.pendingProps = pendingProps
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null
        this.mode = mode
        this.subtreeFlags = this.flags = 0
        this.deletions = null
        this.childLanes = this.lanes = 0
        this.alternate = null
    }
    function createFiberImplClass(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode)
    }
    function shouldConstruct(Component) {
        Component = Component.prototype
        return !(!Component || !Component.isReactComponent)
    }
    function createWorkInProgress(current, pendingProps) {
        var workInProgress2 = current.alternate
        null === workInProgress2
            ? ((workInProgress2 = createFiberImplClass(
                  current.tag,
                  pendingProps,
                  current.key,
                  current.mode
              )),
              (workInProgress2.elementType = current.elementType),
              (workInProgress2.type = current.type),
              (workInProgress2.stateNode = current.stateNode),
              (workInProgress2.alternate = current),
              (current.alternate = workInProgress2))
            : ((workInProgress2.pendingProps = pendingProps),
              (workInProgress2.type = current.type),
              (workInProgress2.flags = 0),
              (workInProgress2.subtreeFlags = 0),
              (workInProgress2.deletions = null))
        workInProgress2.flags = current.flags & 65011712
        workInProgress2.childLanes = current.childLanes
        workInProgress2.lanes = current.lanes
        workInProgress2.child = current.child
        workInProgress2.memoizedProps = current.memoizedProps
        workInProgress2.memoizedState = current.memoizedState
        workInProgress2.updateQueue = current.updateQueue
        pendingProps = current.dependencies
        workInProgress2.dependencies =
            null === pendingProps
                ? null
                : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext }
        workInProgress2.sibling = current.sibling
        workInProgress2.index = current.index
        workInProgress2.ref = current.ref
        workInProgress2.refCleanup = current.refCleanup
        return workInProgress2
    }
    function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= 65011714
        var current = workInProgress2.alternate
        null === current
            ? ((workInProgress2.childLanes = 0),
              (workInProgress2.lanes = renderLanes2),
              (workInProgress2.child = null),
              (workInProgress2.subtreeFlags = 0),
              (workInProgress2.memoizedProps = null),
              (workInProgress2.memoizedState = null),
              (workInProgress2.updateQueue = null),
              (workInProgress2.dependencies = null),
              (workInProgress2.stateNode = null))
            : ((workInProgress2.childLanes = current.childLanes),
              (workInProgress2.lanes = current.lanes),
              (workInProgress2.child = current.child),
              (workInProgress2.subtreeFlags = 0),
              (workInProgress2.deletions = null),
              (workInProgress2.memoizedProps = current.memoizedProps),
              (workInProgress2.memoizedState = current.memoizedState),
              (workInProgress2.updateQueue = current.updateQueue),
              (workInProgress2.type = current.type),
              (renderLanes2 = current.dependencies),
              (workInProgress2.dependencies =
                  null === renderLanes2
                      ? null
                      : {
                            lanes: renderLanes2.lanes,
                            firstContext: renderLanes2.firstContext
                        }))
        return workInProgress2
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = 0
        owner = type
        if ('function' === typeof type) shouldConstruct(type) && (fiberTag = 1)
        else if ('string' === typeof type)
            fiberTag = isHostHoistableType(type, pendingProps, contextStackCursor.current)
                ? 26
                : 'html' === type || 'head' === type || 'body' === type
                  ? 27
                  : 5
        else
            a: switch (type) {
                case REACT_ACTIVITY_TYPE:
                    return (
                        (type = createFiberImplClass(31, pendingProps, key, mode)),
                        (type.elementType = REACT_ACTIVITY_TYPE),
                        (type.lanes = lanes),
                        type
                    )
                case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key)
                case REACT_STRICT_MODE_TYPE:
                    fiberTag = 8
                    mode |= 24
                    break
                case REACT_PROFILER_TYPE:
                    return (
                        (type = createFiberImplClass(12, pendingProps, key, mode | 2)),
                        (type.elementType = REACT_PROFILER_TYPE),
                        (type.lanes = lanes),
                        type
                    )
                case REACT_SUSPENSE_TYPE:
                    return (
                        (type = createFiberImplClass(13, pendingProps, key, mode)),
                        (type.elementType = REACT_SUSPENSE_TYPE),
                        (type.lanes = lanes),
                        type
                    )
                case REACT_SUSPENSE_LIST_TYPE:
                    return (
                        (type = createFiberImplClass(19, pendingProps, key, mode)),
                        (type.elementType = REACT_SUSPENSE_LIST_TYPE),
                        (type.lanes = lanes),
                        type
                    )
                default:
                    if ('object' === typeof type && null !== type)
                        switch (type.$$typeof) {
                            case REACT_PROVIDER_TYPE:
                            case REACT_CONTEXT_TYPE:
                                fiberTag = 10
                                break a
                            case REACT_CONSUMER_TYPE:
                                fiberTag = 9
                                break a
                            case REACT_FORWARD_REF_TYPE:
                                fiberTag = 11
                                break a
                            case REACT_MEMO_TYPE:
                                fiberTag = 14
                                break a
                            case REACT_LAZY_TYPE:
                                fiberTag = 16
                                owner = null
                                break a
                        }
                    fiberTag = 29
                    pendingProps = Error(
                        formatProdErrorMessage(130, null === type ? 'null' : typeof type, '')
                    )
                    owner = null
            }
        key = createFiberImplClass(fiberTag, pendingProps, key, mode)
        key.elementType = type
        key.type = owner
        key.lanes = lanes
        return key
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        elements = createFiberImplClass(7, elements, key, mode)
        elements.lanes = lanes
        return elements
    }
    function createFiberFromText(content, mode, lanes) {
        content = createFiberImplClass(6, content, null, mode)
        content.lanes = lanes
        return content
    }
    function createFiberFromPortal(portal, mode, lanes) {
        mode = createFiberImplClass(
            4,
            null !== portal.children ? portal.children : [],
            portal.key,
            mode
        )
        mode.lanes = lanes
        mode.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
        }
        return mode
    }
    var forkStack = [],
        forkStackIndex = 0,
        treeForkProvider = null,
        treeForkCount = 0,
        idStack = [],
        idStackIndex = 0,
        treeContextProvider = null,
        treeContextId = 1,
        treeContextOverflow = ''
    function pushTreeFork(workInProgress2, totalChildren) {
        forkStack[forkStackIndex++] = treeForkCount
        forkStack[forkStackIndex++] = treeForkProvider
        treeForkProvider = workInProgress2
        treeForkCount = totalChildren
    }
    function pushTreeId(workInProgress2, totalChildren, index3) {
        idStack[idStackIndex++] = treeContextId
        idStack[idStackIndex++] = treeContextOverflow
        idStack[idStackIndex++] = treeContextProvider
        treeContextProvider = workInProgress2
        var baseIdWithLeadingBit = treeContextId
        workInProgress2 = treeContextOverflow
        var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1
        baseIdWithLeadingBit &= ~(1 << baseLength)
        index3 += 1
        var length2 = 32 - clz32(totalChildren) + baseLength
        if (30 < length2) {
            var numberOfOverflowBits = baseLength - (baseLength % 5)
            length2 = (baseIdWithLeadingBit & ((1 << numberOfOverflowBits) - 1)).toString(32)
            baseIdWithLeadingBit >>= numberOfOverflowBits
            baseLength -= numberOfOverflowBits
            treeContextId =
                (1 << (32 - clz32(totalChildren) + baseLength)) |
                (index3 << baseLength) |
                baseIdWithLeadingBit
            treeContextOverflow = length2 + workInProgress2
        } else
            (treeContextId = (1 << length2) | (index3 << baseLength) | baseIdWithLeadingBit),
                (treeContextOverflow = workInProgress2)
    }
    function pushMaterializedTreeId(workInProgress2) {
        null !== workInProgress2.return &&
            (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0))
    }
    function popTreeContext(workInProgress2) {
        for (; workInProgress2 === treeForkProvider; )
            (treeForkProvider = forkStack[--forkStackIndex]),
                (forkStack[forkStackIndex] = null),
                (treeForkCount = forkStack[--forkStackIndex]),
                (forkStack[forkStackIndex] = null)
        for (; workInProgress2 === treeContextProvider; )
            (treeContextProvider = idStack[--idStackIndex]),
                (idStack[idStackIndex] = null),
                (treeContextOverflow = idStack[--idStackIndex]),
                (idStack[idStackIndex] = null),
                (treeContextId = idStack[--idStackIndex]),
                (idStack[idStackIndex] = null)
    }
    var hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = false,
        hydrationErrors = null,
        rootOrSingletonContext = false,
        HydrationMismatchException = Error(formatProdErrorMessage(519))
    function throwOnHydrationMismatch(fiber) {
        var error = Error(formatProdErrorMessage(418, ''))
        queueHydrationError(createCapturedValueAtFiber(error, fiber))
        throw HydrationMismatchException
    }
    function prepareToHydrateHostInstance(fiber) {
        var instance = fiber.stateNode,
            type = fiber.type,
            props = fiber.memoizedProps
        instance[internalInstanceKey] = fiber
        instance[internalPropsKey] = props
        switch (type) {
            case 'dialog':
                listenToNonDelegatedEvent('cancel', instance)
                listenToNonDelegatedEvent('close', instance)
                break
            case 'iframe':
            case 'object':
            case 'embed':
                listenToNonDelegatedEvent('load', instance)
                break
            case 'video':
            case 'audio':
                for (type = 0; type < mediaEventTypes.length; type++)
                    listenToNonDelegatedEvent(mediaEventTypes[type], instance)
                break
            case 'source':
                listenToNonDelegatedEvent('error', instance)
                break
            case 'img':
            case 'image':
            case 'link':
                listenToNonDelegatedEvent('error', instance)
                listenToNonDelegatedEvent('load', instance)
                break
            case 'details':
                listenToNonDelegatedEvent('toggle', instance)
                break
            case 'input':
                listenToNonDelegatedEvent('invalid', instance)
                initInput(
                    instance,
                    props.value,
                    props.defaultValue,
                    props.checked,
                    props.defaultChecked,
                    props.type,
                    props.name,
                    true
                )
                track(instance)
                break
            case 'select':
                listenToNonDelegatedEvent('invalid', instance)
                break
            case 'textarea':
                listenToNonDelegatedEvent('invalid', instance),
                    initTextarea(instance, props.value, props.defaultValue, props.children),
                    track(instance)
        }
        type = props.children
        ;('string' !== typeof type && 'number' !== typeof type && 'bigint' !== typeof type) ||
        instance.textContent === '' + type ||
        true === props.suppressHydrationWarning ||
        checkForUnmatchedText(instance.textContent, type)
            ? (null != props.popover &&
                  (listenToNonDelegatedEvent('beforetoggle', instance),
                  listenToNonDelegatedEvent('toggle', instance)),
              null != props.onScroll && listenToNonDelegatedEvent('scroll', instance),
              null != props.onScrollEnd && listenToNonDelegatedEvent('scrollend', instance),
              null != props.onClick && (instance.onclick = noop$12),
              (instance = true))
            : (instance = false)
        instance || throwOnHydrationMismatch(fiber)
    }
    function popToNextHostParent(fiber) {
        for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
            switch (hydrationParentFiber.tag) {
                case 5:
                case 13:
                    rootOrSingletonContext = false
                    return
                case 27:
                case 3:
                    rootOrSingletonContext = true
                    return
                default:
                    hydrationParentFiber = hydrationParentFiber.return
            }
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return false
        if (!isHydrating) return popToNextHostParent(fiber), (isHydrating = true), false
        var tag = fiber.tag,
            JSCompiler_temp
        if ((JSCompiler_temp = 3 !== tag && 27 !== tag)) {
            if ((JSCompiler_temp = 5 === tag))
                (JSCompiler_temp = fiber.type),
                    (JSCompiler_temp =
                        !('form' !== JSCompiler_temp && 'button' !== JSCompiler_temp) ||
                        shouldSetTextContent(fiber.type, fiber.memoizedProps))
            JSCompiler_temp = !JSCompiler_temp
        }
        JSCompiler_temp && nextHydratableInstance && throwOnHydrationMismatch(fiber)
        popToNextHostParent(fiber)
        if (13 === tag) {
            fiber = fiber.memoizedState
            fiber = null !== fiber ? fiber.dehydrated : null
            if (!fiber) throw Error(formatProdErrorMessage(317))
            a: {
                fiber = fiber.nextSibling
                for (tag = 0; fiber; ) {
                    if (8 === fiber.nodeType)
                        if (((JSCompiler_temp = fiber.data), '/$' === JSCompiler_temp)) {
                            if (0 === tag) {
                                nextHydratableInstance = getNextHydratable(fiber.nextSibling)
                                break a
                            }
                            tag--
                        } else
                            ('$' !== JSCompiler_temp &&
                                '$!' !== JSCompiler_temp &&
                                '$?' !== JSCompiler_temp) ||
                                tag++
                    fiber = fiber.nextSibling
                }
                nextHydratableInstance = null
            }
        } else
            27 === tag
                ? ((tag = nextHydratableInstance),
                  isSingletonScope(fiber.type)
                      ? ((fiber = previousHydratableOnEnteringScopedSingleton),
                        (previousHydratableOnEnteringScopedSingleton = null),
                        (nextHydratableInstance = fiber))
                      : (nextHydratableInstance = tag))
                : (nextHydratableInstance = hydrationParentFiber
                      ? getNextHydratable(fiber.stateNode.nextSibling)
                      : null)
        return true
    }
    function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null
        isHydrating = false
    }
    function upgradeHydrationErrorsToRecoverable() {
        var queuedErrors = hydrationErrors
        null !== queuedErrors &&
            (null === workInProgressRootRecoverableErrors
                ? (workInProgressRootRecoverableErrors = queuedErrors)
                : workInProgressRootRecoverableErrors.push.apply(
                      workInProgressRootRecoverableErrors,
                      queuedErrors
                  ),
            (hydrationErrors = null))
        return queuedErrors
    }
    function queueHydrationError(error) {
        null === hydrationErrors ? (hydrationErrors = [error]) : hydrationErrors.push(error)
    }
    var valueCursor = createCursor(null),
        currentlyRenderingFiber$1 = null,
        lastContextDependency = null
    function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue)
        context._currentValue = nextValue
    }
    function popProvider(context) {
        context._currentValue = valueCursor.current
        pop(valueCursor)
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        for (; null !== parent; ) {
            var alternate = parent.alternate
            ;(parent.childLanes & renderLanes2) !== renderLanes2
                ? ((parent.childLanes |= renderLanes2),
                  null !== alternate && (alternate.childLanes |= renderLanes2))
                : null !== alternate &&
                  (alternate.childLanes & renderLanes2) !== renderLanes2 &&
                  (alternate.childLanes |= renderLanes2)
            if (parent === propagationRoot) break
            parent = parent.return
        }
    }
    function propagateContextChanges(
        workInProgress2,
        contexts,
        renderLanes2,
        forcePropagateEntireTree
    ) {
        var fiber = workInProgress2.child
        null !== fiber && (fiber.return = workInProgress2)
        for (; null !== fiber; ) {
            var list = fiber.dependencies
            if (null !== list) {
                var nextFiber = fiber.child
                list = list.firstContext
                a: for (; null !== list; ) {
                    var dependency = list
                    list = fiber
                    for (var i = 0; i < contexts.length; i++)
                        if (dependency.context === contexts[i]) {
                            list.lanes |= renderLanes2
                            dependency = list.alternate
                            null !== dependency && (dependency.lanes |= renderLanes2)
                            scheduleContextWorkOnParentPath(
                                list.return,
                                renderLanes2,
                                workInProgress2
                            )
                            forcePropagateEntireTree || (nextFiber = null)
                            break a
                        }
                    list = dependency.next
                }
            } else if (18 === fiber.tag) {
                nextFiber = fiber.return
                if (null === nextFiber) throw Error(formatProdErrorMessage(341))
                nextFiber.lanes |= renderLanes2
                list = nextFiber.alternate
                null !== list && (list.lanes |= renderLanes2)
                scheduleContextWorkOnParentPath(nextFiber, renderLanes2, workInProgress2)
                nextFiber = null
            } else nextFiber = fiber.child
            if (null !== nextFiber) nextFiber.return = fiber
            else
                for (nextFiber = fiber; null !== nextFiber; ) {
                    if (nextFiber === workInProgress2) {
                        nextFiber = null
                        break
                    }
                    fiber = nextFiber.sibling
                    if (null !== fiber) {
                        fiber.return = nextFiber.return
                        nextFiber = fiber
                        break
                    }
                    nextFiber = nextFiber.return
                }
            fiber = nextFiber
        }
    }
    function propagateParentContextChanges(
        current,
        workInProgress2,
        renderLanes2,
        forcePropagateEntireTree
    ) {
        current = null
        for (var parent = workInProgress2, isInsidePropagationBailout = false; null !== parent; ) {
            if (!isInsidePropagationBailout) {
                if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true
                else if (0 !== (parent.flags & 262144)) break
            }
            if (10 === parent.tag) {
                var currentParent = parent.alternate
                if (null === currentParent) throw Error(formatProdErrorMessage(387))
                currentParent = currentParent.memoizedProps
                if (null !== currentParent) {
                    var context = parent.type
                    objectIs(parent.pendingProps.value, currentParent.value) ||
                        (null !== current ? current.push(context) : (current = [context]))
                }
            } else if (parent === hostTransitionProviderCursor.current) {
                currentParent = parent.alternate
                if (null === currentParent) throw Error(formatProdErrorMessage(387))
                currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState &&
                    (null !== current
                        ? current.push(HostTransitionContext)
                        : (current = [HostTransitionContext]))
            }
            parent = parent.return
        }
        null !== current &&
            propagateContextChanges(
                workInProgress2,
                current,
                renderLanes2,
                forcePropagateEntireTree
            )
        workInProgress2.flags |= 262144
    }
    function checkIfContextChanged(currentDependencies) {
        for (
            currentDependencies = currentDependencies.firstContext;
            null !== currentDependencies;

        ) {
            if (
                !objectIs(
                    currentDependencies.context._currentValue,
                    currentDependencies.memoizedValue
                )
            )
                return true
            currentDependencies = currentDependencies.next
        }
        return false
    }
    function prepareToReadContext(workInProgress2) {
        currentlyRenderingFiber$1 = workInProgress2
        lastContextDependency = null
        workInProgress2 = workInProgress2.dependencies
        null !== workInProgress2 && (workInProgress2.firstContext = null)
    }
    function readContext(context) {
        return readContextForConsumer(currentlyRenderingFiber$1, context)
    }
    function readContextDuringReconciliation(consumer, context) {
        null === currentlyRenderingFiber$1 && prepareToReadContext(consumer)
        return readContextForConsumer(consumer, context)
    }
    function readContextForConsumer(consumer, context) {
        var value = context._currentValue
        context = { context, memoizedValue: value, next: null }
        if (null === lastContextDependency) {
            if (null === consumer) throw Error(formatProdErrorMessage(308))
            lastContextDependency = context
            consumer.dependencies = { lanes: 0, firstContext: context }
            consumer.flags |= 524288
        } else lastContextDependency = lastContextDependency.next = context
        return value
    }
    var AbortControllerLocal =
            'undefined' !== typeof AbortController
                ? AbortController
                : function () {
                      var listeners = [],
                          signal = (this.signal = {
                              aborted: false,
                              addEventListener: function (type, listener) {
                                  listeners.push(listener)
                              }
                          })
                      this.abort = function () {
                          signal.aborted = true
                          listeners.forEach(function (listener) {
                              return listener()
                          })
                      }
                  },
        scheduleCallback$2 = Scheduler.unstable_scheduleCallback,
        NormalPriority = Scheduler.unstable_NormalPriority,
        CacheContext = {
            $$typeof: REACT_CONTEXT_TYPE,
            Consumer: null,
            Provider: null,
            _currentValue: null,
            _currentValue2: null,
            _threadCount: 0
        }
    function createCache3() {
        return {
            controller: new AbortControllerLocal(),
            data: /* @__PURE__ */ new Map(),
            refCount: 0
        }
    }
    function releaseCache(cache) {
        cache.refCount--
        0 === cache.refCount &&
            scheduleCallback$2(NormalPriority, function () {
                cache.controller.abort()
            })
    }
    var currentEntangledListeners = null,
        currentEntangledPendingCount = 0,
        currentEntangledLane = 0,
        currentEntangledActionThenable = null
    function entangleAsyncAction(transition, thenable) {
        if (null === currentEntangledListeners) {
            var entangledListeners = (currentEntangledListeners = [])
            currentEntangledPendingCount = 0
            currentEntangledLane = requestTransitionLane()
            currentEntangledActionThenable = {
                status: 'pending',
                value: void 0,
                then: function (resolve) {
                    entangledListeners.push(resolve)
                }
            }
        }
        currentEntangledPendingCount++
        thenable.then(pingEngtangledActionScope, pingEngtangledActionScope)
        return thenable
    }
    function pingEngtangledActionScope() {
        if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
            null !== currentEntangledActionThenable &&
                (currentEntangledActionThenable.status = 'fulfilled')
            var listeners = currentEntangledListeners
            currentEntangledListeners = null
            currentEntangledLane = 0
            currentEntangledActionThenable = null
            for (var i = 0; i < listeners.length; i++) (0, listeners[i])()
        }
    }
    function chainThenableValue(thenable, result) {
        var listeners = [],
            thenableWithOverride = {
                status: 'pending',
                value: null,
                reason: null,
                then: function (resolve) {
                    listeners.push(resolve)
                }
            }
        thenable.then(
            function () {
                thenableWithOverride.status = 'fulfilled'
                thenableWithOverride.value = result
                for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result)
            },
            function (error) {
                thenableWithOverride.status = 'rejected'
                thenableWithOverride.reason = error
                for (error = 0; error < listeners.length; error++) (0, listeners[error])(void 0)
            }
        )
        return thenableWithOverride
    }
    var prevOnStartTransitionFinish = ReactSharedInternals.S
    ReactSharedInternals.S = function (transition, returnValue) {
        'object' === typeof returnValue &&
            null !== returnValue &&
            'function' === typeof returnValue.then &&
            entangleAsyncAction(transition, returnValue)
        null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue)
    }
    var resumedCache = createCursor(null)
    function peekCacheFromPool() {
        var cacheResumedFromPreviousRender = resumedCache.current
        return null !== cacheResumedFromPreviousRender
            ? cacheResumedFromPreviousRender
            : workInProgressRoot.pooledCache
    }
    function pushTransition(offscreenWorkInProgress, prevCachePool) {
        null === prevCachePool
            ? push(resumedCache, resumedCache.current)
            : push(resumedCache, prevCachePool.pool)
    }
    function getSuspendedCache() {
        var cacheFromPool = peekCacheFromPool()
        return null === cacheFromPool
            ? null
            : { parent: CacheContext._currentValue, pool: cacheFromPool }
    }
    var SuspenseException = Error(formatProdErrorMessage(460)),
        SuspenseyCommitException = Error(formatProdErrorMessage(474)),
        SuspenseActionException = Error(formatProdErrorMessage(542)),
        noopSuspenseyCommitThenable = { then: function () {} }
    function isThenableResolved(thenable) {
        thenable = thenable.status
        return 'fulfilled' === thenable || 'rejected' === thenable
    }
    function noop$3() {}
    function trackUsedThenable(thenableState2, thenable, index3) {
        index3 = thenableState2[index3]
        void 0 === index3
            ? thenableState2.push(thenable)
            : index3 !== thenable && (thenable.then(noop$3, noop$3), (thenable = index3))
        switch (thenable.status) {
            case 'fulfilled':
                return thenable.value
            case 'rejected':
                throw (
                    ((thenableState2 = thenable.reason),
                    checkIfUseWrappedInAsyncCatch(thenableState2),
                    thenableState2)
                )
            default:
                if ('string' === typeof thenable.status) thenable.then(noop$3, noop$3)
                else {
                    thenableState2 = workInProgressRoot
                    if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
                        throw Error(formatProdErrorMessage(482))
                    thenableState2 = thenable
                    thenableState2.status = 'pending'
                    thenableState2.then(
                        function (fulfilledValue) {
                            if ('pending' === thenable.status) {
                                var fulfilledThenable = thenable
                                fulfilledThenable.status = 'fulfilled'
                                fulfilledThenable.value = fulfilledValue
                            }
                        },
                        function (error) {
                            if ('pending' === thenable.status) {
                                var rejectedThenable = thenable
                                rejectedThenable.status = 'rejected'
                                rejectedThenable.reason = error
                            }
                        }
                    )
                }
                switch (thenable.status) {
                    case 'fulfilled':
                        return thenable.value
                    case 'rejected':
                        throw (
                            ((thenableState2 = thenable.reason),
                            checkIfUseWrappedInAsyncCatch(thenableState2),
                            thenableState2)
                        )
                }
                suspendedThenable = thenable
                throw SuspenseException
        }
    }
    var suspendedThenable = null
    function getSuspendedThenable() {
        if (null === suspendedThenable) throw Error(formatProdErrorMessage(459))
        var thenable = suspendedThenable
        suspendedThenable = null
        return thenable
    }
    function checkIfUseWrappedInAsyncCatch(rejectedReason) {
        if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
            throw Error(formatProdErrorMessage(483))
    }
    var hasForceUpdate = false
    function initializeUpdateQueue(fiber) {
        fiber.updateQueue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: { pending: null, lanes: 0, hiddenCallbacks: null },
            callbacks: null
        }
    }
    function cloneUpdateQueue(current, workInProgress2) {
        current = current.updateQueue
        workInProgress2.updateQueue === current &&
            (workInProgress2.updateQueue = {
                baseState: current.baseState,
                firstBaseUpdate: current.firstBaseUpdate,
                lastBaseUpdate: current.lastBaseUpdate,
                shared: current.shared,
                callbacks: null
            })
    }
    function createUpdate(lane) {
        return { lane, tag: 0, payload: null, callback: null, next: null }
    }
    function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue
        if (null === updateQueue) return null
        updateQueue = updateQueue.shared
        if (0 !== (executionContext & 2)) {
            var pending = updateQueue.pending
            null === pending
                ? (update.next = update)
                : ((update.next = pending.next), (pending.next = update))
            updateQueue.pending = update
            update = getRootForUpdatedFiber(fiber)
            markUpdateLaneFromFiberToRoot(fiber, null, lane)
            return update
        }
        enqueueUpdate$1(fiber, updateQueue, update, lane)
        return getRootForUpdatedFiber(fiber)
    }
    function entangleTransitions(root2, fiber, lane) {
        fiber = fiber.updateQueue
        if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194048))) {
            var queueLanes = fiber.lanes
            queueLanes &= root2.pendingLanes
            lane |= queueLanes
            fiber.lanes = lane
            markRootEntangled(root2, lane)
        }
    }
    function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue,
            current = workInProgress2.alternate
        if (null !== current && ((current = current.updateQueue), queue === current)) {
            var newFirst = null,
                newLast = null
            queue = queue.firstBaseUpdate
            if (null !== queue) {
                do {
                    var clone2 = {
                        lane: queue.lane,
                        tag: queue.tag,
                        payload: queue.payload,
                        callback: null,
                        next: null
                    }
                    null === newLast
                        ? (newFirst = newLast = clone2)
                        : (newLast = newLast.next = clone2)
                    queue = queue.next
                } while (null !== queue)
                null === newLast
                    ? (newFirst = newLast = capturedUpdate)
                    : (newLast = newLast.next = capturedUpdate)
            } else newFirst = newLast = capturedUpdate
            queue = {
                baseState: current.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: current.shared,
                callbacks: current.callbacks
            }
            workInProgress2.updateQueue = queue
            return
        }
        workInProgress2 = queue.lastBaseUpdate
        null === workInProgress2
            ? (queue.firstBaseUpdate = capturedUpdate)
            : (workInProgress2.next = capturedUpdate)
        queue.lastBaseUpdate = capturedUpdate
    }
    var didReadFromEntangledAsyncAction = false
    function suspendIfUpdateReadFromEntangledAsyncAction() {
        if (didReadFromEntangledAsyncAction) {
            var entangledActionThenable = currentEntangledActionThenable
            if (null !== entangledActionThenable) throw entangledActionThenable
        }
    }
    function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes2) {
        didReadFromEntangledAsyncAction = false
        var queue = workInProgress$jscomp$0.updateQueue
        hasForceUpdate = false
        var firstBaseUpdate = queue.firstBaseUpdate,
            lastBaseUpdate = queue.lastBaseUpdate,
            pendingQueue = queue.shared.pending
        if (null !== pendingQueue) {
            queue.shared.pending = null
            var lastPendingUpdate = pendingQueue,
                firstPendingUpdate = lastPendingUpdate.next
            lastPendingUpdate.next = null
            null === lastBaseUpdate
                ? (firstBaseUpdate = firstPendingUpdate)
                : (lastBaseUpdate.next = firstPendingUpdate)
            lastBaseUpdate = lastPendingUpdate
            var current = workInProgress$jscomp$0.alternate
            null !== current &&
                ((current = current.updateQueue),
                (pendingQueue = current.lastBaseUpdate),
                pendingQueue !== lastBaseUpdate &&
                    (null === pendingQueue
                        ? (current.firstBaseUpdate = firstPendingUpdate)
                        : (pendingQueue.next = firstPendingUpdate),
                    (current.lastBaseUpdate = lastPendingUpdate)))
        }
        if (null !== firstBaseUpdate) {
            var newState = queue.baseState
            lastBaseUpdate = 0
            current = firstPendingUpdate = lastPendingUpdate = null
            pendingQueue = firstBaseUpdate
            do {
                var updateLane = pendingQueue.lane & -536870913,
                    isHiddenUpdate = updateLane !== pendingQueue.lane
                if (
                    isHiddenUpdate
                        ? (workInProgressRootRenderLanes & updateLane) === updateLane
                        : (renderLanes2 & updateLane) === updateLane
                ) {
                    0 !== updateLane &&
                        updateLane === currentEntangledLane &&
                        (didReadFromEntangledAsyncAction = true)
                    null !== current &&
                        (current = current.next =
                            {
                                lane: 0,
                                tag: pendingQueue.tag,
                                payload: pendingQueue.payload,
                                callback: null,
                                next: null
                            })
                    a: {
                        var workInProgress2 = workInProgress$jscomp$0,
                            update = pendingQueue
                        updateLane = props
                        var instance = instance$jscomp$0
                        switch (update.tag) {
                            case 1:
                                workInProgress2 = update.payload
                                if ('function' === typeof workInProgress2) {
                                    newState = workInProgress2.call(instance, newState, updateLane)
                                    break a
                                }
                                newState = workInProgress2
                                break a
                            case 3:
                                workInProgress2.flags = (workInProgress2.flags & -65537) | 128
                            case 0:
                                workInProgress2 = update.payload
                                updateLane =
                                    'function' === typeof workInProgress2
                                        ? workInProgress2.call(instance, newState, updateLane)
                                        : workInProgress2
                                if (null === updateLane || void 0 === updateLane) break a
                                newState = assign2({}, newState, updateLane)
                                break a
                            case 2:
                                hasForceUpdate = true
                        }
                    }
                    updateLane = pendingQueue.callback
                    null !== updateLane &&
                        ((workInProgress$jscomp$0.flags |= 64),
                        isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192),
                        (isHiddenUpdate = queue.callbacks),
                        null === isHiddenUpdate
                            ? (queue.callbacks = [updateLane])
                            : isHiddenUpdate.push(updateLane))
                } else
                    (isHiddenUpdate = {
                        lane: updateLane,
                        tag: pendingQueue.tag,
                        payload: pendingQueue.payload,
                        callback: pendingQueue.callback,
                        next: null
                    }),
                        null === current
                            ? ((firstPendingUpdate = current = isHiddenUpdate),
                              (lastPendingUpdate = newState))
                            : (current = current.next = isHiddenUpdate),
                        (lastBaseUpdate |= updateLane)
                pendingQueue = pendingQueue.next
                if (null === pendingQueue)
                    if (((pendingQueue = queue.shared.pending), null === pendingQueue)) break
                    else
                        (isHiddenUpdate = pendingQueue),
                            (pendingQueue = isHiddenUpdate.next),
                            (isHiddenUpdate.next = null),
                            (queue.lastBaseUpdate = isHiddenUpdate),
                            (queue.shared.pending = null)
            } while (1)
            null === current && (lastPendingUpdate = newState)
            queue.baseState = lastPendingUpdate
            queue.firstBaseUpdate = firstPendingUpdate
            queue.lastBaseUpdate = current
            null === firstBaseUpdate && (queue.shared.lanes = 0)
            workInProgressRootSkippedLanes |= lastBaseUpdate
            workInProgress$jscomp$0.lanes = lastBaseUpdate
            workInProgress$jscomp$0.memoizedState = newState
        }
    }
    function callCallback(callback, context) {
        if ('function' !== typeof callback) throw Error(formatProdErrorMessage(191, callback))
        callback.call(context)
    }
    function commitCallbacks(updateQueue, context) {
        var callbacks = updateQueue.callbacks
        if (null !== callbacks)
            for (
                updateQueue.callbacks = null, updateQueue = 0;
                updateQueue < callbacks.length;
                updateQueue++
            )
                callCallback(callbacks[updateQueue], context)
    }
    var currentTreeHiddenStackCursor = createCursor(null),
        prevEntangledRenderLanesCursor = createCursor(0)
    function pushHiddenContext(fiber, context) {
        fiber = entangledRenderLanes
        push(prevEntangledRenderLanesCursor, fiber)
        push(currentTreeHiddenStackCursor, context)
        entangledRenderLanes = fiber | context.baseLanes
    }
    function reuseHiddenContextOnStack() {
        push(prevEntangledRenderLanesCursor, entangledRenderLanes)
        push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current)
    }
    function popHiddenContext() {
        entangledRenderLanes = prevEntangledRenderLanesCursor.current
        pop(currentTreeHiddenStackCursor)
        pop(prevEntangledRenderLanesCursor)
    }
    var renderLanes = 0,
        currentlyRenderingFiber = null,
        currentHook = null,
        workInProgressHook = null,
        didScheduleRenderPhaseUpdate = false,
        didScheduleRenderPhaseUpdateDuringThisPass = false,
        shouldDoubleInvokeUserFnsInHooksDEV = false,
        localIdCounter = 0,
        thenableIndexCounter$1 = 0,
        thenableState$1 = null,
        globalClientIdCounter = 0
    function throwInvalidHookError() {
        throw Error(formatProdErrorMessage(321))
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (null === prevDeps) return false
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
            if (!objectIs(nextDeps[i], prevDeps[i])) return false
        return true
    }
    function renderWithHooks(
        current,
        workInProgress2,
        Component,
        props,
        secondArg,
        nextRenderLanes
    ) {
        renderLanes = nextRenderLanes
        currentlyRenderingFiber = workInProgress2
        workInProgress2.memoizedState = null
        workInProgress2.updateQueue = null
        workInProgress2.lanes = 0
        ReactSharedInternals.H =
            null === current || null === current.memoizedState
                ? HooksDispatcherOnMount
                : HooksDispatcherOnUpdate
        shouldDoubleInvokeUserFnsInHooksDEV = false
        nextRenderLanes = Component(props, secondArg)
        shouldDoubleInvokeUserFnsInHooksDEV = false
        didScheduleRenderPhaseUpdateDuringThisPass &&
            (nextRenderLanes = renderWithHooksAgain(workInProgress2, Component, props, secondArg))
        finishRenderingHooks(current)
        return nextRenderLanes
    }
    function finishRenderingHooks(current) {
        ReactSharedInternals.H = ContextOnlyDispatcher
        var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next
        renderLanes = 0
        workInProgressHook = currentHook = currentlyRenderingFiber = null
        didScheduleRenderPhaseUpdate = false
        thenableIndexCounter$1 = 0
        thenableState$1 = null
        if (didRenderTooFewHooks) throw Error(formatProdErrorMessage(300))
        null === current ||
            didReceiveUpdate ||
            ((current = current.dependencies),
            null !== current && checkIfContextChanged(current) && (didReceiveUpdate = true))
    }
    function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
        currentlyRenderingFiber = workInProgress2
        var numberOfReRenders = 0
        do {
            didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null)
            thenableIndexCounter$1 = 0
            didScheduleRenderPhaseUpdateDuringThisPass = false
            if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage(301))
            numberOfReRenders += 1
            workInProgressHook = currentHook = null
            if (null != workInProgress2.updateQueue) {
                var children = workInProgress2.updateQueue
                children.lastEffect = null
                children.events = null
                children.stores = null
                null != children.memoCache && (children.memoCache.index = 0)
            }
            ReactSharedInternals.H = HooksDispatcherOnRerender
            children = Component(props, secondArg)
        } while (didScheduleRenderPhaseUpdateDuringThisPass)
        return children
    }
    function TransitionAwareHostComponent() {
        var dispatcher = ReactSharedInternals.H,
            maybeThenable = dispatcher.useState()[0]
        maybeThenable =
            'function' === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable
        dispatcher = dispatcher.useState()[0]
        ;(null !== currentHook ? currentHook.memoizedState : null) !== dispatcher &&
            (currentlyRenderingFiber.flags |= 1024)
        return maybeThenable
    }
    function checkDidRenderIdHook() {
        var didRenderIdHook = 0 !== localIdCounter
        localIdCounter = 0
        return didRenderIdHook
    }
    function bailoutHooks(current, workInProgress2, lanes) {
        workInProgress2.updateQueue = current.updateQueue
        workInProgress2.flags &= -2053
        current.lanes &= ~lanes
    }
    function resetHooksOnUnwind(workInProgress2) {
        if (didScheduleRenderPhaseUpdate) {
            for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
                var queue = workInProgress2.queue
                null !== queue && (queue.pending = null)
                workInProgress2 = workInProgress2.next
            }
            didScheduleRenderPhaseUpdate = false
        }
        renderLanes = 0
        workInProgressHook = currentHook = currentlyRenderingFiber = null
        didScheduleRenderPhaseUpdateDuringThisPass = false
        thenableIndexCounter$1 = localIdCounter = 0
        thenableState$1 = null
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        }
        null === workInProgressHook
            ? (currentlyRenderingFiber.memoizedState = workInProgressHook = hook)
            : (workInProgressHook = workInProgressHook.next = hook)
        return workInProgressHook
    }
    function updateWorkInProgressHook() {
        if (null === currentHook) {
            var nextCurrentHook = currentlyRenderingFiber.alternate
            nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null
        } else nextCurrentHook = currentHook.next
        var nextWorkInProgressHook =
            null === workInProgressHook
                ? currentlyRenderingFiber.memoizedState
                : workInProgressHook.next
        if (null !== nextWorkInProgressHook)
            (workInProgressHook = nextWorkInProgressHook), (currentHook = nextCurrentHook)
        else {
            if (null === nextCurrentHook) {
                if (null === currentlyRenderingFiber.alternate)
                    throw Error(formatProdErrorMessage(467))
                throw Error(formatProdErrorMessage(310))
            }
            currentHook = nextCurrentHook
            nextCurrentHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            }
            null === workInProgressHook
                ? (currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook)
                : (workInProgressHook = workInProgressHook.next = nextCurrentHook)
        }
        return workInProgressHook
    }
    function createFunctionComponentUpdateQueue() {
        return { lastEffect: null, events: null, stores: null, memoCache: null }
    }
    function useThenable(thenable) {
        var index3 = thenableIndexCounter$1
        thenableIndexCounter$1 += 1
        null === thenableState$1 && (thenableState$1 = [])
        thenable = trackUsedThenable(thenableState$1, thenable, index3)
        index3 = currentlyRenderingFiber
        null === (null === workInProgressHook ? index3.memoizedState : workInProgressHook.next) &&
            ((index3 = index3.alternate),
            (ReactSharedInternals.H =
                null === index3 || null === index3.memoizedState
                    ? HooksDispatcherOnMount
                    : HooksDispatcherOnUpdate))
        return thenable
    }
    function use(usable) {
        if (null !== usable && 'object' === typeof usable) {
            if ('function' === typeof usable.then) return useThenable(usable)
            if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable)
        }
        throw Error(formatProdErrorMessage(438, String(usable)))
    }
    function useMemoCache(size) {
        var memoCache = null,
            updateQueue = currentlyRenderingFiber.updateQueue
        null !== updateQueue && (memoCache = updateQueue.memoCache)
        if (null == memoCache) {
            var current = currentlyRenderingFiber.alternate
            null !== current &&
                ((current = current.updateQueue),
                null !== current &&
                    ((current = current.memoCache),
                    null != current &&
                        (memoCache = {
                            data: current.data.map(function (array2) {
                                return array2.slice()
                            }),
                            index: 0
                        })))
        }
        null == memoCache && (memoCache = { data: [], index: 0 })
        null === updateQueue &&
            ((updateQueue = createFunctionComponentUpdateQueue()),
            (currentlyRenderingFiber.updateQueue = updateQueue))
        updateQueue.memoCache = memoCache
        updateQueue = memoCache.data[memoCache.index]
        if (void 0 === updateQueue)
            for (
                updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0;
                current < size;
                current++
            )
                updateQueue[current] = REACT_MEMO_CACHE_SENTINEL
        memoCache.index++
        return updateQueue
    }
    function basicStateReducer(state, action) {
        return 'function' === typeof action ? action(state) : action
    }
    function updateReducer(reducer) {
        var hook = updateWorkInProgressHook()
        return updateReducerImpl(hook, currentHook, reducer)
    }
    function updateReducerImpl(hook, current, reducer) {
        var queue = hook.queue
        if (null === queue) throw Error(formatProdErrorMessage(311))
        queue.lastRenderedReducer = reducer
        var baseQueue = hook.baseQueue,
            pendingQueue = queue.pending
        if (null !== pendingQueue) {
            if (null !== baseQueue) {
                var baseFirst = baseQueue.next
                baseQueue.next = pendingQueue.next
                pendingQueue.next = baseFirst
            }
            current.baseQueue = baseQueue = pendingQueue
            queue.pending = null
        }
        pendingQueue = hook.baseState
        if (null === baseQueue) hook.memoizedState = pendingQueue
        else {
            current = baseQueue.next
            var newBaseQueueFirst = (baseFirst = null),
                newBaseQueueLast = null,
                update = current,
                didReadFromEntangledAsyncAction$32 = false
            do {
                var updateLane = update.lane & -536870913
                if (
                    updateLane !== update.lane
                        ? (workInProgressRootRenderLanes & updateLane) === updateLane
                        : (renderLanes & updateLane) === updateLane
                ) {
                    var revertLane = update.revertLane
                    if (0 === revertLane)
                        null !== newBaseQueueLast &&
                            (newBaseQueueLast = newBaseQueueLast.next =
                                {
                                    lane: 0,
                                    revertLane: 0,
                                    action: update.action,
                                    hasEagerState: update.hasEagerState,
                                    eagerState: update.eagerState,
                                    next: null
                                }),
                            updateLane === currentEntangledLane &&
                                (didReadFromEntangledAsyncAction$32 = true)
                    else if ((renderLanes & revertLane) === revertLane) {
                        update = update.next
                        revertLane === currentEntangledLane &&
                            (didReadFromEntangledAsyncAction$32 = true)
                        continue
                    } else
                        (updateLane = {
                            lane: 0,
                            revertLane: update.revertLane,
                            action: update.action,
                            hasEagerState: update.hasEagerState,
                            eagerState: update.eagerState,
                            next: null
                        }),
                            null === newBaseQueueLast
                                ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),
                                  (baseFirst = pendingQueue))
                                : (newBaseQueueLast = newBaseQueueLast.next = updateLane),
                            (currentlyRenderingFiber.lanes |= revertLane),
                            (workInProgressRootSkippedLanes |= revertLane)
                    updateLane = update.action
                    shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane)
                    pendingQueue = update.hasEagerState
                        ? update.eagerState
                        : reducer(pendingQueue, updateLane)
                } else
                    (revertLane = {
                        lane: updateLane,
                        revertLane: update.revertLane,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    }),
                        null === newBaseQueueLast
                            ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),
                              (baseFirst = pendingQueue))
                            : (newBaseQueueLast = newBaseQueueLast.next = revertLane),
                        (currentlyRenderingFiber.lanes |= updateLane),
                        (workInProgressRootSkippedLanes |= updateLane)
                update = update.next
            } while (null !== update && update !== current)
            null === newBaseQueueLast
                ? (baseFirst = pendingQueue)
                : (newBaseQueueLast.next = newBaseQueueFirst)
            if (
                !objectIs(pendingQueue, hook.memoizedState) &&
                ((didReceiveUpdate = true),
                didReadFromEntangledAsyncAction$32 &&
                    ((reducer = currentEntangledActionThenable), null !== reducer))
            )
                throw reducer
            hook.memoizedState = pendingQueue
            hook.baseState = baseFirst
            hook.baseQueue = newBaseQueueLast
            queue.lastRenderedState = pendingQueue
        }
        null === baseQueue && (queue.lanes = 0)
        return [hook.memoizedState, queue.dispatch]
    }
    function rerenderReducer(reducer) {
        var hook = updateWorkInProgressHook(),
            queue = hook.queue
        if (null === queue) throw Error(formatProdErrorMessage(311))
        queue.lastRenderedReducer = reducer
        var dispatch = queue.dispatch,
            lastRenderPhaseUpdate = queue.pending,
            newState = hook.memoizedState
        if (null !== lastRenderPhaseUpdate) {
            queue.pending = null
            var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next)
            do (newState = reducer(newState, update.action)), (update = update.next)
            while (update !== lastRenderPhaseUpdate)
            objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true)
            hook.memoizedState = newState
            null === hook.baseQueue && (hook.baseState = newState)
            queue.lastRenderedState = newState
        }
        return [newState, dispatch]
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber,
            hook = updateWorkInProgressHook(),
            isHydrating$jscomp$0 = isHydrating
        if (isHydrating$jscomp$0) {
            if (void 0 === getServerSnapshot) throw Error(formatProdErrorMessage(407))
            getServerSnapshot = getServerSnapshot()
        } else getServerSnapshot = getSnapshot()
        var snapshotChanged = !objectIs((currentHook || hook).memoizedState, getServerSnapshot)
        snapshotChanged && ((hook.memoizedState = getServerSnapshot), (didReceiveUpdate = true))
        hook = hook.queue
        var create = subscribeToStore.bind(null, fiber, hook, subscribe)
        updateEffectImpl(2048, 8, create, [subscribe])
        if (
            hook.getSnapshot !== getSnapshot ||
            snapshotChanged ||
            (null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1)
        ) {
            fiber.flags |= 2048
            pushSimpleEffect(
                9,
                createEffectInstance(),
                updateStoreInstance.bind(null, fiber, hook, getServerSnapshot, getSnapshot),
                null
            )
            if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349))
            isHydrating$jscomp$0 ||
                0 !== (renderLanes & 124) ||
                pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot)
        }
        return getServerSnapshot
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= 16384
        fiber = { getSnapshot, value: renderedSnapshot }
        getSnapshot = currentlyRenderingFiber.updateQueue
        null === getSnapshot
            ? ((getSnapshot = createFunctionComponentUpdateQueue()),
              (currentlyRenderingFiber.updateQueue = getSnapshot),
              (getSnapshot.stores = [fiber]))
            : ((renderedSnapshot = getSnapshot.stores),
              null === renderedSnapshot
                  ? (getSnapshot.stores = [fiber])
                  : renderedSnapshot.push(fiber))
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot
        inst.getSnapshot = getSnapshot
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber)
    }
    function subscribeToStore(fiber, inst, subscribe) {
        return subscribe(function () {
            checkIfSnapshotChanged(inst) && forceStoreRerender(fiber)
        })
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot
        inst = inst.value
        try {
            var nextValue = latestGetSnapshot()
            return !objectIs(inst, nextValue)
        } catch (error) {
            return true
        }
    }
    function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, 2)
        null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2)
    }
    function mountStateImpl(initialState) {
        var hook = mountWorkInProgressHook()
        if ('function' === typeof initialState) {
            var initialStateInitializer = initialState
            initialState = initialStateInitializer()
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
                setIsStrictModeForDevtools(true)
                try {
                    initialStateInitializer()
                } finally {
                    setIsStrictModeForDevtools(false)
                }
            }
        }
        hook.memoizedState = hook.baseState = initialState
        hook.queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        }
        return hook
    }
    function updateOptimisticImpl(hook, current, passthrough, reducer) {
        hook.baseState = passthrough
        return updateReducerImpl(
            hook,
            currentHook,
            'function' === typeof reducer ? reducer : basicStateReducer
        )
    }
    function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
        if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage(485))
        fiber = actionQueue.action
        if (null !== fiber) {
            var actionNode = {
                payload,
                action: fiber,
                next: null,
                isTransition: true,
                status: 'pending',
                value: null,
                reason: null,
                listeners: [],
                then: function (listener) {
                    actionNode.listeners.push(listener)
                }
            }
            null !== ReactSharedInternals.T
                ? setPendingState(true)
                : (actionNode.isTransition = false)
            setState(actionNode)
            setPendingState = actionQueue.pending
            null === setPendingState
                ? ((actionNode.next = actionQueue.pending = actionNode),
                  runActionStateAction(actionQueue, actionNode))
                : ((actionNode.next = setPendingState.next),
                  (actionQueue.pending = setPendingState.next = actionNode))
        }
    }
    function runActionStateAction(actionQueue, node2) {
        var action = node2.action,
            payload = node2.payload,
            prevState = actionQueue.state
        if (node2.isTransition) {
            var prevTransition = ReactSharedInternals.T,
                currentTransition = {}
            ReactSharedInternals.T = currentTransition
            try {
                var returnValue = action(prevState, payload),
                    onStartTransitionFinish = ReactSharedInternals.S
                null !== onStartTransitionFinish &&
                    onStartTransitionFinish(currentTransition, returnValue)
                handleActionReturnValue(actionQueue, node2, returnValue)
            } catch (error) {
                onActionError(actionQueue, node2, error)
            } finally {
                ReactSharedInternals.T = prevTransition
            }
        } else
            try {
                ;(prevTransition = action(prevState, payload)),
                    handleActionReturnValue(actionQueue, node2, prevTransition)
            } catch (error$38) {
                onActionError(actionQueue, node2, error$38)
            }
    }
    function handleActionReturnValue(actionQueue, node2, returnValue) {
        null !== returnValue &&
        'object' === typeof returnValue &&
        'function' === typeof returnValue.then
            ? returnValue.then(
                  function (nextState) {
                      onActionSuccess(actionQueue, node2, nextState)
                  },
                  function (error) {
                      return onActionError(actionQueue, node2, error)
                  }
              )
            : onActionSuccess(actionQueue, node2, returnValue)
    }
    function onActionSuccess(actionQueue, actionNode, nextState) {
        actionNode.status = 'fulfilled'
        actionNode.value = nextState
        notifyActionListeners(actionNode)
        actionQueue.state = nextState
        actionNode = actionQueue.pending
        null !== actionNode &&
            ((nextState = actionNode.next),
            nextState === actionNode
                ? (actionQueue.pending = null)
                : ((nextState = nextState.next),
                  (actionNode.next = nextState),
                  runActionStateAction(actionQueue, nextState)))
    }
    function onActionError(actionQueue, actionNode, error) {
        var last2 = actionQueue.pending
        actionQueue.pending = null
        if (null !== last2) {
            last2 = last2.next
            do
                (actionNode.status = 'rejected'),
                    (actionNode.reason = error),
                    notifyActionListeners(actionNode),
                    (actionNode = actionNode.next)
            while (actionNode !== last2)
        }
        actionQueue.action = null
    }
    function notifyActionListeners(actionNode) {
        actionNode = actionNode.listeners
        for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])()
    }
    function actionStateReducer(oldState, newState) {
        return newState
    }
    function mountActionState(action, initialStateProp) {
        if (isHydrating) {
            var ssrFormState = workInProgressRoot.formState
            if (null !== ssrFormState) {
                a: {
                    var JSCompiler_inline_result = currentlyRenderingFiber
                    if (isHydrating) {
                        if (nextHydratableInstance) {
                            b: {
                                var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance
                                for (
                                    var inRootOrSingleton = rootOrSingletonContext;
                                    8 !== JSCompiler_inline_result$jscomp$0.nodeType;

                                ) {
                                    if (!inRootOrSingleton) {
                                        JSCompiler_inline_result$jscomp$0 = null
                                        break b
                                    }
                                    JSCompiler_inline_result$jscomp$0 = getNextHydratable(
                                        JSCompiler_inline_result$jscomp$0.nextSibling
                                    )
                                    if (null === JSCompiler_inline_result$jscomp$0) {
                                        JSCompiler_inline_result$jscomp$0 = null
                                        break b
                                    }
                                }
                                inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data
                                JSCompiler_inline_result$jscomp$0 =
                                    'F!' === inRootOrSingleton || 'F' === inRootOrSingleton
                                        ? JSCompiler_inline_result$jscomp$0
                                        : null
                            }
                            if (JSCompiler_inline_result$jscomp$0) {
                                nextHydratableInstance = getNextHydratable(
                                    JSCompiler_inline_result$jscomp$0.nextSibling
                                )
                                JSCompiler_inline_result =
                                    'F!' === JSCompiler_inline_result$jscomp$0.data
                                break a
                            }
                        }
                        throwOnHydrationMismatch(JSCompiler_inline_result)
                    }
                    JSCompiler_inline_result = false
                }
                JSCompiler_inline_result && (initialStateProp = ssrFormState[0])
            }
        }
        ssrFormState = mountWorkInProgressHook()
        ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp
        JSCompiler_inline_result = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: actionStateReducer,
            lastRenderedState: initialStateProp
        }
        ssrFormState.queue = JSCompiler_inline_result
        ssrFormState = dispatchSetState.bind(
            null,
            currentlyRenderingFiber,
            JSCompiler_inline_result
        )
        JSCompiler_inline_result.dispatch = ssrFormState
        JSCompiler_inline_result = mountStateImpl(false)
        inRootOrSingleton = dispatchOptimisticSetState.bind(
            null,
            currentlyRenderingFiber,
            false,
            JSCompiler_inline_result.queue
        )
        JSCompiler_inline_result = mountWorkInProgressHook()
        JSCompiler_inline_result$jscomp$0 = {
            state: initialStateProp,
            dispatch: null,
            action,
            pending: null
        }
        JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0
        ssrFormState = dispatchActionState.bind(
            null,
            currentlyRenderingFiber,
            JSCompiler_inline_result$jscomp$0,
            inRootOrSingleton,
            ssrFormState
        )
        JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState
        JSCompiler_inline_result.memoizedState = action
        return [initialStateProp, ssrFormState, false]
    }
    function updateActionState(action) {
        var stateHook = updateWorkInProgressHook()
        return updateActionStateImpl(stateHook, currentHook, action)
    }
    function updateActionStateImpl(stateHook, currentStateHook, action) {
        currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0]
        stateHook = updateReducer(basicStateReducer)[0]
        if (
            'object' === typeof currentStateHook &&
            null !== currentStateHook &&
            'function' === typeof currentStateHook.then
        )
            try {
                var state = useThenable(currentStateHook)
            } catch (x2) {
                if (x2 === SuspenseException) throw SuspenseActionException
                throw x2
            }
        else state = currentStateHook
        currentStateHook = updateWorkInProgressHook()
        var actionQueue = currentStateHook.queue,
            dispatch = actionQueue.dispatch
        action !== currentStateHook.memoizedState &&
            ((currentlyRenderingFiber.flags |= 2048),
            pushSimpleEffect(
                9,
                createEffectInstance(),
                actionStateActionEffect.bind(null, actionQueue, action),
                null
            ))
        return [state, dispatch, stateHook]
    }
    function actionStateActionEffect(actionQueue, action) {
        actionQueue.action = action
    }
    function rerenderActionState(action) {
        var stateHook = updateWorkInProgressHook(),
            currentStateHook = currentHook
        if (null !== currentStateHook)
            return updateActionStateImpl(stateHook, currentStateHook, action)
        updateWorkInProgressHook()
        stateHook = stateHook.memoizedState
        currentStateHook = updateWorkInProgressHook()
        var dispatch = currentStateHook.queue.dispatch
        currentStateHook.memoizedState = action
        return [stateHook, dispatch, false]
    }
    function pushSimpleEffect(tag, inst, create, createDeps) {
        tag = { tag, create, deps: createDeps, inst, next: null }
        inst = currentlyRenderingFiber.updateQueue
        null === inst &&
            ((inst = createFunctionComponentUpdateQueue()),
            (currentlyRenderingFiber.updateQueue = inst))
        create = inst.lastEffect
        null === create
            ? (inst.lastEffect = tag.next = tag)
            : ((createDeps = create.next),
              (create.next = tag),
              (tag.next = createDeps),
              (inst.lastEffect = tag))
        return tag
    }
    function createEffectInstance() {
        return { destroy: void 0, resource: void 0 }
    }
    function updateRef() {
        return updateWorkInProgressHook().memoizedState
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, createDeps) {
        var hook = mountWorkInProgressHook()
        createDeps = void 0 === createDeps ? null : createDeps
        currentlyRenderingFiber.flags |= fiberFlags
        hook.memoizedState = pushSimpleEffect(
            1 | hookFlags,
            createEffectInstance(),
            create,
            createDeps
        )
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook()
        deps = void 0 === deps ? null : deps
        var inst = hook.memoizedState.inst
        null !== currentHook &&
        null !== deps &&
        areHookInputsEqual(deps, currentHook.memoizedState.deps)
            ? (hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps))
            : ((currentlyRenderingFiber.flags |= fiberFlags),
              (hook.memoizedState = pushSimpleEffect(1 | hookFlags, inst, create, deps)))
    }
    function mountEffect(create, createDeps) {
        mountEffectImpl(8390656, 8, create, createDeps)
    }
    function updateEffect(create, createDeps) {
        updateEffectImpl(2048, 8, create, createDeps)
    }
    function updateInsertionEffect(create, deps) {
        return updateEffectImpl(4, 2, create, deps)
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(4, 4, create, deps)
    }
    function imperativeHandleEffect(create, ref) {
        if ('function' === typeof ref) {
            create = create()
            var refCleanup = ref(create)
            return function () {
                'function' === typeof refCleanup ? refCleanup() : ref(null)
            }
        }
        if (null !== ref && void 0 !== ref)
            return (
                (create = create()),
                (ref.current = create),
                function () {
                    ref.current = null
                }
            )
    }
    function updateImperativeHandle(ref, create, deps) {
        deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null
        updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps)
    }
    function mountDebugValue() {}
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook()
        deps = void 0 === deps ? null : deps
        var prevState = hook.memoizedState
        if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0]
        hook.memoizedState = [callback, deps]
        return callback
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook()
        deps = void 0 === deps ? null : deps
        var prevState = hook.memoizedState
        if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0]
        prevState = nextCreate()
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true)
            try {
                nextCreate()
            } finally {
                setIsStrictModeForDevtools(false)
            }
        }
        hook.memoizedState = [prevState, deps]
        return prevState
    }
    function mountDeferredValueImpl(hook, value, initialValue) {
        if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
            return (hook.memoizedState = value)
        hook.memoizedState = initialValue
        hook = requestDeferredLane()
        currentlyRenderingFiber.lanes |= hook
        workInProgressRootSkippedLanes |= hook
        return initialValue
    }
    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
        if (objectIs(value, prevValue)) return value
        if (null !== currentTreeHiddenStackCursor.current)
            return (
                (hook = mountDeferredValueImpl(hook, value, initialValue)),
                objectIs(hook, prevValue) || (didReceiveUpdate = true),
                hook
            )
        if (0 === (renderLanes & 42)) return (didReceiveUpdate = true), (hook.memoizedState = value)
        hook = requestDeferredLane()
        currentlyRenderingFiber.lanes |= hook
        workInProgressRootSkippedLanes |= hook
        return prevValue
    }
    function startTransition(fiber, queue, pendingState, finishedState, callback) {
        var previousPriority = ReactDOMSharedInternals.p
        ReactDOMSharedInternals.p =
            0 !== previousPriority && 8 > previousPriority ? previousPriority : 8
        var prevTransition = ReactSharedInternals.T,
            currentTransition = {}
        ReactSharedInternals.T = currentTransition
        dispatchOptimisticSetState(fiber, false, queue, pendingState)
        try {
            var returnValue = callback(),
                onStartTransitionFinish = ReactSharedInternals.S
            null !== onStartTransitionFinish &&
                onStartTransitionFinish(currentTransition, returnValue)
            if (
                null !== returnValue &&
                'object' === typeof returnValue &&
                'function' === typeof returnValue.then
            ) {
                var thenableForFinishedState = chainThenableValue(returnValue, finishedState)
                dispatchSetStateInternal(
                    fiber,
                    queue,
                    thenableForFinishedState,
                    requestUpdateLane(fiber)
                )
            } else dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber))
        } catch (error) {
            dispatchSetStateInternal(
                fiber,
                queue,
                { then: function () {}, status: 'rejected', reason: error },
                requestUpdateLane()
            )
        } finally {
            ;(ReactDOMSharedInternals.p = previousPriority),
                (ReactSharedInternals.T = prevTransition)
        }
    }
    function noop$22() {}
    function startHostTransition(formFiber, pendingState, action, formData) {
        if (5 !== formFiber.tag) throw Error(formatProdErrorMessage(476))
        var queue = ensureFormComponentIsStateful(formFiber).queue
        startTransition(
            formFiber,
            queue,
            pendingState,
            sharedNotPendingObject,
            null === action
                ? noop$22
                : function () {
                      requestFormReset$1(formFiber)
                      return action(formData)
                  }
        )
    }
    function ensureFormComponentIsStateful(formFiber) {
        var existingStateHook = formFiber.memoizedState
        if (null !== existingStateHook) return existingStateHook
        existingStateHook = {
            memoizedState: sharedNotPendingObject,
            baseState: sharedNotPendingObject,
            baseQueue: null,
            queue: {
                pending: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: sharedNotPendingObject
            },
            next: null
        }
        var initialResetState = {}
        existingStateHook.next = {
            memoizedState: initialResetState,
            baseState: initialResetState,
            baseQueue: null,
            queue: {
                pending: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: initialResetState
            },
            next: null
        }
        formFiber.memoizedState = existingStateHook
        formFiber = formFiber.alternate
        null !== formFiber && (formFiber.memoizedState = existingStateHook)
        return existingStateHook
    }
    function requestFormReset$1(formFiber) {
        var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue
        dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane())
    }
    function useHostTransitionStatus() {
        return readContext(HostTransitionContext)
    }
    function updateId() {
        return updateWorkInProgressHook().memoizedState
    }
    function updateRefresh() {
        return updateWorkInProgressHook().memoizedState
    }
    function refreshCache(fiber) {
        for (var provider = fiber.return; null !== provider; ) {
            switch (provider.tag) {
                case 24:
                case 3:
                    var lane = requestUpdateLane()
                    fiber = createUpdate(lane)
                    var root$41 = enqueueUpdate(provider, fiber, lane)
                    null !== root$41 &&
                        (scheduleUpdateOnFiber(root$41, provider, lane),
                        entangleTransitions(root$41, provider, lane))
                    provider = { cache: createCache3() }
                    fiber.payload = provider
                    return
            }
            provider = provider.return
        }
    }
    function dispatchReducerAction(fiber, queue, action) {
        var lane = requestUpdateLane()
        action = {
            lane,
            revertLane: 0,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
        }
        isRenderPhaseUpdate(fiber)
            ? enqueueRenderPhaseUpdate(queue, action)
            : ((action = enqueueConcurrentHookUpdate(fiber, queue, action, lane)),
              null !== action &&
                  (scheduleUpdateOnFiber(action, fiber, lane),
                  entangleTransitionUpdate(action, queue, lane)))
    }
    function dispatchSetState(fiber, queue, action) {
        var lane = requestUpdateLane()
        dispatchSetStateInternal(fiber, queue, action, lane)
    }
    function dispatchSetStateInternal(fiber, queue, action, lane) {
        var update = {
            lane,
            revertLane: 0,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
        }
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update)
        else {
            var alternate = fiber.alternate
            if (
                0 === fiber.lanes &&
                (null === alternate || 0 === alternate.lanes) &&
                ((alternate = queue.lastRenderedReducer), null !== alternate)
            )
                try {
                    var currentState = queue.lastRenderedState,
                        eagerState = alternate(currentState, action)
                    update.hasEagerState = true
                    update.eagerState = eagerState
                    if (objectIs(eagerState, currentState))
                        return (
                            enqueueUpdate$1(fiber, queue, update, 0),
                            null === workInProgressRoot && finishQueueingConcurrentUpdates(),
                            false
                        )
                } catch (error) {
                } finally {
                }
            action = enqueueConcurrentHookUpdate(fiber, queue, update, lane)
            if (null !== action)
                return (
                    scheduleUpdateOnFiber(action, fiber, lane),
                    entangleTransitionUpdate(action, queue, lane),
                    true
                )
        }
        return false
    }
    function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
        action = {
            lane: 2,
            revertLane: requestTransitionLane(),
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
        }
        if (isRenderPhaseUpdate(fiber)) {
            if (throwIfDuringRender) throw Error(formatProdErrorMessage(479))
        } else
            (throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2)),
                null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2)
    }
    function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate
        return (
            fiber === currentlyRenderingFiber ||
            (null !== alternate && alternate === currentlyRenderingFiber)
        )
    }
    function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true
        var pending = queue.pending
        null === pending
            ? (update.next = update)
            : ((update.next = pending.next), (pending.next = update))
        queue.pending = update
    }
    function entangleTransitionUpdate(root2, queue, lane) {
        if (0 !== (lane & 4194048)) {
            var queueLanes = queue.lanes
            queueLanes &= root2.pendingLanes
            lane |= queueLanes
            queue.lanes = lane
            markRootEntangled(root2, lane)
        }
    }
    var ContextOnlyDispatcher = {
            readContext,
            use,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            useHostTransitionStatus: throwInvalidHookError,
            useFormState: throwInvalidHookError,
            useActionState: throwInvalidHookError,
            useOptimistic: throwInvalidHookError,
            useMemoCache: throwInvalidHookError,
            useCacheRefresh: throwInvalidHookError
        },
        HooksDispatcherOnMount = {
            readContext,
            use,
            useCallback: function (callback, deps) {
                mountWorkInProgressHook().memoizedState = [callback, void 0 === deps ? null : deps]
                return callback
            },
            useContext: readContext,
            useEffect: mountEffect,
            useImperativeHandle: function (ref, create, deps) {
                deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null
                mountEffectImpl(4194308, 4, imperativeHandleEffect.bind(null, create, ref), deps)
            },
            useLayoutEffect: function (create, deps) {
                return mountEffectImpl(4194308, 4, create, deps)
            },
            useInsertionEffect: function (create, deps) {
                mountEffectImpl(4, 2, create, deps)
            },
            useMemo: function (nextCreate, deps) {
                var hook = mountWorkInProgressHook()
                deps = void 0 === deps ? null : deps
                var nextValue = nextCreate()
                if (shouldDoubleInvokeUserFnsInHooksDEV) {
                    setIsStrictModeForDevtools(true)
                    try {
                        nextCreate()
                    } finally {
                        setIsStrictModeForDevtools(false)
                    }
                }
                hook.memoizedState = [nextValue, deps]
                return nextValue
            },
            useReducer: function (reducer, initialArg, init) {
                var hook = mountWorkInProgressHook()
                if (void 0 !== init) {
                    var initialState = init(initialArg)
                    if (shouldDoubleInvokeUserFnsInHooksDEV) {
                        setIsStrictModeForDevtools(true)
                        try {
                            init(initialArg)
                        } finally {
                            setIsStrictModeForDevtools(false)
                        }
                    }
                } else initialState = initialArg
                hook.memoizedState = hook.baseState = initialState
                reducer = {
                    pending: null,
                    lanes: 0,
                    dispatch: null,
                    lastRenderedReducer: reducer,
                    lastRenderedState: initialState
                }
                hook.queue = reducer
                reducer = reducer.dispatch = dispatchReducerAction.bind(
                    null,
                    currentlyRenderingFiber,
                    reducer
                )
                return [hook.memoizedState, reducer]
            },
            useRef: function (initialValue) {
                var hook = mountWorkInProgressHook()
                initialValue = { current: initialValue }
                return (hook.memoizedState = initialValue)
            },
            useState: function (initialState) {
                initialState = mountStateImpl(initialState)
                var queue = initialState.queue,
                    dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue)
                queue.dispatch = dispatch
                return [initialState.memoizedState, dispatch]
            },
            useDebugValue: mountDebugValue,
            useDeferredValue: function (value, initialValue) {
                var hook = mountWorkInProgressHook()
                return mountDeferredValueImpl(hook, value, initialValue)
            },
            useTransition: function () {
                var stateHook = mountStateImpl(false)
                stateHook = startTransition.bind(
                    null,
                    currentlyRenderingFiber,
                    stateHook.queue,
                    true,
                    false
                )
                mountWorkInProgressHook().memoizedState = stateHook
                return [false, stateHook]
            },
            useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
                var fiber = currentlyRenderingFiber,
                    hook = mountWorkInProgressHook()
                if (isHydrating) {
                    if (void 0 === getServerSnapshot) throw Error(formatProdErrorMessage(407))
                    getServerSnapshot = getServerSnapshot()
                } else {
                    getServerSnapshot = getSnapshot()
                    if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349))
                    0 !== (workInProgressRootRenderLanes & 124) ||
                        pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot)
                }
                hook.memoizedState = getServerSnapshot
                var inst = { value: getServerSnapshot, getSnapshot }
                hook.queue = inst
                mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe])
                fiber.flags |= 2048
                pushSimpleEffect(
                    9,
                    createEffectInstance(),
                    updateStoreInstance.bind(null, fiber, inst, getServerSnapshot, getSnapshot),
                    null
                )
                return getServerSnapshot
            },
            useId: function () {
                var hook = mountWorkInProgressHook(),
                    identifierPrefix = workInProgressRoot.identifierPrefix
                if (isHydrating) {
                    var JSCompiler_inline_result = treeContextOverflow
                    var idWithLeadingBit = treeContextId
                    JSCompiler_inline_result =
                        (idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))).toString(
                            32
                        ) + JSCompiler_inline_result
                    identifierPrefix = '«' + identifierPrefix + 'R' + JSCompiler_inline_result
                    JSCompiler_inline_result = localIdCounter++
                    0 < JSCompiler_inline_result &&
                        (identifierPrefix += 'H' + JSCompiler_inline_result.toString(32))
                    identifierPrefix += '»'
                } else
                    (JSCompiler_inline_result = globalClientIdCounter++),
                        (identifierPrefix =
                            '«' +
                            identifierPrefix +
                            'r' +
                            JSCompiler_inline_result.toString(32) +
                            '»')
                return (hook.memoizedState = identifierPrefix)
            },
            useHostTransitionStatus,
            useFormState: mountActionState,
            useActionState: mountActionState,
            useOptimistic: function (passthrough) {
                var hook = mountWorkInProgressHook()
                hook.memoizedState = hook.baseState = passthrough
                var queue = {
                    pending: null,
                    lanes: 0,
                    dispatch: null,
                    lastRenderedReducer: null,
                    lastRenderedState: null
                }
                hook.queue = queue
                hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber, true, queue)
                queue.dispatch = hook
                return [passthrough, hook]
            },
            useMemoCache,
            useCacheRefresh: function () {
                return (mountWorkInProgressHook().memoizedState = refreshCache.bind(
                    null,
                    currentlyRenderingFiber
                ))
            }
        },
        HooksDispatcherOnUpdate = {
            readContext,
            use,
            useCallback: updateCallback,
            useContext: readContext,
            useEffect: updateEffect,
            useImperativeHandle: updateImperativeHandle,
            useInsertionEffect: updateInsertionEffect,
            useLayoutEffect: updateLayoutEffect,
            useMemo: updateMemo,
            useReducer: updateReducer,
            useRef: updateRef,
            useState: function () {
                return updateReducer(basicStateReducer)
            },
            useDebugValue: mountDebugValue,
            useDeferredValue: function (value, initialValue) {
                var hook = updateWorkInProgressHook()
                return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue)
            },
            useTransition: function () {
                var booleanOrThenable = updateReducer(basicStateReducer)[0],
                    start = updateWorkInProgressHook().memoizedState
                return [
                    'boolean' === typeof booleanOrThenable
                        ? booleanOrThenable
                        : useThenable(booleanOrThenable),
                    start
                ]
            },
            useSyncExternalStore: updateSyncExternalStore,
            useId: updateId,
            useHostTransitionStatus,
            useFormState: updateActionState,
            useActionState: updateActionState,
            useOptimistic: function (passthrough, reducer) {
                var hook = updateWorkInProgressHook()
                return updateOptimisticImpl(hook, currentHook, passthrough, reducer)
            },
            useMemoCache,
            useCacheRefresh: updateRefresh
        },
        HooksDispatcherOnRerender = {
            readContext,
            use,
            useCallback: updateCallback,
            useContext: readContext,
            useEffect: updateEffect,
            useImperativeHandle: updateImperativeHandle,
            useInsertionEffect: updateInsertionEffect,
            useLayoutEffect: updateLayoutEffect,
            useMemo: updateMemo,
            useReducer: rerenderReducer,
            useRef: updateRef,
            useState: function () {
                return rerenderReducer(basicStateReducer)
            },
            useDebugValue: mountDebugValue,
            useDeferredValue: function (value, initialValue) {
                var hook = updateWorkInProgressHook()
                return null === currentHook
                    ? mountDeferredValueImpl(hook, value, initialValue)
                    : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue)
            },
            useTransition: function () {
                var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
                    start = updateWorkInProgressHook().memoizedState
                return [
                    'boolean' === typeof booleanOrThenable
                        ? booleanOrThenable
                        : useThenable(booleanOrThenable),
                    start
                ]
            },
            useSyncExternalStore: updateSyncExternalStore,
            useId: updateId,
            useHostTransitionStatus,
            useFormState: rerenderActionState,
            useActionState: rerenderActionState,
            useOptimistic: function (passthrough, reducer) {
                var hook = updateWorkInProgressHook()
                if (null !== currentHook)
                    return updateOptimisticImpl(hook, currentHook, passthrough, reducer)
                hook.baseState = passthrough
                return [passthrough, hook.queue.dispatch]
            },
            useMemoCache,
            useCacheRefresh: updateRefresh
        },
        thenableState = null,
        thenableIndexCounter = 0
    function unwrapThenable(thenable) {
        var index3 = thenableIndexCounter
        thenableIndexCounter += 1
        null === thenableState && (thenableState = [])
        return trackUsedThenable(thenableState, thenable, index3)
    }
    function coerceRef(workInProgress2, element) {
        element = element.props.ref
        workInProgress2.ref = void 0 !== element ? element : null
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
            throw Error(formatProdErrorMessage(525))
        returnFiber = Object.prototype.toString.call(newChild)
        throw Error(
            formatProdErrorMessage(
                31,
                '[object Object]' === returnFiber
                    ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'
                    : returnFiber
            )
        )
    }
    function resolveLazy(lazyType) {
        var init = lazyType._init
        return init(lazyType._payload)
    }
    function createChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (shouldTrackSideEffects) {
                var deletions = returnFiber.deletions
                null === deletions
                    ? ((returnFiber.deletions = [childToDelete]), (returnFiber.flags |= 16))
                    : deletions.push(childToDelete)
            }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) return null
            for (; null !== currentFirstChild; )
                deleteChild(returnFiber, currentFirstChild),
                    (currentFirstChild = currentFirstChild.sibling)
            return null
        }
        function mapRemainingChildren(currentFirstChild) {
            for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
                null !== currentFirstChild.key
                    ? existingChildren.set(currentFirstChild.key, currentFirstChild)
                    : existingChildren.set(currentFirstChild.index, currentFirstChild),
                    (currentFirstChild = currentFirstChild.sibling)
            return existingChildren
        }
        function useFiber(fiber, pendingProps) {
            fiber = createWorkInProgress(fiber, pendingProps)
            fiber.index = 0
            fiber.sibling = null
            return fiber
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex
            if (!shouldTrackSideEffects) return (newFiber.flags |= 1048576), lastPlacedIndex
            newIndex = newFiber.alternate
            if (null !== newIndex)
                return (
                    (newIndex = newIndex.index),
                    newIndex < lastPlacedIndex
                        ? ((newFiber.flags |= 67108866), lastPlacedIndex)
                        : newIndex
                )
            newFiber.flags |= 67108866
            return lastPlacedIndex
        }
        function placeSingleChild(newFiber) {
            shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 67108866)
            return newFiber
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (null === current || 6 !== current.tag)
                return (
                    (current = createFiberFromText(textContent, returnFiber.mode, lanes)),
                    (current.return = returnFiber),
                    current
                )
            current = useFiber(current, textContent)
            current.return = returnFiber
            return current
        }
        function updateElement(returnFiber, current, element, lanes) {
            var elementType = element.type
            if (elementType === REACT_FRAGMENT_TYPE)
                return updateFragment(
                    returnFiber,
                    current,
                    element.props.children,
                    lanes,
                    element.key
                )
            if (
                null !== current &&
                (current.elementType === elementType ||
                    ('object' === typeof elementType &&
                        null !== elementType &&
                        elementType.$$typeof === REACT_LAZY_TYPE &&
                        resolveLazy(elementType) === current.type))
            )
                return (
                    (current = useFiber(current, element.props)),
                    coerceRef(current, element),
                    (current.return = returnFiber),
                    current
                )
            current = createFiberFromTypeAndProps(
                element.type,
                element.key,
                element.props,
                null,
                returnFiber.mode,
                lanes
            )
            coerceRef(current, element)
            current.return = returnFiber
            return current
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (
                null === current ||
                4 !== current.tag ||
                current.stateNode.containerInfo !== portal.containerInfo ||
                current.stateNode.implementation !== portal.implementation
            )
                return (
                    (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
                    (current.return = returnFiber),
                    current
                )
            current = useFiber(current, portal.children || [])
            current.return = returnFiber
            return current
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (null === current || 7 !== current.tag)
                return (
                    (current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key)),
                    (current.return = returnFiber),
                    current
                )
            current = useFiber(current, fragment)
            current.return = returnFiber
            return current
        }
        function createChild(returnFiber, newChild, lanes) {
            if (
                ('string' === typeof newChild && '' !== newChild) ||
                'number' === typeof newChild ||
                'bigint' === typeof newChild
            )
                return (
                    (newChild = createFiberFromText('' + newChild, returnFiber.mode, lanes)),
                    (newChild.return = returnFiber),
                    newChild
                )
            if ('object' === typeof newChild && null !== newChild) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        return (
                            (lanes = createFiberFromTypeAndProps(
                                newChild.type,
                                newChild.key,
                                newChild.props,
                                null,
                                returnFiber.mode,
                                lanes
                            )),
                            coerceRef(lanes, newChild),
                            (lanes.return = returnFiber),
                            lanes
                        )
                    case REACT_PORTAL_TYPE:
                        return (
                            (newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes)),
                            (newChild.return = returnFiber),
                            newChild
                        )
                    case REACT_LAZY_TYPE:
                        var init = newChild._init
                        newChild = init(newChild._payload)
                        return createChild(returnFiber, newChild, lanes)
                }
                if (isArrayImpl(newChild) || getIteratorFn(newChild))
                    return (
                        (newChild = createFiberFromFragment(
                            newChild,
                            returnFiber.mode,
                            lanes,
                            null
                        )),
                        (newChild.return = returnFiber),
                        newChild
                    )
                if ('function' === typeof newChild.then)
                    return createChild(returnFiber, unwrapThenable(newChild), lanes)
                if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                    return createChild(
                        returnFiber,
                        readContextDuringReconciliation(returnFiber, newChild),
                        lanes
                    )
                throwOnInvalidObjectType(returnFiber, newChild)
            }
            return null
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = null !== oldFiber ? oldFiber.key : null
            if (
                ('string' === typeof newChild && '' !== newChild) ||
                'number' === typeof newChild ||
                'bigint' === typeof newChild
            )
                return null !== key
                    ? null
                    : updateTextNode(returnFiber, oldFiber, '' + newChild, lanes)
            if ('object' === typeof newChild && null !== newChild) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        return newChild.key === key
                            ? updateElement(returnFiber, oldFiber, newChild, lanes)
                            : null
                    case REACT_PORTAL_TYPE:
                        return newChild.key === key
                            ? updatePortal(returnFiber, oldFiber, newChild, lanes)
                            : null
                    case REACT_LAZY_TYPE:
                        return (
                            (key = newChild._init),
                            (newChild = key(newChild._payload)),
                            updateSlot(returnFiber, oldFiber, newChild, lanes)
                        )
                }
                if (isArrayImpl(newChild) || getIteratorFn(newChild))
                    return null !== key
                        ? null
                        : updateFragment(returnFiber, oldFiber, newChild, lanes, null)
                if ('function' === typeof newChild.then)
                    return updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes)
                if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                    return updateSlot(
                        returnFiber,
                        oldFiber,
                        readContextDuringReconciliation(returnFiber, newChild),
                        lanes
                    )
                throwOnInvalidObjectType(returnFiber, newChild)
            }
            return null
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (
                ('string' === typeof newChild && '' !== newChild) ||
                'number' === typeof newChild ||
                'bigint' === typeof newChild
            )
                return (
                    (existingChildren = existingChildren.get(newIdx) || null),
                    updateTextNode(returnFiber, existingChildren, '' + newChild, lanes)
                )
            if ('object' === typeof newChild && null !== newChild) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        return (
                            (existingChildren =
                                existingChildren.get(
                                    null === newChild.key ? newIdx : newChild.key
                                ) || null),
                            updateElement(returnFiber, existingChildren, newChild, lanes)
                        )
                    case REACT_PORTAL_TYPE:
                        return (
                            (existingChildren =
                                existingChildren.get(
                                    null === newChild.key ? newIdx : newChild.key
                                ) || null),
                            updatePortal(returnFiber, existingChildren, newChild, lanes)
                        )
                    case REACT_LAZY_TYPE:
                        var init = newChild._init
                        newChild = init(newChild._payload)
                        return updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes)
                }
                if (isArrayImpl(newChild) || getIteratorFn(newChild))
                    return (
                        (existingChildren = existingChildren.get(newIdx) || null),
                        updateFragment(returnFiber, existingChildren, newChild, lanes, null)
                    )
                if ('function' === typeof newChild.then)
                    return updateFromMap(
                        existingChildren,
                        returnFiber,
                        newIdx,
                        unwrapThenable(newChild),
                        lanes
                    )
                if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                    return updateFromMap(
                        existingChildren,
                        returnFiber,
                        newIdx,
                        readContextDuringReconciliation(returnFiber, newChild),
                        lanes
                    )
                throwOnInvalidObjectType(returnFiber, newChild)
            }
            return null
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            for (
                var resultingFirstChild = null,
                    previousNewFiber = null,
                    oldFiber = currentFirstChild,
                    newIdx = (currentFirstChild = 0),
                    nextOldFiber = null;
                null !== oldFiber && newIdx < newChildren.length;
                newIdx++
            ) {
                oldFiber.index > newIdx
                    ? ((nextOldFiber = oldFiber), (oldFiber = null))
                    : (nextOldFiber = oldFiber.sibling)
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes)
                if (null === newFiber) {
                    null === oldFiber && (oldFiber = nextOldFiber)
                    break
                }
                shouldTrackSideEffects &&
                    oldFiber &&
                    null === newFiber.alternate &&
                    deleteChild(returnFiber, oldFiber)
                currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx)
                null === previousNewFiber
                    ? (resultingFirstChild = newFiber)
                    : (previousNewFiber.sibling = newFiber)
                previousNewFiber = newFiber
                oldFiber = nextOldFiber
            }
            if (newIdx === newChildren.length)
                return (
                    deleteRemainingChildren(returnFiber, oldFiber),
                    isHydrating && pushTreeFork(returnFiber, newIdx),
                    resultingFirstChild
                )
            if (null === oldFiber) {
                for (; newIdx < newChildren.length; newIdx++)
                    (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
                        null !== oldFiber &&
                            ((currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx)),
                            null === previousNewFiber
                                ? (resultingFirstChild = oldFiber)
                                : (previousNewFiber.sibling = oldFiber),
                            (previousNewFiber = oldFiber))
                isHydrating && pushTreeFork(returnFiber, newIdx)
                return resultingFirstChild
            }
            for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
                (nextOldFiber = updateFromMap(
                    oldFiber,
                    returnFiber,
                    newIdx,
                    newChildren[newIdx],
                    lanes
                )),
                    null !== nextOldFiber &&
                        (shouldTrackSideEffects &&
                            null !== nextOldFiber.alternate &&
                            oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key),
                        (currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx)),
                        null === previousNewFiber
                            ? (resultingFirstChild = nextOldFiber)
                            : (previousNewFiber.sibling = nextOldFiber),
                        (previousNewFiber = nextOldFiber))
            shouldTrackSideEffects &&
                oldFiber.forEach(function (child) {
                    return deleteChild(returnFiber, child)
                })
            isHydrating && pushTreeFork(returnFiber, newIdx)
            return resultingFirstChild
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
            if (null == newChildren) throw Error(formatProdErrorMessage(151))
            for (
                var resultingFirstChild = null,
                    previousNewFiber = null,
                    oldFiber = currentFirstChild,
                    newIdx = (currentFirstChild = 0),
                    nextOldFiber = null,
                    step = newChildren.next();
                null !== oldFiber && !step.done;
                newIdx++, step = newChildren.next()
            ) {
                oldFiber.index > newIdx
                    ? ((nextOldFiber = oldFiber), (oldFiber = null))
                    : (nextOldFiber = oldFiber.sibling)
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes)
                if (null === newFiber) {
                    null === oldFiber && (oldFiber = nextOldFiber)
                    break
                }
                shouldTrackSideEffects &&
                    oldFiber &&
                    null === newFiber.alternate &&
                    deleteChild(returnFiber, oldFiber)
                currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx)
                null === previousNewFiber
                    ? (resultingFirstChild = newFiber)
                    : (previousNewFiber.sibling = newFiber)
                previousNewFiber = newFiber
                oldFiber = nextOldFiber
            }
            if (step.done)
                return (
                    deleteRemainingChildren(returnFiber, oldFiber),
                    isHydrating && pushTreeFork(returnFiber, newIdx),
                    resultingFirstChild
                )
            if (null === oldFiber) {
                for (; !step.done; newIdx++, step = newChildren.next())
                    (step = createChild(returnFiber, step.value, lanes)),
                        null !== step &&
                            ((currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
                            null === previousNewFiber
                                ? (resultingFirstChild = step)
                                : (previousNewFiber.sibling = step),
                            (previousNewFiber = step))
                isHydrating && pushTreeFork(returnFiber, newIdx)
                return resultingFirstChild
            }
            for (
                oldFiber = mapRemainingChildren(oldFiber);
                !step.done;
                newIdx++, step = newChildren.next()
            )
                (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes)),
                    null !== step &&
                        (shouldTrackSideEffects &&
                            null !== step.alternate &&
                            oldFiber.delete(null === step.key ? newIdx : step.key),
                        (currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
                        null === previousNewFiber
                            ? (resultingFirstChild = step)
                            : (previousNewFiber.sibling = step),
                        (previousNewFiber = step))
            shouldTrackSideEffects &&
                oldFiber.forEach(function (child) {
                    return deleteChild(returnFiber, child)
                })
            isHydrating && pushTreeFork(returnFiber, newIdx)
            return resultingFirstChild
        }
        function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
            'object' === typeof newChild &&
                null !== newChild &&
                newChild.type === REACT_FRAGMENT_TYPE &&
                null === newChild.key &&
                (newChild = newChild.props.children)
            if ('object' === typeof newChild && null !== newChild) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        a: {
                            for (var key = newChild.key; null !== currentFirstChild; ) {
                                if (currentFirstChild.key === key) {
                                    key = newChild.type
                                    if (key === REACT_FRAGMENT_TYPE) {
                                        if (7 === currentFirstChild.tag) {
                                            deleteRemainingChildren(
                                                returnFiber,
                                                currentFirstChild.sibling
                                            )
                                            lanes = useFiber(
                                                currentFirstChild,
                                                newChild.props.children
                                            )
                                            lanes.return = returnFiber
                                            returnFiber = lanes
                                            break a
                                        }
                                    } else if (
                                        currentFirstChild.elementType === key ||
                                        ('object' === typeof key &&
                                            null !== key &&
                                            key.$$typeof === REACT_LAZY_TYPE &&
                                            resolveLazy(key) === currentFirstChild.type)
                                    ) {
                                        deleteRemainingChildren(
                                            returnFiber,
                                            currentFirstChild.sibling
                                        )
                                        lanes = useFiber(currentFirstChild, newChild.props)
                                        coerceRef(lanes, newChild)
                                        lanes.return = returnFiber
                                        returnFiber = lanes
                                        break a
                                    }
                                    deleteRemainingChildren(returnFiber, currentFirstChild)
                                    break
                                } else deleteChild(returnFiber, currentFirstChild)
                                currentFirstChild = currentFirstChild.sibling
                            }
                            newChild.type === REACT_FRAGMENT_TYPE
                                ? ((lanes = createFiberFromFragment(
                                      newChild.props.children,
                                      returnFiber.mode,
                                      lanes,
                                      newChild.key
                                  )),
                                  (lanes.return = returnFiber),
                                  (returnFiber = lanes))
                                : ((lanes = createFiberFromTypeAndProps(
                                      newChild.type,
                                      newChild.key,
                                      newChild.props,
                                      null,
                                      returnFiber.mode,
                                      lanes
                                  )),
                                  coerceRef(lanes, newChild),
                                  (lanes.return = returnFiber),
                                  (returnFiber = lanes))
                        }
                        return placeSingleChild(returnFiber)
                    case REACT_PORTAL_TYPE:
                        a: {
                            for (key = newChild.key; null !== currentFirstChild; ) {
                                if (currentFirstChild.key === key)
                                    if (
                                        4 === currentFirstChild.tag &&
                                        currentFirstChild.stateNode.containerInfo ===
                                            newChild.containerInfo &&
                                        currentFirstChild.stateNode.implementation ===
                                            newChild.implementation
                                    ) {
                                        deleteRemainingChildren(
                                            returnFiber,
                                            currentFirstChild.sibling
                                        )
                                        lanes = useFiber(currentFirstChild, newChild.children || [])
                                        lanes.return = returnFiber
                                        returnFiber = lanes
                                        break a
                                    } else {
                                        deleteRemainingChildren(returnFiber, currentFirstChild)
                                        break
                                    }
                                else deleteChild(returnFiber, currentFirstChild)
                                currentFirstChild = currentFirstChild.sibling
                            }
                            lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes)
                            lanes.return = returnFiber
                            returnFiber = lanes
                        }
                        return placeSingleChild(returnFiber)
                    case REACT_LAZY_TYPE:
                        return (
                            (key = newChild._init),
                            (newChild = key(newChild._payload)),
                            reconcileChildFibersImpl(
                                returnFiber,
                                currentFirstChild,
                                newChild,
                                lanes
                            )
                        )
                }
                if (isArrayImpl(newChild))
                    return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes)
                if (getIteratorFn(newChild)) {
                    key = getIteratorFn(newChild)
                    if ('function' !== typeof key) throw Error(formatProdErrorMessage(150))
                    newChild = key.call(newChild)
                    return reconcileChildrenIterator(
                        returnFiber,
                        currentFirstChild,
                        newChild,
                        lanes
                    )
                }
                if ('function' === typeof newChild.then)
                    return reconcileChildFibersImpl(
                        returnFiber,
                        currentFirstChild,
                        unwrapThenable(newChild),
                        lanes
                    )
                if (newChild.$$typeof === REACT_CONTEXT_TYPE)
                    return reconcileChildFibersImpl(
                        returnFiber,
                        currentFirstChild,
                        readContextDuringReconciliation(returnFiber, newChild),
                        lanes
                    )
                throwOnInvalidObjectType(returnFiber, newChild)
            }
            return ('string' === typeof newChild && '' !== newChild) ||
                'number' === typeof newChild ||
                'bigint' === typeof newChild
                ? ((newChild = '' + newChild),
                  null !== currentFirstChild && 6 === currentFirstChild.tag
                      ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling),
                        (lanes = useFiber(currentFirstChild, newChild)),
                        (lanes.return = returnFiber),
                        (returnFiber = lanes))
                      : (deleteRemainingChildren(returnFiber, currentFirstChild),
                        (lanes = createFiberFromText(newChild, returnFiber.mode, lanes)),
                        (lanes.return = returnFiber),
                        (returnFiber = lanes)),
                  placeSingleChild(returnFiber))
                : deleteRemainingChildren(returnFiber, currentFirstChild)
        }
        return function (returnFiber, currentFirstChild, newChild, lanes) {
            try {
                thenableIndexCounter = 0
                var firstChildFiber = reconcileChildFibersImpl(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    lanes
                )
                thenableState = null
                return firstChildFiber
            } catch (x2) {
                if (x2 === SuspenseException || x2 === SuspenseActionException) throw x2
                var fiber = createFiberImplClass(29, x2, null, returnFiber.mode)
                fiber.lanes = lanes
                fiber.return = returnFiber
                return fiber
            } finally {
            }
        }
    }
    var reconcileChildFibers = createChildReconciler(true),
        mountChildFibers = createChildReconciler(false),
        suspenseHandlerStackCursor = createCursor(null),
        shellBoundary = null
    function pushPrimaryTreeSuspenseHandler(handler) {
        var current = handler.alternate
        push(suspenseStackCursor, suspenseStackCursor.current & 1)
        push(suspenseHandlerStackCursor, handler)
        null === shellBoundary &&
            (null === current || null !== currentTreeHiddenStackCursor.current
                ? (shellBoundary = handler)
                : null !== current.memoizedState && (shellBoundary = handler))
    }
    function pushOffscreenSuspenseHandler(fiber) {
        if (22 === fiber.tag) {
            if (
                (push(suspenseStackCursor, suspenseStackCursor.current),
                push(suspenseHandlerStackCursor, fiber),
                null === shellBoundary)
            ) {
                var current = fiber.alternate
                null !== current && null !== current.memoizedState && (shellBoundary = fiber)
            }
        } else reuseSuspenseHandlerOnStack()
    }
    function reuseSuspenseHandlerOnStack() {
        push(suspenseStackCursor, suspenseStackCursor.current)
        push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current)
    }
    function popSuspenseHandler(fiber) {
        pop(suspenseHandlerStackCursor)
        shellBoundary === fiber && (shellBoundary = null)
        pop(suspenseStackCursor)
    }
    var suspenseStackCursor = createCursor(0)
    function findFirstSuspended(row) {
        for (var node2 = row; null !== node2; ) {
            if (13 === node2.tag) {
                var state = node2.memoizedState
                if (
                    null !== state &&
                    ((state = state.dehydrated),
                    null === state || '$?' === state.data || isSuspenseInstanceFallback(state))
                )
                    return node2
            } else if (19 === node2.tag && void 0 !== node2.memoizedProps.revealOrder) {
                if (0 !== (node2.flags & 128)) return node2
            } else if (null !== node2.child) {
                node2.child.return = node2
                node2 = node2.child
                continue
            }
            if (node2 === row) break
            for (; null === node2.sibling; ) {
                if (null === node2.return || node2.return === row) return null
                node2 = node2.return
            }
            node2.sibling.return = node2.return
            node2 = node2.sibling
        }
        return null
    }
    function applyDerivedStateFromProps(
        workInProgress2,
        ctor,
        getDerivedStateFromProps,
        nextProps
    ) {
        ctor = workInProgress2.memoizedState
        getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor)
        getDerivedStateFromProps =
            null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps
                ? ctor
                : assign2({}, ctor, getDerivedStateFromProps)
        workInProgress2.memoizedState = getDerivedStateFromProps
        0 === workInProgress2.lanes &&
            (workInProgress2.updateQueue.baseState = getDerivedStateFromProps)
    }
    var classComponentUpdater = {
        enqueueSetState: function (inst, payload, callback) {
            inst = inst._reactInternals
            var lane = requestUpdateLane(),
                update = createUpdate(lane)
            update.payload = payload
            void 0 !== callback && null !== callback && (update.callback = callback)
            payload = enqueueUpdate(inst, update, lane)
            null !== payload &&
                (scheduleUpdateOnFiber(payload, inst, lane),
                entangleTransitions(payload, inst, lane))
        },
        enqueueReplaceState: function (inst, payload, callback) {
            inst = inst._reactInternals
            var lane = requestUpdateLane(),
                update = createUpdate(lane)
            update.tag = 1
            update.payload = payload
            void 0 !== callback && null !== callback && (update.callback = callback)
            payload = enqueueUpdate(inst, update, lane)
            null !== payload &&
                (scheduleUpdateOnFiber(payload, inst, lane),
                entangleTransitions(payload, inst, lane))
        },
        enqueueForceUpdate: function (inst, callback) {
            inst = inst._reactInternals
            var lane = requestUpdateLane(),
                update = createUpdate(lane)
            update.tag = 2
            void 0 !== callback && null !== callback && (update.callback = callback)
            callback = enqueueUpdate(inst, update, lane)
            null !== callback &&
                (scheduleUpdateOnFiber(callback, inst, lane),
                entangleTransitions(callback, inst, lane))
        }
    }
    function checkShouldComponentUpdate(
        workInProgress2,
        ctor,
        oldProps,
        newProps,
        oldState,
        newState,
        nextContext
    ) {
        workInProgress2 = workInProgress2.stateNode
        return 'function' === typeof workInProgress2.shouldComponentUpdate
            ? workInProgress2.shouldComponentUpdate(newProps, newState, nextContext)
            : ctor.prototype && ctor.prototype.isPureReactComponent
              ? !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState)
              : true
    }
    function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        workInProgress2 = instance.state
        'function' === typeof instance.componentWillReceiveProps &&
            instance.componentWillReceiveProps(newProps, nextContext)
        'function' === typeof instance.UNSAFE_componentWillReceiveProps &&
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext)
        instance.state !== workInProgress2 &&
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null)
    }
    function resolveClassComponentProps(Component, baseProps) {
        var newProps = baseProps
        if ('ref' in baseProps) {
            newProps = {}
            for (var propName in baseProps)
                'ref' !== propName && (newProps[propName] = baseProps[propName])
        }
        if ((Component = Component.defaultProps)) {
            newProps === baseProps && (newProps = assign2({}, newProps))
            for (var propName$73 in Component)
                void 0 === newProps[propName$73] && (newProps[propName$73] = Component[propName$73])
        }
        return newProps
    }
    var reportGlobalError =
        'function' === typeof reportError
            ? reportError
            : function (error) {
                  if ('object' === typeof window && 'function' === typeof window.ErrorEvent) {
                      var event = new window.ErrorEvent('error', {
                          bubbles: true,
                          cancelable: true,
                          message:
                              'object' === typeof error &&
                              null !== error &&
                              'string' === typeof error.message
                                  ? String(error.message)
                                  : String(error),
                          error
                      })
                      if (!window.dispatchEvent(event)) return
                  } else if ('object' === typeof process && 'function' === typeof process.emit) {
                      process.emit('uncaughtException', error)
                      return
                  }
                  console.error(error)
              }
    function defaultOnUncaughtError(error) {
        reportGlobalError(error)
    }
    function defaultOnCaughtError(error) {
        console.error(error)
    }
    function defaultOnRecoverableError(error) {
        reportGlobalError(error)
    }
    function logUncaughtError(root2, errorInfo) {
        try {
            var onUncaughtError = root2.onUncaughtError
            onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack })
        } catch (e$74) {
            setTimeout(function () {
                throw e$74
            })
        }
    }
    function logCaughtError(root2, boundary, errorInfo) {
        try {
            var onCaughtError = root2.onCaughtError
            onCaughtError(errorInfo.value, {
                componentStack: errorInfo.stack,
                errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
            })
        } catch (e$75) {
            setTimeout(function () {
                throw e$75
            })
        }
    }
    function createRootErrorUpdate(root2, errorInfo, lane) {
        lane = createUpdate(lane)
        lane.tag = 3
        lane.payload = { element: null }
        lane.callback = function () {
            logUncaughtError(root2, errorInfo)
        }
        return lane
    }
    function createClassErrorUpdate(lane) {
        lane = createUpdate(lane)
        lane.tag = 3
        return lane
    }
    function initializeClassErrorUpdate(update, root2, fiber, errorInfo) {
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError
        if ('function' === typeof getDerivedStateFromError) {
            var error = errorInfo.value
            update.payload = function () {
                return getDerivedStateFromError(error)
            }
            update.callback = function () {
                logCaughtError(root2, fiber, errorInfo)
            }
        }
        var inst = fiber.stateNode
        null !== inst &&
            'function' === typeof inst.componentDidCatch &&
            (update.callback = function () {
                logCaughtError(root2, fiber, errorInfo)
                'function' !== typeof getDerivedStateFromError &&
                    (null === legacyErrorBoundariesThatAlreadyFailed
                        ? (legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]))
                        : legacyErrorBoundariesThatAlreadyFailed.add(this))
                var stack = errorInfo.stack
                this.componentDidCatch(errorInfo.value, {
                    componentStack: null !== stack ? stack : ''
                })
            })
    }
    function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= 32768
        if (null !== value && 'object' === typeof value && 'function' === typeof value.then) {
            returnFiber = sourceFiber.alternate
            null !== returnFiber &&
                propagateParentContextChanges(returnFiber, sourceFiber, rootRenderLanes, true)
            sourceFiber = suspenseHandlerStackCursor.current
            if (null !== sourceFiber) {
                switch (sourceFiber.tag) {
                    case 13:
                        return (
                            null === shellBoundary
                                ? renderDidSuspendDelayIfPossible()
                                : null === sourceFiber.alternate &&
                                  0 === workInProgressRootExitStatus &&
                                  (workInProgressRootExitStatus = 3),
                            (sourceFiber.flags &= -257),
                            (sourceFiber.flags |= 65536),
                            (sourceFiber.lanes = rootRenderLanes),
                            value === noopSuspenseyCommitThenable
                                ? (sourceFiber.flags |= 16384)
                                : ((returnFiber = sourceFiber.updateQueue),
                                  null === returnFiber
                                      ? (sourceFiber.updateQueue = /* @__PURE__ */ new Set([value]))
                                      : returnFiber.add(value),
                                  attachPingListener(root2, value, rootRenderLanes)),
                            false
                        )
                    case 22:
                        return (
                            (sourceFiber.flags |= 65536),
                            value === noopSuspenseyCommitThenable
                                ? (sourceFiber.flags |= 16384)
                                : ((returnFiber = sourceFiber.updateQueue),
                                  null === returnFiber
                                      ? ((returnFiber = {
                                            transitions: null,
                                            markerInstances: null,
                                            retryQueue: /* @__PURE__ */ new Set([value])
                                        }),
                                        (sourceFiber.updateQueue = returnFiber))
                                      : ((sourceFiber = returnFiber.retryQueue),
                                        null === sourceFiber
                                            ? (returnFiber.retryQueue = /* @__PURE__ */ new Set([
                                                  value
                                              ]))
                                            : sourceFiber.add(value)),
                                  attachPingListener(root2, value, rootRenderLanes)),
                            false
                        )
                }
                throw Error(formatProdErrorMessage(435, sourceFiber.tag))
            }
            attachPingListener(root2, value, rootRenderLanes)
            renderDidSuspendDelayIfPossible()
            return false
        }
        if (isHydrating)
            return (
                (returnFiber = suspenseHandlerStackCursor.current),
                null !== returnFiber
                    ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),
                      (returnFiber.flags |= 65536),
                      (returnFiber.lanes = rootRenderLanes),
                      value !== HydrationMismatchException &&
                          ((root2 = Error(formatProdErrorMessage(422), { cause: value })),
                          queueHydrationError(createCapturedValueAtFiber(root2, sourceFiber))))
                    : (value !== HydrationMismatchException &&
                          ((returnFiber = Error(formatProdErrorMessage(423), {
                              cause: value
                          })),
                          queueHydrationError(
                              createCapturedValueAtFiber(returnFiber, sourceFiber)
                          )),
                      (root2 = root2.current.alternate),
                      (root2.flags |= 65536),
                      (rootRenderLanes &= -rootRenderLanes),
                      (root2.lanes |= rootRenderLanes),
                      (value = createCapturedValueAtFiber(value, sourceFiber)),
                      (rootRenderLanes = createRootErrorUpdate(
                          root2.stateNode,
                          value,
                          rootRenderLanes
                      )),
                      enqueueCapturedUpdate(root2, rootRenderLanes),
                      4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2)),
                false
            )
        var wrapperError = Error(formatProdErrorMessage(520), { cause: value })
        wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber)
        null === workInProgressRootConcurrentErrors
            ? (workInProgressRootConcurrentErrors = [wrapperError])
            : workInProgressRootConcurrentErrors.push(wrapperError)
        4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2)
        if (null === returnFiber) return true
        value = createCapturedValueAtFiber(value, sourceFiber)
        sourceFiber = returnFiber
        do {
            switch (sourceFiber.tag) {
                case 3:
                    return (
                        (sourceFiber.flags |= 65536),
                        (root2 = rootRenderLanes & -rootRenderLanes),
                        (sourceFiber.lanes |= root2),
                        (root2 = createRootErrorUpdate(sourceFiber.stateNode, value, root2)),
                        enqueueCapturedUpdate(sourceFiber, root2),
                        false
                    )
                case 1:
                    if (
                        ((returnFiber = sourceFiber.type),
                        (wrapperError = sourceFiber.stateNode),
                        0 === (sourceFiber.flags & 128) &&
                            ('function' === typeof returnFiber.getDerivedStateFromError ||
                                (null !== wrapperError &&
                                    'function' === typeof wrapperError.componentDidCatch &&
                                    (null === legacyErrorBoundariesThatAlreadyFailed ||
                                        !legacyErrorBoundariesThatAlreadyFailed.has(
                                            wrapperError
                                        )))))
                    )
                        return (
                            (sourceFiber.flags |= 65536),
                            (rootRenderLanes &= -rootRenderLanes),
                            (sourceFiber.lanes |= rootRenderLanes),
                            (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),
                            initializeClassErrorUpdate(rootRenderLanes, root2, sourceFiber, value),
                            enqueueCapturedUpdate(sourceFiber, rootRenderLanes),
                            false
                        )
            }
            sourceFiber = sourceFiber.return
        } while (null !== sourceFiber)
        return false
    }
    var SelectiveHydrationException = Error(formatProdErrorMessage(461)),
        didReceiveUpdate = false
    function reconcileChildren(current, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child =
            null === current
                ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2)
                : reconcileChildFibers(workInProgress2, current.child, nextChildren, renderLanes2)
    }
    function updateForwardRef(current, workInProgress2, Component, nextProps, renderLanes2) {
        Component = Component.render
        var ref = workInProgress2.ref
        if ('ref' in nextProps) {
            var propsWithoutRef = {}
            for (var key in nextProps) 'ref' !== key && (propsWithoutRef[key] = nextProps[key])
        } else propsWithoutRef = nextProps
        prepareToReadContext(workInProgress2)
        nextProps = renderWithHooks(
            current,
            workInProgress2,
            Component,
            propsWithoutRef,
            ref,
            renderLanes2
        )
        key = checkDidRenderIdHook()
        if (null !== current && !didReceiveUpdate)
            return (
                bailoutHooks(current, workInProgress2, renderLanes2),
                bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2)
            )
        isHydrating && key && pushMaterializedTreeId(workInProgress2)
        workInProgress2.flags |= 1
        reconcileChildren(current, workInProgress2, nextProps, renderLanes2)
        return workInProgress2.child
    }
    function updateMemoComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
        if (null === current) {
            var type = Component.type
            if (
                'function' === typeof type &&
                !shouldConstruct(type) &&
                void 0 === type.defaultProps &&
                null === Component.compare
            )
                return (
                    (workInProgress2.tag = 15),
                    (workInProgress2.type = type),
                    updateSimpleMemoComponent(
                        current,
                        workInProgress2,
                        type,
                        nextProps,
                        renderLanes2
                    )
                )
            current = createFiberFromTypeAndProps(
                Component.type,
                null,
                nextProps,
                workInProgress2,
                workInProgress2.mode,
                renderLanes2
            )
            current.ref = workInProgress2.ref
            current.return = workInProgress2
            return (workInProgress2.child = current)
        }
        type = current.child
        if (!checkScheduledUpdateOrContext(current, renderLanes2)) {
            var prevProps = type.memoizedProps
            Component = Component.compare
            Component = null !== Component ? Component : shallowEqual2
            if (Component(prevProps, nextProps) && current.ref === workInProgress2.ref)
                return bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2)
        }
        workInProgress2.flags |= 1
        current = createWorkInProgress(type, nextProps)
        current.ref = workInProgress2.ref
        current.return = workInProgress2
        return (workInProgress2.child = current)
    }
    function updateSimpleMemoComponent(
        current,
        workInProgress2,
        Component,
        nextProps,
        renderLanes2
    ) {
        if (null !== current) {
            var prevProps = current.memoizedProps
            if (shallowEqual2(prevProps, nextProps) && current.ref === workInProgress2.ref)
                if (
                    ((didReceiveUpdate = false),
                    (workInProgress2.pendingProps = nextProps = prevProps),
                    checkScheduledUpdateOrContext(current, renderLanes2))
                )
                    0 !== (current.flags & 131072) && (didReceiveUpdate = true)
                else
                    return (
                        (workInProgress2.lanes = current.lanes),
                        bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2)
                    )
        }
        return updateFunctionComponent(current, workInProgress2, Component, nextProps, renderLanes2)
    }
    function updateOffscreenComponent(current, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps,
            nextChildren = nextProps.children,
            prevState = null !== current ? current.memoizedState : null
        if ('hidden' === nextProps.mode) {
            if (0 !== (workInProgress2.flags & 128)) {
                nextProps = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2
                if (null !== current) {
                    nextChildren = workInProgress2.child = current.child
                    for (prevState = 0; null !== nextChildren; )
                        (prevState = prevState | nextChildren.lanes | nextChildren.childLanes),
                            (nextChildren = nextChildren.sibling)
                    workInProgress2.childLanes = prevState & ~nextProps
                } else (workInProgress2.childLanes = 0), (workInProgress2.child = null)
                return deferHiddenOffscreenComponent(
                    current,
                    workInProgress2,
                    nextProps,
                    renderLanes2
                )
            }
            if (0 !== (renderLanes2 & 536870912))
                (workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }),
                    null !== current &&
                        pushTransition(
                            workInProgress2,
                            null !== prevState ? prevState.cachePool : null
                        ),
                    null !== prevState
                        ? pushHiddenContext(workInProgress2, prevState)
                        : reuseHiddenContextOnStack(),
                    pushOffscreenSuspenseHandler(workInProgress2)
            else
                return (
                    (workInProgress2.lanes = workInProgress2.childLanes = 536870912),
                    deferHiddenOffscreenComponent(
                        current,
                        workInProgress2,
                        null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2,
                        renderLanes2
                    )
                )
        } else
            null !== prevState
                ? (pushTransition(workInProgress2, prevState.cachePool),
                  pushHiddenContext(workInProgress2, prevState),
                  reuseSuspenseHandlerOnStack(),
                  (workInProgress2.memoizedState = null))
                : (null !== current && pushTransition(workInProgress2, null),
                  reuseHiddenContextOnStack(),
                  reuseSuspenseHandlerOnStack())
        reconcileChildren(current, workInProgress2, nextChildren, renderLanes2)
        return workInProgress2.child
    }
    function deferHiddenOffscreenComponent(current, workInProgress2, nextBaseLanes, renderLanes2) {
        var JSCompiler_inline_result = peekCacheFromPool()
        JSCompiler_inline_result =
            null === JSCompiler_inline_result
                ? null
                : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result }
        workInProgress2.memoizedState = {
            baseLanes: nextBaseLanes,
            cachePool: JSCompiler_inline_result
        }
        null !== current && pushTransition(workInProgress2, null)
        reuseHiddenContextOnStack()
        pushOffscreenSuspenseHandler(workInProgress2)
        null !== current &&
            propagateParentContextChanges(current, workInProgress2, renderLanes2, true)
        return null
    }
    function markRef(current, workInProgress2) {
        var ref = workInProgress2.ref
        if (null === ref)
            null !== current && null !== current.ref && (workInProgress2.flags |= 4194816)
        else {
            if ('function' !== typeof ref && 'object' !== typeof ref)
                throw Error(formatProdErrorMessage(284))
            if (null === current || current.ref !== ref) workInProgress2.flags |= 4194816
        }
    }
    function updateFunctionComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
        prepareToReadContext(workInProgress2)
        Component = renderWithHooks(
            current,
            workInProgress2,
            Component,
            nextProps,
            void 0,
            renderLanes2
        )
        nextProps = checkDidRenderIdHook()
        if (null !== current && !didReceiveUpdate)
            return (
                bailoutHooks(current, workInProgress2, renderLanes2),
                bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2)
            )
        isHydrating && nextProps && pushMaterializedTreeId(workInProgress2)
        workInProgress2.flags |= 1
        reconcileChildren(current, workInProgress2, Component, renderLanes2)
        return workInProgress2.child
    }
    function replayFunctionComponent(
        current,
        workInProgress2,
        nextProps,
        Component,
        secondArg,
        renderLanes2
    ) {
        prepareToReadContext(workInProgress2)
        workInProgress2.updateQueue = null
        nextProps = renderWithHooksAgain(workInProgress2, Component, nextProps, secondArg)
        finishRenderingHooks(current)
        Component = checkDidRenderIdHook()
        if (null !== current && !didReceiveUpdate)
            return (
                bailoutHooks(current, workInProgress2, renderLanes2),
                bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2)
            )
        isHydrating && Component && pushMaterializedTreeId(workInProgress2)
        workInProgress2.flags |= 1
        reconcileChildren(current, workInProgress2, nextProps, renderLanes2)
        return workInProgress2.child
    }
    function updateClassComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
        prepareToReadContext(workInProgress2)
        if (null === workInProgress2.stateNode) {
            var context = emptyContextObject,
                contextType = Component.contextType
            'object' === typeof contextType &&
                null !== contextType &&
                (context = readContext(contextType))
            context = new Component(nextProps, context)
            workInProgress2.memoizedState =
                null !== context.state && void 0 !== context.state ? context.state : null
            context.updater = classComponentUpdater
            workInProgress2.stateNode = context
            context._reactInternals = workInProgress2
            context = workInProgress2.stateNode
            context.props = nextProps
            context.state = workInProgress2.memoizedState
            context.refs = {}
            initializeUpdateQueue(workInProgress2)
            contextType = Component.contextType
            context.context =
                'object' === typeof contextType && null !== contextType
                    ? readContext(contextType)
                    : emptyContextObject
            context.state = workInProgress2.memoizedState
            contextType = Component.getDerivedStateFromProps
            'function' === typeof contextType &&
                (applyDerivedStateFromProps(workInProgress2, Component, contextType, nextProps),
                (context.state = workInProgress2.memoizedState))
            'function' === typeof Component.getDerivedStateFromProps ||
                'function' === typeof context.getSnapshotBeforeUpdate ||
                ('function' !== typeof context.UNSAFE_componentWillMount &&
                    'function' !== typeof context.componentWillMount) ||
                ((contextType = context.state),
                'function' === typeof context.componentWillMount && context.componentWillMount(),
                'function' === typeof context.UNSAFE_componentWillMount &&
                    context.UNSAFE_componentWillMount(),
                contextType !== context.state &&
                    classComponentUpdater.enqueueReplaceState(context, context.state, null),
                processUpdateQueue(workInProgress2, nextProps, context, renderLanes2),
                suspendIfUpdateReadFromEntangledAsyncAction(),
                (context.state = workInProgress2.memoizedState))
            'function' === typeof context.componentDidMount && (workInProgress2.flags |= 4194308)
            nextProps = true
        } else if (null === current) {
            context = workInProgress2.stateNode
            var unresolvedOldProps = workInProgress2.memoizedProps,
                oldProps = resolveClassComponentProps(Component, unresolvedOldProps)
            context.props = oldProps
            var oldContext = context.context,
                contextType$jscomp$0 = Component.contextType
            contextType = emptyContextObject
            'object' === typeof contextType$jscomp$0 &&
                null !== contextType$jscomp$0 &&
                (contextType = readContext(contextType$jscomp$0))
            var getDerivedStateFromProps = Component.getDerivedStateFromProps
            contextType$jscomp$0 =
                'function' === typeof getDerivedStateFromProps ||
                'function' === typeof context.getSnapshotBeforeUpdate
            unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps
            contextType$jscomp$0 ||
                ('function' !== typeof context.UNSAFE_componentWillReceiveProps &&
                    'function' !== typeof context.componentWillReceiveProps) ||
                ((unresolvedOldProps || oldContext !== contextType) &&
                    callComponentWillReceiveProps(workInProgress2, context, nextProps, contextType))
            hasForceUpdate = false
            var oldState = workInProgress2.memoizedState
            context.state = oldState
            processUpdateQueue(workInProgress2, nextProps, context, renderLanes2)
            suspendIfUpdateReadFromEntangledAsyncAction()
            oldContext = workInProgress2.memoizedState
            unresolvedOldProps || oldState !== oldContext || hasForceUpdate
                ? ('function' === typeof getDerivedStateFromProps &&
                      (applyDerivedStateFromProps(
                          workInProgress2,
                          Component,
                          getDerivedStateFromProps,
                          nextProps
                      ),
                      (oldContext = workInProgress2.memoizedState)),
                  (oldProps =
                      hasForceUpdate ||
                      checkShouldComponentUpdate(
                          workInProgress2,
                          Component,
                          oldProps,
                          nextProps,
                          oldState,
                          oldContext,
                          contextType
                      ))
                      ? (contextType$jscomp$0 ||
                            ('function' !== typeof context.UNSAFE_componentWillMount &&
                                'function' !== typeof context.componentWillMount) ||
                            ('function' === typeof context.componentWillMount &&
                                context.componentWillMount(),
                            'function' === typeof context.UNSAFE_componentWillMount &&
                                context.UNSAFE_componentWillMount()),
                        'function' === typeof context.componentDidMount &&
                            (workInProgress2.flags |= 4194308))
                      : ('function' === typeof context.componentDidMount &&
                            (workInProgress2.flags |= 4194308),
                        (workInProgress2.memoizedProps = nextProps),
                        (workInProgress2.memoizedState = oldContext)),
                  (context.props = nextProps),
                  (context.state = oldContext),
                  (context.context = contextType),
                  (nextProps = oldProps))
                : ('function' === typeof context.componentDidMount &&
                      (workInProgress2.flags |= 4194308),
                  (nextProps = false))
        } else {
            context = workInProgress2.stateNode
            cloneUpdateQueue(current, workInProgress2)
            contextType = workInProgress2.memoizedProps
            contextType$jscomp$0 = resolveClassComponentProps(Component, contextType)
            context.props = contextType$jscomp$0
            getDerivedStateFromProps = workInProgress2.pendingProps
            oldState = context.context
            oldContext = Component.contextType
            oldProps = emptyContextObject
            'object' === typeof oldContext &&
                null !== oldContext &&
                (oldProps = readContext(oldContext))
            unresolvedOldProps = Component.getDerivedStateFromProps
            ;(oldContext =
                'function' === typeof unresolvedOldProps ||
                'function' === typeof context.getSnapshotBeforeUpdate) ||
                ('function' !== typeof context.UNSAFE_componentWillReceiveProps &&
                    'function' !== typeof context.componentWillReceiveProps) ||
                ((contextType !== getDerivedStateFromProps || oldState !== oldProps) &&
                    callComponentWillReceiveProps(workInProgress2, context, nextProps, oldProps))
            hasForceUpdate = false
            oldState = workInProgress2.memoizedState
            context.state = oldState
            processUpdateQueue(workInProgress2, nextProps, context, renderLanes2)
            suspendIfUpdateReadFromEntangledAsyncAction()
            var newState = workInProgress2.memoizedState
            contextType !== getDerivedStateFromProps ||
            oldState !== newState ||
            hasForceUpdate ||
            (null !== current &&
                null !== current.dependencies &&
                checkIfContextChanged(current.dependencies))
                ? ('function' === typeof unresolvedOldProps &&
                      (applyDerivedStateFromProps(
                          workInProgress2,
                          Component,
                          unresolvedOldProps,
                          nextProps
                      ),
                      (newState = workInProgress2.memoizedState)),
                  (contextType$jscomp$0 =
                      hasForceUpdate ||
                      checkShouldComponentUpdate(
                          workInProgress2,
                          Component,
                          contextType$jscomp$0,
                          nextProps,
                          oldState,
                          newState,
                          oldProps
                      ) ||
                      (null !== current &&
                          null !== current.dependencies &&
                          checkIfContextChanged(current.dependencies)))
                      ? (oldContext ||
                            ('function' !== typeof context.UNSAFE_componentWillUpdate &&
                                'function' !== typeof context.componentWillUpdate) ||
                            ('function' === typeof context.componentWillUpdate &&
                                context.componentWillUpdate(nextProps, newState, oldProps),
                            'function' === typeof context.UNSAFE_componentWillUpdate &&
                                context.UNSAFE_componentWillUpdate(nextProps, newState, oldProps)),
                        'function' === typeof context.componentDidUpdate &&
                            (workInProgress2.flags |= 4),
                        'function' === typeof context.getSnapshotBeforeUpdate &&
                            (workInProgress2.flags |= 1024))
                      : ('function' !== typeof context.componentDidUpdate ||
                            (contextType === current.memoizedProps &&
                                oldState === current.memoizedState) ||
                            (workInProgress2.flags |= 4),
                        'function' !== typeof context.getSnapshotBeforeUpdate ||
                            (contextType === current.memoizedProps &&
                                oldState === current.memoizedState) ||
                            (workInProgress2.flags |= 1024),
                        (workInProgress2.memoizedProps = nextProps),
                        (workInProgress2.memoizedState = newState)),
                  (context.props = nextProps),
                  (context.state = newState),
                  (context.context = oldProps),
                  (nextProps = contextType$jscomp$0))
                : ('function' !== typeof context.componentDidUpdate ||
                      (contextType === current.memoizedProps &&
                          oldState === current.memoizedState) ||
                      (workInProgress2.flags |= 4),
                  'function' !== typeof context.getSnapshotBeforeUpdate ||
                      (contextType === current.memoizedProps &&
                          oldState === current.memoizedState) ||
                      (workInProgress2.flags |= 1024),
                  (nextProps = false))
        }
        context = nextProps
        markRef(current, workInProgress2)
        nextProps = 0 !== (workInProgress2.flags & 128)
        context || nextProps
            ? ((context = workInProgress2.stateNode),
              (Component =
                  nextProps && 'function' !== typeof Component.getDerivedStateFromError
                      ? null
                      : context.render()),
              (workInProgress2.flags |= 1),
              null !== current && nextProps
                  ? ((workInProgress2.child = reconcileChildFibers(
                        workInProgress2,
                        current.child,
                        null,
                        renderLanes2
                    )),
                    (workInProgress2.child = reconcileChildFibers(
                        workInProgress2,
                        null,
                        Component,
                        renderLanes2
                    )))
                  : reconcileChildren(current, workInProgress2, Component, renderLanes2),
              (workInProgress2.memoizedState = context.state),
              (current = workInProgress2.child))
            : (current = bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2))
        return current
    }
    function mountHostRootWithoutHydrating(current, workInProgress2, nextChildren, renderLanes2) {
        resetHydrationState()
        workInProgress2.flags |= 256
        reconcileChildren(current, workInProgress2, nextChildren, renderLanes2)
        return workInProgress2.child
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: 0,
        hydrationErrors: null
    }
    function mountSuspenseOffscreenState(renderLanes2) {
        return { baseLanes: renderLanes2, cachePool: getSuspendedCache() }
    }
    function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes2) {
        current = null !== current ? current.childLanes & ~renderLanes2 : 0
        primaryTreeDidDefer && (current |= workInProgressDeferredLane)
        return current
    }
    function updateSuspenseComponent(current, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps,
            showFallback = false,
            didSuspend = 0 !== (workInProgress2.flags & 128),
            JSCompiler_temp
        ;(JSCompiler_temp = didSuspend) ||
            (JSCompiler_temp =
                null !== current && null === current.memoizedState
                    ? false
                    : 0 !== (suspenseStackCursor.current & 2))
        JSCompiler_temp && ((showFallback = true), (workInProgress2.flags &= -129))
        JSCompiler_temp = 0 !== (workInProgress2.flags & 32)
        workInProgress2.flags &= -33
        if (null === current) {
            if (isHydrating) {
                showFallback
                    ? pushPrimaryTreeSuspenseHandler(workInProgress2)
                    : reuseSuspenseHandlerOnStack()
                if (isHydrating) {
                    var nextInstance = nextHydratableInstance,
                        JSCompiler_temp$jscomp$0
                    if ((JSCompiler_temp$jscomp$0 = nextInstance)) {
                        c: {
                            JSCompiler_temp$jscomp$0 = nextInstance
                            for (
                                nextInstance = rootOrSingletonContext;
                                8 !== JSCompiler_temp$jscomp$0.nodeType;

                            ) {
                                if (!nextInstance) {
                                    nextInstance = null
                                    break c
                                }
                                JSCompiler_temp$jscomp$0 = getNextHydratable(
                                    JSCompiler_temp$jscomp$0.nextSibling
                                )
                                if (null === JSCompiler_temp$jscomp$0) {
                                    nextInstance = null
                                    break c
                                }
                            }
                            nextInstance = JSCompiler_temp$jscomp$0
                        }
                        null !== nextInstance
                            ? ((workInProgress2.memoizedState = {
                                  dehydrated: nextInstance,
                                  treeContext:
                                      null !== treeContextProvider
                                          ? { id: treeContextId, overflow: treeContextOverflow }
                                          : null,
                                  retryLane: 536870912,
                                  hydrationErrors: null
                              }),
                              (JSCompiler_temp$jscomp$0 = createFiberImplClass(18, null, null, 0)),
                              (JSCompiler_temp$jscomp$0.stateNode = nextInstance),
                              (JSCompiler_temp$jscomp$0.return = workInProgress2),
                              (workInProgress2.child = JSCompiler_temp$jscomp$0),
                              (hydrationParentFiber = workInProgress2),
                              (nextHydratableInstance = null),
                              (JSCompiler_temp$jscomp$0 = true))
                            : (JSCompiler_temp$jscomp$0 = false)
                    }
                    JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress2)
                }
                nextInstance = workInProgress2.memoizedState
                if (
                    null !== nextInstance &&
                    ((nextInstance = nextInstance.dehydrated), null !== nextInstance)
                )
                    return (
                        isSuspenseInstanceFallback(nextInstance)
                            ? (workInProgress2.lanes = 32)
                            : (workInProgress2.lanes = 536870912),
                        null
                    )
                popSuspenseHandler(workInProgress2)
            }
            nextInstance = nextProps.children
            nextProps = nextProps.fallback
            if (showFallback)
                return (
                    reuseSuspenseHandlerOnStack(),
                    (showFallback = workInProgress2.mode),
                    (nextInstance = mountWorkInProgressOffscreenFiber(
                        { mode: 'hidden', children: nextInstance },
                        showFallback
                    )),
                    (nextProps = createFiberFromFragment(
                        nextProps,
                        showFallback,
                        renderLanes2,
                        null
                    )),
                    (nextInstance.return = workInProgress2),
                    (nextProps.return = workInProgress2),
                    (nextInstance.sibling = nextProps),
                    (workInProgress2.child = nextInstance),
                    (showFallback = workInProgress2.child),
                    (showFallback.memoizedState = mountSuspenseOffscreenState(renderLanes2)),
                    (showFallback.childLanes = getRemainingWorkInPrimaryTree(
                        current,
                        JSCompiler_temp,
                        renderLanes2
                    )),
                    (workInProgress2.memoizedState = SUSPENDED_MARKER),
                    nextProps
                )
            pushPrimaryTreeSuspenseHandler(workInProgress2)
            return mountSuspensePrimaryChildren(workInProgress2, nextInstance)
        }
        JSCompiler_temp$jscomp$0 = current.memoizedState
        if (
            null !== JSCompiler_temp$jscomp$0 &&
            ((nextInstance = JSCompiler_temp$jscomp$0.dehydrated), null !== nextInstance)
        ) {
            if (didSuspend)
                workInProgress2.flags & 256
                    ? (pushPrimaryTreeSuspenseHandler(workInProgress2),
                      (workInProgress2.flags &= -257),
                      (workInProgress2 = retrySuspenseComponentWithoutHydrating(
                          current,
                          workInProgress2,
                          renderLanes2
                      )))
                    : null !== workInProgress2.memoizedState
                      ? (reuseSuspenseHandlerOnStack(),
                        (workInProgress2.child = current.child),
                        (workInProgress2.flags |= 128),
                        (workInProgress2 = null))
                      : (reuseSuspenseHandlerOnStack(),
                        (showFallback = nextProps.fallback),
                        (nextInstance = workInProgress2.mode),
                        (nextProps = mountWorkInProgressOffscreenFiber(
                            { mode: 'visible', children: nextProps.children },
                            nextInstance
                        )),
                        (showFallback = createFiberFromFragment(
                            showFallback,
                            nextInstance,
                            renderLanes2,
                            null
                        )),
                        (showFallback.flags |= 2),
                        (nextProps.return = workInProgress2),
                        (showFallback.return = workInProgress2),
                        (nextProps.sibling = showFallback),
                        (workInProgress2.child = nextProps),
                        reconcileChildFibers(workInProgress2, current.child, null, renderLanes2),
                        (nextProps = workInProgress2.child),
                        (nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes2)),
                        (nextProps.childLanes = getRemainingWorkInPrimaryTree(
                            current,
                            JSCompiler_temp,
                            renderLanes2
                        )),
                        (workInProgress2.memoizedState = SUSPENDED_MARKER),
                        (workInProgress2 = showFallback))
            else if (
                (pushPrimaryTreeSuspenseHandler(workInProgress2),
                isSuspenseInstanceFallback(nextInstance))
            ) {
                JSCompiler_temp = nextInstance.nextSibling && nextInstance.nextSibling.dataset
                if (JSCompiler_temp) var digest = JSCompiler_temp.dgst
                JSCompiler_temp = digest
                nextProps = Error(formatProdErrorMessage(419))
                nextProps.stack = ''
                nextProps.digest = JSCompiler_temp
                queueHydrationError({ value: nextProps, source: null, stack: null })
                workInProgress2 = retrySuspenseComponentWithoutHydrating(
                    current,
                    workInProgress2,
                    renderLanes2
                )
            } else if (
                (didReceiveUpdate ||
                    propagateParentContextChanges(current, workInProgress2, renderLanes2, false),
                (JSCompiler_temp = 0 !== (renderLanes2 & current.childLanes)),
                didReceiveUpdate || JSCompiler_temp)
            ) {
                JSCompiler_temp = workInProgressRoot
                if (
                    null !== JSCompiler_temp &&
                    ((nextProps = renderLanes2 & -renderLanes2),
                    (nextProps =
                        0 !== (nextProps & 42) ? 1 : getBumpedLaneForHydrationByLane(nextProps)),
                    (nextProps =
                        0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes2))
                            ? 0
                            : nextProps),
                    0 !== nextProps && nextProps !== JSCompiler_temp$jscomp$0.retryLane)
                )
                    throw (
                        ((JSCompiler_temp$jscomp$0.retryLane = nextProps),
                        enqueueConcurrentRenderForLane(current, nextProps),
                        scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps),
                        SelectiveHydrationException)
                    )
                '$?' === nextInstance.data || renderDidSuspendDelayIfPossible()
                workInProgress2 = retrySuspenseComponentWithoutHydrating(
                    current,
                    workInProgress2,
                    renderLanes2
                )
            } else
                '$?' === nextInstance.data
                    ? ((workInProgress2.flags |= 192),
                      (workInProgress2.child = current.child),
                      (workInProgress2 = null))
                    : ((current = JSCompiler_temp$jscomp$0.treeContext),
                      (nextHydratableInstance = getNextHydratable(nextInstance.nextSibling)),
                      (hydrationParentFiber = workInProgress2),
                      (isHydrating = true),
                      (hydrationErrors = null),
                      (rootOrSingletonContext = false),
                      null !== current &&
                          ((idStack[idStackIndex++] = treeContextId),
                          (idStack[idStackIndex++] = treeContextOverflow),
                          (idStack[idStackIndex++] = treeContextProvider),
                          (treeContextId = current.id),
                          (treeContextOverflow = current.overflow),
                          (treeContextProvider = workInProgress2)),
                      (workInProgress2 = mountSuspensePrimaryChildren(
                          workInProgress2,
                          nextProps.children
                      )),
                      (workInProgress2.flags |= 4096))
            return workInProgress2
        }
        if (showFallback)
            return (
                reuseSuspenseHandlerOnStack(),
                (showFallback = nextProps.fallback),
                (nextInstance = workInProgress2.mode),
                (JSCompiler_temp$jscomp$0 = current.child),
                (digest = JSCompiler_temp$jscomp$0.sibling),
                (nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
                    mode: 'hidden',
                    children: nextProps.children
                })),
                (nextProps.subtreeFlags = JSCompiler_temp$jscomp$0.subtreeFlags & 65011712),
                null !== digest
                    ? (showFallback = createWorkInProgress(digest, showFallback))
                    : ((showFallback = createFiberFromFragment(
                          showFallback,
                          nextInstance,
                          renderLanes2,
                          null
                      )),
                      (showFallback.flags |= 2)),
                (showFallback.return = workInProgress2),
                (nextProps.return = workInProgress2),
                (nextProps.sibling = showFallback),
                (workInProgress2.child = nextProps),
                (nextProps = showFallback),
                (showFallback = workInProgress2.child),
                (nextInstance = current.child.memoizedState),
                null === nextInstance
                    ? (nextInstance = mountSuspenseOffscreenState(renderLanes2))
                    : ((JSCompiler_temp$jscomp$0 = nextInstance.cachePool),
                      null !== JSCompiler_temp$jscomp$0
                          ? ((digest = CacheContext._currentValue),
                            (JSCompiler_temp$jscomp$0 =
                                JSCompiler_temp$jscomp$0.parent !== digest
                                    ? { parent: digest, pool: digest }
                                    : JSCompiler_temp$jscomp$0))
                          : (JSCompiler_temp$jscomp$0 = getSuspendedCache()),
                      (nextInstance = {
                          baseLanes: nextInstance.baseLanes | renderLanes2,
                          cachePool: JSCompiler_temp$jscomp$0
                      })),
                (showFallback.memoizedState = nextInstance),
                (showFallback.childLanes = getRemainingWorkInPrimaryTree(
                    current,
                    JSCompiler_temp,
                    renderLanes2
                )),
                (workInProgress2.memoizedState = SUSPENDED_MARKER),
                nextProps
            )
        pushPrimaryTreeSuspenseHandler(workInProgress2)
        renderLanes2 = current.child
        current = renderLanes2.sibling
        renderLanes2 = createWorkInProgress(renderLanes2, {
            mode: 'visible',
            children: nextProps.children
        })
        renderLanes2.return = workInProgress2
        renderLanes2.sibling = null
        null !== current &&
            ((JSCompiler_temp = workInProgress2.deletions),
            null === JSCompiler_temp
                ? ((workInProgress2.deletions = [current]), (workInProgress2.flags |= 16))
                : JSCompiler_temp.push(current))
        workInProgress2.child = renderLanes2
        workInProgress2.memoizedState = null
        return renderLanes2
    }
    function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
        primaryChildren = mountWorkInProgressOffscreenFiber(
            { mode: 'visible', children: primaryChildren },
            workInProgress2.mode
        )
        primaryChildren.return = workInProgress2
        return (workInProgress2.child = primaryChildren)
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
        offscreenProps = createFiberImplClass(22, offscreenProps, null, mode)
        offscreenProps.lanes = 0
        offscreenProps.stateNode = {
            _visibility: 1,
            _pendingMarkers: null,
            _retryCache: null,
            _transitions: null
        }
        return offscreenProps
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress2, renderLanes2) {
        reconcileChildFibers(workInProgress2, current.child, null, renderLanes2)
        current = mountSuspensePrimaryChildren(
            workInProgress2,
            workInProgress2.pendingProps.children
        )
        current.flags |= 2
        workInProgress2.memoizedState = null
        return current
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes |= renderLanes2
        var alternate = fiber.alternate
        null !== alternate && (alternate.lanes |= renderLanes2)
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot)
    }
    function initSuspenseListRenderState(
        workInProgress2,
        isBackwards,
        tail,
        lastContentRow,
        tailMode
    ) {
        var renderState = workInProgress2.memoizedState
        null === renderState
            ? (workInProgress2.memoizedState = {
                  isBackwards,
                  rendering: null,
                  renderingStartTime: 0,
                  last: lastContentRow,
                  tail,
                  tailMode
              })
            : ((renderState.isBackwards = isBackwards),
              (renderState.rendering = null),
              (renderState.renderingStartTime = 0),
              (renderState.last = lastContentRow),
              (renderState.tail = tail),
              (renderState.tailMode = tailMode))
    }
    function updateSuspenseListComponent(current, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps,
            revealOrder = nextProps.revealOrder,
            tailMode = nextProps.tail
        reconcileChildren(current, workInProgress2, nextProps.children, renderLanes2)
        nextProps = suspenseStackCursor.current
        if (0 !== (nextProps & 2)) (nextProps = (nextProps & 1) | 2), (workInProgress2.flags |= 128)
        else {
            if (null !== current && 0 !== (current.flags & 128))
                a: for (current = workInProgress2.child; null !== current; ) {
                    if (13 === current.tag)
                        null !== current.memoizedState &&
                            scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress2)
                    else if (19 === current.tag)
                        scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress2)
                    else if (null !== current.child) {
                        current.child.return = current
                        current = current.child
                        continue
                    }
                    if (current === workInProgress2) break a
                    for (; null === current.sibling; ) {
                        if (null === current.return || current.return === workInProgress2) break a
                        current = current.return
                    }
                    current.sibling.return = current.return
                    current = current.sibling
                }
            nextProps &= 1
        }
        push(suspenseStackCursor, nextProps)
        switch (revealOrder) {
            case 'forwards':
                renderLanes2 = workInProgress2.child
                for (revealOrder = null; null !== renderLanes2; )
                    (current = renderLanes2.alternate),
                        null !== current &&
                            null === findFirstSuspended(current) &&
                            (revealOrder = renderLanes2),
                        (renderLanes2 = renderLanes2.sibling)
                renderLanes2 = revealOrder
                null === renderLanes2
                    ? ((revealOrder = workInProgress2.child), (workInProgress2.child = null))
                    : ((revealOrder = renderLanes2.sibling), (renderLanes2.sibling = null))
                initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    revealOrder,
                    renderLanes2,
                    tailMode
                )
                break
            case 'backwards':
                renderLanes2 = null
                revealOrder = workInProgress2.child
                for (workInProgress2.child = null; null !== revealOrder; ) {
                    current = revealOrder.alternate
                    if (null !== current && null === findFirstSuspended(current)) {
                        workInProgress2.child = revealOrder
                        break
                    }
                    current = revealOrder.sibling
                    revealOrder.sibling = renderLanes2
                    renderLanes2 = revealOrder
                    revealOrder = current
                }
                initSuspenseListRenderState(workInProgress2, true, renderLanes2, null, tailMode)
                break
            case 'together':
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0)
                break
            default:
                workInProgress2.memoizedState = null
        }
        return workInProgress2.child
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2) {
        null !== current && (workInProgress2.dependencies = current.dependencies)
        workInProgressRootSkippedLanes |= workInProgress2.lanes
        if (0 === (renderLanes2 & workInProgress2.childLanes))
            if (null !== current) {
                if (
                    (propagateParentContextChanges(current, workInProgress2, renderLanes2, false),
                    0 === (renderLanes2 & workInProgress2.childLanes))
                )
                    return null
            } else return null
        if (null !== current && workInProgress2.child !== current.child)
            throw Error(formatProdErrorMessage(153))
        if (null !== workInProgress2.child) {
            current = workInProgress2.child
            renderLanes2 = createWorkInProgress(current, current.pendingProps)
            workInProgress2.child = renderLanes2
            for (renderLanes2.return = workInProgress2; null !== current.sibling; )
                (current = current.sibling),
                    (renderLanes2 = renderLanes2.sibling =
                        createWorkInProgress(current, current.pendingProps)),
                    (renderLanes2.return = workInProgress2)
            renderLanes2.sibling = null
        }
        return workInProgress2.child
    }
    function checkScheduledUpdateOrContext(current, renderLanes2) {
        if (0 !== (current.lanes & renderLanes2)) return true
        current = current.dependencies
        return null !== current && checkIfContextChanged(current) ? true : false
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
            case 3:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo)
                pushProvider(workInProgress2, CacheContext, current.memoizedState.cache)
                resetHydrationState()
                break
            case 27:
            case 5:
                pushHostContext(workInProgress2)
                break
            case 4:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo)
                break
            case 10:
                pushProvider(
                    workInProgress2,
                    workInProgress2.type,
                    workInProgress2.memoizedProps.value
                )
                break
            case 13:
                var state = workInProgress2.memoizedState
                if (null !== state) {
                    if (null !== state.dehydrated)
                        return (
                            pushPrimaryTreeSuspenseHandler(workInProgress2),
                            (workInProgress2.flags |= 128),
                            null
                        )
                    if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
                        return updateSuspenseComponent(current, workInProgress2, renderLanes2)
                    pushPrimaryTreeSuspenseHandler(workInProgress2)
                    current = bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2)
                    return null !== current ? current.sibling : null
                }
                pushPrimaryTreeSuspenseHandler(workInProgress2)
                break
            case 19:
                var didSuspendBefore = 0 !== (current.flags & 128)
                state = 0 !== (renderLanes2 & workInProgress2.childLanes)
                state ||
                    (propagateParentContextChanges(current, workInProgress2, renderLanes2, false),
                    (state = 0 !== (renderLanes2 & workInProgress2.childLanes)))
                if (didSuspendBefore) {
                    if (state)
                        return updateSuspenseListComponent(current, workInProgress2, renderLanes2)
                    workInProgress2.flags |= 128
                }
                didSuspendBefore = workInProgress2.memoizedState
                null !== didSuspendBefore &&
                    ((didSuspendBefore.rendering = null),
                    (didSuspendBefore.tail = null),
                    (didSuspendBefore.lastEffect = null))
                push(suspenseStackCursor, suspenseStackCursor.current)
                if (state) break
                else return null
            case 22:
            case 23:
                return (
                    (workInProgress2.lanes = 0),
                    updateOffscreenComponent(current, workInProgress2, renderLanes2)
                )
            case 24:
                pushProvider(workInProgress2, CacheContext, current.memoizedState.cache)
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2)
    }
    function beginWork(current, workInProgress2, renderLanes2) {
        if (null !== current)
            if (current.memoizedProps !== workInProgress2.pendingProps) didReceiveUpdate = true
            else {
                if (
                    !checkScheduledUpdateOrContext(current, renderLanes2) &&
                    0 === (workInProgress2.flags & 128)
                )
                    return (
                        (didReceiveUpdate = false),
                        attemptEarlyBailoutIfNoScheduledUpdate(
                            current,
                            workInProgress2,
                            renderLanes2
                        )
                    )
                didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false
            }
        else
            (didReceiveUpdate = false),
                isHydrating &&
                    0 !== (workInProgress2.flags & 1048576) &&
                    pushTreeId(workInProgress2, treeForkCount, workInProgress2.index)
        workInProgress2.lanes = 0
        switch (workInProgress2.tag) {
            case 16:
                a: {
                    current = workInProgress2.pendingProps
                    var lazyComponent = workInProgress2.elementType,
                        init = lazyComponent._init
                    lazyComponent = init(lazyComponent._payload)
                    workInProgress2.type = lazyComponent
                    if ('function' === typeof lazyComponent)
                        shouldConstruct(lazyComponent)
                            ? ((current = resolveClassComponentProps(lazyComponent, current)),
                              (workInProgress2.tag = 1),
                              (workInProgress2 = updateClassComponent(
                                  null,
                                  workInProgress2,
                                  lazyComponent,
                                  current,
                                  renderLanes2
                              )))
                            : ((workInProgress2.tag = 0),
                              (workInProgress2 = updateFunctionComponent(
                                  null,
                                  workInProgress2,
                                  lazyComponent,
                                  current,
                                  renderLanes2
                              )))
                    else {
                        if (void 0 !== lazyComponent && null !== lazyComponent) {
                            if (
                                ((init = lazyComponent.$$typeof), init === REACT_FORWARD_REF_TYPE)
                            ) {
                                workInProgress2.tag = 11
                                workInProgress2 = updateForwardRef(
                                    null,
                                    workInProgress2,
                                    lazyComponent,
                                    current,
                                    renderLanes2
                                )
                                break a
                            } else if (init === REACT_MEMO_TYPE) {
                                workInProgress2.tag = 14
                                workInProgress2 = updateMemoComponent(
                                    null,
                                    workInProgress2,
                                    lazyComponent,
                                    current,
                                    renderLanes2
                                )
                                break a
                            }
                        }
                        workInProgress2 = getComponentNameFromType(lazyComponent) || lazyComponent
                        throw Error(formatProdErrorMessage(306, workInProgress2, ''))
                    }
                }
                return workInProgress2
            case 0:
                return updateFunctionComponent(
                    current,
                    workInProgress2,
                    workInProgress2.type,
                    workInProgress2.pendingProps,
                    renderLanes2
                )
            case 1:
                return (
                    (lazyComponent = workInProgress2.type),
                    (init = resolveClassComponentProps(
                        lazyComponent,
                        workInProgress2.pendingProps
                    )),
                    updateClassComponent(
                        current,
                        workInProgress2,
                        lazyComponent,
                        init,
                        renderLanes2
                    )
                )
            case 3:
                a: {
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo)
                    if (null === current) throw Error(formatProdErrorMessage(387))
                    lazyComponent = workInProgress2.pendingProps
                    var prevState = workInProgress2.memoizedState
                    init = prevState.element
                    cloneUpdateQueue(current, workInProgress2)
                    processUpdateQueue(workInProgress2, lazyComponent, null, renderLanes2)
                    var nextState = workInProgress2.memoizedState
                    lazyComponent = nextState.cache
                    pushProvider(workInProgress2, CacheContext, lazyComponent)
                    lazyComponent !== prevState.cache &&
                        propagateContextChanges(workInProgress2, [CacheContext], renderLanes2, true)
                    suspendIfUpdateReadFromEntangledAsyncAction()
                    lazyComponent = nextState.element
                    if (prevState.isDehydrated)
                        if (
                            ((prevState = {
                                element: lazyComponent,
                                isDehydrated: false,
                                cache: nextState.cache
                            }),
                            (workInProgress2.updateQueue.baseState = prevState),
                            (workInProgress2.memoizedState = prevState),
                            workInProgress2.flags & 256)
                        ) {
                            workInProgress2 = mountHostRootWithoutHydrating(
                                current,
                                workInProgress2,
                                lazyComponent,
                                renderLanes2
                            )
                            break a
                        } else if (lazyComponent !== init) {
                            init = createCapturedValueAtFiber(
                                Error(formatProdErrorMessage(424)),
                                workInProgress2
                            )
                            queueHydrationError(init)
                            workInProgress2 = mountHostRootWithoutHydrating(
                                current,
                                workInProgress2,
                                lazyComponent,
                                renderLanes2
                            )
                            break a
                        } else {
                            current = workInProgress2.stateNode.containerInfo
                            switch (current.nodeType) {
                                case 9:
                                    current = current.body
                                    break
                                default:
                                    current =
                                        'HTML' === current.nodeName
                                            ? current.ownerDocument.body
                                            : current
                            }
                            nextHydratableInstance = getNextHydratable(current.firstChild)
                            hydrationParentFiber = workInProgress2
                            isHydrating = true
                            hydrationErrors = null
                            rootOrSingletonContext = true
                            renderLanes2 = mountChildFibers(
                                workInProgress2,
                                null,
                                lazyComponent,
                                renderLanes2
                            )
                            for (workInProgress2.child = renderLanes2; renderLanes2; )
                                (renderLanes2.flags = (renderLanes2.flags & -3) | 4096),
                                    (renderLanes2 = renderLanes2.sibling)
                        }
                    else {
                        resetHydrationState()
                        if (lazyComponent === init) {
                            workInProgress2 = bailoutOnAlreadyFinishedWork(
                                current,
                                workInProgress2,
                                renderLanes2
                            )
                            break a
                        }
                        reconcileChildren(current, workInProgress2, lazyComponent, renderLanes2)
                    }
                    workInProgress2 = workInProgress2.child
                }
                return workInProgress2
            case 26:
                return (
                    markRef(current, workInProgress2),
                    null === current
                        ? (renderLanes2 = getResource(
                              workInProgress2.type,
                              null,
                              workInProgress2.pendingProps,
                              null
                          ))
                            ? (workInProgress2.memoizedState = renderLanes2)
                            : isHydrating ||
                              ((renderLanes2 = workInProgress2.type),
                              (current = workInProgress2.pendingProps),
                              (lazyComponent = getOwnerDocumentFromRootContainer(
                                  rootInstanceStackCursor.current
                              ).createElement(renderLanes2)),
                              (lazyComponent[internalInstanceKey] = workInProgress2),
                              (lazyComponent[internalPropsKey] = current),
                              setInitialProperties(lazyComponent, renderLanes2, current),
                              markNodeAsHoistable(lazyComponent),
                              (workInProgress2.stateNode = lazyComponent))
                        : (workInProgress2.memoizedState = getResource(
                              workInProgress2.type,
                              current.memoizedProps,
                              workInProgress2.pendingProps,
                              current.memoizedState
                          )),
                    null
                )
            case 27:
                return (
                    pushHostContext(workInProgress2),
                    null === current &&
                        isHydrating &&
                        ((lazyComponent = workInProgress2.stateNode =
                            resolveSingletonInstance(
                                workInProgress2.type,
                                workInProgress2.pendingProps,
                                rootInstanceStackCursor.current
                            )),
                        (hydrationParentFiber = workInProgress2),
                        (rootOrSingletonContext = true),
                        (init = nextHydratableInstance),
                        isSingletonScope(workInProgress2.type)
                            ? ((previousHydratableOnEnteringScopedSingleton = init),
                              (nextHydratableInstance = getNextHydratable(
                                  lazyComponent.firstChild
                              )))
                            : (nextHydratableInstance = init)),
                    reconcileChildren(
                        current,
                        workInProgress2,
                        workInProgress2.pendingProps.children,
                        renderLanes2
                    ),
                    markRef(current, workInProgress2),
                    null === current && (workInProgress2.flags |= 4194304),
                    workInProgress2.child
                )
            case 5:
                if (null === current && isHydrating) {
                    if ((init = lazyComponent = nextHydratableInstance))
                        (lazyComponent = canHydrateInstance(
                            lazyComponent,
                            workInProgress2.type,
                            workInProgress2.pendingProps,
                            rootOrSingletonContext
                        )),
                            null !== lazyComponent
                                ? ((workInProgress2.stateNode = lazyComponent),
                                  (hydrationParentFiber = workInProgress2),
                                  (nextHydratableInstance = getNextHydratable(
                                      lazyComponent.firstChild
                                  )),
                                  (rootOrSingletonContext = false),
                                  (init = true))
                                : (init = false)
                    init || throwOnHydrationMismatch(workInProgress2)
                }
                pushHostContext(workInProgress2)
                init = workInProgress2.type
                prevState = workInProgress2.pendingProps
                nextState = null !== current ? current.memoizedProps : null
                lazyComponent = prevState.children
                shouldSetTextContent(init, prevState)
                    ? (lazyComponent = null)
                    : null !== nextState &&
                      shouldSetTextContent(init, nextState) &&
                      (workInProgress2.flags |= 32)
                null !== workInProgress2.memoizedState &&
                    ((init = renderWithHooks(
                        current,
                        workInProgress2,
                        TransitionAwareHostComponent,
                        null,
                        null,
                        renderLanes2
                    )),
                    (HostTransitionContext._currentValue = init))
                markRef(current, workInProgress2)
                reconcileChildren(current, workInProgress2, lazyComponent, renderLanes2)
                return workInProgress2.child
            case 6:
                if (null === current && isHydrating) {
                    if ((current = renderLanes2 = nextHydratableInstance))
                        (renderLanes2 = canHydrateTextInstance(
                            renderLanes2,
                            workInProgress2.pendingProps,
                            rootOrSingletonContext
                        )),
                            null !== renderLanes2
                                ? ((workInProgress2.stateNode = renderLanes2),
                                  (hydrationParentFiber = workInProgress2),
                                  (nextHydratableInstance = null),
                                  (current = true))
                                : (current = false)
                    current || throwOnHydrationMismatch(workInProgress2)
                }
                return null
            case 13:
                return updateSuspenseComponent(current, workInProgress2, renderLanes2)
            case 4:
                return (
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo),
                    (lazyComponent = workInProgress2.pendingProps),
                    null === current
                        ? (workInProgress2.child = reconcileChildFibers(
                              workInProgress2,
                              null,
                              lazyComponent,
                              renderLanes2
                          ))
                        : reconcileChildren(current, workInProgress2, lazyComponent, renderLanes2),
                    workInProgress2.child
                )
            case 11:
                return updateForwardRef(
                    current,
                    workInProgress2,
                    workInProgress2.type,
                    workInProgress2.pendingProps,
                    renderLanes2
                )
            case 7:
                return (
                    reconcileChildren(
                        current,
                        workInProgress2,
                        workInProgress2.pendingProps,
                        renderLanes2
                    ),
                    workInProgress2.child
                )
            case 8:
                return (
                    reconcileChildren(
                        current,
                        workInProgress2,
                        workInProgress2.pendingProps.children,
                        renderLanes2
                    ),
                    workInProgress2.child
                )
            case 12:
                return (
                    reconcileChildren(
                        current,
                        workInProgress2,
                        workInProgress2.pendingProps.children,
                        renderLanes2
                    ),
                    workInProgress2.child
                )
            case 10:
                return (
                    (lazyComponent = workInProgress2.pendingProps),
                    pushProvider(workInProgress2, workInProgress2.type, lazyComponent.value),
                    reconcileChildren(
                        current,
                        workInProgress2,
                        lazyComponent.children,
                        renderLanes2
                    ),
                    workInProgress2.child
                )
            case 9:
                return (
                    (init = workInProgress2.type._context),
                    (lazyComponent = workInProgress2.pendingProps.children),
                    prepareToReadContext(workInProgress2),
                    (init = readContext(init)),
                    (lazyComponent = lazyComponent(init)),
                    (workInProgress2.flags |= 1),
                    reconcileChildren(current, workInProgress2, lazyComponent, renderLanes2),
                    workInProgress2.child
                )
            case 14:
                return updateMemoComponent(
                    current,
                    workInProgress2,
                    workInProgress2.type,
                    workInProgress2.pendingProps,
                    renderLanes2
                )
            case 15:
                return updateSimpleMemoComponent(
                    current,
                    workInProgress2,
                    workInProgress2.type,
                    workInProgress2.pendingProps,
                    renderLanes2
                )
            case 19:
                return updateSuspenseListComponent(current, workInProgress2, renderLanes2)
            case 31:
                return (
                    (lazyComponent = workInProgress2.pendingProps),
                    (renderLanes2 = workInProgress2.mode),
                    (lazyComponent = {
                        mode: lazyComponent.mode,
                        children: lazyComponent.children
                    }),
                    null === current
                        ? ((renderLanes2 = mountWorkInProgressOffscreenFiber(
                              lazyComponent,
                              renderLanes2
                          )),
                          (renderLanes2.ref = workInProgress2.ref),
                          (workInProgress2.child = renderLanes2),
                          (renderLanes2.return = workInProgress2),
                          (workInProgress2 = renderLanes2))
                        : ((renderLanes2 = createWorkInProgress(current.child, lazyComponent)),
                          (renderLanes2.ref = workInProgress2.ref),
                          (workInProgress2.child = renderLanes2),
                          (renderLanes2.return = workInProgress2),
                          (workInProgress2 = renderLanes2)),
                    workInProgress2
                )
            case 22:
                return updateOffscreenComponent(current, workInProgress2, renderLanes2)
            case 24:
                return (
                    prepareToReadContext(workInProgress2),
                    (lazyComponent = readContext(CacheContext)),
                    null === current
                        ? ((init = peekCacheFromPool()),
                          null === init &&
                              ((init = workInProgressRoot),
                              (prevState = createCache3()),
                              (init.pooledCache = prevState),
                              prevState.refCount++,
                              null !== prevState && (init.pooledCacheLanes |= renderLanes2),
                              (init = prevState)),
                          (workInProgress2.memoizedState = {
                              parent: lazyComponent,
                              cache: init
                          }),
                          initializeUpdateQueue(workInProgress2),
                          pushProvider(workInProgress2, CacheContext, init))
                        : (0 !== (current.lanes & renderLanes2) &&
                              (cloneUpdateQueue(current, workInProgress2),
                              processUpdateQueue(workInProgress2, null, null, renderLanes2),
                              suspendIfUpdateReadFromEntangledAsyncAction()),
                          (init = current.memoizedState),
                          (prevState = workInProgress2.memoizedState),
                          init.parent !== lazyComponent
                              ? ((init = { parent: lazyComponent, cache: lazyComponent }),
                                (workInProgress2.memoizedState = init),
                                0 === workInProgress2.lanes &&
                                    (workInProgress2.memoizedState =
                                        workInProgress2.updateQueue.baseState =
                                            init),
                                pushProvider(workInProgress2, CacheContext, lazyComponent))
                              : ((lazyComponent = prevState.cache),
                                pushProvider(workInProgress2, CacheContext, lazyComponent),
                                lazyComponent !== init.cache &&
                                    propagateContextChanges(
                                        workInProgress2,
                                        [CacheContext],
                                        renderLanes2,
                                        true
                                    ))),
                    reconcileChildren(
                        current,
                        workInProgress2,
                        workInProgress2.pendingProps.children,
                        renderLanes2
                    ),
                    workInProgress2.child
                )
            case 29:
                throw workInProgress2.pendingProps
        }
        throw Error(formatProdErrorMessage(156, workInProgress2.tag))
    }
    function markUpdate(workInProgress2) {
        workInProgress2.flags |= 4
    }
    function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
        if ('stylesheet' !== resource.type || 0 !== (resource.state.loading & 4))
            workInProgress2.flags &= -16777217
        else if (((workInProgress2.flags |= 16777216), !preloadResource(resource))) {
            resource = suspenseHandlerStackCursor.current
            if (
                null !== resource &&
                ((workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes
                    ? null !== shellBoundary
                    : ((workInProgressRootRenderLanes & 62914560) !==
                          workInProgressRootRenderLanes &&
                          0 === (workInProgressRootRenderLanes & 536870912)) ||
                      resource !== shellBoundary)
            )
                throw ((suspendedThenable = noopSuspenseyCommitThenable), SuspenseyCommitException)
            workInProgress2.flags |= 8192
        }
    }
    function scheduleRetryEffect(workInProgress2, retryQueue) {
        null !== retryQueue && (workInProgress2.flags |= 4)
        workInProgress2.flags & 16384 &&
            ((retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : 536870912),
            (workInProgress2.lanes |= retryQueue),
            (workInProgressSuspendedRetryLanes |= retryQueue))
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!isHydrating)
            switch (renderState.tailMode) {
                case 'hidden':
                    hasRenderedATailFallback = renderState.tail
                    for (var lastTailNode = null; null !== hasRenderedATailFallback; )
                        null !== hasRenderedATailFallback.alternate &&
                            (lastTailNode = hasRenderedATailFallback),
                            (hasRenderedATailFallback = hasRenderedATailFallback.sibling)
                    null === lastTailNode
                        ? (renderState.tail = null)
                        : (lastTailNode.sibling = null)
                    break
                case 'collapsed':
                    lastTailNode = renderState.tail
                    for (var lastTailNode$113 = null; null !== lastTailNode; )
                        null !== lastTailNode.alternate && (lastTailNode$113 = lastTailNode),
                            (lastTailNode = lastTailNode.sibling)
                    null === lastTailNode$113
                        ? hasRenderedATailFallback || null === renderState.tail
                            ? (renderState.tail = null)
                            : (renderState.tail.sibling = null)
                        : (lastTailNode$113.sibling = null)
            }
    }
    function bubbleProperties(completedWork) {
        var didBailout =
                null !== completedWork.alternate &&
                completedWork.alternate.child === completedWork.child,
            newChildLanes = 0,
            subtreeFlags = 0
        if (didBailout)
            for (var child$114 = completedWork.child; null !== child$114; )
                (newChildLanes |= child$114.lanes | child$114.childLanes),
                    (subtreeFlags |= child$114.subtreeFlags & 65011712),
                    (subtreeFlags |= child$114.flags & 65011712),
                    (child$114.return = completedWork),
                    (child$114 = child$114.sibling)
        else
            for (child$114 = completedWork.child; null !== child$114; )
                (newChildLanes |= child$114.lanes | child$114.childLanes),
                    (subtreeFlags |= child$114.subtreeFlags),
                    (subtreeFlags |= child$114.flags),
                    (child$114.return = completedWork),
                    (child$114 = child$114.sibling)
        completedWork.subtreeFlags |= subtreeFlags
        completedWork.childLanes = newChildLanes
        return didBailout
    }
    function completeWork(current, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps
        popTreeContext(workInProgress2)
        switch (workInProgress2.tag) {
            case 31:
            case 16:
            case 15:
            case 0:
            case 11:
            case 7:
            case 8:
            case 12:
            case 9:
            case 14:
                return bubbleProperties(workInProgress2), null
            case 1:
                return bubbleProperties(workInProgress2), null
            case 3:
                renderLanes2 = workInProgress2.stateNode
                newProps = null
                null !== current && (newProps = current.memoizedState.cache)
                workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048)
                popProvider(CacheContext)
                popHostContainer()
                renderLanes2.pendingContext &&
                    ((renderLanes2.context = renderLanes2.pendingContext),
                    (renderLanes2.pendingContext = null))
                if (null === current || null === current.child)
                    popHydrationState(workInProgress2)
                        ? markUpdate(workInProgress2)
                        : null === current ||
                          (current.memoizedState.isDehydrated &&
                              0 === (workInProgress2.flags & 256)) ||
                          ((workInProgress2.flags |= 1024), upgradeHydrationErrorsToRecoverable())
                bubbleProperties(workInProgress2)
                return null
            case 26:
                return (
                    (renderLanes2 = workInProgress2.memoizedState),
                    null === current
                        ? (markUpdate(workInProgress2),
                          null !== renderLanes2
                              ? (bubbleProperties(workInProgress2),
                                preloadResourceAndSuspendIfNeeded(workInProgress2, renderLanes2))
                              : (bubbleProperties(workInProgress2),
                                (workInProgress2.flags &= -16777217)))
                        : renderLanes2
                          ? renderLanes2 !== current.memoizedState
                              ? (markUpdate(workInProgress2),
                                bubbleProperties(workInProgress2),
                                preloadResourceAndSuspendIfNeeded(workInProgress2, renderLanes2))
                              : (bubbleProperties(workInProgress2),
                                (workInProgress2.flags &= -16777217))
                          : (current.memoizedProps !== newProps && markUpdate(workInProgress2),
                            bubbleProperties(workInProgress2),
                            (workInProgress2.flags &= -16777217)),
                    null
                )
            case 27:
                popHostContext(workInProgress2)
                renderLanes2 = rootInstanceStackCursor.current
                var type = workInProgress2.type
                if (null !== current && null != workInProgress2.stateNode)
                    current.memoizedProps !== newProps && markUpdate(workInProgress2)
                else {
                    if (!newProps) {
                        if (null === workInProgress2.stateNode)
                            throw Error(formatProdErrorMessage(166))
                        bubbleProperties(workInProgress2)
                        return null
                    }
                    current = contextStackCursor.current
                    popHydrationState(workInProgress2)
                        ? prepareToHydrateHostInstance(workInProgress2)
                        : ((current = resolveSingletonInstance(type, newProps, renderLanes2)),
                          (workInProgress2.stateNode = current),
                          markUpdate(workInProgress2))
                }
                bubbleProperties(workInProgress2)
                return null
            case 5:
                popHostContext(workInProgress2)
                renderLanes2 = workInProgress2.type
                if (null !== current && null != workInProgress2.stateNode)
                    current.memoizedProps !== newProps && markUpdate(workInProgress2)
                else {
                    if (!newProps) {
                        if (null === workInProgress2.stateNode)
                            throw Error(formatProdErrorMessage(166))
                        bubbleProperties(workInProgress2)
                        return null
                    }
                    current = contextStackCursor.current
                    if (popHydrationState(workInProgress2))
                        prepareToHydrateHostInstance(workInProgress2)
                    else {
                        type = getOwnerDocumentFromRootContainer(rootInstanceStackCursor.current)
                        switch (current) {
                            case 1:
                                current = type.createElementNS(
                                    'http://www.w3.org/2000/svg',
                                    renderLanes2
                                )
                                break
                            case 2:
                                current = type.createElementNS(
                                    'http://www.w3.org/1998/Math/MathML',
                                    renderLanes2
                                )
                                break
                            default:
                                switch (renderLanes2) {
                                    case 'svg':
                                        current = type.createElementNS(
                                            'http://www.w3.org/2000/svg',
                                            renderLanes2
                                        )
                                        break
                                    case 'math':
                                        current = type.createElementNS(
                                            'http://www.w3.org/1998/Math/MathML',
                                            renderLanes2
                                        )
                                        break
                                    case 'script':
                                        current = type.createElement('div')
                                        current.innerHTML = '<script><\/script>'
                                        current = current.removeChild(current.firstChild)
                                        break
                                    case 'select':
                                        current =
                                            'string' === typeof newProps.is
                                                ? type.createElement('select', { is: newProps.is })
                                                : type.createElement('select')
                                        newProps.multiple
                                            ? (current.multiple = true)
                                            : newProps.size && (current.size = newProps.size)
                                        break
                                    default:
                                        current =
                                            'string' === typeof newProps.is
                                                ? type.createElement(renderLanes2, {
                                                      is: newProps.is
                                                  })
                                                : type.createElement(renderLanes2)
                                }
                        }
                        current[internalInstanceKey] = workInProgress2
                        current[internalPropsKey] = newProps
                        a: for (type = workInProgress2.child; null !== type; ) {
                            if (5 === type.tag || 6 === type.tag)
                                current.appendChild(type.stateNode)
                            else if (4 !== type.tag && 27 !== type.tag && null !== type.child) {
                                type.child.return = type
                                type = type.child
                                continue
                            }
                            if (type === workInProgress2) break a
                            for (; null === type.sibling; ) {
                                if (null === type.return || type.return === workInProgress2) break a
                                type = type.return
                            }
                            type.sibling.return = type.return
                            type = type.sibling
                        }
                        workInProgress2.stateNode = current
                        a: switch (
                            (setInitialProperties(current, renderLanes2, newProps), renderLanes2)
                        ) {
                            case 'button':
                            case 'input':
                            case 'select':
                            case 'textarea':
                                current = !!newProps.autoFocus
                                break a
                            case 'img':
                                current = true
                                break a
                            default:
                                current = false
                        }
                        current && markUpdate(workInProgress2)
                    }
                }
                bubbleProperties(workInProgress2)
                workInProgress2.flags &= -16777217
                return null
            case 6:
                if (current && null != workInProgress2.stateNode)
                    current.memoizedProps !== newProps && markUpdate(workInProgress2)
                else {
                    if ('string' !== typeof newProps && null === workInProgress2.stateNode)
                        throw Error(formatProdErrorMessage(166))
                    current = rootInstanceStackCursor.current
                    if (popHydrationState(workInProgress2)) {
                        current = workInProgress2.stateNode
                        renderLanes2 = workInProgress2.memoizedProps
                        newProps = null
                        type = hydrationParentFiber
                        if (null !== type)
                            switch (type.tag) {
                                case 27:
                                case 5:
                                    newProps = type.memoizedProps
                            }
                        current[internalInstanceKey] = workInProgress2
                        current =
                            current.nodeValue === renderLanes2 ||
                            (null !== newProps && true === newProps.suppressHydrationWarning) ||
                            checkForUnmatchedText(current.nodeValue, renderLanes2)
                                ? true
                                : false
                        current || throwOnHydrationMismatch(workInProgress2)
                    } else
                        (current =
                            getOwnerDocumentFromRootContainer(current).createTextNode(newProps)),
                            (current[internalInstanceKey] = workInProgress2),
                            (workInProgress2.stateNode = current)
                }
                bubbleProperties(workInProgress2)
                return null
            case 13:
                newProps = workInProgress2.memoizedState
                if (
                    null === current ||
                    (null !== current.memoizedState && null !== current.memoizedState.dehydrated)
                ) {
                    type = popHydrationState(workInProgress2)
                    if (null !== newProps && null !== newProps.dehydrated) {
                        if (null === current) {
                            if (!type) throw Error(formatProdErrorMessage(318))
                            type = workInProgress2.memoizedState
                            type = null !== type ? type.dehydrated : null
                            if (!type) throw Error(formatProdErrorMessage(317))
                            type[internalInstanceKey] = workInProgress2
                        } else
                            resetHydrationState(),
                                0 === (workInProgress2.flags & 128) &&
                                    (workInProgress2.memoizedState = null),
                                (workInProgress2.flags |= 4)
                        bubbleProperties(workInProgress2)
                        type = false
                    } else
                        (type = upgradeHydrationErrorsToRecoverable()),
                            null !== current &&
                                null !== current.memoizedState &&
                                (current.memoizedState.hydrationErrors = type),
                            (type = true)
                    if (!type) {
                        if (workInProgress2.flags & 256)
                            return popSuspenseHandler(workInProgress2), workInProgress2
                        popSuspenseHandler(workInProgress2)
                        return null
                    }
                }
                popSuspenseHandler(workInProgress2)
                if (0 !== (workInProgress2.flags & 128))
                    return (workInProgress2.lanes = renderLanes2), workInProgress2
                renderLanes2 = null !== newProps
                current = null !== current && null !== current.memoizedState
                if (renderLanes2) {
                    newProps = workInProgress2.child
                    type = null
                    null !== newProps.alternate &&
                        null !== newProps.alternate.memoizedState &&
                        null !== newProps.alternate.memoizedState.cachePool &&
                        (type = newProps.alternate.memoizedState.cachePool.pool)
                    var cache$127 = null
                    null !== newProps.memoizedState &&
                        null !== newProps.memoizedState.cachePool &&
                        (cache$127 = newProps.memoizedState.cachePool.pool)
                    cache$127 !== type && (newProps.flags |= 2048)
                }
                renderLanes2 !== current && renderLanes2 && (workInProgress2.child.flags |= 8192)
                scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue)
                bubbleProperties(workInProgress2)
                return null
            case 4:
                return (
                    popHostContainer(),
                    null === current &&
                        listenToAllSupportedEvents(workInProgress2.stateNode.containerInfo),
                    bubbleProperties(workInProgress2),
                    null
                )
            case 10:
                return popProvider(workInProgress2.type), bubbleProperties(workInProgress2), null
            case 19:
                pop(suspenseStackCursor)
                type = workInProgress2.memoizedState
                if (null === type) return bubbleProperties(workInProgress2), null
                newProps = 0 !== (workInProgress2.flags & 128)
                cache$127 = type.rendering
                if (null === cache$127)
                    if (newProps) cutOffTailIfNeeded(type, false)
                    else {
                        if (
                            0 !== workInProgressRootExitStatus ||
                            (null !== current && 0 !== (current.flags & 128))
                        )
                            for (current = workInProgress2.child; null !== current; ) {
                                cache$127 = findFirstSuspended(current)
                                if (null !== cache$127) {
                                    workInProgress2.flags |= 128
                                    cutOffTailIfNeeded(type, false)
                                    current = cache$127.updateQueue
                                    workInProgress2.updateQueue = current
                                    scheduleRetryEffect(workInProgress2, current)
                                    workInProgress2.subtreeFlags = 0
                                    current = renderLanes2
                                    for (
                                        renderLanes2 = workInProgress2.child;
                                        null !== renderLanes2;

                                    )
                                        resetWorkInProgress(renderLanes2, current),
                                            (renderLanes2 = renderLanes2.sibling)
                                    push(suspenseStackCursor, (suspenseStackCursor.current & 1) | 2)
                                    return workInProgress2.child
                                }
                                current = current.sibling
                            }
                        null !== type.tail &&
                            now() > workInProgressRootRenderTargetTime &&
                            ((workInProgress2.flags |= 128),
                            (newProps = true),
                            cutOffTailIfNeeded(type, false),
                            (workInProgress2.lanes = 4194304))
                    }
                else {
                    if (!newProps)
                        if (((current = findFirstSuspended(cache$127)), null !== current)) {
                            if (
                                ((workInProgress2.flags |= 128),
                                (newProps = true),
                                (current = current.updateQueue),
                                (workInProgress2.updateQueue = current),
                                scheduleRetryEffect(workInProgress2, current),
                                cutOffTailIfNeeded(type, true),
                                null === type.tail &&
                                    'hidden' === type.tailMode &&
                                    !cache$127.alternate &&
                                    !isHydrating)
                            )
                                return bubbleProperties(workInProgress2), null
                        } else
                            2 * now() - type.renderingStartTime >
                                workInProgressRootRenderTargetTime &&
                                536870912 !== renderLanes2 &&
                                ((workInProgress2.flags |= 128),
                                (newProps = true),
                                cutOffTailIfNeeded(type, false),
                                (workInProgress2.lanes = 4194304))
                    type.isBackwards
                        ? ((cache$127.sibling = workInProgress2.child),
                          (workInProgress2.child = cache$127))
                        : ((current = type.last),
                          null !== current
                              ? (current.sibling = cache$127)
                              : (workInProgress2.child = cache$127),
                          (type.last = cache$127))
                }
                if (null !== type.tail)
                    return (
                        (workInProgress2 = type.tail),
                        (type.rendering = workInProgress2),
                        (type.tail = workInProgress2.sibling),
                        (type.renderingStartTime = now()),
                        (workInProgress2.sibling = null),
                        (current = suspenseStackCursor.current),
                        push(suspenseStackCursor, newProps ? (current & 1) | 2 : current & 1),
                        workInProgress2
                    )
                bubbleProperties(workInProgress2)
                return null
            case 22:
            case 23:
                return (
                    popSuspenseHandler(workInProgress2),
                    popHiddenContext(),
                    (newProps = null !== workInProgress2.memoizedState),
                    null !== current
                        ? (null !== current.memoizedState) !== newProps &&
                          (workInProgress2.flags |= 8192)
                        : newProps && (workInProgress2.flags |= 8192),
                    newProps
                        ? 0 !== (renderLanes2 & 536870912) &&
                          0 === (workInProgress2.flags & 128) &&
                          (bubbleProperties(workInProgress2),
                          workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192))
                        : bubbleProperties(workInProgress2),
                    (renderLanes2 = workInProgress2.updateQueue),
                    null !== renderLanes2 &&
                        scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue),
                    (renderLanes2 = null),
                    null !== current &&
                        null !== current.memoizedState &&
                        null !== current.memoizedState.cachePool &&
                        (renderLanes2 = current.memoizedState.cachePool.pool),
                    (newProps = null),
                    null !== workInProgress2.memoizedState &&
                        null !== workInProgress2.memoizedState.cachePool &&
                        (newProps = workInProgress2.memoizedState.cachePool.pool),
                    newProps !== renderLanes2 && (workInProgress2.flags |= 2048),
                    null !== current && pop(resumedCache),
                    null
                )
            case 24:
                return (
                    (renderLanes2 = null),
                    null !== current && (renderLanes2 = current.memoizedState.cache),
                    workInProgress2.memoizedState.cache !== renderLanes2 &&
                        (workInProgress2.flags |= 2048),
                    popProvider(CacheContext),
                    bubbleProperties(workInProgress2),
                    null
                )
            case 25:
                return null
            case 30:
                return null
        }
        throw Error(formatProdErrorMessage(156, workInProgress2.tag))
    }
    function unwindWork(current, workInProgress2) {
        popTreeContext(workInProgress2)
        switch (workInProgress2.tag) {
            case 1:
                return (
                    (current = workInProgress2.flags),
                    current & 65536
                        ? ((workInProgress2.flags = (current & -65537) | 128), workInProgress2)
                        : null
                )
            case 3:
                return (
                    popProvider(CacheContext),
                    popHostContainer(),
                    (current = workInProgress2.flags),
                    0 !== (current & 65536) && 0 === (current & 128)
                        ? ((workInProgress2.flags = (current & -65537) | 128), workInProgress2)
                        : null
                )
            case 26:
            case 27:
            case 5:
                return popHostContext(workInProgress2), null
            case 13:
                popSuspenseHandler(workInProgress2)
                current = workInProgress2.memoizedState
                if (null !== current && null !== current.dehydrated) {
                    if (null === workInProgress2.alternate) throw Error(formatProdErrorMessage(340))
                    resetHydrationState()
                }
                current = workInProgress2.flags
                return current & 65536
                    ? ((workInProgress2.flags = (current & -65537) | 128), workInProgress2)
                    : null
            case 19:
                return pop(suspenseStackCursor), null
            case 4:
                return popHostContainer(), null
            case 10:
                return popProvider(workInProgress2.type), null
            case 22:
            case 23:
                return (
                    popSuspenseHandler(workInProgress2),
                    popHiddenContext(),
                    null !== current && pop(resumedCache),
                    (current = workInProgress2.flags),
                    current & 65536
                        ? ((workInProgress2.flags = (current & -65537) | 128), workInProgress2)
                        : null
                )
            case 24:
                return popProvider(CacheContext), null
            case 25:
                return null
            default:
                return null
        }
    }
    function unwindInterruptedWork(current, interruptedWork) {
        popTreeContext(interruptedWork)
        switch (interruptedWork.tag) {
            case 3:
                popProvider(CacheContext)
                popHostContainer()
                break
            case 26:
            case 27:
            case 5:
                popHostContext(interruptedWork)
                break
            case 4:
                popHostContainer()
                break
            case 13:
                popSuspenseHandler(interruptedWork)
                break
            case 19:
                pop(suspenseStackCursor)
                break
            case 10:
                popProvider(interruptedWork.type)
                break
            case 22:
            case 23:
                popSuspenseHandler(interruptedWork)
                popHiddenContext()
                null !== current && pop(resumedCache)
                break
            case 24:
                popProvider(CacheContext)
        }
    }
    function commitHookEffectListMount(flags, finishedWork) {
        try {
            var updateQueue = finishedWork.updateQueue,
                lastEffect = null !== updateQueue ? updateQueue.lastEffect : null
            if (null !== lastEffect) {
                var firstEffect = lastEffect.next
                updateQueue = firstEffect
                do {
                    if ((updateQueue.tag & flags) === flags) {
                        lastEffect = void 0
                        var create = updateQueue.create,
                            inst = updateQueue.inst
                        lastEffect = create()
                        inst.destroy = lastEffect
                    }
                    updateQueue = updateQueue.next
                } while (updateQueue !== firstEffect)
            }
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error)
        }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
        try {
            var updateQueue = finishedWork.updateQueue,
                lastEffect = null !== updateQueue ? updateQueue.lastEffect : null
            if (null !== lastEffect) {
                var firstEffect = lastEffect.next
                updateQueue = firstEffect
                do {
                    if ((updateQueue.tag & flags) === flags) {
                        var inst = updateQueue.inst,
                            destroy = inst.destroy
                        if (void 0 !== destroy) {
                            inst.destroy = void 0
                            lastEffect = finishedWork
                            var nearestMountedAncestor = nearestMountedAncestor$jscomp$0,
                                destroy_ = destroy
                            try {
                                destroy_()
                            } catch (error) {
                                captureCommitPhaseError(lastEffect, nearestMountedAncestor, error)
                            }
                        }
                    }
                    updateQueue = updateQueue.next
                } while (updateQueue !== firstEffect)
            }
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error)
        }
    }
    function commitClassCallbacks(finishedWork) {
        var updateQueue = finishedWork.updateQueue
        if (null !== updateQueue) {
            var instance = finishedWork.stateNode
            try {
                commitCallbacks(updateQueue, instance)
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error)
            }
        }
    }
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        instance.props = resolveClassComponentProps(current.type, current.memoizedProps)
        instance.state = current.memoizedState
        try {
            instance.componentWillUnmount()
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error)
        }
    }
    function safelyAttachRef(current, nearestMountedAncestor) {
        try {
            var ref = current.ref
            if (null !== ref) {
                switch (current.tag) {
                    case 26:
                    case 27:
                    case 5:
                        var instanceToUse = current.stateNode
                        break
                    case 30:
                        instanceToUse = current.stateNode
                        break
                    default:
                        instanceToUse = current.stateNode
                }
                'function' === typeof ref
                    ? (current.refCleanup = ref(instanceToUse))
                    : (ref.current = instanceToUse)
            }
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error)
        }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref,
            refCleanup = current.refCleanup
        if (null !== ref)
            if ('function' === typeof refCleanup)
                try {
                    refCleanup()
                } catch (error) {
                    captureCommitPhaseError(current, nearestMountedAncestor, error)
                } finally {
                    ;(current.refCleanup = null),
                        (current = current.alternate),
                        null != current && (current.refCleanup = null)
                }
            else if ('function' === typeof ref)
                try {
                    ref(null)
                } catch (error$143) {
                    captureCommitPhaseError(current, nearestMountedAncestor, error$143)
                }
            else ref.current = null
    }
    function commitHostMount(finishedWork) {
        var type = finishedWork.type,
            props = finishedWork.memoizedProps,
            instance = finishedWork.stateNode
        try {
            a: switch (type) {
                case 'button':
                case 'input':
                case 'select':
                case 'textarea':
                    props.autoFocus && instance.focus()
                    break a
                case 'img':
                    props.src
                        ? (instance.src = props.src)
                        : props.srcSet && (instance.srcset = props.srcSet)
            }
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error)
        }
    }
    function commitHostUpdate(finishedWork, newProps, oldProps) {
        try {
            var domElement = finishedWork.stateNode
            updateProperties(domElement, finishedWork.type, oldProps, newProps)
            domElement[internalPropsKey] = newProps
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error)
        }
    }
    function isHostParent(fiber) {
        return (
            5 === fiber.tag ||
            3 === fiber.tag ||
            26 === fiber.tag ||
            (27 === fiber.tag && isSingletonScope(fiber.type)) ||
            4 === fiber.tag
        )
    }
    function getHostSibling(fiber) {
        a: for (;;) {
            for (; null === fiber.sibling; ) {
                if (null === fiber.return || isHostParent(fiber.return)) return null
                fiber = fiber.return
            }
            fiber.sibling.return = fiber.return
            for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag; ) {
                if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a
                if (fiber.flags & 2) continue a
                if (null === fiber.child || 4 === fiber.tag) continue a
                else (fiber.child.return = fiber), (fiber = fiber.child)
            }
            if (!(fiber.flags & 2)) return fiber.stateNode
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
        var tag = node2.tag
        if (5 === tag || 6 === tag)
            (node2 = node2.stateNode),
                before
                    ? (9 === parent.nodeType
                          ? parent.body
                          : 'HTML' === parent.nodeName
                            ? parent.ownerDocument.body
                            : parent
                      ).insertBefore(node2, before)
                    : ((before =
                          9 === parent.nodeType
                              ? parent.body
                              : 'HTML' === parent.nodeName
                                ? parent.ownerDocument.body
                                : parent),
                      before.appendChild(node2),
                      (parent = parent._reactRootContainer),
                      (null !== parent && void 0 !== parent) ||
                          null !== before.onclick ||
                          (before.onclick = noop$12))
        else if (
            4 !== tag &&
            (27 === tag &&
                isSingletonScope(node2.type) &&
                ((parent = node2.stateNode), (before = null)),
            (node2 = node2.child),
            null !== node2)
        )
            for (
                insertOrAppendPlacementNodeIntoContainer(node2, before, parent),
                    node2 = node2.sibling;
                null !== node2;

            )
                insertOrAppendPlacementNodeIntoContainer(node2, before, parent),
                    (node2 = node2.sibling)
    }
    function insertOrAppendPlacementNode(node2, before, parent) {
        var tag = node2.tag
        if (5 === tag || 6 === tag)
            (node2 = node2.stateNode),
                before ? parent.insertBefore(node2, before) : parent.appendChild(node2)
        else if (
            4 !== tag &&
            (27 === tag && isSingletonScope(node2.type) && (parent = node2.stateNode),
            (node2 = node2.child),
            null !== node2)
        )
            for (
                insertOrAppendPlacementNode(node2, before, parent), node2 = node2.sibling;
                null !== node2;

            )
                insertOrAppendPlacementNode(node2, before, parent), (node2 = node2.sibling)
    }
    function commitHostSingletonAcquisition(finishedWork) {
        var singleton = finishedWork.stateNode,
            props = finishedWork.memoizedProps
        try {
            for (
                var type = finishedWork.type, attributes = singleton.attributes;
                attributes.length;

            )
                singleton.removeAttributeNode(attributes[0])
            setInitialProperties(singleton, type, props)
            singleton[internalInstanceKey] = finishedWork
            singleton[internalPropsKey] = props
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error)
        }
    }
    var offscreenSubtreeIsHidden = false,
        offscreenSubtreeWasHidden = false,
        needsFormReset = false,
        PossiblyWeakSet = 'function' === typeof WeakSet ? WeakSet : Set,
        nextEffect = null
    function commitBeforeMutationEffects(root2, firstChild) {
        root2 = root2.containerInfo
        eventsEnabled = _enabled
        root2 = getActiveElementDeep(root2)
        if (hasSelectionCapabilities(root2)) {
            if ('selectionStart' in root2)
                var JSCompiler_temp = {
                    start: root2.selectionStart,
                    end: root2.selectionEnd
                }
            else
                a: {
                    JSCompiler_temp =
                        ((JSCompiler_temp = root2.ownerDocument) && JSCompiler_temp.defaultView) ||
                        window
                    var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection()
                    if (selection && 0 !== selection.rangeCount) {
                        JSCompiler_temp = selection.anchorNode
                        var anchorOffset = selection.anchorOffset,
                            focusNode = selection.focusNode
                        selection = selection.focusOffset
                        try {
                            JSCompiler_temp.nodeType, focusNode.nodeType
                        } catch (e$20) {
                            JSCompiler_temp = null
                            break a
                        }
                        var length2 = 0,
                            start = -1,
                            end = -1,
                            indexWithinAnchor = 0,
                            indexWithinFocus = 0,
                            node2 = root2,
                            parentNode = null
                        b: for (;;) {
                            for (var next2; ; ) {
                                node2 !== JSCompiler_temp ||
                                    (0 !== anchorOffset && 3 !== node2.nodeType) ||
                                    (start = length2 + anchorOffset)
                                node2 !== focusNode ||
                                    (0 !== selection && 3 !== node2.nodeType) ||
                                    (end = length2 + selection)
                                3 === node2.nodeType && (length2 += node2.nodeValue.length)
                                if (null === (next2 = node2.firstChild)) break
                                parentNode = node2
                                node2 = next2
                            }
                            for (;;) {
                                if (node2 === root2) break b
                                parentNode === JSCompiler_temp &&
                                    ++indexWithinAnchor === anchorOffset &&
                                    (start = length2)
                                parentNode === focusNode &&
                                    ++indexWithinFocus === selection &&
                                    (end = length2)
                                if (null !== (next2 = node2.nextSibling)) break
                                node2 = parentNode
                                parentNode = node2.parentNode
                            }
                            node2 = next2
                        }
                        JSCompiler_temp = -1 === start || -1 === end ? null : { start, end }
                    } else JSCompiler_temp = null
                }
            JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 }
        } else JSCompiler_temp = null
        selectionInformation = { focusedElem: root2, selectionRange: JSCompiler_temp }
        _enabled = false
        for (nextEffect = firstChild; null !== nextEffect; )
            if (
                ((firstChild = nextEffect),
                (root2 = firstChild.child),
                0 !== (firstChild.subtreeFlags & 1024) && null !== root2)
            )
                (root2.return = firstChild), (nextEffect = root2)
            else
                for (; null !== nextEffect; ) {
                    firstChild = nextEffect
                    focusNode = firstChild.alternate
                    root2 = firstChild.flags
                    switch (firstChild.tag) {
                        case 0:
                            break
                        case 11:
                        case 15:
                            break
                        case 1:
                            if (0 !== (root2 & 1024) && null !== focusNode) {
                                root2 = void 0
                                JSCompiler_temp = firstChild
                                anchorOffset = focusNode.memoizedProps
                                focusNode = focusNode.memoizedState
                                selection = JSCompiler_temp.stateNode
                                try {
                                    var resolvedPrevProps = resolveClassComponentProps(
                                        JSCompiler_temp.type,
                                        anchorOffset,
                                        JSCompiler_temp.elementType === JSCompiler_temp.type
                                    )
                                    root2 = selection.getSnapshotBeforeUpdate(
                                        resolvedPrevProps,
                                        focusNode
                                    )
                                    selection.__reactInternalSnapshotBeforeUpdate = root2
                                } catch (error) {
                                    captureCommitPhaseError(
                                        JSCompiler_temp,
                                        JSCompiler_temp.return,
                                        error
                                    )
                                }
                            }
                            break
                        case 3:
                            if (0 !== (root2 & 1024)) {
                                if (
                                    ((root2 = firstChild.stateNode.containerInfo),
                                    (JSCompiler_temp = root2.nodeType),
                                    9 === JSCompiler_temp)
                                )
                                    clearContainerSparingly(root2)
                                else if (1 === JSCompiler_temp)
                                    switch (root2.nodeName) {
                                        case 'HEAD':
                                        case 'HTML':
                                        case 'BODY':
                                            clearContainerSparingly(root2)
                                            break
                                        default:
                                            root2.textContent = ''
                                    }
                            }
                            break
                        case 5:
                        case 26:
                        case 27:
                        case 6:
                        case 4:
                        case 17:
                            break
                        default:
                            if (0 !== (root2 & 1024)) throw Error(formatProdErrorMessage(163))
                    }
                    root2 = firstChild.sibling
                    if (null !== root2) {
                        root2.return = firstChild.return
                        nextEffect = root2
                        break
                    }
                    nextEffect = firstChild.return
                }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
        var flags = finishedWork.flags
        switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork)
                flags & 4 && commitHookEffectListMount(5, finishedWork)
                break
            case 1:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork)
                if (flags & 4)
                    if (((finishedRoot = finishedWork.stateNode), null === current))
                        try {
                            finishedRoot.componentDidMount()
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error)
                        }
                    else {
                        var prevProps = resolveClassComponentProps(
                            finishedWork.type,
                            current.memoizedProps
                        )
                        current = current.memoizedState
                        try {
                            finishedRoot.componentDidUpdate(
                                prevProps,
                                current,
                                finishedRoot.__reactInternalSnapshotBeforeUpdate
                            )
                        } catch (error$142) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error$142)
                        }
                    }
                flags & 64 && commitClassCallbacks(finishedWork)
                flags & 512 && safelyAttachRef(finishedWork, finishedWork.return)
                break
            case 3:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork)
                if (
                    flags & 64 &&
                    ((finishedRoot = finishedWork.updateQueue), null !== finishedRoot)
                ) {
                    current = null
                    if (null !== finishedWork.child)
                        switch (finishedWork.child.tag) {
                            case 27:
                            case 5:
                                current = finishedWork.child.stateNode
                                break
                            case 1:
                                current = finishedWork.child.stateNode
                        }
                    try {
                        commitCallbacks(finishedRoot, current)
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error)
                    }
                }
                break
            case 27:
                null === current && flags & 4 && commitHostSingletonAcquisition(finishedWork)
            case 26:
            case 5:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork)
                null === current && flags & 4 && commitHostMount(finishedWork)
                flags & 512 && safelyAttachRef(finishedWork, finishedWork.return)
                break
            case 12:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork)
                break
            case 13:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork)
                flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork)
                flags & 64 &&
                    ((finishedRoot = finishedWork.memoizedState),
                    null !== finishedRoot &&
                        ((finishedRoot = finishedRoot.dehydrated),
                        null !== finishedRoot &&
                            ((finishedWork = retryDehydratedSuspenseBoundary.bind(
                                null,
                                finishedWork
                            )),
                            registerSuspenseInstanceRetry(finishedRoot, finishedWork))))
                break
            case 22:
                flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden
                if (!flags) {
                    current =
                        (null !== current && null !== current.memoizedState) ||
                        offscreenSubtreeWasHidden
                    prevProps = offscreenSubtreeIsHidden
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden
                    offscreenSubtreeIsHidden = flags
                    ;(offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden
                        ? recursivelyTraverseReappearLayoutEffects(
                              finishedRoot,
                              finishedWork,
                              0 !== (finishedWork.subtreeFlags & 8772)
                          )
                        : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork)
                    offscreenSubtreeIsHidden = prevProps
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden
                }
                break
            case 30:
                break
            default:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork)
        }
    }
    function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate
        null !== alternate && ((fiber.alternate = null), detachFiberAfterEffects(alternate))
        fiber.child = null
        fiber.deletions = null
        fiber.sibling = null
        5 === fiber.tag &&
            ((alternate = fiber.stateNode), null !== alternate && detachDeletedInstance(alternate))
        fiber.stateNode = null
        fiber.return = null
        fiber.dependencies = null
        fiber.memoizedProps = null
        fiber.memoizedState = null
        fiber.pendingProps = null
        fiber.stateNode = null
        fiber.updateQueue = null
    }
    var hostParent = null,
        hostParentIsContainer = false
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for (parent = parent.child; null !== parent; )
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent),
                (parent = parent.sibling)
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        if (injectedHook && 'function' === typeof injectedHook.onCommitFiberUnmount)
            try {
                injectedHook.onCommitFiberUnmount(rendererID, deletedFiber)
            } catch (err) {}
        switch (deletedFiber.tag) {
            case 26:
                offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor)
                recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber
                )
                deletedFiber.memoizedState
                    ? deletedFiber.memoizedState.count--
                    : deletedFiber.stateNode &&
                      ((deletedFiber = deletedFiber.stateNode),
                      deletedFiber.parentNode.removeChild(deletedFiber))
                break
            case 27:
                offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor)
                var prevHostParent = hostParent,
                    prevHostParentIsContainer = hostParentIsContainer
                isSingletonScope(deletedFiber.type) &&
                    ((hostParent = deletedFiber.stateNode), (hostParentIsContainer = false))
                recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber
                )
                releaseSingletonInstance(deletedFiber.stateNode)
                hostParent = prevHostParent
                hostParentIsContainer = prevHostParentIsContainer
                break
            case 5:
                offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor)
            case 6:
                prevHostParent = hostParent
                prevHostParentIsContainer = hostParentIsContainer
                hostParent = null
                recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber
                )
                hostParent = prevHostParent
                hostParentIsContainer = prevHostParentIsContainer
                if (null !== hostParent)
                    if (hostParentIsContainer)
                        try {
                            ;(9 === hostParent.nodeType
                                ? hostParent.body
                                : 'HTML' === hostParent.nodeName
                                  ? hostParent.ownerDocument.body
                                  : hostParent
                            ).removeChild(deletedFiber.stateNode)
                        } catch (error) {
                            captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error)
                        }
                    else
                        try {
                            hostParent.removeChild(deletedFiber.stateNode)
                        } catch (error) {
                            captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error)
                        }
                break
            case 18:
                null !== hostParent &&
                    (hostParentIsContainer
                        ? ((finishedRoot = hostParent),
                          clearSuspenseBoundary(
                              9 === finishedRoot.nodeType
                                  ? finishedRoot.body
                                  : 'HTML' === finishedRoot.nodeName
                                    ? finishedRoot.ownerDocument.body
                                    : finishedRoot,
                              deletedFiber.stateNode
                          ),
                          retryIfBlockedOn(finishedRoot))
                        : clearSuspenseBoundary(hostParent, deletedFiber.stateNode))
                break
            case 4:
                prevHostParent = hostParent
                prevHostParentIsContainer = hostParentIsContainer
                hostParent = deletedFiber.stateNode.containerInfo
                hostParentIsContainer = true
                recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber
                )
                hostParent = prevHostParent
                hostParentIsContainer = prevHostParentIsContainer
                break
            case 0:
            case 11:
            case 14:
            case 15:
                offscreenSubtreeWasHidden ||
                    commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor)
                offscreenSubtreeWasHidden ||
                    commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor)
                recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber
                )
                break
            case 1:
                offscreenSubtreeWasHidden ||
                    (safelyDetachRef(deletedFiber, nearestMountedAncestor),
                    (prevHostParent = deletedFiber.stateNode),
                    'function' === typeof prevHostParent.componentWillUnmount &&
                        safelyCallComponentWillUnmount(
                            deletedFiber,
                            nearestMountedAncestor,
                            prevHostParent
                        ))
                recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber
                )
                break
            case 21:
                recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber
                )
                break
            case 22:
                offscreenSubtreeWasHidden =
                    (prevHostParent = offscreenSubtreeWasHidden) ||
                    null !== deletedFiber.memoizedState
                recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber
                )
                offscreenSubtreeWasHidden = prevHostParent
                break
            default:
                recursivelyTraverseDeletionEffects(
                    finishedRoot,
                    nearestMountedAncestor,
                    deletedFiber
                )
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        if (
            null === finishedWork.memoizedState &&
            ((finishedRoot = finishedWork.alternate),
            null !== finishedRoot &&
                ((finishedRoot = finishedRoot.memoizedState),
                null !== finishedRoot &&
                    ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))
        )
            try {
                retryIfBlockedOn(finishedRoot)
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error)
            }
    }
    function getRetryCache(finishedWork) {
        switch (finishedWork.tag) {
            case 13:
            case 19:
                var retryCache = finishedWork.stateNode
                null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet())
                return retryCache
            case 22:
                return (
                    (finishedWork = finishedWork.stateNode),
                    (retryCache = finishedWork._retryCache),
                    null === retryCache &&
                        (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),
                    retryCache
                )
            default:
                throw Error(formatProdErrorMessage(435, finishedWork.tag))
        }
    }
    function attachSuspenseRetryListeners(finishedWork, wakeables) {
        var retryCache = getRetryCache(finishedWork)
        wakeables.forEach(function (wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable)
            retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry))
        })
    }
    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
        var deletions = parentFiber.deletions
        if (null !== deletions)
            for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i],
                    root2 = root$jscomp$0,
                    returnFiber = parentFiber,
                    parent = returnFiber
                a: for (; null !== parent; ) {
                    switch (parent.tag) {
                        case 27:
                            if (isSingletonScope(parent.type)) {
                                hostParent = parent.stateNode
                                hostParentIsContainer = false
                                break a
                            }
                            break
                        case 5:
                            hostParent = parent.stateNode
                            hostParentIsContainer = false
                            break a
                        case 3:
                        case 4:
                            hostParent = parent.stateNode.containerInfo
                            hostParentIsContainer = true
                            break a
                    }
                    parent = parent.return
                }
                if (null === hostParent) throw Error(formatProdErrorMessage(160))
                commitDeletionEffectsOnFiber(root2, returnFiber, childToDelete)
                hostParent = null
                hostParentIsContainer = false
                root2 = childToDelete.alternate
                null !== root2 && (root2.return = null)
                childToDelete.return = null
            }
        if (parentFiber.subtreeFlags & 13878)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
                commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
                    (parentFiber = parentFiber.sibling)
    }
    var currentHoistableRoot = null
    function commitMutationEffectsOnFiber(finishedWork, root2) {
        var current = finishedWork.alternate,
            flags = finishedWork.flags
        switch (finishedWork.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                flags & 4 &&
                    (commitHookEffectListUnmount(3, finishedWork, finishedWork.return),
                    commitHookEffectListMount(3, finishedWork),
                    commitHookEffectListUnmount(5, finishedWork, finishedWork.return))
                break
            case 1:
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                flags & 512 &&
                    (offscreenSubtreeWasHidden ||
                        null === current ||
                        safelyDetachRef(current, current.return))
                flags & 64 &&
                    offscreenSubtreeIsHidden &&
                    ((finishedWork = finishedWork.updateQueue),
                    null !== finishedWork &&
                        ((flags = finishedWork.callbacks),
                        null !== flags &&
                            ((current = finishedWork.shared.hiddenCallbacks),
                            (finishedWork.shared.hiddenCallbacks =
                                null === current ? flags : current.concat(flags)))))
                break
            case 26:
                var hoistableRoot = currentHoistableRoot
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                flags & 512 &&
                    (offscreenSubtreeWasHidden ||
                        null === current ||
                        safelyDetachRef(current, current.return))
                if (flags & 4) {
                    var currentResource = null !== current ? current.memoizedState : null
                    flags = finishedWork.memoizedState
                    if (null === current)
                        if (null === flags)
                            if (null === finishedWork.stateNode) {
                                a: {
                                    flags = finishedWork.type
                                    current = finishedWork.memoizedProps
                                    hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot
                                    b: switch (flags) {
                                        case 'title':
                                            currentResource =
                                                hoistableRoot.getElementsByTagName('title')[0]
                                            if (
                                                !currentResource ||
                                                currentResource[internalHoistableMarker] ||
                                                currentResource[internalInstanceKey] ||
                                                'http://www.w3.org/2000/svg' ===
                                                    currentResource.namespaceURI ||
                                                currentResource.hasAttribute('itemprop')
                                            )
                                                (currentResource =
                                                    hoistableRoot.createElement(flags)),
                                                    hoistableRoot.head.insertBefore(
                                                        currentResource,
                                                        hoistableRoot.querySelector('head > title')
                                                    )
                                            setInitialProperties(currentResource, flags, current)
                                            currentResource[internalInstanceKey] = finishedWork
                                            markNodeAsHoistable(currentResource)
                                            flags = currentResource
                                            break a
                                        case 'link':
                                            var maybeNodes = getHydratableHoistableCache(
                                                'link',
                                                'href',
                                                hoistableRoot
                                            ).get(flags + (current.href || ''))
                                            if (maybeNodes) {
                                                for (var i = 0; i < maybeNodes.length; i++)
                                                    if (
                                                        ((currentResource = maybeNodes[i]),
                                                        currentResource.getAttribute('href') ===
                                                            (null == current.href ||
                                                            '' === current.href
                                                                ? null
                                                                : current.href) &&
                                                            currentResource.getAttribute('rel') ===
                                                                (null == current.rel
                                                                    ? null
                                                                    : current.rel) &&
                                                            currentResource.getAttribute(
                                                                'title'
                                                            ) ===
                                                                (null == current.title
                                                                    ? null
                                                                    : current.title) &&
                                                            currentResource.getAttribute(
                                                                'crossorigin'
                                                            ) ===
                                                                (null == current.crossOrigin
                                                                    ? null
                                                                    : current.crossOrigin))
                                                    ) {
                                                        maybeNodes.splice(i, 1)
                                                        break b
                                                    }
                                            }
                                            currentResource = hoistableRoot.createElement(flags)
                                            setInitialProperties(currentResource, flags, current)
                                            hoistableRoot.head.appendChild(currentResource)
                                            break
                                        case 'meta':
                                            if (
                                                (maybeNodes = getHydratableHoistableCache(
                                                    'meta',
                                                    'content',
                                                    hoistableRoot
                                                ).get(flags + (current.content || '')))
                                            ) {
                                                for (i = 0; i < maybeNodes.length; i++)
                                                    if (
                                                        ((currentResource = maybeNodes[i]),
                                                        currentResource.getAttribute('content') ===
                                                            (null == current.content
                                                                ? null
                                                                : '' + current.content) &&
                                                            currentResource.getAttribute('name') ===
                                                                (null == current.name
                                                                    ? null
                                                                    : current.name) &&
                                                            currentResource.getAttribute(
                                                                'property'
                                                            ) ===
                                                                (null == current.property
                                                                    ? null
                                                                    : current.property) &&
                                                            currentResource.getAttribute(
                                                                'http-equiv'
                                                            ) ===
                                                                (null == current.httpEquiv
                                                                    ? null
                                                                    : current.httpEquiv) &&
                                                            currentResource.getAttribute(
                                                                'charset'
                                                            ) ===
                                                                (null == current.charSet
                                                                    ? null
                                                                    : current.charSet))
                                                    ) {
                                                        maybeNodes.splice(i, 1)
                                                        break b
                                                    }
                                            }
                                            currentResource = hoistableRoot.createElement(flags)
                                            setInitialProperties(currentResource, flags, current)
                                            hoistableRoot.head.appendChild(currentResource)
                                            break
                                        default:
                                            throw Error(formatProdErrorMessage(468, flags))
                                    }
                                    currentResource[internalInstanceKey] = finishedWork
                                    markNodeAsHoistable(currentResource)
                                    flags = currentResource
                                }
                                finishedWork.stateNode = flags
                            } else
                                mountHoistable(
                                    hoistableRoot,
                                    finishedWork.type,
                                    finishedWork.stateNode
                                )
                        else
                            finishedWork.stateNode = acquireResource(
                                hoistableRoot,
                                flags,
                                finishedWork.memoizedProps
                            )
                    else
                        currentResource !== flags
                            ? (null === currentResource
                                  ? null !== current.stateNode &&
                                    ((current = current.stateNode),
                                    current.parentNode.removeChild(current))
                                  : currentResource.count--,
                              null === flags
                                  ? mountHoistable(
                                        hoistableRoot,
                                        finishedWork.type,
                                        finishedWork.stateNode
                                    )
                                  : acquireResource(
                                        hoistableRoot,
                                        flags,
                                        finishedWork.memoizedProps
                                    ))
                            : null === flags &&
                              null !== finishedWork.stateNode &&
                              commitHostUpdate(
                                  finishedWork,
                                  finishedWork.memoizedProps,
                                  current.memoizedProps
                              )
                }
                break
            case 27:
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                flags & 512 &&
                    (offscreenSubtreeWasHidden ||
                        null === current ||
                        safelyDetachRef(current, current.return))
                null !== current &&
                    flags & 4 &&
                    commitHostUpdate(
                        finishedWork,
                        finishedWork.memoizedProps,
                        current.memoizedProps
                    )
                break
            case 5:
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                flags & 512 &&
                    (offscreenSubtreeWasHidden ||
                        null === current ||
                        safelyDetachRef(current, current.return))
                if (finishedWork.flags & 32) {
                    hoistableRoot = finishedWork.stateNode
                    try {
                        setTextContent(hoistableRoot, '')
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error)
                    }
                }
                flags & 4 &&
                    null != finishedWork.stateNode &&
                    ((hoistableRoot = finishedWork.memoizedProps),
                    commitHostUpdate(
                        finishedWork,
                        hoistableRoot,
                        null !== current ? current.memoizedProps : hoistableRoot
                    ))
                flags & 1024 && (needsFormReset = true)
                break
            case 6:
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                if (flags & 4) {
                    if (null === finishedWork.stateNode) throw Error(formatProdErrorMessage(162))
                    flags = finishedWork.memoizedProps
                    current = finishedWork.stateNode
                    try {
                        current.nodeValue = flags
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error)
                    }
                }
                break
            case 3:
                tagCaches = null
                hoistableRoot = currentHoistableRoot
                currentHoistableRoot = getHoistableRoot(root2.containerInfo)
                recursivelyTraverseMutationEffects(root2, finishedWork)
                currentHoistableRoot = hoistableRoot
                commitReconciliationEffects(finishedWork)
                if (flags & 4 && null !== current && current.memoizedState.isDehydrated)
                    try {
                        retryIfBlockedOn(root2.containerInfo)
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error)
                    }
                needsFormReset && ((needsFormReset = false), recursivelyResetForms(finishedWork))
                break
            case 4:
                flags = currentHoistableRoot
                currentHoistableRoot = getHoistableRoot(finishedWork.stateNode.containerInfo)
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                currentHoistableRoot = flags
                break
            case 12:
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                break
            case 13:
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                finishedWork.child.flags & 8192 &&
                    (null !== finishedWork.memoizedState) !==
                        (null !== current && null !== current.memoizedState) &&
                    (globalMostRecentFallbackTime = now())
                flags & 4 &&
                    ((flags = finishedWork.updateQueue),
                    null !== flags &&
                        ((finishedWork.updateQueue = null),
                        attachSuspenseRetryListeners(finishedWork, flags)))
                break
            case 22:
                hoistableRoot = null !== finishedWork.memoizedState
                var wasHidden = null !== current && null !== current.memoizedState,
                    prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
                    prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden
                recursivelyTraverseMutationEffects(root2, finishedWork)
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden
                commitReconciliationEffects(finishedWork)
                if (flags & 8192)
                    a: for (
                        root2 = finishedWork.stateNode,
                            root2._visibility = hoistableRoot
                                ? root2._visibility & -2
                                : root2._visibility | 1,
                            hoistableRoot &&
                                (null === current ||
                                    wasHidden ||
                                    offscreenSubtreeIsHidden ||
                                    offscreenSubtreeWasHidden ||
                                    recursivelyTraverseDisappearLayoutEffects(finishedWork)),
                            current = null,
                            root2 = finishedWork;
                        ;

                    ) {
                        if (5 === root2.tag || 26 === root2.tag) {
                            if (null === current) {
                                wasHidden = current = root2
                                try {
                                    if (((currentResource = wasHidden.stateNode), hoistableRoot))
                                        (maybeNodes = currentResource.style),
                                            'function' === typeof maybeNodes.setProperty
                                                ? maybeNodes.setProperty(
                                                      'display',
                                                      'none',
                                                      'important'
                                                  )
                                                : (maybeNodes.display = 'none')
                                    else {
                                        i = wasHidden.stateNode
                                        var styleProp = wasHidden.memoizedProps.style,
                                            display =
                                                void 0 !== styleProp &&
                                                null !== styleProp &&
                                                styleProp.hasOwnProperty('display')
                                                    ? styleProp.display
                                                    : null
                                        i.style.display =
                                            null == display || 'boolean' === typeof display
                                                ? ''
                                                : ('' + display).trim()
                                    }
                                } catch (error) {
                                    captureCommitPhaseError(wasHidden, wasHidden.return, error)
                                }
                            }
                        } else if (6 === root2.tag) {
                            if (null === current) {
                                wasHidden = root2
                                try {
                                    wasHidden.stateNode.nodeValue = hoistableRoot
                                        ? ''
                                        : wasHidden.memoizedProps
                                } catch (error) {
                                    captureCommitPhaseError(wasHidden, wasHidden.return, error)
                                }
                            }
                        } else if (
                            ((22 !== root2.tag && 23 !== root2.tag) ||
                                null === root2.memoizedState ||
                                root2 === finishedWork) &&
                            null !== root2.child
                        ) {
                            root2.child.return = root2
                            root2 = root2.child
                            continue
                        }
                        if (root2 === finishedWork) break a
                        for (; null === root2.sibling; ) {
                            if (null === root2.return || root2.return === finishedWork) break a
                            current === root2 && (current = null)
                            root2 = root2.return
                        }
                        current === root2 && (current = null)
                        root2.sibling.return = root2.return
                        root2 = root2.sibling
                    }
                flags & 4 &&
                    ((flags = finishedWork.updateQueue),
                    null !== flags &&
                        ((current = flags.retryQueue),
                        null !== current &&
                            ((flags.retryQueue = null),
                            attachSuspenseRetryListeners(finishedWork, current))))
                break
            case 19:
                recursivelyTraverseMutationEffects(root2, finishedWork)
                commitReconciliationEffects(finishedWork)
                flags & 4 &&
                    ((flags = finishedWork.updateQueue),
                    null !== flags &&
                        ((finishedWork.updateQueue = null),
                        attachSuspenseRetryListeners(finishedWork, flags)))
                break
            case 30:
                break
            case 21:
                break
            default:
                recursivelyTraverseMutationEffects(root2, finishedWork),
                    commitReconciliationEffects(finishedWork)
        }
    }
    function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags
        if (flags & 2) {
            try {
                for (
                    var hostParentFiber, parentFiber = finishedWork.return;
                    null !== parentFiber;

                ) {
                    if (isHostParent(parentFiber)) {
                        hostParentFiber = parentFiber
                        break
                    }
                    parentFiber = parentFiber.return
                }
                if (null == hostParentFiber) throw Error(formatProdErrorMessage(160))
                switch (hostParentFiber.tag) {
                    case 27:
                        var parent = hostParentFiber.stateNode,
                            before = getHostSibling(finishedWork)
                        insertOrAppendPlacementNode(finishedWork, before, parent)
                        break
                    case 5:
                        var parent$144 = hostParentFiber.stateNode
                        hostParentFiber.flags & 32 &&
                            (setTextContent(parent$144, ''), (hostParentFiber.flags &= -33))
                        var before$145 = getHostSibling(finishedWork)
                        insertOrAppendPlacementNode(finishedWork, before$145, parent$144)
                        break
                    case 3:
                    case 4:
                        var parent$146 = hostParentFiber.stateNode.containerInfo,
                            before$147 = getHostSibling(finishedWork)
                        insertOrAppendPlacementNodeIntoContainer(
                            finishedWork,
                            before$147,
                            parent$146
                        )
                        break
                    default:
                        throw Error(formatProdErrorMessage(161))
                }
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error)
            }
            finishedWork.flags &= -3
        }
        flags & 4096 && (finishedWork.flags &= -4097)
    }
    function recursivelyResetForms(parentFiber) {
        if (parentFiber.subtreeFlags & 1024)
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
                var fiber = parentFiber
                recursivelyResetForms(fiber)
                5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset()
                parentFiber = parentFiber.sibling
            }
    }
    function recursivelyTraverseLayoutEffects(root2, parentFiber) {
        if (parentFiber.subtreeFlags & 8772)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
                commitLayoutEffectOnFiber(root2, parentFiber.alternate, parentFiber),
                    (parentFiber = parentFiber.sibling)
    }
    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var finishedWork = parentFiber
            switch (finishedWork.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                    commitHookEffectListUnmount(4, finishedWork, finishedWork.return)
                    recursivelyTraverseDisappearLayoutEffects(finishedWork)
                    break
                case 1:
                    safelyDetachRef(finishedWork, finishedWork.return)
                    var instance = finishedWork.stateNode
                    'function' === typeof instance.componentWillUnmount &&
                        safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance)
                    recursivelyTraverseDisappearLayoutEffects(finishedWork)
                    break
                case 27:
                    releaseSingletonInstance(finishedWork.stateNode)
                case 26:
                case 5:
                    safelyDetachRef(finishedWork, finishedWork.return)
                    recursivelyTraverseDisappearLayoutEffects(finishedWork)
                    break
                case 22:
                    null === finishedWork.memoizedState &&
                        recursivelyTraverseDisappearLayoutEffects(finishedWork)
                    break
                case 30:
                    recursivelyTraverseDisappearLayoutEffects(finishedWork)
                    break
                default:
                    recursivelyTraverseDisappearLayoutEffects(finishedWork)
            }
            parentFiber = parentFiber.sibling
        }
    }
    function recursivelyTraverseReappearLayoutEffects(
        finishedRoot$jscomp$0,
        parentFiber,
        includeWorkInProgressEffects
    ) {
        includeWorkInProgressEffects =
            includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772)
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var current = parentFiber.alternate,
                finishedRoot = finishedRoot$jscomp$0,
                finishedWork = parentFiber,
                flags = finishedWork.flags
            switch (finishedWork.tag) {
                case 0:
                case 11:
                case 15:
                    recursivelyTraverseReappearLayoutEffects(
                        finishedRoot,
                        finishedWork,
                        includeWorkInProgressEffects
                    )
                    commitHookEffectListMount(4, finishedWork)
                    break
                case 1:
                    recursivelyTraverseReappearLayoutEffects(
                        finishedRoot,
                        finishedWork,
                        includeWorkInProgressEffects
                    )
                    current = finishedWork
                    finishedRoot = current.stateNode
                    if ('function' === typeof finishedRoot.componentDidMount)
                        try {
                            finishedRoot.componentDidMount()
                        } catch (error) {
                            captureCommitPhaseError(current, current.return, error)
                        }
                    current = finishedWork
                    finishedRoot = current.updateQueue
                    if (null !== finishedRoot) {
                        var instance = current.stateNode
                        try {
                            var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks
                            if (null !== hiddenCallbacks)
                                for (
                                    finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0;
                                    finishedRoot < hiddenCallbacks.length;
                                    finishedRoot++
                                )
                                    callCallback(hiddenCallbacks[finishedRoot], instance)
                        } catch (error) {
                            captureCommitPhaseError(current, current.return, error)
                        }
                    }
                    includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork)
                    safelyAttachRef(finishedWork, finishedWork.return)
                    break
                case 27:
                    commitHostSingletonAcquisition(finishedWork)
                case 26:
                case 5:
                    recursivelyTraverseReappearLayoutEffects(
                        finishedRoot,
                        finishedWork,
                        includeWorkInProgressEffects
                    )
                    includeWorkInProgressEffects &&
                        null === current &&
                        flags & 4 &&
                        commitHostMount(finishedWork)
                    safelyAttachRef(finishedWork, finishedWork.return)
                    break
                case 12:
                    recursivelyTraverseReappearLayoutEffects(
                        finishedRoot,
                        finishedWork,
                        includeWorkInProgressEffects
                    )
                    break
                case 13:
                    recursivelyTraverseReappearLayoutEffects(
                        finishedRoot,
                        finishedWork,
                        includeWorkInProgressEffects
                    )
                    includeWorkInProgressEffects &&
                        flags & 4 &&
                        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork)
                    break
                case 22:
                    null === finishedWork.memoizedState &&
                        recursivelyTraverseReappearLayoutEffects(
                            finishedRoot,
                            finishedWork,
                            includeWorkInProgressEffects
                        )
                    safelyAttachRef(finishedWork, finishedWork.return)
                    break
                case 30:
                    break
                default:
                    recursivelyTraverseReappearLayoutEffects(
                        finishedRoot,
                        finishedWork,
                        includeWorkInProgressEffects
                    )
            }
            parentFiber = parentFiber.sibling
        }
    }
    function commitOffscreenPassiveMountEffects(current, finishedWork) {
        var previousCache = null
        null !== current &&
            null !== current.memoizedState &&
            null !== current.memoizedState.cachePool &&
            (previousCache = current.memoizedState.cachePool.pool)
        current = null
        null !== finishedWork.memoizedState &&
            null !== finishedWork.memoizedState.cachePool &&
            (current = finishedWork.memoizedState.cachePool.pool)
        current !== previousCache &&
            (null != current && current.refCount++,
            null != previousCache && releaseCache(previousCache))
    }
    function commitCachePassiveMountEffect(current, finishedWork) {
        current = null
        null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache)
        finishedWork = finishedWork.memoizedState.cache
        finishedWork !== current &&
            (finishedWork.refCount++, null != current && releaseCache(current))
    }
    function recursivelyTraversePassiveMountEffects(
        root2,
        parentFiber,
        committedLanes,
        committedTransitions
    ) {
        if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
                commitPassiveMountOnFiber(root2, parentFiber, committedLanes, committedTransitions),
                    (parentFiber = parentFiber.sibling)
    }
    function commitPassiveMountOnFiber(
        finishedRoot,
        finishedWork,
        committedLanes,
        committedTransitions
    ) {
        var flags = finishedWork.flags
        switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
                recursivelyTraversePassiveMountEffects(
                    finishedRoot,
                    finishedWork,
                    committedLanes,
                    committedTransitions
                )
                flags & 2048 && commitHookEffectListMount(9, finishedWork)
                break
            case 1:
                recursivelyTraversePassiveMountEffects(
                    finishedRoot,
                    finishedWork,
                    committedLanes,
                    committedTransitions
                )
                break
            case 3:
                recursivelyTraversePassiveMountEffects(
                    finishedRoot,
                    finishedWork,
                    committedLanes,
                    committedTransitions
                )
                flags & 2048 &&
                    ((finishedRoot = null),
                    null !== finishedWork.alternate &&
                        (finishedRoot = finishedWork.alternate.memoizedState.cache),
                    (finishedWork = finishedWork.memoizedState.cache),
                    finishedWork !== finishedRoot &&
                        (finishedWork.refCount++,
                        null != finishedRoot && releaseCache(finishedRoot)))
                break
            case 12:
                if (flags & 2048) {
                    recursivelyTraversePassiveMountEffects(
                        finishedRoot,
                        finishedWork,
                        committedLanes,
                        committedTransitions
                    )
                    finishedRoot = finishedWork.stateNode
                    try {
                        var _finishedWork$memoize2 = finishedWork.memoizedProps,
                            id = _finishedWork$memoize2.id,
                            onPostCommit = _finishedWork$memoize2.onPostCommit
                        'function' === typeof onPostCommit &&
                            onPostCommit(
                                id,
                                null === finishedWork.alternate ? 'mount' : 'update',
                                finishedRoot.passiveEffectDuration,
                                -0
                            )
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error)
                    }
                } else
                    recursivelyTraversePassiveMountEffects(
                        finishedRoot,
                        finishedWork,
                        committedLanes,
                        committedTransitions
                    )
                break
            case 13:
                recursivelyTraversePassiveMountEffects(
                    finishedRoot,
                    finishedWork,
                    committedLanes,
                    committedTransitions
                )
                break
            case 23:
                break
            case 22:
                _finishedWork$memoize2 = finishedWork.stateNode
                id = finishedWork.alternate
                null !== finishedWork.memoizedState
                    ? _finishedWork$memoize2._visibility & 2
                        ? recursivelyTraversePassiveMountEffects(
                              finishedRoot,
                              finishedWork,
                              committedLanes,
                              committedTransitions
                          )
                        : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork)
                    : _finishedWork$memoize2._visibility & 2
                      ? recursivelyTraversePassiveMountEffects(
                            finishedRoot,
                            finishedWork,
                            committedLanes,
                            committedTransitions
                        )
                      : ((_finishedWork$memoize2._visibility |= 2),
                        recursivelyTraverseReconnectPassiveEffects(
                            finishedRoot,
                            finishedWork,
                            committedLanes,
                            committedTransitions,
                            0 !== (finishedWork.subtreeFlags & 10256)
                        ))
                flags & 2048 && commitOffscreenPassiveMountEffects(id, finishedWork)
                break
            case 24:
                recursivelyTraversePassiveMountEffects(
                    finishedRoot,
                    finishedWork,
                    committedLanes,
                    committedTransitions
                )
                flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork)
                break
            default:
                recursivelyTraversePassiveMountEffects(
                    finishedRoot,
                    finishedWork,
                    committedLanes,
                    committedTransitions
                )
        }
    }
    function recursivelyTraverseReconnectPassiveEffects(
        finishedRoot$jscomp$0,
        parentFiber,
        committedLanes$jscomp$0,
        committedTransitions$jscomp$0,
        includeWorkInProgressEffects
    ) {
        includeWorkInProgressEffects =
            includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256)
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var finishedRoot = finishedRoot$jscomp$0,
                finishedWork = parentFiber,
                committedLanes = committedLanes$jscomp$0,
                committedTransitions = committedTransitions$jscomp$0,
                flags = finishedWork.flags
            switch (finishedWork.tag) {
                case 0:
                case 11:
                case 15:
                    recursivelyTraverseReconnectPassiveEffects(
                        finishedRoot,
                        finishedWork,
                        committedLanes,
                        committedTransitions,
                        includeWorkInProgressEffects
                    )
                    commitHookEffectListMount(8, finishedWork)
                    break
                case 23:
                    break
                case 22:
                    var instance = finishedWork.stateNode
                    null !== finishedWork.memoizedState
                        ? instance._visibility & 2
                            ? recursivelyTraverseReconnectPassiveEffects(
                                  finishedRoot,
                                  finishedWork,
                                  committedLanes,
                                  committedTransitions,
                                  includeWorkInProgressEffects
                              )
                            : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork)
                        : ((instance._visibility |= 2),
                          recursivelyTraverseReconnectPassiveEffects(
                              finishedRoot,
                              finishedWork,
                              committedLanes,
                              committedTransitions,
                              includeWorkInProgressEffects
                          ))
                    includeWorkInProgressEffects &&
                        flags & 2048 &&
                        commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork)
                    break
                case 24:
                    recursivelyTraverseReconnectPassiveEffects(
                        finishedRoot,
                        finishedWork,
                        committedLanes,
                        committedTransitions,
                        includeWorkInProgressEffects
                    )
                    includeWorkInProgressEffects &&
                        flags & 2048 &&
                        commitCachePassiveMountEffect(finishedWork.alternate, finishedWork)
                    break
                default:
                    recursivelyTraverseReconnectPassiveEffects(
                        finishedRoot,
                        finishedWork,
                        committedLanes,
                        committedTransitions,
                        includeWorkInProgressEffects
                    )
            }
            parentFiber = parentFiber.sibling
        }
    }
    function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
        if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; ) {
                var finishedRoot = finishedRoot$jscomp$0,
                    finishedWork = parentFiber,
                    flags = finishedWork.flags
                switch (finishedWork.tag) {
                    case 22:
                        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork)
                        flags & 2048 &&
                            commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork)
                        break
                    case 24:
                        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork)
                        flags & 2048 &&
                            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork)
                        break
                    default:
                        recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork)
                }
                parentFiber = parentFiber.sibling
            }
    }
    var suspenseyCommitFlag = 8192
    function recursivelyAccumulateSuspenseyCommit(parentFiber) {
        if (parentFiber.subtreeFlags & suspenseyCommitFlag)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
                accumulateSuspenseyCommitOnFiber(parentFiber), (parentFiber = parentFiber.sibling)
    }
    function accumulateSuspenseyCommitOnFiber(fiber) {
        switch (fiber.tag) {
            case 26:
                recursivelyAccumulateSuspenseyCommit(fiber)
                fiber.flags & suspenseyCommitFlag &&
                    null !== fiber.memoizedState &&
                    suspendResource(currentHoistableRoot, fiber.memoizedState, fiber.memoizedProps)
                break
            case 5:
                recursivelyAccumulateSuspenseyCommit(fiber)
                break
            case 3:
            case 4:
                var previousHoistableRoot = currentHoistableRoot
                currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo)
                recursivelyAccumulateSuspenseyCommit(fiber)
                currentHoistableRoot = previousHoistableRoot
                break
            case 22:
                null === fiber.memoizedState &&
                    ((previousHoistableRoot = fiber.alternate),
                    null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState
                        ? ((previousHoistableRoot = suspenseyCommitFlag),
                          (suspenseyCommitFlag = 16777216),
                          recursivelyAccumulateSuspenseyCommit(fiber),
                          (suspenseyCommitFlag = previousHoistableRoot))
                        : recursivelyAccumulateSuspenseyCommit(fiber))
                break
            default:
                recursivelyAccumulateSuspenseyCommit(fiber)
        }
    }
    function detachAlternateSiblings(parentFiber) {
        var previousFiber = parentFiber.alternate
        if (null !== previousFiber && ((parentFiber = previousFiber.child), null !== parentFiber)) {
            previousFiber.child = null
            do
                (previousFiber = parentFiber.sibling),
                    (parentFiber.sibling = null),
                    (parentFiber = previousFiber)
            while (null !== parentFiber)
        }
    }
    function recursivelyTraversePassiveUnmountEffects(parentFiber) {
        var deletions = parentFiber.deletions
        if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions)
                for (var i = 0; i < deletions.length; i++) {
                    var childToDelete = deletions[i]
                    nextEffect = childToDelete
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber)
                }
            detachAlternateSiblings(parentFiber)
        }
        if (parentFiber.subtreeFlags & 10256)
            for (parentFiber = parentFiber.child; null !== parentFiber; )
                commitPassiveUnmountOnFiber(parentFiber), (parentFiber = parentFiber.sibling)
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
                recursivelyTraversePassiveUnmountEffects(finishedWork)
                finishedWork.flags & 2048 &&
                    commitHookEffectListUnmount(9, finishedWork, finishedWork.return)
                break
            case 3:
                recursivelyTraversePassiveUnmountEffects(finishedWork)
                break
            case 12:
                recursivelyTraversePassiveUnmountEffects(finishedWork)
                break
            case 22:
                var instance = finishedWork.stateNode
                null !== finishedWork.memoizedState &&
                instance._visibility & 2 &&
                (null === finishedWork.return || 13 !== finishedWork.return.tag)
                    ? ((instance._visibility &= -3),
                      recursivelyTraverseDisconnectPassiveEffects(finishedWork))
                    : recursivelyTraversePassiveUnmountEffects(finishedWork)
                break
            default:
                recursivelyTraversePassiveUnmountEffects(finishedWork)
        }
    }
    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
        var deletions = parentFiber.deletions
        if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions)
                for (var i = 0; i < deletions.length; i++) {
                    var childToDelete = deletions[i]
                    nextEffect = childToDelete
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber)
                }
            detachAlternateSiblings(parentFiber)
        }
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            deletions = parentFiber
            switch (deletions.tag) {
                case 0:
                case 11:
                case 15:
                    commitHookEffectListUnmount(8, deletions, deletions.return)
                    recursivelyTraverseDisconnectPassiveEffects(deletions)
                    break
                case 22:
                    i = deletions.stateNode
                    i._visibility & 2 &&
                        ((i._visibility &= -3),
                        recursivelyTraverseDisconnectPassiveEffects(deletions))
                    break
                default:
                    recursivelyTraverseDisconnectPassiveEffects(deletions)
            }
            parentFiber = parentFiber.sibling
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
        deletedSubtreeRoot,
        nearestMountedAncestor
    ) {
        for (; null !== nextEffect; ) {
            var fiber = nextEffect
            switch (fiber.tag) {
                case 0:
                case 11:
                case 15:
                    commitHookEffectListUnmount(8, fiber, nearestMountedAncestor)
                    break
                case 23:
                case 22:
                    if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
                        var cache = fiber.memoizedState.cachePool.pool
                        null != cache && cache.refCount++
                    }
                    break
                case 24:
                    releaseCache(fiber.memoizedState.cache)
            }
            cache = fiber.child
            if (null !== cache) (cache.return = fiber), (nextEffect = cache)
            else
                a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
                    cache = nextEffect
                    var sibling = cache.sibling,
                        returnFiber = cache.return
                    detachFiberAfterEffects(cache)
                    if (cache === fiber) {
                        nextEffect = null
                        break a
                    }
                    if (null !== sibling) {
                        sibling.return = returnFiber
                        nextEffect = sibling
                        break a
                    }
                    nextEffect = returnFiber
                }
        }
    }
    var DefaultAsyncDispatcher = {
            getCacheForType: function (resourceType) {
                var cache = readContext(CacheContext),
                    cacheForType = cache.data.get(resourceType)
                void 0 === cacheForType &&
                    ((cacheForType = resourceType()), cache.data.set(resourceType, cacheForType))
                return cacheForType
            }
        },
        PossiblyWeakMap = 'function' === typeof WeakMap ? WeakMap : Map,
        executionContext = 0,
        workInProgressRoot = null,
        workInProgress = null,
        workInProgressRootRenderLanes = 0,
        workInProgressSuspendedReason = 0,
        workInProgressThrownValue = null,
        workInProgressRootDidSkipSuspendedSiblings = false,
        workInProgressRootIsPrerendering = false,
        workInProgressRootDidAttachPingListener = false,
        entangledRenderLanes = 0,
        workInProgressRootExitStatus = 0,
        workInProgressRootSkippedLanes = 0,
        workInProgressRootInterleavedUpdatedLanes = 0,
        workInProgressRootPingedLanes = 0,
        workInProgressDeferredLane = 0,
        workInProgressSuspendedRetryLanes = 0,
        workInProgressRootConcurrentErrors = null,
        workInProgressRootRecoverableErrors = null,
        workInProgressRootDidIncludeRecursiveRenderUpdate = false,
        globalMostRecentFallbackTime = 0,
        workInProgressRootRenderTargetTime = Infinity,
        workInProgressTransitions = null,
        legacyErrorBoundariesThatAlreadyFailed = null,
        pendingEffectsStatus = 0,
        pendingEffectsRoot = null,
        pendingFinishedWork = null,
        pendingEffectsLanes = 0,
        pendingEffectsRemainingLanes = 0,
        pendingPassiveTransitions = null,
        pendingRecoverableErrors = null,
        nestedUpdateCount = 0,
        rootWithNestedUpdates = null
    function requestUpdateLane() {
        if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
            return workInProgressRootRenderLanes & -workInProgressRootRenderLanes
        if (null !== ReactSharedInternals.T) {
            var actionScopeLane = currentEntangledLane
            return 0 !== actionScopeLane ? actionScopeLane : requestTransitionLane()
        }
        return resolveUpdatePriority()
    }
    function requestDeferredLane() {
        0 === workInProgressDeferredLane &&
            (workInProgressDeferredLane =
                0 === (workInProgressRootRenderLanes & 536870912) || isHydrating
                    ? claimNextTransitionLane()
                    : 536870912)
        var suspenseHandler = suspenseHandlerStackCursor.current
        null !== suspenseHandler && (suspenseHandler.flags |= 32)
        return workInProgressDeferredLane
    }
    function scheduleUpdateOnFiber(root2, fiber, lane) {
        if (
            (root2 === workInProgressRoot &&
                (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason)) ||
            null !== root2.cancelPendingCommit
        )
            prepareFreshStack(root2, 0),
                markRootSuspended(
                    root2,
                    workInProgressRootRenderLanes,
                    workInProgressDeferredLane,
                    false
                )
        markRootUpdated$1(root2, lane)
        if (0 === (executionContext & 2) || root2 !== workInProgressRoot)
            root2 === workInProgressRoot &&
                (0 === (executionContext & 2) &&
                    (workInProgressRootInterleavedUpdatedLanes |= lane),
                4 === workInProgressRootExitStatus &&
                    markRootSuspended(
                        root2,
                        workInProgressRootRenderLanes,
                        workInProgressDeferredLane,
                        false
                    )),
                ensureRootIsScheduled(root2)
    }
    function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
        if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327))
        var shouldTimeSlice =
                (!forceSync && 0 === (lanes & 124) && 0 === (lanes & root$jscomp$0.expiredLanes)) ||
                checkIfRootIsPrerendering(root$jscomp$0, lanes),
            exitStatus = shouldTimeSlice
                ? renderRootConcurrent(root$jscomp$0, lanes)
                : renderRootSync(root$jscomp$0, lanes, true),
            renderWasConcurrent = shouldTimeSlice
        do {
            if (0 === exitStatus) {
                workInProgressRootIsPrerendering &&
                    !shouldTimeSlice &&
                    markRootSuspended(root$jscomp$0, lanes, 0, false)
                break
            } else {
                forceSync = root$jscomp$0.current.alternate
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
                    exitStatus = renderRootSync(root$jscomp$0, lanes, false)
                    renderWasConcurrent = false
                    continue
                }
                if (2 === exitStatus) {
                    renderWasConcurrent = lanes
                    if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
                        var JSCompiler_inline_result = 0
                    else
                        (JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913),
                            (JSCompiler_inline_result =
                                0 !== JSCompiler_inline_result
                                    ? JSCompiler_inline_result
                                    : JSCompiler_inline_result & 536870912
                                      ? 536870912
                                      : 0)
                    if (0 !== JSCompiler_inline_result) {
                        lanes = JSCompiler_inline_result
                        a: {
                            var root2 = root$jscomp$0
                            exitStatus = workInProgressRootConcurrentErrors
                            var wasRootDehydrated = root2.current.memoizedState.isDehydrated
                            wasRootDehydrated &&
                                (prepareFreshStack(root2, JSCompiler_inline_result).flags |= 256)
                            JSCompiler_inline_result = renderRootSync(
                                root2,
                                JSCompiler_inline_result,
                                false
                            )
                            if (2 !== JSCompiler_inline_result) {
                                if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                                    root2.errorRecoveryDisabledLanes |= renderWasConcurrent
                                    workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent
                                    exitStatus = 4
                                    break a
                                }
                                renderWasConcurrent = workInProgressRootRecoverableErrors
                                workInProgressRootRecoverableErrors = exitStatus
                                null !== renderWasConcurrent &&
                                    (null === workInProgressRootRecoverableErrors
                                        ? (workInProgressRootRecoverableErrors =
                                              renderWasConcurrent)
                                        : workInProgressRootRecoverableErrors.push.apply(
                                              workInProgressRootRecoverableErrors,
                                              renderWasConcurrent
                                          ))
                            }
                            exitStatus = JSCompiler_inline_result
                        }
                        renderWasConcurrent = false
                        if (2 !== exitStatus) continue
                    }
                }
                if (1 === exitStatus) {
                    prepareFreshStack(root$jscomp$0, 0)
                    markRootSuspended(root$jscomp$0, lanes, 0, true)
                    break
                }
                a: {
                    shouldTimeSlice = root$jscomp$0
                    renderWasConcurrent = exitStatus
                    switch (renderWasConcurrent) {
                        case 0:
                        case 1:
                            throw Error(formatProdErrorMessage(345))
                        case 4:
                            if ((lanes & 4194048) !== lanes) break
                        case 6:
                            markRootSuspended(
                                shouldTimeSlice,
                                lanes,
                                workInProgressDeferredLane,
                                !workInProgressRootDidSkipSuspendedSiblings
                            )
                            break a
                        case 2:
                            workInProgressRootRecoverableErrors = null
                            break
                        case 3:
                        case 5:
                            break
                        default:
                            throw Error(formatProdErrorMessage(329))
                    }
                    if (
                        (lanes & 62914560) === lanes &&
                        ((exitStatus = globalMostRecentFallbackTime + 300 - now()), 10 < exitStatus)
                    ) {
                        markRootSuspended(
                            shouldTimeSlice,
                            lanes,
                            workInProgressDeferredLane,
                            !workInProgressRootDidSkipSuspendedSiblings
                        )
                        if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a
                        shouldTimeSlice.timeoutHandle = scheduleTimeout(
                            commitRootWhenReady.bind(
                                null,
                                shouldTimeSlice,
                                forceSync,
                                workInProgressRootRecoverableErrors,
                                workInProgressTransitions,
                                workInProgressRootDidIncludeRecursiveRenderUpdate,
                                lanes,
                                workInProgressDeferredLane,
                                workInProgressRootInterleavedUpdatedLanes,
                                workInProgressSuspendedRetryLanes,
                                workInProgressRootDidSkipSuspendedSiblings,
                                renderWasConcurrent,
                                2,
                                -0,
                                0
                            ),
                            exitStatus
                        )
                        break a
                    }
                    commitRootWhenReady(
                        shouldTimeSlice,
                        forceSync,
                        workInProgressRootRecoverableErrors,
                        workInProgressTransitions,
                        workInProgressRootDidIncludeRecursiveRenderUpdate,
                        lanes,
                        workInProgressDeferredLane,
                        workInProgressRootInterleavedUpdatedLanes,
                        workInProgressSuspendedRetryLanes,
                        workInProgressRootDidSkipSuspendedSiblings,
                        renderWasConcurrent,
                        0,
                        -0,
                        0
                    )
                }
            }
            break
        } while (1)
        ensureRootIsScheduled(root$jscomp$0)
    }
    function commitRootWhenReady(
        root2,
        finishedWork,
        recoverableErrors,
        transitions,
        didIncludeRenderPhaseUpdate,
        lanes,
        spawnedLane,
        updatedLanes,
        suspendedRetryLanes,
        didSkipSuspendedSiblings,
        exitStatus,
        suspendedCommitReason,
        completedRenderStartTime,
        completedRenderEndTime
    ) {
        root2.timeoutHandle = -1
        suspendedCommitReason = finishedWork.subtreeFlags
        if (suspendedCommitReason & 8192 || 16785408 === (suspendedCommitReason & 16785408)) {
            if (
                ((suspendedState = { stylesheets: null, count: 0, unsuspend: noop3 }),
                accumulateSuspenseyCommitOnFiber(finishedWork),
                (suspendedCommitReason = waitForCommitToBeReady()),
                null !== suspendedCommitReason)
            ) {
                root2.cancelPendingCommit = suspendedCommitReason(
                    commitRoot.bind(
                        null,
                        root2,
                        finishedWork,
                        lanes,
                        recoverableErrors,
                        transitions,
                        didIncludeRenderPhaseUpdate,
                        spawnedLane,
                        updatedLanes,
                        suspendedRetryLanes,
                        exitStatus,
                        1,
                        completedRenderStartTime,
                        completedRenderEndTime
                    )
                )
                markRootSuspended(root2, lanes, spawnedLane, !didSkipSuspendedSiblings)
                return
            }
        }
        commitRoot(
            root2,
            finishedWork,
            lanes,
            recoverableErrors,
            transitions,
            didIncludeRenderPhaseUpdate,
            spawnedLane,
            updatedLanes,
            suspendedRetryLanes
        )
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
        for (var node2 = finishedWork; ; ) {
            var tag = node2.tag
            if (
                (0 === tag || 11 === tag || 15 === tag) &&
                node2.flags & 16384 &&
                ((tag = node2.updateQueue), null !== tag && ((tag = tag.stores), null !== tag))
            )
                for (var i = 0; i < tag.length; i++) {
                    var check = tag[i],
                        getSnapshot = check.getSnapshot
                    check = check.value
                    try {
                        if (!objectIs(getSnapshot(), check)) return false
                    } catch (error) {
                        return false
                    }
                }
            tag = node2.child
            if (node2.subtreeFlags & 16384 && null !== tag) (tag.return = node2), (node2 = tag)
            else {
                if (node2 === finishedWork) break
                for (; null === node2.sibling; ) {
                    if (null === node2.return || node2.return === finishedWork) return true
                    node2 = node2.return
                }
                node2.sibling.return = node2.return
                node2 = node2.sibling
            }
        }
        return true
    }
    function markRootSuspended(root2, suspendedLanes, spawnedLane, didAttemptEntireTree) {
        suspendedLanes &= ~workInProgressRootPingedLanes
        suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes
        root2.suspendedLanes |= suspendedLanes
        root2.pingedLanes &= ~suspendedLanes
        didAttemptEntireTree && (root2.warmLanes |= suspendedLanes)
        didAttemptEntireTree = root2.expirationTimes
        for (var lanes = suspendedLanes; 0 < lanes; ) {
            var index$4 = 31 - clz32(lanes),
                lane = 1 << index$4
            didAttemptEntireTree[index$4] = -1
            lanes &= ~lane
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, suspendedLanes)
    }
    function flushSyncWork$1() {
        return 0 === (executionContext & 6) ? (flushSyncWorkAcrossRoots_impl(0), false) : true
    }
    function resetWorkInProgressStack() {
        if (null !== workInProgress) {
            if (0 === workInProgressSuspendedReason) var interruptedWork = workInProgress.return
            else
                (interruptedWork = workInProgress),
                    (lastContextDependency = currentlyRenderingFiber$1 = null),
                    resetHooksOnUnwind(interruptedWork),
                    (thenableState = null),
                    (thenableIndexCounter = 0),
                    (interruptedWork = workInProgress)
            for (; null !== interruptedWork; )
                unwindInterruptedWork(interruptedWork.alternate, interruptedWork),
                    (interruptedWork = interruptedWork.return)
            workInProgress = null
        }
    }
    function prepareFreshStack(root2, lanes) {
        var timeoutHandle = root2.timeoutHandle
        ;-1 !== timeoutHandle && ((root2.timeoutHandle = -1), cancelTimeout(timeoutHandle))
        timeoutHandle = root2.cancelPendingCommit
        null !== timeoutHandle && ((root2.cancelPendingCommit = null), timeoutHandle())
        resetWorkInProgressStack()
        workInProgressRoot = root2
        workInProgress = timeoutHandle = createWorkInProgress(root2.current, null)
        workInProgressRootRenderLanes = lanes
        workInProgressSuspendedReason = 0
        workInProgressThrownValue = null
        workInProgressRootDidSkipSuspendedSiblings = false
        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes)
        workInProgressRootDidAttachPingListener = false
        workInProgressSuspendedRetryLanes =
            workInProgressDeferredLane =
            workInProgressRootPingedLanes =
            workInProgressRootInterleavedUpdatedLanes =
            workInProgressRootSkippedLanes =
            workInProgressRootExitStatus =
                0
        workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null
        workInProgressRootDidIncludeRecursiveRenderUpdate = false
        0 !== (lanes & 8) && (lanes |= lanes & 32)
        var allEntangledLanes = root2.entangledLanes
        if (0 !== allEntangledLanes)
            for (root2 = root2.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes; ) {
                var index$2 = 31 - clz32(allEntangledLanes),
                    lane = 1 << index$2
                lanes |= root2[index$2]
                allEntangledLanes &= ~lane
            }
        entangledRenderLanes = lanes
        finishQueueingConcurrentUpdates()
        return timeoutHandle
    }
    function handleThrow(root2, thrownValue) {
        currentlyRenderingFiber = null
        ReactSharedInternals.H = ContextOnlyDispatcher
        thrownValue === SuspenseException || thrownValue === SuspenseActionException
            ? ((thrownValue = getSuspendedThenable()), (workInProgressSuspendedReason = 3))
            : thrownValue === SuspenseyCommitException
              ? ((thrownValue = getSuspendedThenable()), (workInProgressSuspendedReason = 4))
              : (workInProgressSuspendedReason =
                    thrownValue === SelectiveHydrationException
                        ? 8
                        : null !== thrownValue &&
                            'object' === typeof thrownValue &&
                            'function' === typeof thrownValue.then
                          ? 6
                          : 1)
        workInProgressThrownValue = thrownValue
        null === workInProgress &&
            ((workInProgressRootExitStatus = 1),
            logUncaughtError(root2, createCapturedValueAtFiber(thrownValue, root2.current)))
    }
    function pushDispatcher() {
        var prevDispatcher = ReactSharedInternals.H
        ReactSharedInternals.H = ContextOnlyDispatcher
        return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher
    }
    function pushAsyncDispatcher() {
        var prevAsyncDispatcher = ReactSharedInternals.A
        ReactSharedInternals.A = DefaultAsyncDispatcher
        return prevAsyncDispatcher
    }
    function renderDidSuspendDelayIfPossible() {
        workInProgressRootExitStatus = 4
        workInProgressRootDidSkipSuspendedSiblings ||
            ((workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes &&
                null !== suspenseHandlerStackCursor.current) ||
            (workInProgressRootIsPrerendering = true)
        ;(0 === (workInProgressRootSkippedLanes & 134217727) &&
            0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||
            null === workInProgressRoot ||
            markRootSuspended(
                workInProgressRoot,
                workInProgressRootRenderLanes,
                workInProgressDeferredLane,
                false
            )
    }
    function renderRootSync(root2, lanes, shouldYieldForPrerendering) {
        var prevExecutionContext = executionContext
        executionContext |= 2
        var prevDispatcher = pushDispatcher(),
            prevAsyncDispatcher = pushAsyncDispatcher()
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes)
            (workInProgressTransitions = null), prepareFreshStack(root2, lanes)
        lanes = false
        var exitStatus = workInProgressRootExitStatus
        a: do
            try {
                if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
                    var unitOfWork = workInProgress,
                        thrownValue = workInProgressThrownValue
                    switch (workInProgressSuspendedReason) {
                        case 8:
                            resetWorkInProgressStack()
                            exitStatus = 6
                            break a
                        case 3:
                        case 2:
                        case 9:
                        case 6:
                            null === suspenseHandlerStackCursor.current && (lanes = true)
                            var reason = workInProgressSuspendedReason
                            workInProgressSuspendedReason = 0
                            workInProgressThrownValue = null
                            throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason)
                            if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                                exitStatus = 0
                                break a
                            }
                            break
                        default:
                            ;(reason = workInProgressSuspendedReason),
                                (workInProgressSuspendedReason = 0),
                                (workInProgressThrownValue = null),
                                throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason)
                    }
                }
                workLoopSync()
                exitStatus = workInProgressRootExitStatus
                break
            } catch (thrownValue$167) {
                handleThrow(root2, thrownValue$167)
            }
        while (1)
        lanes && root2.shellSuspendCounter++
        lastContextDependency = currentlyRenderingFiber$1 = null
        executionContext = prevExecutionContext
        ReactSharedInternals.H = prevDispatcher
        ReactSharedInternals.A = prevAsyncDispatcher
        null === workInProgress &&
            ((workInProgressRoot = null),
            (workInProgressRootRenderLanes = 0),
            finishQueueingConcurrentUpdates())
        return exitStatus
    }
    function workLoopSync() {
        for (; null !== workInProgress; ) performUnitOfWork(workInProgress)
    }
    function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext
        executionContext |= 2
        var prevDispatcher = pushDispatcher(),
            prevAsyncDispatcher = pushAsyncDispatcher()
        workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes
            ? ((workInProgressTransitions = null),
              (workInProgressRootRenderTargetTime = now() + 500),
              prepareFreshStack(root2, lanes))
            : (workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes))
        a: do
            try {
                if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
                    lanes = workInProgress
                    var thrownValue = workInProgressThrownValue
                    b: switch (workInProgressSuspendedReason) {
                        case 1:
                            workInProgressSuspendedReason = 0
                            workInProgressThrownValue = null
                            throwAndUnwindWorkLoop(root2, lanes, thrownValue, 1)
                            break
                        case 2:
                        case 9:
                            if (isThenableResolved(thrownValue)) {
                                workInProgressSuspendedReason = 0
                                workInProgressThrownValue = null
                                replaySuspendedUnitOfWork(lanes)
                                break
                            }
                            lanes = function () {
                                ;(2 !== workInProgressSuspendedReason &&
                                    9 !== workInProgressSuspendedReason) ||
                                    workInProgressRoot !== root2 ||
                                    (workInProgressSuspendedReason = 7)
                                ensureRootIsScheduled(root2)
                            }
                            thrownValue.then(lanes, lanes)
                            break a
                        case 3:
                            workInProgressSuspendedReason = 7
                            break a
                        case 4:
                            workInProgressSuspendedReason = 5
                            break a
                        case 7:
                            isThenableResolved(thrownValue)
                                ? ((workInProgressSuspendedReason = 0),
                                  (workInProgressThrownValue = null),
                                  replaySuspendedUnitOfWork(lanes))
                                : ((workInProgressSuspendedReason = 0),
                                  (workInProgressThrownValue = null),
                                  throwAndUnwindWorkLoop(root2, lanes, thrownValue, 7))
                            break
                        case 5:
                            var resource = null
                            switch (workInProgress.tag) {
                                case 26:
                                    resource = workInProgress.memoizedState
                                case 5:
                                case 27:
                                    var hostFiber = workInProgress
                                    if (resource ? preloadResource(resource) : 1) {
                                        workInProgressSuspendedReason = 0
                                        workInProgressThrownValue = null
                                        var sibling = hostFiber.sibling
                                        if (null !== sibling) workInProgress = sibling
                                        else {
                                            var returnFiber = hostFiber.return
                                            null !== returnFiber
                                                ? ((workInProgress = returnFiber),
                                                  completeUnitOfWork(returnFiber))
                                                : (workInProgress = null)
                                        }
                                        break b
                                    }
                            }
                            workInProgressSuspendedReason = 0
                            workInProgressThrownValue = null
                            throwAndUnwindWorkLoop(root2, lanes, thrownValue, 5)
                            break
                        case 6:
                            workInProgressSuspendedReason = 0
                            workInProgressThrownValue = null
                            throwAndUnwindWorkLoop(root2, lanes, thrownValue, 6)
                            break
                        case 8:
                            resetWorkInProgressStack()
                            workInProgressRootExitStatus = 6
                            break a
                        default:
                            throw Error(formatProdErrorMessage(462))
                    }
                }
                workLoopConcurrentByScheduler()
                break
            } catch (thrownValue$169) {
                handleThrow(root2, thrownValue$169)
            }
        while (1)
        lastContextDependency = currentlyRenderingFiber$1 = null
        ReactSharedInternals.H = prevDispatcher
        ReactSharedInternals.A = prevAsyncDispatcher
        executionContext = prevExecutionContext
        if (null !== workInProgress) return 0
        workInProgressRoot = null
        workInProgressRootRenderLanes = 0
        finishQueueingConcurrentUpdates()
        return workInProgressRootExitStatus
    }
    function workLoopConcurrentByScheduler() {
        for (; null !== workInProgress && !shouldYield(); ) performUnitOfWork(workInProgress)
    }
    function performUnitOfWork(unitOfWork) {
        var next2 = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes)
        unitOfWork.memoizedProps = unitOfWork.pendingProps
        null === next2 ? completeUnitOfWork(unitOfWork) : (workInProgress = next2)
    }
    function replaySuspendedUnitOfWork(unitOfWork) {
        var next2 = unitOfWork
        var current = next2.alternate
        switch (next2.tag) {
            case 15:
            case 0:
                next2 = replayFunctionComponent(
                    current,
                    next2,
                    next2.pendingProps,
                    next2.type,
                    void 0,
                    workInProgressRootRenderLanes
                )
                break
            case 11:
                next2 = replayFunctionComponent(
                    current,
                    next2,
                    next2.pendingProps,
                    next2.type.render,
                    next2.ref,
                    workInProgressRootRenderLanes
                )
                break
            case 5:
                resetHooksOnUnwind(next2)
            default:
                unwindInterruptedWork(current, next2),
                    (next2 = workInProgress = resetWorkInProgress(next2, entangledRenderLanes)),
                    (next2 = beginWork(current, next2, entangledRenderLanes))
        }
        unitOfWork.memoizedProps = unitOfWork.pendingProps
        null === next2 ? completeUnitOfWork(unitOfWork) : (workInProgress = next2)
    }
    function throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, suspendedReason) {
        lastContextDependency = currentlyRenderingFiber$1 = null
        resetHooksOnUnwind(unitOfWork)
        thenableState = null
        thenableIndexCounter = 0
        var returnFiber = unitOfWork.return
        try {
            if (
                throwException(
                    root2,
                    returnFiber,
                    unitOfWork,
                    thrownValue,
                    workInProgressRootRenderLanes
                )
            ) {
                workInProgressRootExitStatus = 1
                logUncaughtError(root2, createCapturedValueAtFiber(thrownValue, root2.current))
                workInProgress = null
                return
            }
        } catch (error) {
            if (null !== returnFiber) throw ((workInProgress = returnFiber), error)
            workInProgressRootExitStatus = 1
            logUncaughtError(root2, createCapturedValueAtFiber(thrownValue, root2.current))
            workInProgress = null
            return
        }
        if (unitOfWork.flags & 32768) {
            if (isHydrating || 1 === suspendedReason) root2 = true
            else if (
                workInProgressRootIsPrerendering ||
                0 !== (workInProgressRootRenderLanes & 536870912)
            )
                root2 = false
            else if (
                ((workInProgressRootDidSkipSuspendedSiblings = root2 = true),
                2 === suspendedReason ||
                    9 === suspendedReason ||
                    3 === suspendedReason ||
                    6 === suspendedReason)
            )
                (suspendedReason = suspenseHandlerStackCursor.current),
                    null !== suspendedReason &&
                        13 === suspendedReason.tag &&
                        (suspendedReason.flags |= 16384)
            unwindUnitOfWork(unitOfWork, root2)
        } else completeUnitOfWork(unitOfWork)
    }
    function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork
        do {
            if (0 !== (completedWork.flags & 32768)) {
                unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings)
                return
            }
            unitOfWork = completedWork.return
            var next2 = completeWork(completedWork.alternate, completedWork, entangledRenderLanes)
            if (null !== next2) {
                workInProgress = next2
                return
            }
            completedWork = completedWork.sibling
            if (null !== completedWork) {
                workInProgress = completedWork
                return
            }
            workInProgress = completedWork = unitOfWork
        } while (null !== completedWork)
        0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5)
    }
    function unwindUnitOfWork(unitOfWork, skipSiblings) {
        do {
            var next2 = unwindWork(unitOfWork.alternate, unitOfWork)
            if (null !== next2) {
                next2.flags &= 32767
                workInProgress = next2
                return
            }
            next2 = unitOfWork.return
            null !== next2 &&
                ((next2.flags |= 32768), (next2.subtreeFlags = 0), (next2.deletions = null))
            if (!skipSiblings && ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)) {
                workInProgress = unitOfWork
                return
            }
            workInProgress = unitOfWork = next2
        } while (null !== unitOfWork)
        workInProgressRootExitStatus = 6
        workInProgress = null
    }
    function commitRoot(
        root2,
        finishedWork,
        lanes,
        recoverableErrors,
        transitions,
        didIncludeRenderPhaseUpdate,
        spawnedLane,
        updatedLanes,
        suspendedRetryLanes
    ) {
        root2.cancelPendingCommit = null
        do flushPendingEffects()
        while (0 !== pendingEffectsStatus)
        if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327))
        if (null !== finishedWork) {
            if (finishedWork === root2.current) throw Error(formatProdErrorMessage(177))
            didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes
            didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes
            markRootFinished(
                root2,
                lanes,
                didIncludeRenderPhaseUpdate,
                spawnedLane,
                updatedLanes,
                suspendedRetryLanes
            )
            root2 === workInProgressRoot &&
                ((workInProgress = workInProgressRoot = null), (workInProgressRootRenderLanes = 0))
            pendingFinishedWork = finishedWork
            pendingEffectsRoot = root2
            pendingEffectsLanes = lanes
            pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate
            pendingPassiveTransitions = transitions
            pendingRecoverableErrors = recoverableErrors
            0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256)
                ? ((root2.callbackNode = null),
                  (root2.callbackPriority = 0),
                  scheduleCallback$1(NormalPriority$1, function () {
                      flushPassiveEffects()
                      return null
                  }))
                : ((root2.callbackNode = null), (root2.callbackPriority = 0))
            recoverableErrors = 0 !== (finishedWork.flags & 13878)
            if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
                recoverableErrors = ReactSharedInternals.T
                ReactSharedInternals.T = null
                transitions = ReactDOMSharedInternals.p
                ReactDOMSharedInternals.p = 2
                spawnedLane = executionContext
                executionContext |= 4
                try {
                    commitBeforeMutationEffects(root2, finishedWork, lanes)
                } finally {
                    ;(executionContext = spawnedLane),
                        (ReactDOMSharedInternals.p = transitions),
                        (ReactSharedInternals.T = recoverableErrors)
                }
            }
            pendingEffectsStatus = 1
            flushMutationEffects()
            flushLayoutEffects()
            flushSpawnedWork()
        }
    }
    function flushMutationEffects() {
        if (1 === pendingEffectsStatus) {
            pendingEffectsStatus = 0
            var root2 = pendingEffectsRoot,
                finishedWork = pendingFinishedWork,
                rootMutationHasEffect = 0 !== (finishedWork.flags & 13878)
            if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
                rootMutationHasEffect = ReactSharedInternals.T
                ReactSharedInternals.T = null
                var previousPriority = ReactDOMSharedInternals.p
                ReactDOMSharedInternals.p = 2
                var prevExecutionContext = executionContext
                executionContext |= 4
                try {
                    commitMutationEffectsOnFiber(finishedWork, root2)
                    var priorSelectionInformation = selectionInformation,
                        curFocusedElem = getActiveElementDeep(root2.containerInfo),
                        priorFocusedElem = priorSelectionInformation.focusedElem,
                        priorSelectionRange = priorSelectionInformation.selectionRange
                    if (
                        curFocusedElem !== priorFocusedElem &&
                        priorFocusedElem &&
                        priorFocusedElem.ownerDocument &&
                        containsNode(
                            priorFocusedElem.ownerDocument.documentElement,
                            priorFocusedElem
                        )
                    ) {
                        if (
                            null !== priorSelectionRange &&
                            hasSelectionCapabilities(priorFocusedElem)
                        ) {
                            var start = priorSelectionRange.start,
                                end = priorSelectionRange.end
                            void 0 === end && (end = start)
                            if ('selectionStart' in priorFocusedElem)
                                (priorFocusedElem.selectionStart = start),
                                    (priorFocusedElem.selectionEnd = Math.min(
                                        end,
                                        priorFocusedElem.value.length
                                    ))
                            else {
                                var doc = priorFocusedElem.ownerDocument || document,
                                    win = (doc && doc.defaultView) || window
                                if (win.getSelection) {
                                    var selection = win.getSelection(),
                                        length2 = priorFocusedElem.textContent.length,
                                        start$jscomp$0 = Math.min(
                                            priorSelectionRange.start,
                                            length2
                                        ),
                                        end$jscomp$0 =
                                            void 0 === priorSelectionRange.end
                                                ? start$jscomp$0
                                                : Math.min(priorSelectionRange.end, length2)
                                    !selection.extend &&
                                        start$jscomp$0 > end$jscomp$0 &&
                                        ((curFocusedElem = end$jscomp$0),
                                        (end$jscomp$0 = start$jscomp$0),
                                        (start$jscomp$0 = curFocusedElem))
                                    var startMarker = getNodeForCharacterOffset(
                                            priorFocusedElem,
                                            start$jscomp$0
                                        ),
                                        endMarker = getNodeForCharacterOffset(
                                            priorFocusedElem,
                                            end$jscomp$0
                                        )
                                    if (
                                        startMarker &&
                                        endMarker &&
                                        (1 !== selection.rangeCount ||
                                            selection.anchorNode !== startMarker.node ||
                                            selection.anchorOffset !== startMarker.offset ||
                                            selection.focusNode !== endMarker.node ||
                                            selection.focusOffset !== endMarker.offset)
                                    ) {
                                        var range3 = doc.createRange()
                                        range3.setStart(startMarker.node, startMarker.offset)
                                        selection.removeAllRanges()
                                        start$jscomp$0 > end$jscomp$0
                                            ? (selection.addRange(range3),
                                              selection.extend(endMarker.node, endMarker.offset))
                                            : (range3.setEnd(endMarker.node, endMarker.offset),
                                              selection.addRange(range3))
                                    }
                                }
                            }
                        }
                        doc = []
                        for (selection = priorFocusedElem; (selection = selection.parentNode); )
                            1 === selection.nodeType &&
                                doc.push({
                                    element: selection,
                                    left: selection.scrollLeft,
                                    top: selection.scrollTop
                                })
                        'function' === typeof priorFocusedElem.focus && priorFocusedElem.focus()
                        for (
                            priorFocusedElem = 0;
                            priorFocusedElem < doc.length;
                            priorFocusedElem++
                        ) {
                            var info = doc[priorFocusedElem]
                            info.element.scrollLeft = info.left
                            info.element.scrollTop = info.top
                        }
                    }
                    _enabled = !!eventsEnabled
                    selectionInformation = eventsEnabled = null
                } finally {
                    ;(executionContext = prevExecutionContext),
                        (ReactDOMSharedInternals.p = previousPriority),
                        (ReactSharedInternals.T = rootMutationHasEffect)
                }
            }
            root2.current = finishedWork
            pendingEffectsStatus = 2
        }
    }
    function flushLayoutEffects() {
        if (2 === pendingEffectsStatus) {
            pendingEffectsStatus = 0
            var root2 = pendingEffectsRoot,
                finishedWork = pendingFinishedWork,
                rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772)
            if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
                rootHasLayoutEffect = ReactSharedInternals.T
                ReactSharedInternals.T = null
                var previousPriority = ReactDOMSharedInternals.p
                ReactDOMSharedInternals.p = 2
                var prevExecutionContext = executionContext
                executionContext |= 4
                try {
                    commitLayoutEffectOnFiber(root2, finishedWork.alternate, finishedWork)
                } finally {
                    ;(executionContext = prevExecutionContext),
                        (ReactDOMSharedInternals.p = previousPriority),
                        (ReactSharedInternals.T = rootHasLayoutEffect)
                }
            }
            pendingEffectsStatus = 3
        }
    }
    function flushSpawnedWork() {
        if (4 === pendingEffectsStatus || 3 === pendingEffectsStatus) {
            pendingEffectsStatus = 0
            requestPaint()
            var root2 = pendingEffectsRoot,
                finishedWork = pendingFinishedWork,
                lanes = pendingEffectsLanes,
                recoverableErrors = pendingRecoverableErrors
            0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256)
                ? (pendingEffectsStatus = 5)
                : ((pendingEffectsStatus = 0),
                  (pendingFinishedWork = pendingEffectsRoot = null),
                  releaseRootPooledCache(root2, root2.pendingLanes))
            var remainingLanes = root2.pendingLanes
            0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null)
            lanesToEventPriority(lanes)
            finishedWork = finishedWork.stateNode
            if (injectedHook && 'function' === typeof injectedHook.onCommitFiberRoot)
                try {
                    injectedHook.onCommitFiberRoot(
                        rendererID,
                        finishedWork,
                        void 0,
                        128 === (finishedWork.current.flags & 128)
                    )
                } catch (err) {}
            if (null !== recoverableErrors) {
                finishedWork = ReactSharedInternals.T
                remainingLanes = ReactDOMSharedInternals.p
                ReactDOMSharedInternals.p = 2
                ReactSharedInternals.T = null
                try {
                    for (
                        var onRecoverableError = root2.onRecoverableError, i = 0;
                        i < recoverableErrors.length;
                        i++
                    ) {
                        var recoverableError = recoverableErrors[i]
                        onRecoverableError(recoverableError.value, {
                            componentStack: recoverableError.stack
                        })
                    }
                } finally {
                    ;(ReactSharedInternals.T = finishedWork),
                        (ReactDOMSharedInternals.p = remainingLanes)
                }
            }
            0 !== (pendingEffectsLanes & 3) && flushPendingEffects()
            ensureRootIsScheduled(root2)
            remainingLanes = root2.pendingLanes
            0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42)
                ? root2 === rootWithNestedUpdates
                    ? nestedUpdateCount++
                    : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root2))
                : (nestedUpdateCount = 0)
            flushSyncWorkAcrossRoots_impl(0)
        }
    }
    function releaseRootPooledCache(root2, remainingLanes) {
        0 === (root2.pooledCacheLanes &= remainingLanes) &&
            ((remainingLanes = root2.pooledCache),
            null != remainingLanes && ((root2.pooledCache = null), releaseCache(remainingLanes)))
    }
    function flushPendingEffects(wasDelayedCommit) {
        flushMutationEffects()
        flushLayoutEffects()
        flushSpawnedWork()
        return flushPassiveEffects()
    }
    function flushPassiveEffects() {
        if (5 !== pendingEffectsStatus) return false
        var root2 = pendingEffectsRoot,
            remainingLanes = pendingEffectsRemainingLanes
        pendingEffectsRemainingLanes = 0
        var renderPriority = lanesToEventPriority(pendingEffectsLanes),
            prevTransition = ReactSharedInternals.T,
            previousPriority = ReactDOMSharedInternals.p
        try {
            ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority
            ReactSharedInternals.T = null
            renderPriority = pendingPassiveTransitions
            pendingPassiveTransitions = null
            var root$jscomp$0 = pendingEffectsRoot,
                lanes = pendingEffectsLanes
            pendingEffectsStatus = 0
            pendingFinishedWork = pendingEffectsRoot = null
            pendingEffectsLanes = 0
            if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(331))
            var prevExecutionContext = executionContext
            executionContext |= 4
            commitPassiveUnmountOnFiber(root$jscomp$0.current)
            commitPassiveMountOnFiber(root$jscomp$0, root$jscomp$0.current, lanes, renderPriority)
            executionContext = prevExecutionContext
            flushSyncWorkAcrossRoots_impl(0, false)
            if (injectedHook && 'function' === typeof injectedHook.onPostCommitFiberRoot)
                try {
                    injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0)
                } catch (err) {}
            return true
        } finally {
            ;(ReactDOMSharedInternals.p = previousPriority),
                (ReactSharedInternals.T = prevTransition),
                releaseRootPooledCache(root2, remainingLanes)
        }
    }
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        sourceFiber = createCapturedValueAtFiber(error, sourceFiber)
        sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2)
        rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2)
        null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber))
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
        if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error)
        else
            for (; null !== nearestMountedAncestor; ) {
                if (3 === nearestMountedAncestor.tag) {
                    captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error)
                    break
                } else if (1 === nearestMountedAncestor.tag) {
                    var instance = nearestMountedAncestor.stateNode
                    if (
                        'function' ===
                            typeof nearestMountedAncestor.type.getDerivedStateFromError ||
                        ('function' === typeof instance.componentDidCatch &&
                            (null === legacyErrorBoundariesThatAlreadyFailed ||
                                !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
                    ) {
                        sourceFiber = createCapturedValueAtFiber(error, sourceFiber)
                        error = createClassErrorUpdate(2)
                        instance = enqueueUpdate(nearestMountedAncestor, error, 2)
                        null !== instance &&
                            (initializeClassErrorUpdate(
                                error,
                                instance,
                                nearestMountedAncestor,
                                sourceFiber
                            ),
                            markRootUpdated$1(instance, 2),
                            ensureRootIsScheduled(instance))
                        break
                    }
                }
                nearestMountedAncestor = nearestMountedAncestor.return
            }
    }
    function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache
        if (null === pingCache) {
            pingCache = root2.pingCache = new PossiblyWeakMap()
            var threadIDs = /* @__PURE__ */ new Set()
            pingCache.set(wakeable, threadIDs)
        } else
            (threadIDs = pingCache.get(wakeable)),
                void 0 === threadIDs &&
                    ((threadIDs = /* @__PURE__ */ new Set()), pingCache.set(wakeable, threadIDs))
        threadIDs.has(lanes) ||
            ((workInProgressRootDidAttachPingListener = true),
            threadIDs.add(lanes),
            (root2 = pingSuspendedRoot.bind(null, root2, wakeable, lanes)),
            wakeable.then(root2, root2))
    }
    function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache
        null !== pingCache && pingCache.delete(wakeable)
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes
        root2.warmLanes &= ~pingedLanes
        workInProgressRoot === root2 &&
            (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
            (4 === workInProgressRootExitStatus ||
            (3 === workInProgressRootExitStatus &&
                (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes &&
                300 > now() - globalMostRecentFallbackTime)
                ? 0 === (executionContext & 2) && prepareFreshStack(root2, 0)
                : (workInProgressRootPingedLanes |= pingedLanes),
            workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&
                (workInProgressSuspendedRetryLanes = 0))
        ensureRootIsScheduled(root2)
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        0 === retryLane && (retryLane = claimNextRetryLane())
        boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane)
        null !== boundaryFiber &&
            (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber))
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState,
            retryLane = 0
        null !== suspenseState && (retryLane = suspenseState.retryLane)
        retryTimedOutBoundary(boundaryFiber, retryLane)
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = 0
        switch (boundaryFiber.tag) {
            case 13:
                var retryCache = boundaryFiber.stateNode
                var suspenseState = boundaryFiber.memoizedState
                null !== suspenseState && (retryLane = suspenseState.retryLane)
                break
            case 19:
                retryCache = boundaryFiber.stateNode
                break
            case 22:
                retryCache = boundaryFiber.stateNode._retryCache
                break
            default:
                throw Error(formatProdErrorMessage(314))
        }
        null !== retryCache && retryCache.delete(wakeable)
        retryTimedOutBoundary(boundaryFiber, retryLane)
    }
    function scheduleCallback$1(priorityLevel, callback) {
        return scheduleCallback$3(priorityLevel, callback)
    }
    var firstScheduledRoot = null,
        lastScheduledRoot = null,
        didScheduleMicrotask = false,
        mightHavePendingSyncWork = false,
        isFlushingWork = false,
        currentEventTransitionLane = 0
    function ensureRootIsScheduled(root2) {
        root2 !== lastScheduledRoot &&
            null === root2.next &&
            (null === lastScheduledRoot
                ? (firstScheduledRoot = lastScheduledRoot = root2)
                : (lastScheduledRoot = lastScheduledRoot.next = root2))
        mightHavePendingSyncWork = true
        didScheduleMicrotask || ((didScheduleMicrotask = true), scheduleImmediateRootScheduleTask())
    }
    function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
        if (!isFlushingWork && mightHavePendingSyncWork) {
            isFlushingWork = true
            do {
                var didPerformSomeWork = false
                for (var root$174 = firstScheduledRoot; null !== root$174; ) {
                    if (0 !== syncTransitionLanes) {
                        var pendingLanes = root$174.pendingLanes
                        if (0 === pendingLanes) var JSCompiler_inline_result = 0
                        else {
                            var suspendedLanes = root$174.suspendedLanes,
                                pingedLanes = root$174.pingedLanes
                            JSCompiler_inline_result =
                                (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1
                            JSCompiler_inline_result &=
                                pendingLanes & ~(suspendedLanes & ~pingedLanes)
                            JSCompiler_inline_result =
                                JSCompiler_inline_result & 201326741
                                    ? (JSCompiler_inline_result & 201326741) | 1
                                    : JSCompiler_inline_result
                                      ? JSCompiler_inline_result | 2
                                      : 0
                        }
                        0 !== JSCompiler_inline_result &&
                            ((didPerformSomeWork = true),
                            performSyncWorkOnRoot(root$174, JSCompiler_inline_result))
                    } else
                        (JSCompiler_inline_result = workInProgressRootRenderLanes),
                            (JSCompiler_inline_result = getNextLanes(
                                root$174,
                                root$174 === workInProgressRoot ? JSCompiler_inline_result : 0,
                                null !== root$174.cancelPendingCommit ||
                                    -1 !== root$174.timeoutHandle
                            )),
                            0 === (JSCompiler_inline_result & 3) ||
                                checkIfRootIsPrerendering(root$174, JSCompiler_inline_result) ||
                                ((didPerformSomeWork = true),
                                performSyncWorkOnRoot(root$174, JSCompiler_inline_result))
                    root$174 = root$174.next
                }
            } while (didPerformSomeWork)
            isFlushingWork = false
        }
    }
    function processRootScheduleInImmediateTask() {
        processRootScheduleInMicrotask()
    }
    function processRootScheduleInMicrotask() {
        mightHavePendingSyncWork = didScheduleMicrotask = false
        var syncTransitionLanes = 0
        0 !== currentEventTransitionLane &&
            (shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane),
            (currentEventTransitionLane = 0))
        for (var currentTime = now(), prev2 = null, root2 = firstScheduledRoot; null !== root2; ) {
            var next2 = root2.next,
                nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime)
            if (0 === nextLanes)
                (root2.next = null),
                    null === prev2 ? (firstScheduledRoot = next2) : (prev2.next = next2),
                    null === next2 && (lastScheduledRoot = prev2)
            else if (((prev2 = root2), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3)))
                mightHavePendingSyncWork = true
            root2 = next2
        }
        flushSyncWorkAcrossRoots_impl(syncTransitionLanes)
    }
    function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
        for (
            var suspendedLanes = root2.suspendedLanes,
                pingedLanes = root2.pingedLanes,
                expirationTimes = root2.expirationTimes,
                lanes = root2.pendingLanes & -62914561;
            0 < lanes;

        ) {
            var index$3 = 31 - clz32(lanes),
                lane = 1 << index$3,
                expirationTime = expirationTimes[index$3]
            if (-1 === expirationTime) {
                if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
                    expirationTimes[index$3] = computeExpirationTime(lane, currentTime)
            } else expirationTime <= currentTime && (root2.expiredLanes |= lane)
            lanes &= ~lane
        }
        currentTime = workInProgressRoot
        suspendedLanes = workInProgressRootRenderLanes
        suspendedLanes = getNextLanes(
            root2,
            root2 === currentTime ? suspendedLanes : 0,
            null !== root2.cancelPendingCommit || -1 !== root2.timeoutHandle
        )
        pingedLanes = root2.callbackNode
        if (
            0 === suspendedLanes ||
            (root2 === currentTime &&
                (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason)) ||
            null !== root2.cancelPendingCommit
        )
            return (
                null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes),
                (root2.callbackNode = null),
                (root2.callbackPriority = 0)
            )
        if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root2, suspendedLanes)) {
            currentTime = suspendedLanes & -suspendedLanes
            if (currentTime === root2.callbackPriority) return currentTime
            null !== pingedLanes && cancelCallback$1(pingedLanes)
            switch (lanesToEventPriority(suspendedLanes)) {
                case 2:
                case 8:
                    suspendedLanes = UserBlockingPriority
                    break
                case 32:
                    suspendedLanes = NormalPriority$1
                    break
                case 268435456:
                    suspendedLanes = IdlePriority
                    break
                default:
                    suspendedLanes = NormalPriority$1
            }
            pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root2)
            suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes)
            root2.callbackPriority = currentTime
            root2.callbackNode = suspendedLanes
            return currentTime
        }
        null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes)
        root2.callbackPriority = 2
        root2.callbackNode = null
        return 2
    }
    function performWorkOnRootViaSchedulerTask(root2, didTimeout) {
        if (0 !== pendingEffectsStatus && 5 !== pendingEffectsStatus)
            return (root2.callbackNode = null), (root2.callbackPriority = 0), null
        var originalCallbackNode = root2.callbackNode
        if (flushPendingEffects() && root2.callbackNode !== originalCallbackNode) return null
        var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes
        workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
            root2,
            root2 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
            null !== root2.cancelPendingCommit || -1 !== root2.timeoutHandle
        )
        if (0 === workInProgressRootRenderLanes$jscomp$0) return null
        performWorkOnRoot(root2, workInProgressRootRenderLanes$jscomp$0, didTimeout)
        scheduleTaskForRootDuringMicrotask(root2, now())
        return null != root2.callbackNode && root2.callbackNode === originalCallbackNode
            ? performWorkOnRootViaSchedulerTask.bind(null, root2)
            : null
    }
    function performSyncWorkOnRoot(root2, lanes) {
        if (flushPendingEffects()) return null
        performWorkOnRoot(root2, lanes, true)
    }
    function scheduleImmediateRootScheduleTask() {
        scheduleMicrotask(function () {
            0 !== (executionContext & 6)
                ? scheduleCallback$3(ImmediatePriority, processRootScheduleInImmediateTask)
                : processRootScheduleInMicrotask()
        })
    }
    function requestTransitionLane() {
        0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane())
        return currentEventTransitionLane
    }
    function coerceFormActionProp(actionProp) {
        return null == actionProp ||
            'symbol' === typeof actionProp ||
            'boolean' === typeof actionProp
            ? null
            : 'function' === typeof actionProp
              ? actionProp
              : sanitizeURL('' + actionProp)
    }
    function createFormDataWithSubmitter(form, submitter) {
        var temp = submitter.ownerDocument.createElement('input')
        temp.name = submitter.name
        temp.value = submitter.value
        form.id && temp.setAttribute('form', form.id)
        submitter.parentNode.insertBefore(temp, submitter)
        form = new FormData(form)
        temp.parentNode.removeChild(temp)
        return form
    }
    function extractEvents$1(
        dispatchQueue,
        domEventName,
        maybeTargetInst,
        nativeEvent,
        nativeEventTarget
    ) {
        if (
            'submit' === domEventName &&
            maybeTargetInst &&
            maybeTargetInst.stateNode === nativeEventTarget
        ) {
            var action = coerceFormActionProp((nativeEventTarget[internalPropsKey] || null).action),
                submitter = nativeEvent.submitter
            submitter &&
                ((domEventName = (domEventName = submitter[internalPropsKey] || null)
                    ? coerceFormActionProp(domEventName.formAction)
                    : submitter.getAttribute('formAction')),
                null !== domEventName && ((action = domEventName), (submitter = null)))
            var event = new SyntheticEvent('action', 'action', null, nativeEvent, nativeEventTarget)
            dispatchQueue.push({
                event,
                listeners: [
                    {
                        instance: null,
                        listener: function () {
                            if (nativeEvent.defaultPrevented) {
                                if (0 !== currentEventTransitionLane) {
                                    var formData = submitter
                                        ? createFormDataWithSubmitter(nativeEventTarget, submitter)
                                        : new FormData(nativeEventTarget)
                                    startHostTransition(
                                        maybeTargetInst,
                                        {
                                            pending: true,
                                            data: formData,
                                            method: nativeEventTarget.method,
                                            action
                                        },
                                        null,
                                        formData
                                    )
                                }
                            } else
                                'function' === typeof action &&
                                    (event.preventDefault(),
                                    (formData = submitter
                                        ? createFormDataWithSubmitter(nativeEventTarget, submitter)
                                        : new FormData(nativeEventTarget)),
                                    startHostTransition(
                                        maybeTargetInst,
                                        {
                                            pending: true,
                                            data: formData,
                                            method: nativeEventTarget.method,
                                            action
                                        },
                                        action,
                                        formData
                                    ))
                        },
                        currentTarget: nativeEventTarget
                    }
                ]
            })
        }
    }
    for (
        var i$jscomp$inline_1528 = 0;
        i$jscomp$inline_1528 < simpleEventPluginEvents.length;
        i$jscomp$inline_1528++
    ) {
        var eventName$jscomp$inline_1529 = simpleEventPluginEvents[i$jscomp$inline_1528],
            domEventName$jscomp$inline_1530 = eventName$jscomp$inline_1529.toLowerCase(),
            capitalizedEvent$jscomp$inline_1531 =
                eventName$jscomp$inline_1529[0].toUpperCase() +
                eventName$jscomp$inline_1529.slice(1)
        registerSimpleEvent(
            domEventName$jscomp$inline_1530,
            'on' + capitalizedEvent$jscomp$inline_1531
        )
    }
    registerSimpleEvent(ANIMATION_END, 'onAnimationEnd')
    registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration')
    registerSimpleEvent(ANIMATION_START, 'onAnimationStart')
    registerSimpleEvent('dblclick', 'onDoubleClick')
    registerSimpleEvent('focusin', 'onFocus')
    registerSimpleEvent('focusout', 'onBlur')
    registerSimpleEvent(TRANSITION_RUN, 'onTransitionRun')
    registerSimpleEvent(TRANSITION_START, 'onTransitionStart')
    registerSimpleEvent(TRANSITION_CANCEL, 'onTransitionCancel')
    registerSimpleEvent(TRANSITION_END, 'onTransitionEnd')
    registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover'])
    registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover'])
    registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover'])
    registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover'])
    registerTwoPhaseEvent(
        'onChange',
        'change click focusin focusout input keydown keyup selectionchange'.split(' ')
    )
    registerTwoPhaseEvent(
        'onSelect',
        'focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange'.split(
            ' '
        )
    )
    registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste'])
    registerTwoPhaseEvent(
        'onCompositionEnd',
        'compositionend focusout keydown keypress keyup mousedown'.split(' ')
    )
    registerTwoPhaseEvent(
        'onCompositionStart',
        'compositionstart focusout keydown keypress keyup mousedown'.split(' ')
    )
    registerTwoPhaseEvent(
        'onCompositionUpdate',
        'compositionupdate focusout keydown keypress keyup mousedown'.split(' ')
    )
    var mediaEventTypes =
            'abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting'.split(
                ' '
            ),
        nonDelegatedEvents = new Set(
            'beforetoggle cancel close invalid load scroll scrollend toggle'
                .split(' ')
                .concat(mediaEventTypes)
        )
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        eventSystemFlags = 0 !== (eventSystemFlags & 4)
        for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i],
                event = _dispatchQueue$i.event
            _dispatchQueue$i = _dispatchQueue$i.listeners
            a: {
                var previousInstance = void 0
                if (eventSystemFlags)
                    for (
                        var i$jscomp$0 = _dispatchQueue$i.length - 1;
                        0 <= i$jscomp$0;
                        i$jscomp$0--
                    ) {
                        var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0],
                            instance = _dispatchListeners$i.instance,
                            currentTarget = _dispatchListeners$i.currentTarget
                        _dispatchListeners$i = _dispatchListeners$i.listener
                        if (instance !== previousInstance && event.isPropagationStopped()) break a
                        previousInstance = _dispatchListeners$i
                        event.currentTarget = currentTarget
                        try {
                            previousInstance(event)
                        } catch (error) {
                            reportGlobalError(error)
                        }
                        event.currentTarget = null
                        previousInstance = instance
                    }
                else
                    for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
                        _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0]
                        instance = _dispatchListeners$i.instance
                        currentTarget = _dispatchListeners$i.currentTarget
                        _dispatchListeners$i = _dispatchListeners$i.listener
                        if (instance !== previousInstance && event.isPropagationStopped()) break a
                        previousInstance = _dispatchListeners$i
                        event.currentTarget = currentTarget
                        try {
                            previousInstance(event)
                        } catch (error) {
                            reportGlobalError(error)
                        }
                        event.currentTarget = null
                        previousInstance = instance
                    }
            }
        }
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var JSCompiler_inline_result = targetElement[internalEventHandlersKey]
        void 0 === JSCompiler_inline_result &&
            (JSCompiler_inline_result = targetElement[internalEventHandlersKey] =
                /* @__PURE__ */ new Set())
        var listenerSetKey = domEventName + '__bubble'
        JSCompiler_inline_result.has(listenerSetKey) ||
            (addTrappedEventListener(targetElement, domEventName, 2, false),
            JSCompiler_inline_result.add(listenerSetKey))
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        var eventSystemFlags = 0
        isCapturePhaseListener && (eventSystemFlags |= 4)
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener)
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2)
    function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true
            allNativeEvents.forEach(function (domEventName) {
                'selectionchange' !== domEventName &&
                    (nonDelegatedEvents.has(domEventName) ||
                        listenToNativeEvent(domEventName, false, rootContainerElement),
                    listenToNativeEvent(domEventName, true, rootContainerElement))
            })
            var ownerDocument =
                9 === rootContainerElement.nodeType
                    ? rootContainerElement
                    : rootContainerElement.ownerDocument
            null === ownerDocument ||
                ownerDocument[listeningMarker] ||
                ((ownerDocument[listeningMarker] = true),
                listenToNativeEvent('selectionchange', false, ownerDocument))
        }
    }
    function addTrappedEventListener(
        targetContainer,
        domEventName,
        eventSystemFlags,
        isCapturePhaseListener
    ) {
        switch (getEventPriority(domEventName)) {
            case 2:
                var listenerWrapper = dispatchDiscreteEvent
                break
            case 8:
                listenerWrapper = dispatchContinuousEvent
                break
            default:
                listenerWrapper = dispatchEvent
        }
        eventSystemFlags = listenerWrapper.bind(
            null,
            domEventName,
            eventSystemFlags,
            targetContainer
        )
        listenerWrapper = void 0
        !passiveBrowserEventsSupported ||
            ('touchstart' !== domEventName &&
                'touchmove' !== domEventName &&
                'wheel' !== domEventName) ||
            (listenerWrapper = true)
        isCapturePhaseListener
            ? void 0 !== listenerWrapper
                ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
                      capture: true,
                      passive: listenerWrapper
                  })
                : targetContainer.addEventListener(domEventName, eventSystemFlags, true)
            : void 0 !== listenerWrapper
              ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
                    passive: listenerWrapper
                })
              : targetContainer.addEventListener(domEventName, eventSystemFlags, false)
    }
    function dispatchEventForPluginEventSystem(
        domEventName,
        eventSystemFlags,
        nativeEvent,
        targetInst$jscomp$0,
        targetContainer
    ) {
        var ancestorInst = targetInst$jscomp$0
        if (
            0 === (eventSystemFlags & 1) &&
            0 === (eventSystemFlags & 2) &&
            null !== targetInst$jscomp$0
        )
            a: for (;;) {
                if (null === targetInst$jscomp$0) return
                var nodeTag = targetInst$jscomp$0.tag
                if (3 === nodeTag || 4 === nodeTag) {
                    var container = targetInst$jscomp$0.stateNode.containerInfo
                    if (container === targetContainer) break
                    if (4 === nodeTag)
                        for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                            var grandTag = nodeTag.tag
                            if (
                                (3 === grandTag || 4 === grandTag) &&
                                nodeTag.stateNode.containerInfo === targetContainer
                            )
                                return
                            nodeTag = nodeTag.return
                        }
                    for (; null !== container; ) {
                        nodeTag = getClosestInstanceFromNode(container)
                        if (null === nodeTag) return
                        grandTag = nodeTag.tag
                        if (
                            5 === grandTag ||
                            6 === grandTag ||
                            26 === grandTag ||
                            27 === grandTag
                        ) {
                            targetInst$jscomp$0 = ancestorInst = nodeTag
                            continue a
                        }
                        container = container.parentNode
                    }
                }
                targetInst$jscomp$0 = targetInst$jscomp$0.return
            }
        batchedUpdates$1(function () {
            var targetInst = ancestorInst,
                nativeEventTarget = getEventTarget(nativeEvent),
                dispatchQueue = []
            a: {
                var reactName = topLevelEventsToReactNames.get(domEventName)
                if (void 0 !== reactName) {
                    var SyntheticEventCtor = SyntheticEvent,
                        reactEventType = domEventName
                    switch (domEventName) {
                        case 'keypress':
                            if (0 === getEventCharCode(nativeEvent)) break a
                        case 'keydown':
                        case 'keyup':
                            SyntheticEventCtor = SyntheticKeyboardEvent
                            break
                        case 'focusin':
                            reactEventType = 'focus'
                            SyntheticEventCtor = SyntheticFocusEvent
                            break
                        case 'focusout':
                            reactEventType = 'blur'
                            SyntheticEventCtor = SyntheticFocusEvent
                            break
                        case 'beforeblur':
                        case 'afterblur':
                            SyntheticEventCtor = SyntheticFocusEvent
                            break
                        case 'click':
                            if (2 === nativeEvent.button) break a
                        case 'auxclick':
                        case 'dblclick':
                        case 'mousedown':
                        case 'mousemove':
                        case 'mouseup':
                        case 'mouseout':
                        case 'mouseover':
                        case 'contextmenu':
                            SyntheticEventCtor = SyntheticMouseEvent
                            break
                        case 'drag':
                        case 'dragend':
                        case 'dragenter':
                        case 'dragexit':
                        case 'dragleave':
                        case 'dragover':
                        case 'dragstart':
                        case 'drop':
                            SyntheticEventCtor = SyntheticDragEvent
                            break
                        case 'touchcancel':
                        case 'touchend':
                        case 'touchmove':
                        case 'touchstart':
                            SyntheticEventCtor = SyntheticTouchEvent
                            break
                        case ANIMATION_END:
                        case ANIMATION_ITERATION:
                        case ANIMATION_START:
                            SyntheticEventCtor = SyntheticAnimationEvent
                            break
                        case TRANSITION_END:
                            SyntheticEventCtor = SyntheticTransitionEvent
                            break
                        case 'scroll':
                        case 'scrollend':
                            SyntheticEventCtor = SyntheticUIEvent
                            break
                        case 'wheel':
                            SyntheticEventCtor = SyntheticWheelEvent
                            break
                        case 'copy':
                        case 'cut':
                        case 'paste':
                            SyntheticEventCtor = SyntheticClipboardEvent
                            break
                        case 'gotpointercapture':
                        case 'lostpointercapture':
                        case 'pointercancel':
                        case 'pointerdown':
                        case 'pointermove':
                        case 'pointerout':
                        case 'pointerover':
                        case 'pointerup':
                            SyntheticEventCtor = SyntheticPointerEvent
                            break
                        case 'toggle':
                        case 'beforetoggle':
                            SyntheticEventCtor = SyntheticToggleEvent
                    }
                    var inCapturePhase = 0 !== (eventSystemFlags & 4),
                        accumulateTargetOnly =
                            !inCapturePhase &&
                            ('scroll' === domEventName || 'scrollend' === domEventName),
                        reactEventName = inCapturePhase
                            ? null !== reactName
                                ? reactName + 'Capture'
                                : null
                            : reactName
                    inCapturePhase = []
                    for (var instance = targetInst, lastHostComponent; null !== instance; ) {
                        var _instance = instance
                        lastHostComponent = _instance.stateNode
                        _instance = _instance.tag
                        ;(5 !== _instance && 26 !== _instance && 27 !== _instance) ||
                            null === lastHostComponent ||
                            null === reactEventName ||
                            ((_instance = getListener(instance, reactEventName)),
                            null != _instance &&
                                inCapturePhase.push(
                                    createDispatchListener(instance, _instance, lastHostComponent)
                                ))
                        if (accumulateTargetOnly) break
                        instance = instance.return
                    }
                    0 < inCapturePhase.length &&
                        ((reactName = new SyntheticEventCtor(
                            reactName,
                            reactEventType,
                            null,
                            nativeEvent,
                            nativeEventTarget
                        )),
                        dispatchQueue.push({ event: reactName, listeners: inCapturePhase }))
                }
            }
            if (0 === (eventSystemFlags & 7)) {
                a: {
                    reactName = 'mouseover' === domEventName || 'pointerover' === domEventName
                    SyntheticEventCtor =
                        'mouseout' === domEventName || 'pointerout' === domEventName
                    if (
                        reactName &&
                        nativeEvent !== currentReplayingEvent &&
                        (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) &&
                        (getClosestInstanceFromNode(reactEventType) ||
                            reactEventType[internalContainerInstanceKey])
                    )
                        break a
                    if (SyntheticEventCtor || reactName) {
                        reactName =
                            nativeEventTarget.window === nativeEventTarget
                                ? nativeEventTarget
                                : (reactName = nativeEventTarget.ownerDocument)
                                  ? reactName.defaultView || reactName.parentWindow
                                  : window
                        if (SyntheticEventCtor) {
                            if (
                                ((reactEventType =
                                    nativeEvent.relatedTarget || nativeEvent.toElement),
                                (SyntheticEventCtor = targetInst),
                                (reactEventType = reactEventType
                                    ? getClosestInstanceFromNode(reactEventType)
                                    : null),
                                null !== reactEventType &&
                                    ((accumulateTargetOnly =
                                        getNearestMountedFiber(reactEventType)),
                                    (inCapturePhase = reactEventType.tag),
                                    reactEventType !== accumulateTargetOnly ||
                                        (5 !== inCapturePhase &&
                                            27 !== inCapturePhase &&
                                            6 !== inCapturePhase)))
                            )
                                reactEventType = null
                        } else (SyntheticEventCtor = null), (reactEventType = targetInst)
                        if (SyntheticEventCtor !== reactEventType) {
                            inCapturePhase = SyntheticMouseEvent
                            _instance = 'onMouseLeave'
                            reactEventName = 'onMouseEnter'
                            instance = 'mouse'
                            if ('pointerout' === domEventName || 'pointerover' === domEventName)
                                (inCapturePhase = SyntheticPointerEvent),
                                    (_instance = 'onPointerLeave'),
                                    (reactEventName = 'onPointerEnter'),
                                    (instance = 'pointer')
                            accumulateTargetOnly =
                                null == SyntheticEventCtor
                                    ? reactName
                                    : getNodeFromInstance(SyntheticEventCtor)
                            lastHostComponent =
                                null == reactEventType
                                    ? reactName
                                    : getNodeFromInstance(reactEventType)
                            reactName = new inCapturePhase(
                                _instance,
                                instance + 'leave',
                                SyntheticEventCtor,
                                nativeEvent,
                                nativeEventTarget
                            )
                            reactName.target = accumulateTargetOnly
                            reactName.relatedTarget = lastHostComponent
                            _instance = null
                            getClosestInstanceFromNode(nativeEventTarget) === targetInst &&
                                ((inCapturePhase = new inCapturePhase(
                                    reactEventName,
                                    instance + 'enter',
                                    reactEventType,
                                    nativeEvent,
                                    nativeEventTarget
                                )),
                                (inCapturePhase.target = lastHostComponent),
                                (inCapturePhase.relatedTarget = accumulateTargetOnly),
                                (_instance = inCapturePhase))
                            accumulateTargetOnly = _instance
                            if (SyntheticEventCtor && reactEventType)
                                b: {
                                    inCapturePhase = SyntheticEventCtor
                                    reactEventName = reactEventType
                                    instance = 0
                                    for (
                                        lastHostComponent = inCapturePhase;
                                        lastHostComponent;
                                        lastHostComponent = getParent(lastHostComponent)
                                    )
                                        instance++
                                    lastHostComponent = 0
                                    for (
                                        _instance = reactEventName;
                                        _instance;
                                        _instance = getParent(_instance)
                                    )
                                        lastHostComponent++
                                    for (; 0 < instance - lastHostComponent; )
                                        (inCapturePhase = getParent(inCapturePhase)), instance--
                                    for (; 0 < lastHostComponent - instance; )
                                        (reactEventName = getParent(reactEventName)),
                                            lastHostComponent--
                                    for (; instance--; ) {
                                        if (
                                            inCapturePhase === reactEventName ||
                                            (null !== reactEventName &&
                                                inCapturePhase === reactEventName.alternate)
                                        )
                                            break b
                                        inCapturePhase = getParent(inCapturePhase)
                                        reactEventName = getParent(reactEventName)
                                    }
                                    inCapturePhase = null
                                }
                            else inCapturePhase = null
                            null !== SyntheticEventCtor &&
                                accumulateEnterLeaveListenersForEvent(
                                    dispatchQueue,
                                    reactName,
                                    SyntheticEventCtor,
                                    inCapturePhase,
                                    false
                                )
                            null !== reactEventType &&
                                null !== accumulateTargetOnly &&
                                accumulateEnterLeaveListenersForEvent(
                                    dispatchQueue,
                                    accumulateTargetOnly,
                                    reactEventType,
                                    inCapturePhase,
                                    true
                                )
                        }
                    }
                }
                a: {
                    reactName = targetInst ? getNodeFromInstance(targetInst) : window
                    SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase()
                    if (
                        'select' === SyntheticEventCtor ||
                        ('input' === SyntheticEventCtor && 'file' === reactName.type)
                    )
                        var getTargetInstFunc = getTargetInstForChangeEvent
                    else if (isTextInputElement(reactName))
                        if (isInputEventSupported)
                            getTargetInstFunc = getTargetInstForInputOrChangeEvent
                        else {
                            getTargetInstFunc = getTargetInstForInputEventPolyfill
                            var handleEventFunc = handleEventsForInputEventPolyfill
                        }
                    else
                        (SyntheticEventCtor = reactName.nodeName),
                            !SyntheticEventCtor ||
                            'input' !== SyntheticEventCtor.toLowerCase() ||
                            ('checkbox' !== reactName.type && 'radio' !== reactName.type)
                                ? targetInst &&
                                  isCustomElement(targetInst.elementType) &&
                                  (getTargetInstFunc = getTargetInstForChangeEvent)
                                : (getTargetInstFunc = getTargetInstForClickEvent)
                    if (
                        getTargetInstFunc &&
                        (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))
                    ) {
                        createAndAccumulateChangeEvent(
                            dispatchQueue,
                            getTargetInstFunc,
                            nativeEvent,
                            nativeEventTarget
                        )
                        break a
                    }
                    handleEventFunc && handleEventFunc(domEventName, reactName, targetInst)
                    'focusout' === domEventName &&
                        targetInst &&
                        'number' === reactName.type &&
                        null != targetInst.memoizedProps.value &&
                        setDefaultValue(reactName, 'number', reactName.value)
                }
                handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window
                switch (domEventName) {
                    case 'focusin':
                        if (
                            isTextInputElement(handleEventFunc) ||
                            'true' === handleEventFunc.contentEditable
                        )
                            (activeElement = handleEventFunc),
                                (activeElementInst = targetInst),
                                (lastSelection = null)
                        break
                    case 'focusout':
                        lastSelection = activeElementInst = activeElement = null
                        break
                    case 'mousedown':
                        mouseDown = true
                        break
                    case 'contextmenu':
                    case 'mouseup':
                    case 'dragend':
                        mouseDown = false
                        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget)
                        break
                    case 'selectionchange':
                        if (skipSelectionChangeEvent) break
                    case 'keydown':
                    case 'keyup':
                        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget)
                }
                var fallbackData
                if (canUseCompositionEvent)
                    b: {
                        switch (domEventName) {
                            case 'compositionstart':
                                var eventType = 'onCompositionStart'
                                break b
                            case 'compositionend':
                                eventType = 'onCompositionEnd'
                                break b
                            case 'compositionupdate':
                                eventType = 'onCompositionUpdate'
                                break b
                        }
                        eventType = void 0
                    }
                else
                    isComposing
                        ? isFallbackCompositionEnd(domEventName, nativeEvent) &&
                          (eventType = 'onCompositionEnd')
                        : 'keydown' === domEventName &&
                          229 === nativeEvent.keyCode &&
                          (eventType = 'onCompositionStart')
                eventType &&
                    (useFallbackCompositionData &&
                        'ko' !== nativeEvent.locale &&
                        (isComposing || 'onCompositionStart' !== eventType
                            ? 'onCompositionEnd' === eventType &&
                              isComposing &&
                              (fallbackData = getData())
                            : ((root = nativeEventTarget),
                              (startText = 'value' in root ? root.value : root.textContent),
                              (isComposing = true))),
                    (handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType)),
                    0 < handleEventFunc.length &&
                        ((eventType = new SyntheticCompositionEvent(
                            eventType,
                            domEventName,
                            null,
                            nativeEvent,
                            nativeEventTarget
                        )),
                        dispatchQueue.push({ event: eventType, listeners: handleEventFunc }),
                        fallbackData
                            ? (eventType.data = fallbackData)
                            : ((fallbackData = getDataFromCustomEvent(nativeEvent)),
                              null !== fallbackData && (eventType.data = fallbackData))))
                if (
                    (fallbackData = canUseTextInputEvent
                        ? getNativeBeforeInputChars(domEventName, nativeEvent)
                        : getFallbackBeforeInputChars(domEventName, nativeEvent))
                )
                    (eventType = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput')),
                        0 < eventType.length &&
                            ((handleEventFunc = new SyntheticCompositionEvent(
                                'onBeforeInput',
                                'beforeinput',
                                null,
                                nativeEvent,
                                nativeEventTarget
                            )),
                            dispatchQueue.push({
                                event: handleEventFunc,
                                listeners: eventType
                            }),
                            (handleEventFunc.data = fallbackData))
                extractEvents$1(
                    dispatchQueue,
                    domEventName,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                )
            }
            processDispatchQueue(dispatchQueue, eventSystemFlags)
        })
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance,
            listener,
            currentTarget
        }
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for (var captureName = reactName + 'Capture', listeners = []; null !== targetFiber; ) {
            var _instance2 = targetFiber,
                stateNode = _instance2.stateNode
            _instance2 = _instance2.tag
            ;(5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2) ||
                null === stateNode ||
                ((_instance2 = getListener(targetFiber, captureName)),
                null != _instance2 &&
                    listeners.unshift(createDispatchListener(targetFiber, _instance2, stateNode)),
                (_instance2 = getListener(targetFiber, reactName)),
                null != _instance2 &&
                    listeners.push(createDispatchListener(targetFiber, _instance2, stateNode)))
            if (3 === targetFiber.tag) return listeners
            targetFiber = targetFiber.return
        }
        return []
    }
    function getParent(inst) {
        if (null === inst) return null
        do inst = inst.return
        while (inst && 5 !== inst.tag && 27 !== inst.tag)
        return inst ? inst : null
    }
    function accumulateEnterLeaveListenersForEvent(
        dispatchQueue,
        event,
        target,
        common,
        inCapturePhase
    ) {
        for (
            var registrationName = event._reactName, listeners = [];
            null !== target && target !== common;

        ) {
            var _instance3 = target,
                alternate = _instance3.alternate,
                stateNode = _instance3.stateNode
            _instance3 = _instance3.tag
            if (null !== alternate && alternate === common) break
            ;(5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3) ||
                null === stateNode ||
                ((alternate = stateNode),
                inCapturePhase
                    ? ((stateNode = getListener(target, registrationName)),
                      null != stateNode &&
                          listeners.unshift(createDispatchListener(target, stateNode, alternate)))
                    : inCapturePhase ||
                      ((stateNode = getListener(target, registrationName)),
                      null != stateNode &&
                          listeners.push(createDispatchListener(target, stateNode, alternate))))
            target = target.return
        }
        0 !== listeners.length && dispatchQueue.push({ event, listeners })
    }
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g,
        NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g
    function normalizeMarkupForTextOrAttribute(markup) {
        return ('string' === typeof markup ? markup : '' + markup)
            .replace(NORMALIZE_NEWLINES_REGEX, '\n')
            .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '')
    }
    function checkForUnmatchedText(serverText, clientText) {
        clientText = normalizeMarkupForTextOrAttribute(clientText)
        return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false
    }
    function noop$12() {}
    function setProp(domElement, tag, key, value, props, prevValue) {
        switch (key) {
            case 'children':
                'string' === typeof value
                    ? 'body' === tag ||
                      ('textarea' === tag && '' === value) ||
                      setTextContent(domElement, value)
                    : ('number' === typeof value || 'bigint' === typeof value) &&
                      'body' !== tag &&
                      setTextContent(domElement, '' + value)
                break
            case 'className':
                setValueForKnownAttribute(domElement, 'class', value)
                break
            case 'tabIndex':
                setValueForKnownAttribute(domElement, 'tabindex', value)
                break
            case 'dir':
            case 'role':
            case 'viewBox':
            case 'width':
            case 'height':
                setValueForKnownAttribute(domElement, key, value)
                break
            case 'style':
                setValueForStyles(domElement, value, prevValue)
                break
            case 'data':
                if ('object' !== tag) {
                    setValueForKnownAttribute(domElement, 'data', value)
                    break
                }
            case 'src':
            case 'href':
                if ('' === value && ('a' !== tag || 'href' !== key)) {
                    domElement.removeAttribute(key)
                    break
                }
                if (
                    null == value ||
                    'function' === typeof value ||
                    'symbol' === typeof value ||
                    'boolean' === typeof value
                ) {
                    domElement.removeAttribute(key)
                    break
                }
                value = sanitizeURL('' + value)
                domElement.setAttribute(key, value)
                break
            case 'action':
            case 'formAction':
                if ('function' === typeof value) {
                    domElement.setAttribute(
                        key,
                        "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
                    )
                    break
                } else
                    'function' === typeof prevValue &&
                        ('formAction' === key
                            ? ('input' !== tag &&
                                  setProp(domElement, tag, 'name', props.name, props, null),
                              setProp(
                                  domElement,
                                  tag,
                                  'formEncType',
                                  props.formEncType,
                                  props,
                                  null
                              ),
                              setProp(domElement, tag, 'formMethod', props.formMethod, props, null),
                              setProp(domElement, tag, 'formTarget', props.formTarget, props, null))
                            : (setProp(domElement, tag, 'encType', props.encType, props, null),
                              setProp(domElement, tag, 'method', props.method, props, null),
                              setProp(domElement, tag, 'target', props.target, props, null)))
                if (null == value || 'symbol' === typeof value || 'boolean' === typeof value) {
                    domElement.removeAttribute(key)
                    break
                }
                value = sanitizeURL('' + value)
                domElement.setAttribute(key, value)
                break
            case 'onClick':
                null != value && (domElement.onclick = noop$12)
                break
            case 'onScroll':
                null != value && listenToNonDelegatedEvent('scroll', domElement)
                break
            case 'onScrollEnd':
                null != value && listenToNonDelegatedEvent('scrollend', domElement)
                break
            case 'dangerouslySetInnerHTML':
                if (null != value) {
                    if ('object' !== typeof value || !('__html' in value))
                        throw Error(formatProdErrorMessage(61))
                    key = value.__html
                    if (null != key) {
                        if (null != props.children) throw Error(formatProdErrorMessage(60))
                        domElement.innerHTML = key
                    }
                }
                break
            case 'multiple':
                domElement.multiple =
                    value && 'function' !== typeof value && 'symbol' !== typeof value
                break
            case 'muted':
                domElement.muted = value && 'function' !== typeof value && 'symbol' !== typeof value
                break
            case 'suppressContentEditableWarning':
            case 'suppressHydrationWarning':
            case 'defaultValue':
            case 'defaultChecked':
            case 'innerHTML':
            case 'ref':
                break
            case 'autoFocus':
                break
            case 'xlinkHref':
                if (
                    null == value ||
                    'function' === typeof value ||
                    'boolean' === typeof value ||
                    'symbol' === typeof value
                ) {
                    domElement.removeAttribute('xlink:href')
                    break
                }
                key = sanitizeURL('' + value)
                domElement.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', key)
                break
            case 'contentEditable':
            case 'spellCheck':
            case 'draggable':
            case 'value':
            case 'autoReverse':
            case 'externalResourcesRequired':
            case 'focusable':
            case 'preserveAlpha':
                null != value && 'function' !== typeof value && 'symbol' !== typeof value
                    ? domElement.setAttribute(key, '' + value)
                    : domElement.removeAttribute(key)
                break
            case 'inert':
            case 'allowFullScreen':
            case 'async':
            case 'autoPlay':
            case 'controls':
            case 'default':
            case 'defer':
            case 'disabled':
            case 'disablePictureInPicture':
            case 'disableRemotePlayback':
            case 'formNoValidate':
            case 'hidden':
            case 'loop':
            case 'noModule':
            case 'noValidate':
            case 'open':
            case 'playsInline':
            case 'readOnly':
            case 'required':
            case 'reversed':
            case 'scoped':
            case 'seamless':
            case 'itemScope':
                value && 'function' !== typeof value && 'symbol' !== typeof value
                    ? domElement.setAttribute(key, '')
                    : domElement.removeAttribute(key)
                break
            case 'capture':
            case 'download':
                true === value
                    ? domElement.setAttribute(key, '')
                    : false !== value &&
                        null != value &&
                        'function' !== typeof value &&
                        'symbol' !== typeof value
                      ? domElement.setAttribute(key, value)
                      : domElement.removeAttribute(key)
                break
            case 'cols':
            case 'rows':
            case 'size':
            case 'span':
                null != value &&
                'function' !== typeof value &&
                'symbol' !== typeof value &&
                !isNaN(value) &&
                1 <= value
                    ? domElement.setAttribute(key, value)
                    : domElement.removeAttribute(key)
                break
            case 'rowSpan':
            case 'start':
                null == value ||
                'function' === typeof value ||
                'symbol' === typeof value ||
                isNaN(value)
                    ? domElement.removeAttribute(key)
                    : domElement.setAttribute(key, value)
                break
            case 'popover':
                listenToNonDelegatedEvent('beforetoggle', domElement)
                listenToNonDelegatedEvent('toggle', domElement)
                setValueForAttribute(domElement, 'popover', value)
                break
            case 'xlinkActuate':
                setValueForNamespacedAttribute(
                    domElement,
                    'http://www.w3.org/1999/xlink',
                    'xlink:actuate',
                    value
                )
                break
            case 'xlinkArcrole':
                setValueForNamespacedAttribute(
                    domElement,
                    'http://www.w3.org/1999/xlink',
                    'xlink:arcrole',
                    value
                )
                break
            case 'xlinkRole':
                setValueForNamespacedAttribute(
                    domElement,
                    'http://www.w3.org/1999/xlink',
                    'xlink:role',
                    value
                )
                break
            case 'xlinkShow':
                setValueForNamespacedAttribute(
                    domElement,
                    'http://www.w3.org/1999/xlink',
                    'xlink:show',
                    value
                )
                break
            case 'xlinkTitle':
                setValueForNamespacedAttribute(
                    domElement,
                    'http://www.w3.org/1999/xlink',
                    'xlink:title',
                    value
                )
                break
            case 'xlinkType':
                setValueForNamespacedAttribute(
                    domElement,
                    'http://www.w3.org/1999/xlink',
                    'xlink:type',
                    value
                )
                break
            case 'xmlBase':
                setValueForNamespacedAttribute(
                    domElement,
                    'http://www.w3.org/XML/1998/namespace',
                    'xml:base',
                    value
                )
                break
            case 'xmlLang':
                setValueForNamespacedAttribute(
                    domElement,
                    'http://www.w3.org/XML/1998/namespace',
                    'xml:lang',
                    value
                )
                break
            case 'xmlSpace':
                setValueForNamespacedAttribute(
                    domElement,
                    'http://www.w3.org/XML/1998/namespace',
                    'xml:space',
                    value
                )
                break
            case 'is':
                setValueForAttribute(domElement, 'is', value)
                break
            case 'innerText':
            case 'textContent':
                break
            default:
                if (
                    !(2 < key.length) ||
                    ('o' !== key[0] && 'O' !== key[0]) ||
                    ('n' !== key[1] && 'N' !== key[1])
                )
                    (key = aliases.get(key) || key), setValueForAttribute(domElement, key, value)
        }
    }
    function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
        switch (key) {
            case 'style':
                setValueForStyles(domElement, value, prevValue)
                break
            case 'dangerouslySetInnerHTML':
                if (null != value) {
                    if ('object' !== typeof value || !('__html' in value))
                        throw Error(formatProdErrorMessage(61))
                    key = value.__html
                    if (null != key) {
                        if (null != props.children) throw Error(formatProdErrorMessage(60))
                        domElement.innerHTML = key
                    }
                }
                break
            case 'children':
                'string' === typeof value
                    ? setTextContent(domElement, value)
                    : ('number' === typeof value || 'bigint' === typeof value) &&
                      setTextContent(domElement, '' + value)
                break
            case 'onScroll':
                null != value && listenToNonDelegatedEvent('scroll', domElement)
                break
            case 'onScrollEnd':
                null != value && listenToNonDelegatedEvent('scrollend', domElement)
                break
            case 'onClick':
                null != value && (domElement.onclick = noop$12)
                break
            case 'suppressContentEditableWarning':
            case 'suppressHydrationWarning':
            case 'innerHTML':
            case 'ref':
                break
            case 'innerText':
            case 'textContent':
                break
            default:
                if (!registrationNameDependencies.hasOwnProperty(key))
                    a: {
                        if (
                            'o' === key[0] &&
                            'n' === key[1] &&
                            ((props = key.endsWith('Capture')),
                            (tag = key.slice(2, props ? key.length - 7 : void 0)),
                            (prevValue = domElement[internalPropsKey] || null),
                            (prevValue = null != prevValue ? prevValue[key] : null),
                            'function' === typeof prevValue &&
                                domElement.removeEventListener(tag, prevValue, props),
                            'function' === typeof value)
                        ) {
                            'function' !== typeof prevValue &&
                                null !== prevValue &&
                                (key in domElement
                                    ? (domElement[key] = null)
                                    : domElement.hasAttribute(key) &&
                                      domElement.removeAttribute(key))
                            domElement.addEventListener(tag, value, props)
                            break a
                        }
                        key in domElement
                            ? (domElement[key] = value)
                            : true === value
                              ? domElement.setAttribute(key, '')
                              : setValueForAttribute(domElement, key, value)
                    }
        }
    }
    function setInitialProperties(domElement, tag, props) {
        switch (tag) {
            case 'div':
            case 'span':
            case 'svg':
            case 'path':
            case 'a':
            case 'g':
            case 'p':
            case 'li':
                break
            case 'img':
                listenToNonDelegatedEvent('error', domElement)
                listenToNonDelegatedEvent('load', domElement)
                var hasSrc = false,
                    hasSrcSet = false,
                    propKey
                for (propKey in props)
                    if (props.hasOwnProperty(propKey)) {
                        var propValue = props[propKey]
                        if (null != propValue)
                            switch (propKey) {
                                case 'src':
                                    hasSrc = true
                                    break
                                case 'srcSet':
                                    hasSrcSet = true
                                    break
                                case 'children':
                                case 'dangerouslySetInnerHTML':
                                    throw Error(formatProdErrorMessage(137, tag))
                                default:
                                    setProp(domElement, tag, propKey, propValue, props, null)
                            }
                    }
                hasSrcSet && setProp(domElement, tag, 'srcSet', props.srcSet, props, null)
                hasSrc && setProp(domElement, tag, 'src', props.src, props, null)
                return
            case 'input':
                listenToNonDelegatedEvent('invalid', domElement)
                var defaultValue = (propKey = propValue = hasSrcSet = null),
                    checked = null,
                    defaultChecked = null
                for (hasSrc in props)
                    if (props.hasOwnProperty(hasSrc)) {
                        var propValue$188 = props[hasSrc]
                        if (null != propValue$188)
                            switch (hasSrc) {
                                case 'name':
                                    hasSrcSet = propValue$188
                                    break
                                case 'type':
                                    propValue = propValue$188
                                    break
                                case 'checked':
                                    checked = propValue$188
                                    break
                                case 'defaultChecked':
                                    defaultChecked = propValue$188
                                    break
                                case 'value':
                                    propKey = propValue$188
                                    break
                                case 'defaultValue':
                                    defaultValue = propValue$188
                                    break
                                case 'children':
                                case 'dangerouslySetInnerHTML':
                                    if (null != propValue$188)
                                        throw Error(formatProdErrorMessage(137, tag))
                                    break
                                default:
                                    setProp(domElement, tag, hasSrc, propValue$188, props, null)
                            }
                    }
                initInput(
                    domElement,
                    propKey,
                    defaultValue,
                    checked,
                    defaultChecked,
                    propValue,
                    hasSrcSet,
                    false
                )
                track(domElement)
                return
            case 'select':
                listenToNonDelegatedEvent('invalid', domElement)
                hasSrc = propValue = propKey = null
                for (hasSrcSet in props)
                    if (
                        props.hasOwnProperty(hasSrcSet) &&
                        ((defaultValue = props[hasSrcSet]), null != defaultValue)
                    )
                        switch (hasSrcSet) {
                            case 'value':
                                propKey = defaultValue
                                break
                            case 'defaultValue':
                                propValue = defaultValue
                                break
                            case 'multiple':
                                hasSrc = defaultValue
                            default:
                                setProp(domElement, tag, hasSrcSet, defaultValue, props, null)
                        }
                tag = propKey
                props = propValue
                domElement.multiple = !!hasSrc
                null != tag
                    ? updateOptions(domElement, !!hasSrc, tag, false)
                    : null != props && updateOptions(domElement, !!hasSrc, props, true)
                return
            case 'textarea':
                listenToNonDelegatedEvent('invalid', domElement)
                propKey = hasSrcSet = hasSrc = null
                for (propValue in props)
                    if (
                        props.hasOwnProperty(propValue) &&
                        ((defaultValue = props[propValue]), null != defaultValue)
                    )
                        switch (propValue) {
                            case 'value':
                                hasSrc = defaultValue
                                break
                            case 'defaultValue':
                                hasSrcSet = defaultValue
                                break
                            case 'children':
                                propKey = defaultValue
                                break
                            case 'dangerouslySetInnerHTML':
                                if (null != defaultValue) throw Error(formatProdErrorMessage(91))
                                break
                            default:
                                setProp(domElement, tag, propValue, defaultValue, props, null)
                        }
                initTextarea(domElement, hasSrc, hasSrcSet, propKey)
                track(domElement)
                return
            case 'option':
                for (checked in props)
                    if (
                        props.hasOwnProperty(checked) &&
                        ((hasSrc = props[checked]), null != hasSrc)
                    )
                        switch (checked) {
                            case 'selected':
                                domElement.selected =
                                    hasSrc &&
                                    'function' !== typeof hasSrc &&
                                    'symbol' !== typeof hasSrc
                                break
                            default:
                                setProp(domElement, tag, checked, hasSrc, props, null)
                        }
                return
            case 'dialog':
                listenToNonDelegatedEvent('beforetoggle', domElement)
                listenToNonDelegatedEvent('toggle', domElement)
                listenToNonDelegatedEvent('cancel', domElement)
                listenToNonDelegatedEvent('close', domElement)
                break
            case 'iframe':
            case 'object':
                listenToNonDelegatedEvent('load', domElement)
                break
            case 'video':
            case 'audio':
                for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
                    listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement)
                break
            case 'image':
                listenToNonDelegatedEvent('error', domElement)
                listenToNonDelegatedEvent('load', domElement)
                break
            case 'details':
                listenToNonDelegatedEvent('toggle', domElement)
                break
            case 'embed':
            case 'source':
            case 'link':
                listenToNonDelegatedEvent('error', domElement),
                    listenToNonDelegatedEvent('load', domElement)
            case 'area':
            case 'base':
            case 'br':
            case 'col':
            case 'hr':
            case 'keygen':
            case 'meta':
            case 'param':
            case 'track':
            case 'wbr':
            case 'menuitem':
                for (defaultChecked in props)
                    if (
                        props.hasOwnProperty(defaultChecked) &&
                        ((hasSrc = props[defaultChecked]), null != hasSrc)
                    )
                        switch (defaultChecked) {
                            case 'children':
                            case 'dangerouslySetInnerHTML':
                                throw Error(formatProdErrorMessage(137, tag))
                            default:
                                setProp(domElement, tag, defaultChecked, hasSrc, props, null)
                        }
                return
            default:
                if (isCustomElement(tag)) {
                    for (propValue$188 in props)
                        props.hasOwnProperty(propValue$188) &&
                            ((hasSrc = props[propValue$188]),
                            void 0 !== hasSrc &&
                                setPropOnCustomElement(
                                    domElement,
                                    tag,
                                    propValue$188,
                                    hasSrc,
                                    props,
                                    void 0
                                ))
                    return
                }
        }
        for (defaultValue in props)
            props.hasOwnProperty(defaultValue) &&
                ((hasSrc = props[defaultValue]),
                null != hasSrc && setProp(domElement, tag, defaultValue, hasSrc, props, null))
    }
    function updateProperties(domElement, tag, lastProps, nextProps) {
        switch (tag) {
            case 'div':
            case 'span':
            case 'svg':
            case 'path':
            case 'a':
            case 'g':
            case 'p':
            case 'li':
                break
            case 'input':
                var name = null,
                    type = null,
                    value = null,
                    defaultValue = null,
                    lastDefaultValue = null,
                    checked = null,
                    defaultChecked = null
                for (propKey in lastProps) {
                    var lastProp = lastProps[propKey]
                    if (lastProps.hasOwnProperty(propKey) && null != lastProp)
                        switch (propKey) {
                            case 'checked':
                                break
                            case 'value':
                                break
                            case 'defaultValue':
                                lastDefaultValue = lastProp
                            default:
                                nextProps.hasOwnProperty(propKey) ||
                                    setProp(domElement, tag, propKey, null, nextProps, lastProp)
                        }
                }
                for (var propKey$205 in nextProps) {
                    var propKey = nextProps[propKey$205]
                    lastProp = lastProps[propKey$205]
                    if (
                        nextProps.hasOwnProperty(propKey$205) &&
                        (null != propKey || null != lastProp)
                    )
                        switch (propKey$205) {
                            case 'type':
                                type = propKey
                                break
                            case 'name':
                                name = propKey
                                break
                            case 'checked':
                                checked = propKey
                                break
                            case 'defaultChecked':
                                defaultChecked = propKey
                                break
                            case 'value':
                                value = propKey
                                break
                            case 'defaultValue':
                                defaultValue = propKey
                                break
                            case 'children':
                            case 'dangerouslySetInnerHTML':
                                if (null != propKey) throw Error(formatProdErrorMessage(137, tag))
                                break
                            default:
                                propKey !== lastProp &&
                                    setProp(
                                        domElement,
                                        tag,
                                        propKey$205,
                                        propKey,
                                        nextProps,
                                        lastProp
                                    )
                        }
                }
                updateInput(
                    domElement,
                    value,
                    defaultValue,
                    lastDefaultValue,
                    checked,
                    defaultChecked,
                    type,
                    name
                )
                return
            case 'select':
                propKey = value = defaultValue = propKey$205 = null
                for (type in lastProps)
                    if (
                        ((lastDefaultValue = lastProps[type]),
                        lastProps.hasOwnProperty(type) && null != lastDefaultValue)
                    )
                        switch (type) {
                            case 'value':
                                break
                            case 'multiple':
                                propKey = lastDefaultValue
                            default:
                                nextProps.hasOwnProperty(type) ||
                                    setProp(
                                        domElement,
                                        tag,
                                        type,
                                        null,
                                        nextProps,
                                        lastDefaultValue
                                    )
                        }
                for (name in nextProps)
                    if (
                        ((type = nextProps[name]),
                        (lastDefaultValue = lastProps[name]),
                        nextProps.hasOwnProperty(name) &&
                            (null != type || null != lastDefaultValue))
                    )
                        switch (name) {
                            case 'value':
                                propKey$205 = type
                                break
                            case 'defaultValue':
                                defaultValue = type
                                break
                            case 'multiple':
                                value = type
                            default:
                                type !== lastDefaultValue &&
                                    setProp(
                                        domElement,
                                        tag,
                                        name,
                                        type,
                                        nextProps,
                                        lastDefaultValue
                                    )
                        }
                tag = defaultValue
                lastProps = value
                nextProps = propKey
                null != propKey$205
                    ? updateOptions(domElement, !!lastProps, propKey$205, false)
                    : !!nextProps !== !!lastProps &&
                      (null != tag
                          ? updateOptions(domElement, !!lastProps, tag, true)
                          : updateOptions(domElement, !!lastProps, lastProps ? [] : '', false))
                return
            case 'textarea':
                propKey = propKey$205 = null
                for (defaultValue in lastProps)
                    if (
                        ((name = lastProps[defaultValue]),
                        lastProps.hasOwnProperty(defaultValue) &&
                            null != name &&
                            !nextProps.hasOwnProperty(defaultValue))
                    )
                        switch (defaultValue) {
                            case 'value':
                                break
                            case 'children':
                                break
                            default:
                                setProp(domElement, tag, defaultValue, null, nextProps, name)
                        }
                for (value in nextProps)
                    if (
                        ((name = nextProps[value]),
                        (type = lastProps[value]),
                        nextProps.hasOwnProperty(value) && (null != name || null != type))
                    )
                        switch (value) {
                            case 'value':
                                propKey$205 = name
                                break
                            case 'defaultValue':
                                propKey = name
                                break
                            case 'children':
                                break
                            case 'dangerouslySetInnerHTML':
                                if (null != name) throw Error(formatProdErrorMessage(91))
                                break
                            default:
                                name !== type &&
                                    setProp(domElement, tag, value, name, nextProps, type)
                        }
                updateTextarea(domElement, propKey$205, propKey)
                return
            case 'option':
                for (var propKey$221 in lastProps)
                    if (
                        ((propKey$205 = lastProps[propKey$221]),
                        lastProps.hasOwnProperty(propKey$221) &&
                            null != propKey$205 &&
                            !nextProps.hasOwnProperty(propKey$221))
                    )
                        switch (propKey$221) {
                            case 'selected':
                                domElement.selected = false
                                break
                            default:
                                setProp(domElement, tag, propKey$221, null, nextProps, propKey$205)
                        }
                for (lastDefaultValue in nextProps)
                    if (
                        ((propKey$205 = nextProps[lastDefaultValue]),
                        (propKey = lastProps[lastDefaultValue]),
                        nextProps.hasOwnProperty(lastDefaultValue) &&
                            propKey$205 !== propKey &&
                            (null != propKey$205 || null != propKey))
                    )
                        switch (lastDefaultValue) {
                            case 'selected':
                                domElement.selected =
                                    propKey$205 &&
                                    'function' !== typeof propKey$205 &&
                                    'symbol' !== typeof propKey$205
                                break
                            default:
                                setProp(
                                    domElement,
                                    tag,
                                    lastDefaultValue,
                                    propKey$205,
                                    nextProps,
                                    propKey
                                )
                        }
                return
            case 'img':
            case 'link':
            case 'area':
            case 'base':
            case 'br':
            case 'col':
            case 'embed':
            case 'hr':
            case 'keygen':
            case 'meta':
            case 'param':
            case 'source':
            case 'track':
            case 'wbr':
            case 'menuitem':
                for (var propKey$226 in lastProps)
                    (propKey$205 = lastProps[propKey$226]),
                        lastProps.hasOwnProperty(propKey$226) &&
                            null != propKey$205 &&
                            !nextProps.hasOwnProperty(propKey$226) &&
                            setProp(domElement, tag, propKey$226, null, nextProps, propKey$205)
                for (checked in nextProps)
                    if (
                        ((propKey$205 = nextProps[checked]),
                        (propKey = lastProps[checked]),
                        nextProps.hasOwnProperty(checked) &&
                            propKey$205 !== propKey &&
                            (null != propKey$205 || null != propKey))
                    )
                        switch (checked) {
                            case 'children':
                            case 'dangerouslySetInnerHTML':
                                if (null != propKey$205)
                                    throw Error(formatProdErrorMessage(137, tag))
                                break
                            default:
                                setProp(domElement, tag, checked, propKey$205, nextProps, propKey)
                        }
                return
            default:
                if (isCustomElement(tag)) {
                    for (var propKey$231 in lastProps)
                        (propKey$205 = lastProps[propKey$231]),
                            lastProps.hasOwnProperty(propKey$231) &&
                                void 0 !== propKey$205 &&
                                !nextProps.hasOwnProperty(propKey$231) &&
                                setPropOnCustomElement(
                                    domElement,
                                    tag,
                                    propKey$231,
                                    void 0,
                                    nextProps,
                                    propKey$205
                                )
                    for (defaultChecked in nextProps)
                        (propKey$205 = nextProps[defaultChecked]),
                            (propKey = lastProps[defaultChecked]),
                            !nextProps.hasOwnProperty(defaultChecked) ||
                                propKey$205 === propKey ||
                                (void 0 === propKey$205 && void 0 === propKey) ||
                                setPropOnCustomElement(
                                    domElement,
                                    tag,
                                    defaultChecked,
                                    propKey$205,
                                    nextProps,
                                    propKey
                                )
                    return
                }
        }
        for (var propKey$236 in lastProps)
            (propKey$205 = lastProps[propKey$236]),
                lastProps.hasOwnProperty(propKey$236) &&
                    null != propKey$205 &&
                    !nextProps.hasOwnProperty(propKey$236) &&
                    setProp(domElement, tag, propKey$236, null, nextProps, propKey$205)
        for (lastProp in nextProps)
            (propKey$205 = nextProps[lastProp]),
                (propKey = lastProps[lastProp]),
                !nextProps.hasOwnProperty(lastProp) ||
                    propKey$205 === propKey ||
                    (null == propKey$205 && null == propKey) ||
                    setProp(domElement, tag, lastProp, propKey$205, nextProps, propKey)
    }
    var eventsEnabled = null,
        selectionInformation = null
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return 9 === rootContainerElement.nodeType
            ? rootContainerElement
            : rootContainerElement.ownerDocument
    }
    function getOwnHostContext(namespaceURI) {
        switch (namespaceURI) {
            case 'http://www.w3.org/2000/svg':
                return 1
            case 'http://www.w3.org/1998/Math/MathML':
                return 2
            default:
                return 0
        }
    }
    function getChildHostContextProd(parentNamespace, type) {
        if (0 === parentNamespace)
            switch (type) {
                case 'svg':
                    return 1
                case 'math':
                    return 2
                default:
                    return 0
            }
        return 1 === parentNamespace && 'foreignObject' === type ? 0 : parentNamespace
    }
    function shouldSetTextContent(type, props) {
        return (
            'textarea' === type ||
            'noscript' === type ||
            'string' === typeof props.children ||
            'number' === typeof props.children ||
            'bigint' === typeof props.children ||
            ('object' === typeof props.dangerouslySetInnerHTML &&
                null !== props.dangerouslySetInnerHTML &&
                null != props.dangerouslySetInnerHTML.__html)
        )
    }
    var currentPopstateTransitionEvent = null
    function shouldAttemptEagerTransition() {
        var event = window.event
        if (event && 'popstate' === event.type) {
            if (event === currentPopstateTransitionEvent) return false
            currentPopstateTransitionEvent = event
            return true
        }
        currentPopstateTransitionEvent = null
        return false
    }
    var scheduleTimeout = 'function' === typeof setTimeout ? setTimeout : void 0,
        cancelTimeout = 'function' === typeof clearTimeout ? clearTimeout : void 0,
        localPromise = 'function' === typeof Promise ? Promise : void 0,
        scheduleMicrotask =
            'function' === typeof queueMicrotask
                ? queueMicrotask
                : 'undefined' !== typeof localPromise
                  ? function (callback) {
                        return localPromise
                            .resolve(null)
                            .then(callback)
                            .catch(handleErrorInNextTick)
                    }
                  : scheduleTimeout
    function handleErrorInNextTick(error) {
        setTimeout(function () {
            throw error
        })
    }
    function isSingletonScope(type) {
        return 'head' === type
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node2 = suspenseInstance,
            possiblePreambleContribution = 0,
            depth = 0
        do {
            var nextNode = node2.nextSibling
            parentInstance.removeChild(node2)
            if (nextNode && 8 === nextNode.nodeType)
                if (((node2 = nextNode.data), '/$' === node2)) {
                    if (0 < possiblePreambleContribution && 8 > possiblePreambleContribution) {
                        node2 = possiblePreambleContribution
                        var ownerDocument = parentInstance.ownerDocument
                        node2 & 1 && releaseSingletonInstance(ownerDocument.documentElement)
                        node2 & 2 && releaseSingletonInstance(ownerDocument.body)
                        if (node2 & 4)
                            for (
                                node2 = ownerDocument.head,
                                    releaseSingletonInstance(node2),
                                    ownerDocument = node2.firstChild;
                                ownerDocument;

                            ) {
                                var nextNode$jscomp$0 = ownerDocument.nextSibling,
                                    nodeName = ownerDocument.nodeName
                                ownerDocument[internalHoistableMarker] ||
                                    'SCRIPT' === nodeName ||
                                    'STYLE' === nodeName ||
                                    ('LINK' === nodeName &&
                                        'stylesheet' === ownerDocument.rel.toLowerCase()) ||
                                    node2.removeChild(ownerDocument)
                                ownerDocument = nextNode$jscomp$0
                            }
                    }
                    if (0 === depth) {
                        parentInstance.removeChild(nextNode)
                        retryIfBlockedOn(suspenseInstance)
                        return
                    }
                    depth--
                } else
                    '$' === node2 || '$?' === node2 || '$!' === node2
                        ? depth++
                        : (possiblePreambleContribution = node2.charCodeAt(0) - 48)
            else possiblePreambleContribution = 0
            node2 = nextNode
        } while (node2)
        retryIfBlockedOn(suspenseInstance)
    }
    function clearContainerSparingly(container) {
        var nextNode = container.firstChild
        nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling)
        for (; nextNode; ) {
            var node2 = nextNode
            nextNode = nextNode.nextSibling
            switch (node2.nodeName) {
                case 'HTML':
                case 'HEAD':
                case 'BODY':
                    clearContainerSparingly(node2)
                    detachDeletedInstance(node2)
                    continue
                case 'SCRIPT':
                case 'STYLE':
                    continue
                case 'LINK':
                    if ('stylesheet' === node2.rel.toLowerCase()) continue
            }
            container.removeChild(node2)
        }
    }
    function canHydrateInstance(instance, type, props, inRootOrSingleton) {
        for (; 1 === instance.nodeType; ) {
            var anyProps = props
            if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
                if (
                    !inRootOrSingleton &&
                    ('INPUT' !== instance.nodeName || 'hidden' !== instance.type)
                )
                    break
            } else if (!inRootOrSingleton)
                if ('input' === type && 'hidden' === instance.type) {
                    var name = null == anyProps.name ? null : '' + anyProps.name
                    if ('hidden' === anyProps.type && instance.getAttribute('name') === name)
                        return instance
                } else return instance
            else if (!instance[internalHoistableMarker])
                switch (type) {
                    case 'meta':
                        if (!instance.hasAttribute('itemprop')) break
                        return instance
                    case 'link':
                        name = instance.getAttribute('rel')
                        if ('stylesheet' === name && instance.hasAttribute('data-precedence')) break
                        else if (
                            name !== anyProps.rel ||
                            instance.getAttribute('href') !==
                                (null == anyProps.href || '' === anyProps.href
                                    ? null
                                    : anyProps.href) ||
                            instance.getAttribute('crossorigin') !==
                                (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) ||
                            instance.getAttribute('title') !==
                                (null == anyProps.title ? null : anyProps.title)
                        )
                            break
                        return instance
                    case 'style':
                        if (instance.hasAttribute('data-precedence')) break
                        return instance
                    case 'script':
                        name = instance.getAttribute('src')
                        if (
                            (name !== (null == anyProps.src ? null : anyProps.src) ||
                                instance.getAttribute('type') !==
                                    (null == anyProps.type ? null : anyProps.type) ||
                                instance.getAttribute('crossorigin') !==
                                    (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) &&
                            name &&
                            instance.hasAttribute('async') &&
                            !instance.hasAttribute('itemprop')
                        )
                            break
                        return instance
                    default:
                        return instance
                }
            instance = getNextHydratable(instance.nextSibling)
            if (null === instance) break
        }
        return null
    }
    function canHydrateTextInstance(instance, text2, inRootOrSingleton) {
        if ('' === text2) return null
        for (; 3 !== instance.nodeType; ) {
            if (
                (1 !== instance.nodeType ||
                    'INPUT' !== instance.nodeName ||
                    'hidden' !== instance.type) &&
                !inRootOrSingleton
            )
                return null
            instance = getNextHydratable(instance.nextSibling)
            if (null === instance) return null
        }
        return instance
    }
    function isSuspenseInstanceFallback(instance) {
        return (
            '$!' === instance.data ||
            ('$?' === instance.data && 'complete' === instance.ownerDocument.readyState)
        )
    }
    function registerSuspenseInstanceRetry(instance, callback) {
        var ownerDocument = instance.ownerDocument
        if ('$?' !== instance.data || 'complete' === ownerDocument.readyState) callback()
        else {
            var listener = function () {
                callback()
                ownerDocument.removeEventListener('DOMContentLoaded', listener)
            }
            ownerDocument.addEventListener('DOMContentLoaded', listener)
            instance._reactRetry = listener
        }
    }
    function getNextHydratable(node2) {
        for (; null != node2; node2 = node2.nextSibling) {
            var nodeType = node2.nodeType
            if (1 === nodeType || 3 === nodeType) break
            if (8 === nodeType) {
                nodeType = node2.data
                if (
                    '$' === nodeType ||
                    '$!' === nodeType ||
                    '$?' === nodeType ||
                    'F!' === nodeType ||
                    'F' === nodeType
                )
                    break
                if ('/$' === nodeType) return null
            }
        }
        return node2
    }
    var previousHydratableOnEnteringScopedSingleton = null
    function getParentSuspenseInstance(targetInstance) {
        targetInstance = targetInstance.previousSibling
        for (var depth = 0; targetInstance; ) {
            if (8 === targetInstance.nodeType) {
                var data = targetInstance.data
                if ('$' === data || '$!' === data || '$?' === data) {
                    if (0 === depth) return targetInstance
                    depth--
                } else '/$' === data && depth++
            }
            targetInstance = targetInstance.previousSibling
        }
        return null
    }
    function resolveSingletonInstance(type, props, rootContainerInstance) {
        props = getOwnerDocumentFromRootContainer(rootContainerInstance)
        switch (type) {
            case 'html':
                type = props.documentElement
                if (!type) throw Error(formatProdErrorMessage(452))
                return type
            case 'head':
                type = props.head
                if (!type) throw Error(formatProdErrorMessage(453))
                return type
            case 'body':
                type = props.body
                if (!type) throw Error(formatProdErrorMessage(454))
                return type
            default:
                throw Error(formatProdErrorMessage(451))
        }
    }
    function releaseSingletonInstance(instance) {
        for (var attributes = instance.attributes; attributes.length; )
            instance.removeAttributeNode(attributes[0])
        detachDeletedInstance(instance)
    }
    var preloadPropsMap = /* @__PURE__ */ new Map(),
        preconnectsSet = /* @__PURE__ */ new Set()
    function getHoistableRoot(container) {
        return 'function' === typeof container.getRootNode
            ? container.getRootNode()
            : 9 === container.nodeType
              ? container
              : container.ownerDocument
    }
    var previousDispatcher = ReactDOMSharedInternals.d
    ReactDOMSharedInternals.d = {
        f: flushSyncWork,
        r: requestFormReset,
        D: prefetchDNS,
        C: preconnect,
        L: preload,
        m: preloadModule,
        X: preinitScript,
        S: preinitStyle,
        M: preinitModuleScript
    }
    function flushSyncWork() {
        var previousWasRendering = previousDispatcher.f(),
            wasRendering = flushSyncWork$1()
        return previousWasRendering || wasRendering
    }
    function requestFormReset(form) {
        var formInst = getInstanceFromNode(form)
        null !== formInst && 5 === formInst.tag && 'form' === formInst.type
            ? requestFormReset$1(formInst)
            : previousDispatcher.r(form)
    }
    var globalDocument = 'undefined' === typeof document ? null : document
    function preconnectAs(rel, href, crossOrigin) {
        var ownerDocument = globalDocument
        if (ownerDocument && 'string' === typeof href && href) {
            var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href)
            limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]'
            'string' === typeof crossOrigin &&
                (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]')
            preconnectsSet.has(limitedEscapedHref) ||
                (preconnectsSet.add(limitedEscapedHref),
                (rel = { rel, crossOrigin, href }),
                null === ownerDocument.querySelector(limitedEscapedHref) &&
                    ((href = ownerDocument.createElement('link')),
                    setInitialProperties(href, 'link', rel),
                    markNodeAsHoistable(href),
                    ownerDocument.head.appendChild(href)))
        }
    }
    function prefetchDNS(href) {
        previousDispatcher.D(href)
        preconnectAs('dns-prefetch', href, null)
    }
    function preconnect(href, crossOrigin) {
        previousDispatcher.C(href, crossOrigin)
        preconnectAs('preconnect', href, crossOrigin)
    }
    function preload(href, as, options3) {
        previousDispatcher.L(href, as, options3)
        var ownerDocument = globalDocument
        if (ownerDocument && href && as) {
            var preloadSelector =
                'link[rel="preload"][as="' +
                escapeSelectorAttributeValueInsideDoubleQuotes(as) +
                '"]'
            'image' === as
                ? options3 && options3.imageSrcSet
                    ? ((preloadSelector +=
                          '[imagesrcset="' +
                          escapeSelectorAttributeValueInsideDoubleQuotes(options3.imageSrcSet) +
                          '"]'),
                      'string' === typeof options3.imageSizes &&
                          (preloadSelector +=
                              '[imagesizes="' +
                              escapeSelectorAttributeValueInsideDoubleQuotes(options3.imageSizes) +
                              '"]'))
                    : (preloadSelector +=
                          '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]')
                : (preloadSelector +=
                      '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]')
            var key = preloadSelector
            switch (as) {
                case 'style':
                    key = getStyleKey(href)
                    break
                case 'script':
                    key = getScriptKey(href)
            }
            preloadPropsMap.has(key) ||
                ((href = assign2(
                    {
                        rel: 'preload',
                        href: 'image' === as && options3 && options3.imageSrcSet ? void 0 : href,
                        as
                    },
                    options3
                )),
                preloadPropsMap.set(key, href),
                null !== ownerDocument.querySelector(preloadSelector) ||
                    ('style' === as &&
                        ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) ||
                    ('script' === as &&
                        ownerDocument.querySelector(getScriptSelectorFromKey(key))) ||
                    ((as = ownerDocument.createElement('link')),
                    setInitialProperties(as, 'link', href),
                    markNodeAsHoistable(as),
                    ownerDocument.head.appendChild(as)))
        }
    }
    function preloadModule(href, options3) {
        previousDispatcher.m(href, options3)
        var ownerDocument = globalDocument
        if (ownerDocument && href) {
            var as = options3 && 'string' === typeof options3.as ? options3.as : 'script',
                preloadSelector =
                    'link[rel="modulepreload"][as="' +
                    escapeSelectorAttributeValueInsideDoubleQuotes(as) +
                    '"][href="' +
                    escapeSelectorAttributeValueInsideDoubleQuotes(href) +
                    '"]',
                key = preloadSelector
            switch (as) {
                case 'audioworklet':
                case 'paintworklet':
                case 'serviceworker':
                case 'sharedworker':
                case 'worker':
                case 'script':
                    key = getScriptKey(href)
            }
            if (
                !preloadPropsMap.has(key) &&
                ((href = assign2({ rel: 'modulepreload', href }, options3)),
                preloadPropsMap.set(key, href),
                null === ownerDocument.querySelector(preloadSelector))
            ) {
                switch (as) {
                    case 'audioworklet':
                    case 'paintworklet':
                    case 'serviceworker':
                    case 'sharedworker':
                    case 'worker':
                    case 'script':
                        if (ownerDocument.querySelector(getScriptSelectorFromKey(key))) return
                }
                as = ownerDocument.createElement('link')
                setInitialProperties(as, 'link', href)
                markNodeAsHoistable(as)
                ownerDocument.head.appendChild(as)
            }
        }
    }
    function preinitStyle(href, precedence, options3) {
        previousDispatcher.S(href, precedence, options3)
        var ownerDocument = globalDocument
        if (ownerDocument && href) {
            var styles = getResourcesFromRoot(ownerDocument).hoistableStyles,
                key = getStyleKey(href)
            precedence = precedence || 'default'
            var resource = styles.get(key)
            if (!resource) {
                var state = { loading: 0, preload: null }
                if ((resource = ownerDocument.querySelector(getStylesheetSelectorFromKey(key))))
                    state.loading = 5
                else {
                    href = assign2(
                        { rel: 'stylesheet', href, 'data-precedence': precedence },
                        options3
                    )
                    ;(options3 = preloadPropsMap.get(key)) &&
                        adoptPreloadPropsForStylesheet(href, options3)
                    var link = (resource = ownerDocument.createElement('link'))
                    markNodeAsHoistable(link)
                    setInitialProperties(link, 'link', href)
                    link._p = new Promise(function (resolve, reject) {
                        link.onload = resolve
                        link.onerror = reject
                    })
                    link.addEventListener('load', function () {
                        state.loading |= 1
                    })
                    link.addEventListener('error', function () {
                        state.loading |= 2
                    })
                    state.loading |= 4
                    insertStylesheet(resource, precedence, ownerDocument)
                }
                resource = {
                    type: 'stylesheet',
                    instance: resource,
                    count: 1,
                    state
                }
                styles.set(key, resource)
            }
        }
    }
    function preinitScript(src, options3) {
        previousDispatcher.X(src, options3)
        var ownerDocument = globalDocument
        if (ownerDocument && src) {
            var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
                key = getScriptKey(src),
                resource = scripts.get(key)
            resource ||
                ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),
                resource ||
                    ((src = assign2({ src, async: true }, options3)),
                    (options3 = preloadPropsMap.get(key)) &&
                        adoptPreloadPropsForScript(src, options3),
                    (resource = ownerDocument.createElement('script')),
                    markNodeAsHoistable(resource),
                    setInitialProperties(resource, 'link', src),
                    ownerDocument.head.appendChild(resource)),
                (resource = {
                    type: 'script',
                    instance: resource,
                    count: 1,
                    state: null
                }),
                scripts.set(key, resource))
        }
    }
    function preinitModuleScript(src, options3) {
        previousDispatcher.M(src, options3)
        var ownerDocument = globalDocument
        if (ownerDocument && src) {
            var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
                key = getScriptKey(src),
                resource = scripts.get(key)
            resource ||
                ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),
                resource ||
                    ((src = assign2({ src, async: true, type: 'module' }, options3)),
                    (options3 = preloadPropsMap.get(key)) &&
                        adoptPreloadPropsForScript(src, options3),
                    (resource = ownerDocument.createElement('script')),
                    markNodeAsHoistable(resource),
                    setInitialProperties(resource, 'link', src),
                    ownerDocument.head.appendChild(resource)),
                (resource = {
                    type: 'script',
                    instance: resource,
                    count: 1,
                    state: null
                }),
                scripts.set(key, resource))
        }
    }
    function getResource(type, currentProps, pendingProps, currentResource) {
        var JSCompiler_inline_result = (JSCompiler_inline_result = rootInstanceStackCursor.current)
            ? getHoistableRoot(JSCompiler_inline_result)
            : null
        if (!JSCompiler_inline_result) throw Error(formatProdErrorMessage(446))
        switch (type) {
            case 'meta':
            case 'title':
                return null
            case 'style':
                return 'string' === typeof pendingProps.precedence &&
                    'string' === typeof pendingProps.href
                    ? ((currentProps = getStyleKey(pendingProps.href)),
                      (pendingProps =
                          getResourcesFromRoot(JSCompiler_inline_result).hoistableStyles),
                      (currentResource = pendingProps.get(currentProps)),
                      currentResource ||
                          ((currentResource = {
                              type: 'style',
                              instance: null,
                              count: 0,
                              state: null
                          }),
                          pendingProps.set(currentProps, currentResource)),
                      currentResource)
                    : { type: 'void', instance: null, count: 0, state: null }
            case 'link':
                if (
                    'stylesheet' === pendingProps.rel &&
                    'string' === typeof pendingProps.href &&
                    'string' === typeof pendingProps.precedence
                ) {
                    type = getStyleKey(pendingProps.href)
                    var styles$244 = getResourcesFromRoot(JSCompiler_inline_result).hoistableStyles,
                        resource$245 = styles$244.get(type)
                    resource$245 ||
                        ((JSCompiler_inline_result =
                            JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result),
                        (resource$245 = {
                            type: 'stylesheet',
                            instance: null,
                            count: 0,
                            state: { loading: 0, preload: null }
                        }),
                        styles$244.set(type, resource$245),
                        (styles$244 = JSCompiler_inline_result.querySelector(
                            getStylesheetSelectorFromKey(type)
                        )) &&
                            !styles$244._p &&
                            ((resource$245.instance = styles$244),
                            (resource$245.state.loading = 5)),
                        preloadPropsMap.has(type) ||
                            ((pendingProps = {
                                rel: 'preload',
                                as: 'style',
                                href: pendingProps.href,
                                crossOrigin: pendingProps.crossOrigin,
                                integrity: pendingProps.integrity,
                                media: pendingProps.media,
                                hrefLang: pendingProps.hrefLang,
                                referrerPolicy: pendingProps.referrerPolicy
                            }),
                            preloadPropsMap.set(type, pendingProps),
                            styles$244 ||
                                preloadStylesheet(
                                    JSCompiler_inline_result,
                                    type,
                                    pendingProps,
                                    resource$245.state
                                )))
                    if (currentProps && null === currentResource)
                        throw Error(formatProdErrorMessage(528, ''))
                    return resource$245
                }
                if (currentProps && null !== currentResource)
                    throw Error(formatProdErrorMessage(529, ''))
                return null
            case 'script':
                return (
                    (currentProps = pendingProps.async),
                    (pendingProps = pendingProps.src),
                    'string' === typeof pendingProps &&
                    currentProps &&
                    'function' !== typeof currentProps &&
                    'symbol' !== typeof currentProps
                        ? ((currentProps = getScriptKey(pendingProps)),
                          (pendingProps =
                              getResourcesFromRoot(JSCompiler_inline_result).hoistableScripts),
                          (currentResource = pendingProps.get(currentProps)),
                          currentResource ||
                              ((currentResource = {
                                  type: 'script',
                                  instance: null,
                                  count: 0,
                                  state: null
                              }),
                              pendingProps.set(currentProps, currentResource)),
                          currentResource)
                        : { type: 'void', instance: null, count: 0, state: null }
                )
            default:
                throw Error(formatProdErrorMessage(444, type))
        }
    }
    function getStyleKey(href) {
        return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"'
    }
    function getStylesheetSelectorFromKey(key) {
        return 'link[rel="stylesheet"][' + key + ']'
    }
    function stylesheetPropsFromRawProps(rawProps) {
        return assign2({}, rawProps, {
            'data-precedence': rawProps.precedence,
            precedence: null
        })
    }
    function preloadStylesheet(ownerDocument, key, preloadProps, state) {
        ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + ']')
            ? (state.loading = 1)
            : ((key = ownerDocument.createElement('link')),
              (state.preload = key),
              key.addEventListener('load', function () {
                  return (state.loading |= 1)
              }),
              key.addEventListener('error', function () {
                  return (state.loading |= 2)
              }),
              setInitialProperties(key, 'link', preloadProps),
              markNodeAsHoistable(key),
              ownerDocument.head.appendChild(key))
    }
    function getScriptKey(src) {
        return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]'
    }
    function getScriptSelectorFromKey(key) {
        return 'script[async]' + key
    }
    function acquireResource(hoistableRoot, resource, props) {
        resource.count++
        if (null === resource.instance)
            switch (resource.type) {
                case 'style':
                    var instance = hoistableRoot.querySelector(
                        'style[data-href~="' +
                            escapeSelectorAttributeValueInsideDoubleQuotes(props.href) +
                            '"]'
                    )
                    if (instance)
                        return (
                            (resource.instance = instance), markNodeAsHoistable(instance), instance
                        )
                    var styleProps = assign2({}, props, {
                        'data-href': props.href,
                        'data-precedence': props.precedence,
                        href: null,
                        precedence: null
                    })
                    instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement('style')
                    markNodeAsHoistable(instance)
                    setInitialProperties(instance, 'style', styleProps)
                    insertStylesheet(instance, props.precedence, hoistableRoot)
                    return (resource.instance = instance)
                case 'stylesheet':
                    styleProps = getStyleKey(props.href)
                    var instance$250 = hoistableRoot.querySelector(
                        getStylesheetSelectorFromKey(styleProps)
                    )
                    if (instance$250)
                        return (
                            (resource.state.loading |= 4),
                            (resource.instance = instance$250),
                            markNodeAsHoistable(instance$250),
                            instance$250
                        )
                    instance = stylesheetPropsFromRawProps(props)
                    ;(styleProps = preloadPropsMap.get(styleProps)) &&
                        adoptPreloadPropsForStylesheet(instance, styleProps)
                    instance$250 = (hoistableRoot.ownerDocument || hoistableRoot).createElement(
                        'link'
                    )
                    markNodeAsHoistable(instance$250)
                    var linkInstance = instance$250
                    linkInstance._p = new Promise(function (resolve, reject) {
                        linkInstance.onload = resolve
                        linkInstance.onerror = reject
                    })
                    setInitialProperties(instance$250, 'link', instance)
                    resource.state.loading |= 4
                    insertStylesheet(instance$250, props.precedence, hoistableRoot)
                    return (resource.instance = instance$250)
                case 'script':
                    instance$250 = getScriptKey(props.src)
                    if (
                        (styleProps = hoistableRoot.querySelector(
                            getScriptSelectorFromKey(instance$250)
                        ))
                    )
                        return (
                            (resource.instance = styleProps),
                            markNodeAsHoistable(styleProps),
                            styleProps
                        )
                    instance = props
                    if ((styleProps = preloadPropsMap.get(instance$250)))
                        (instance = assign2({}, props)),
                            adoptPreloadPropsForScript(instance, styleProps)
                    hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot
                    styleProps = hoistableRoot.createElement('script')
                    markNodeAsHoistable(styleProps)
                    setInitialProperties(styleProps, 'link', instance)
                    hoistableRoot.head.appendChild(styleProps)
                    return (resource.instance = styleProps)
                case 'void':
                    return null
                default:
                    throw Error(formatProdErrorMessage(443, resource.type))
            }
        else
            'stylesheet' === resource.type &&
                0 === (resource.state.loading & 4) &&
                ((instance = resource.instance),
                (resource.state.loading |= 4),
                insertStylesheet(instance, props.precedence, hoistableRoot))
        return resource.instance
    }
    function insertStylesheet(instance, precedence, root2) {
        for (
            var nodes = root2.querySelectorAll(
                    'link[rel="stylesheet"][data-precedence],style[data-precedence]'
                ),
                last2 = nodes.length ? nodes[nodes.length - 1] : null,
                prior = last2,
                i = 0;
            i < nodes.length;
            i++
        ) {
            var node2 = nodes[i]
            if (node2.dataset.precedence === precedence) prior = node2
            else if (prior !== last2) break
        }
        prior
            ? prior.parentNode.insertBefore(instance, prior.nextSibling)
            : ((precedence = 9 === root2.nodeType ? root2.head : root2),
              precedence.insertBefore(instance, precedence.firstChild))
    }
    function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
        null == stylesheetProps.crossOrigin &&
            (stylesheetProps.crossOrigin = preloadProps.crossOrigin)
        null == stylesheetProps.referrerPolicy &&
            (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy)
        null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title)
    }
    function adoptPreloadPropsForScript(scriptProps, preloadProps) {
        null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin)
        null == scriptProps.referrerPolicy &&
            (scriptProps.referrerPolicy = preloadProps.referrerPolicy)
        null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity)
    }
    var tagCaches = null
    function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
        if (null === tagCaches) {
            var cache = /* @__PURE__ */ new Map()
            var caches = (tagCaches = /* @__PURE__ */ new Map())
            caches.set(ownerDocument, cache)
        } else
            (caches = tagCaches),
                (cache = caches.get(ownerDocument)),
                cache || ((cache = /* @__PURE__ */ new Map()), caches.set(ownerDocument, cache))
        if (cache.has(type)) return cache
        cache.set(type, null)
        ownerDocument = ownerDocument.getElementsByTagName(type)
        for (caches = 0; caches < ownerDocument.length; caches++) {
            var node2 = ownerDocument[caches]
            if (
                !(
                    node2[internalHoistableMarker] ||
                    node2[internalInstanceKey] ||
                    ('link' === type && 'stylesheet' === node2.getAttribute('rel'))
                ) &&
                'http://www.w3.org/2000/svg' !== node2.namespaceURI
            ) {
                var nodeKey = node2.getAttribute(keyAttribute) || ''
                nodeKey = type + nodeKey
                var existing = cache.get(nodeKey)
                existing ? existing.push(node2) : cache.set(nodeKey, [node2])
            }
        }
        return cache
    }
    function mountHoistable(hoistableRoot, type, instance) {
        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot
        hoistableRoot.head.insertBefore(
            instance,
            'title' === type ? hoistableRoot.querySelector('head > title') : null
        )
    }
    function isHostHoistableType(type, props, hostContext) {
        if (1 === hostContext || null != props.itemProp) return false
        switch (type) {
            case 'meta':
            case 'title':
                return true
            case 'style':
                if (
                    'string' !== typeof props.precedence ||
                    'string' !== typeof props.href ||
                    '' === props.href
                )
                    break
                return true
            case 'link':
                if (
                    'string' !== typeof props.rel ||
                    'string' !== typeof props.href ||
                    '' === props.href ||
                    props.onLoad ||
                    props.onError
                )
                    break
                switch (props.rel) {
                    case 'stylesheet':
                        return (
                            (type = props.disabled),
                            'string' === typeof props.precedence && null == type
                        )
                    default:
                        return true
                }
            case 'script':
                if (
                    props.async &&
                    'function' !== typeof props.async &&
                    'symbol' !== typeof props.async &&
                    !props.onLoad &&
                    !props.onError &&
                    props.src &&
                    'string' === typeof props.src
                )
                    return true
        }
        return false
    }
    function preloadResource(resource) {
        return 'stylesheet' === resource.type && 0 === (resource.state.loading & 3) ? false : true
    }
    var suspendedState = null
    function noop3() {}
    function suspendResource(hoistableRoot, resource, props) {
        if (null === suspendedState) throw Error(formatProdErrorMessage(475))
        var state = suspendedState
        if (
            'stylesheet' === resource.type &&
            ('string' !== typeof props.media || false !== matchMedia(props.media).matches) &&
            0 === (resource.state.loading & 4)
        ) {
            if (null === resource.instance) {
                var key = getStyleKey(props.href),
                    instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key))
                if (instance) {
                    hoistableRoot = instance._p
                    null !== hoistableRoot &&
                        'object' === typeof hoistableRoot &&
                        'function' === typeof hoistableRoot.then &&
                        (state.count++,
                        (state = onUnsuspend.bind(state)),
                        hoistableRoot.then(state, state))
                    resource.state.loading |= 4
                    resource.instance = instance
                    markNodeAsHoistable(instance)
                    return
                }
                instance = hoistableRoot.ownerDocument || hoistableRoot
                props = stylesheetPropsFromRawProps(props)
                ;(key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key)
                instance = instance.createElement('link')
                markNodeAsHoistable(instance)
                var linkInstance = instance
                linkInstance._p = new Promise(function (resolve, reject) {
                    linkInstance.onload = resolve
                    linkInstance.onerror = reject
                })
                setInitialProperties(instance, 'link', props)
                resource.instance = instance
            }
            null === state.stylesheets && (state.stylesheets = /* @__PURE__ */ new Map())
            state.stylesheets.set(resource, hoistableRoot)
            ;(hoistableRoot = resource.state.preload) &&
                0 === (resource.state.loading & 3) &&
                (state.count++,
                (resource = onUnsuspend.bind(state)),
                hoistableRoot.addEventListener('load', resource),
                hoistableRoot.addEventListener('error', resource))
        }
    }
    function waitForCommitToBeReady() {
        if (null === suspendedState) throw Error(formatProdErrorMessage(475))
        var state = suspendedState
        state.stylesheets &&
            0 === state.count &&
            insertSuspendedStylesheets(state, state.stylesheets)
        return 0 < state.count
            ? function (commit) {
                  var stylesheetTimer = setTimeout(function () {
                      state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets)
                      if (state.unsuspend) {
                          var unsuspend = state.unsuspend
                          state.unsuspend = null
                          unsuspend()
                      }
                  }, 6e4)
                  state.unsuspend = commit
                  return function () {
                      state.unsuspend = null
                      clearTimeout(stylesheetTimer)
                  }
              }
            : null
    }
    function onUnsuspend() {
        this.count--
        if (0 === this.count) {
            if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets)
            else if (this.unsuspend) {
                var unsuspend = this.unsuspend
                this.unsuspend = null
                unsuspend()
            }
        }
    }
    var precedencesByRoot = null
    function insertSuspendedStylesheets(state, resources) {
        state.stylesheets = null
        null !== state.unsuspend &&
            (state.count++,
            (precedencesByRoot = /* @__PURE__ */ new Map()),
            resources.forEach(insertStylesheetIntoRoot, state),
            (precedencesByRoot = null),
            onUnsuspend.call(state))
    }
    function insertStylesheetIntoRoot(root2, resource) {
        if (!(resource.state.loading & 4)) {
            var precedences = precedencesByRoot.get(root2)
            if (precedences) var last2 = precedences.get(null)
            else {
                precedences = /* @__PURE__ */ new Map()
                precedencesByRoot.set(root2, precedences)
                for (
                    var nodes = root2.querySelectorAll(
                            'link[data-precedence],style[data-precedence]'
                        ),
                        i = 0;
                    i < nodes.length;
                    i++
                ) {
                    var node2 = nodes[i]
                    if ('LINK' === node2.nodeName || 'not all' !== node2.getAttribute('media'))
                        precedences.set(node2.dataset.precedence, node2), (last2 = node2)
                }
                last2 && precedences.set(null, last2)
            }
            nodes = resource.instance
            node2 = nodes.getAttribute('data-precedence')
            i = precedences.get(node2) || last2
            i === last2 && precedences.set(null, nodes)
            precedences.set(node2, nodes)
            this.count++
            last2 = onUnsuspend.bind(this)
            nodes.addEventListener('load', last2)
            nodes.addEventListener('error', last2)
            i
                ? i.parentNode.insertBefore(nodes, i.nextSibling)
                : ((root2 = 9 === root2.nodeType ? root2.head : root2),
                  root2.insertBefore(nodes, root2.firstChild))
            resource.state.loading |= 4
        }
    }
    var HostTransitionContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Provider: null,
        Consumer: null,
        _currentValue: sharedNotPendingObject,
        _currentValue2: sharedNotPendingObject,
        _threadCount: 0
    }
    function FiberRootNode(
        containerInfo,
        tag,
        hydrate,
        identifierPrefix,
        onUncaughtError,
        onCaughtError,
        onRecoverableError,
        formState
    ) {
        this.tag = 1
        this.containerInfo = containerInfo
        this.pingCache = this.current = this.pendingChildren = null
        this.timeoutHandle = -1
        this.callbackNode =
            this.next =
            this.pendingContext =
            this.context =
            this.cancelPendingCommit =
                null
        this.callbackPriority = 0
        this.expirationTimes = createLaneMap(-1)
        this.entangledLanes =
            this.shellSuspendCounter =
            this.errorRecoveryDisabledLanes =
            this.expiredLanes =
            this.warmLanes =
            this.pingedLanes =
            this.suspendedLanes =
            this.pendingLanes =
                0
        this.entanglements = createLaneMap(0)
        this.hiddenUpdates = createLaneMap(null)
        this.identifierPrefix = identifierPrefix
        this.onUncaughtError = onUncaughtError
        this.onCaughtError = onCaughtError
        this.onRecoverableError = onRecoverableError
        this.pooledCache = null
        this.pooledCacheLanes = 0
        this.formState = formState
        this.incompleteTransitions = /* @__PURE__ */ new Map()
    }
    function createFiberRoot(
        containerInfo,
        tag,
        hydrate,
        initialChildren,
        hydrationCallbacks,
        isStrictMode,
        identifierPrefix,
        onUncaughtError,
        onCaughtError,
        onRecoverableError,
        transitionCallbacks,
        formState
    ) {
        containerInfo = new FiberRootNode(
            containerInfo,
            tag,
            hydrate,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            formState
        )
        tag = 1
        true === isStrictMode && (tag |= 24)
        isStrictMode = createFiberImplClass(3, null, null, tag)
        containerInfo.current = isStrictMode
        isStrictMode.stateNode = containerInfo
        tag = createCache3()
        tag.refCount++
        containerInfo.pooledCache = tag
        tag.refCount++
        isStrictMode.memoizedState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: tag
        }
        initializeUpdateQueue(isStrictMode)
        return containerInfo
    }
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject
        parentComponent = emptyContextObject
        return parentComponent
    }
    function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
        parentComponent = getContextForSubtree(parentComponent)
        null === container.context
            ? (container.context = parentComponent)
            : (container.pendingContext = parentComponent)
        container = createUpdate(lane)
        container.payload = { element }
        callback = void 0 === callback ? null : callback
        null !== callback && (container.callback = callback)
        element = enqueueUpdate(rootFiber, container, lane)
        null !== element &&
            (scheduleUpdateOnFiber(element, rootFiber, lane),
            entangleTransitions(element, rootFiber, lane))
    }
    function markRetryLaneImpl(fiber, retryLane) {
        fiber = fiber.memoizedState
        if (null !== fiber && null !== fiber.dehydrated) {
            var a2 = fiber.retryLane
            fiber.retryLane = 0 !== a2 && a2 < retryLane ? a2 : retryLane
        }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane)
        ;(fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane)
    }
    function attemptContinuousHydration(fiber) {
        if (13 === fiber.tag) {
            var root2 = enqueueConcurrentRenderForLane(fiber, 67108864)
            null !== root2 && scheduleUpdateOnFiber(root2, fiber, 67108864)
            markRetryLaneIfNotHydrated(fiber, 67108864)
        }
    }
    var _enabled = true
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T
        ReactSharedInternals.T = null
        var previousPriority = ReactDOMSharedInternals.p
        try {
            ;(ReactDOMSharedInternals.p = 2),
                dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent)
        } finally {
            ;(ReactDOMSharedInternals.p = previousPriority),
                (ReactSharedInternals.T = prevTransition)
        }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T
        ReactSharedInternals.T = null
        var previousPriority = ReactDOMSharedInternals.p
        try {
            ;(ReactDOMSharedInternals.p = 8),
                dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent)
        } finally {
            ;(ReactDOMSharedInternals.p = previousPriority),
                (ReactSharedInternals.T = prevTransition)
        }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (_enabled) {
            var blockedOn = findInstanceBlockingEvent(nativeEvent)
            if (null === blockedOn)
                dispatchEventForPluginEventSystem(
                    domEventName,
                    eventSystemFlags,
                    nativeEvent,
                    return_targetInst,
                    targetContainer
                ),
                    clearIfContinuousEvent(domEventName, nativeEvent)
            else if (
                queueIfContinuousEvent(
                    blockedOn,
                    domEventName,
                    eventSystemFlags,
                    targetContainer,
                    nativeEvent
                )
            )
                nativeEvent.stopPropagation()
            else if (
                (clearIfContinuousEvent(domEventName, nativeEvent),
                eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName))
            ) {
                for (; null !== blockedOn; ) {
                    var fiber = getInstanceFromNode(blockedOn)
                    if (null !== fiber)
                        switch (fiber.tag) {
                            case 3:
                                fiber = fiber.stateNode
                                if (fiber.current.memoizedState.isDehydrated) {
                                    var lanes = getHighestPriorityLanes(fiber.pendingLanes)
                                    if (0 !== lanes) {
                                        var root2 = fiber
                                        root2.pendingLanes |= 2
                                        for (root2.entangledLanes |= 2; lanes; ) {
                                            var lane = 1 << (31 - clz32(lanes))
                                            root2.entanglements[1] |= lane
                                            lanes &= ~lane
                                        }
                                        ensureRootIsScheduled(fiber)
                                        0 === (executionContext & 6) &&
                                            ((workInProgressRootRenderTargetTime = now() + 500),
                                            flushSyncWorkAcrossRoots_impl(0))
                                    }
                                }
                                break
                            case 13:
                                ;(root2 = enqueueConcurrentRenderForLane(fiber, 2)),
                                    null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2),
                                    flushSyncWork$1(),
                                    markRetryLaneIfNotHydrated(fiber, 2)
                        }
                    fiber = findInstanceBlockingEvent(nativeEvent)
                    null === fiber &&
                        dispatchEventForPluginEventSystem(
                            domEventName,
                            eventSystemFlags,
                            nativeEvent,
                            return_targetInst,
                            targetContainer
                        )
                    if (fiber === blockedOn) break
                    blockedOn = fiber
                }
                null !== blockedOn && nativeEvent.stopPropagation()
            } else
                dispatchEventForPluginEventSystem(
                    domEventName,
                    eventSystemFlags,
                    nativeEvent,
                    null,
                    targetContainer
                )
        }
    }
    function findInstanceBlockingEvent(nativeEvent) {
        nativeEvent = getEventTarget(nativeEvent)
        return findInstanceBlockingTarget(nativeEvent)
    }
    var return_targetInst = null
    function findInstanceBlockingTarget(targetNode) {
        return_targetInst = null
        targetNode = getClosestInstanceFromNode(targetNode)
        if (null !== targetNode) {
            var nearestMounted = getNearestMountedFiber(targetNode)
            if (null === nearestMounted) targetNode = null
            else {
                var tag = nearestMounted.tag
                if (13 === tag) {
                    targetNode = getSuspenseInstanceFromFiber(nearestMounted)
                    if (null !== targetNode) return targetNode
                    targetNode = null
                } else if (3 === tag) {
                    if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
                        return 3 === nearestMounted.tag
                            ? nearestMounted.stateNode.containerInfo
                            : null
                    targetNode = null
                } else nearestMounted !== targetNode && (targetNode = null)
            }
        }
        return_targetInst = targetNode
        return null
    }
    function getEventPriority(domEventName) {
        switch (domEventName) {
            case 'beforetoggle':
            case 'cancel':
            case 'click':
            case 'close':
            case 'contextmenu':
            case 'copy':
            case 'cut':
            case 'auxclick':
            case 'dblclick':
            case 'dragend':
            case 'dragstart':
            case 'drop':
            case 'focusin':
            case 'focusout':
            case 'input':
            case 'invalid':
            case 'keydown':
            case 'keypress':
            case 'keyup':
            case 'mousedown':
            case 'mouseup':
            case 'paste':
            case 'pause':
            case 'play':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointerup':
            case 'ratechange':
            case 'reset':
            case 'resize':
            case 'seeked':
            case 'submit':
            case 'toggle':
            case 'touchcancel':
            case 'touchend':
            case 'touchstart':
            case 'volumechange':
            case 'change':
            case 'selectionchange':
            case 'textInput':
            case 'compositionstart':
            case 'compositionend':
            case 'compositionupdate':
            case 'beforeblur':
            case 'afterblur':
            case 'beforeinput':
            case 'blur':
            case 'fullscreenchange':
            case 'focus':
            case 'hashchange':
            case 'popstate':
            case 'select':
            case 'selectstart':
                return 2
            case 'drag':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'mousemove':
            case 'mouseout':
            case 'mouseover':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'scroll':
            case 'touchmove':
            case 'wheel':
            case 'mouseenter':
            case 'mouseleave':
            case 'pointerenter':
            case 'pointerleave':
                return 8
            case 'message':
                switch (getCurrentPriorityLevel()) {
                    case ImmediatePriority:
                        return 2
                    case UserBlockingPriority:
                        return 8
                    case NormalPriority$1:
                    case LowPriority:
                        return 32
                    case IdlePriority:
                        return 268435456
                    default:
                        return 32
                }
            default:
                return 32
        }
    }
    var hasScheduledReplayAttempt = false,
        queuedFocus = null,
        queuedDrag = null,
        queuedMouse = null,
        queuedPointers = /* @__PURE__ */ new Map(),
        queuedPointerCaptures = /* @__PURE__ */ new Map(),
        queuedExplicitHydrationTargets = [],
        discreteReplayableEvents =
            'mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset'.split(
                ' '
            )
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
            case 'focusin':
            case 'focusout':
                queuedFocus = null
                break
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null
                break
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null
                break
            case 'pointerover':
            case 'pointerout':
                queuedPointers.delete(nativeEvent.pointerId)
                break
            case 'gotpointercapture':
            case 'lostpointercapture':
                queuedPointerCaptures.delete(nativeEvent.pointerId)
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(
        existingQueuedEvent,
        blockedOn,
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
    ) {
        if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
            return (
                (existingQueuedEvent = {
                    blockedOn,
                    domEventName,
                    eventSystemFlags,
                    nativeEvent,
                    targetContainers: [targetContainer]
                }),
                null !== blockedOn &&
                    ((blockedOn = getInstanceFromNode(blockedOn)),
                    null !== blockedOn && attemptContinuousHydration(blockedOn)),
                existingQueuedEvent
            )
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags
        blockedOn = existingQueuedEvent.targetContainers
        null !== targetContainer &&
            -1 === blockedOn.indexOf(targetContainer) &&
            blockedOn.push(targetContainer)
        return existingQueuedEvent
    }
    function queueIfContinuousEvent(
        blockedOn,
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
    ) {
        switch (domEventName) {
            case 'focusin':
                return (
                    (queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
                        queuedFocus,
                        blockedOn,
                        domEventName,
                        eventSystemFlags,
                        targetContainer,
                        nativeEvent
                    )),
                    true
                )
            case 'dragenter':
                return (
                    (queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
                        queuedDrag,
                        blockedOn,
                        domEventName,
                        eventSystemFlags,
                        targetContainer,
                        nativeEvent
                    )),
                    true
                )
            case 'mouseover':
                return (
                    (queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
                        queuedMouse,
                        blockedOn,
                        domEventName,
                        eventSystemFlags,
                        targetContainer,
                        nativeEvent
                    )),
                    true
                )
            case 'pointerover':
                var pointerId = nativeEvent.pointerId
                queuedPointers.set(
                    pointerId,
                    accumulateOrCreateContinuousQueuedReplayableEvent(
                        queuedPointers.get(pointerId) || null,
                        blockedOn,
                        domEventName,
                        eventSystemFlags,
                        targetContainer,
                        nativeEvent
                    )
                )
                return true
            case 'gotpointercapture':
                return (
                    (pointerId = nativeEvent.pointerId),
                    queuedPointerCaptures.set(
                        pointerId,
                        accumulateOrCreateContinuousQueuedReplayableEvent(
                            queuedPointerCaptures.get(pointerId) || null,
                            blockedOn,
                            domEventName,
                            eventSystemFlags,
                            targetContainer,
                            nativeEvent
                        )
                    ),
                    true
                )
        }
        return false
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target)
        if (null !== targetInst) {
            var nearestMounted = getNearestMountedFiber(targetInst)
            if (null !== nearestMounted) {
                if (((targetInst = nearestMounted.tag), 13 === targetInst)) {
                    if (
                        ((targetInst = getSuspenseInstanceFromFiber(nearestMounted)),
                        null !== targetInst)
                    ) {
                        queuedTarget.blockedOn = targetInst
                        runWithPriority(queuedTarget.priority, function () {
                            if (13 === nearestMounted.tag) {
                                var lane = requestUpdateLane()
                                lane = getBumpedLaneForHydrationByLane(lane)
                                var root2 = enqueueConcurrentRenderForLane(nearestMounted, lane)
                                null !== root2 && scheduleUpdateOnFiber(root2, nearestMounted, lane)
                                markRetryLaneIfNotHydrated(nearestMounted, lane)
                            }
                        })
                        return
                    }
                } else if (
                    3 === targetInst &&
                    nearestMounted.stateNode.current.memoizedState.isDehydrated
                ) {
                    queuedTarget.blockedOn =
                        3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null
                    return
                }
            }
        }
        queuedTarget.blockedOn = null
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (null !== queuedEvent.blockedOn) return false
        for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent)
            if (null === nextBlockedOn) {
                nextBlockedOn = queuedEvent.nativeEvent
                var nativeEventClone = new nextBlockedOn.constructor(
                    nextBlockedOn.type,
                    nextBlockedOn
                )
                currentReplayingEvent = nativeEventClone
                nextBlockedOn.target.dispatchEvent(nativeEventClone)
                currentReplayingEvent = null
            } else
                return (
                    (targetContainers = getInstanceFromNode(nextBlockedOn)),
                    null !== targetContainers && attemptContinuousHydration(targetContainers),
                    (queuedEvent.blockedOn = nextBlockedOn),
                    false
                )
            targetContainers.shift()
        }
        return true
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map2.delete(key)
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false
        null !== queuedFocus &&
            attemptReplayContinuousQueuedEvent(queuedFocus) &&
            (queuedFocus = null)
        null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null)
        null !== queuedMouse &&
            attemptReplayContinuousQueuedEvent(queuedMouse) &&
            (queuedMouse = null)
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap)
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap)
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked &&
            ((queuedEvent.blockedOn = null),
            hasScheduledReplayAttempt ||
                ((hasScheduledReplayAttempt = true),
                Scheduler.unstable_scheduleCallback(
                    Scheduler.unstable_NormalPriority,
                    replayUnblockedEvents
                )))
    }
    var lastScheduledReplayQueue = null
    function scheduleReplayQueueIfNeeded(formReplayingQueue) {
        lastScheduledReplayQueue !== formReplayingQueue &&
            ((lastScheduledReplayQueue = formReplayingQueue),
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, function () {
                lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null)
                for (var i = 0; i < formReplayingQueue.length; i += 3) {
                    var form = formReplayingQueue[i],
                        submitterOrAction = formReplayingQueue[i + 1],
                        formData = formReplayingQueue[i + 2]
                    if ('function' !== typeof submitterOrAction)
                        if (null === findInstanceBlockingTarget(submitterOrAction || form)) continue
                        else break
                    var formInst = getInstanceFromNode(form)
                    null !== formInst &&
                        (formReplayingQueue.splice(i, 3),
                        (i -= 3),
                        startHostTransition(
                            formInst,
                            {
                                pending: true,
                                data: formData,
                                method: form.method,
                                action: submitterOrAction
                            },
                            submitterOrAction,
                            formData
                        ))
                }
            }))
    }
    function retryIfBlockedOn(unblocked) {
        function unblock(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked)
        }
        null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked)
        null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked)
        null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked)
        queuedPointers.forEach(unblock)
        queuedPointerCaptures.forEach(unblock)
        for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
            var queuedTarget = queuedExplicitHydrationTargets[i]
            queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null)
        }
        for (
            ;
            0 < queuedExplicitHydrationTargets.length &&
            ((i = queuedExplicitHydrationTargets[0]), null === i.blockedOn);

        )
            attemptExplicitHydrationTarget(i),
                null === i.blockedOn && queuedExplicitHydrationTargets.shift()
        i = (unblocked.ownerDocument || unblocked).$$reactFormReplay
        if (null != i)
            for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
                var form = i[queuedTarget],
                    submitterOrAction = i[queuedTarget + 1],
                    formProps = form[internalPropsKey] || null
                if ('function' === typeof submitterOrAction)
                    formProps || scheduleReplayQueueIfNeeded(i)
                else if (formProps) {
                    var action = null
                    if (submitterOrAction && submitterOrAction.hasAttribute('formAction'))
                        if (
                            ((form = submitterOrAction),
                            (formProps = submitterOrAction[internalPropsKey] || null))
                        )
                            action = formProps.formAction
                        else {
                            if (null !== findInstanceBlockingTarget(form)) continue
                        }
                    else action = formProps.action
                    'function' === typeof action
                        ? (i[queuedTarget + 1] = action)
                        : (i.splice(queuedTarget, 3), (queuedTarget -= 3))
                    scheduleReplayQueueIfNeeded(i)
                }
            }
    }
    function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {
        var root2 = this._internalRoot
        if (null === root2) throw Error(formatProdErrorMessage(409))
        var current = root2.current,
            lane = requestUpdateLane()
        updateContainerImpl(current, lane, children, root2, null, null)
    }
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {
        var root2 = this._internalRoot
        if (null !== root2) {
            this._internalRoot = null
            var container = root2.containerInfo
            updateContainerImpl(root2.current, 2, null, root2, null, null)
            flushSyncWork$1()
            container[internalContainerInstanceKey] = null
        }
    }
    function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) {
        if (target) {
            var updatePriority = resolveUpdatePriority()
            target = { blockedOn: null, target, priority: updatePriority }
            for (
                var i = 0;
                i < queuedExplicitHydrationTargets.length &&
                0 !== updatePriority &&
                updatePriority < queuedExplicitHydrationTargets[i].priority;
                i++
            );
            queuedExplicitHydrationTargets.splice(i, 0, target)
            0 === i && attemptExplicitHydrationTarget(target)
        }
    }
    var isomorphicReactPackageVersion$jscomp$inline_1785 = React2.version
    if ('19.1.0' !== isomorphicReactPackageVersion$jscomp$inline_1785)
        throw Error(
            formatProdErrorMessage(527, isomorphicReactPackageVersion$jscomp$inline_1785, '19.1.0')
        )
    ReactDOMSharedInternals.findDOMNode = function (componentOrElement) {
        var fiber = componentOrElement._reactInternals
        if (void 0 === fiber) {
            if ('function' === typeof componentOrElement.render)
                throw Error(formatProdErrorMessage(188))
            componentOrElement = Object.keys(componentOrElement).join(',')
            throw Error(formatProdErrorMessage(268, componentOrElement))
        }
        componentOrElement = findCurrentFiberUsingSlowPath(fiber)
        componentOrElement =
            null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null
        componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode
        return componentOrElement
    }
    var internals$jscomp$inline_2256 = {
        bundleType: 0,
        version: '19.1.0',
        rendererPackageName: 'react-dom',
        currentDispatcherRef: ReactSharedInternals,
        reconcilerVersion: '19.1.0'
    }
    if ('undefined' !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        var hook$jscomp$inline_2257 = __REACT_DEVTOOLS_GLOBAL_HOOK__
        if (!hook$jscomp$inline_2257.isDisabled && hook$jscomp$inline_2257.supportsFiber)
            try {
                ;(rendererID = hook$jscomp$inline_2257.inject(internals$jscomp$inline_2256)),
                    (injectedHook = hook$jscomp$inline_2257)
            } catch (err) {}
    }
    reactDomClient_production.createRoot = function (container, options3) {
        if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299))
        var isStrictMode = false,
            identifierPrefix = '',
            onUncaughtError = defaultOnUncaughtError,
            onCaughtError = defaultOnCaughtError,
            onRecoverableError = defaultOnRecoverableError,
            transitionCallbacks = null
        null !== options3 &&
            void 0 !== options3 &&
            (true === options3.unstable_strictMode && (isStrictMode = true),
            void 0 !== options3.identifierPrefix && (identifierPrefix = options3.identifierPrefix),
            void 0 !== options3.onUncaughtError && (onUncaughtError = options3.onUncaughtError),
            void 0 !== options3.onCaughtError && (onCaughtError = options3.onCaughtError),
            void 0 !== options3.onRecoverableError &&
                (onRecoverableError = options3.onRecoverableError),
            void 0 !== options3.unstable_transitionCallbacks &&
                (transitionCallbacks = options3.unstable_transitionCallbacks))
        options3 = createFiberRoot(
            container,
            1,
            false,
            null,
            null,
            isStrictMode,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            transitionCallbacks,
            null
        )
        container[internalContainerInstanceKey] = options3.current
        listenToAllSupportedEvents(container)
        return new ReactDOMRoot(options3)
    }
    reactDomClient_production.hydrateRoot = function (container, initialChildren, options3) {
        if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299))
        var isStrictMode = false,
            identifierPrefix = '',
            onUncaughtError = defaultOnUncaughtError,
            onCaughtError = defaultOnCaughtError,
            onRecoverableError = defaultOnRecoverableError,
            transitionCallbacks = null,
            formState = null
        null !== options3 &&
            void 0 !== options3 &&
            (true === options3.unstable_strictMode && (isStrictMode = true),
            void 0 !== options3.identifierPrefix && (identifierPrefix = options3.identifierPrefix),
            void 0 !== options3.onUncaughtError && (onUncaughtError = options3.onUncaughtError),
            void 0 !== options3.onCaughtError && (onCaughtError = options3.onCaughtError),
            void 0 !== options3.onRecoverableError &&
                (onRecoverableError = options3.onRecoverableError),
            void 0 !== options3.unstable_transitionCallbacks &&
                (transitionCallbacks = options3.unstable_transitionCallbacks),
            void 0 !== options3.formState && (formState = options3.formState))
        initialChildren = createFiberRoot(
            container,
            1,
            true,
            initialChildren,
            null != options3 ? options3 : null,
            isStrictMode,
            identifierPrefix,
            onUncaughtError,
            onCaughtError,
            onRecoverableError,
            transitionCallbacks,
            formState
        )
        initialChildren.context = getContextForSubtree(null)
        options3 = initialChildren.current
        isStrictMode = requestUpdateLane()
        isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode)
        identifierPrefix = createUpdate(isStrictMode)
        identifierPrefix.callback = null
        enqueueUpdate(options3, identifierPrefix, isStrictMode)
        options3 = isStrictMode
        initialChildren.current.lanes = options3
        markRootUpdated$1(initialChildren, options3)
        ensureRootIsScheduled(initialChildren)
        container[internalContainerInstanceKey] = initialChildren.current
        listenToAllSupportedEvents(container)
        return new ReactDOMHydrationRoot(initialChildren)
    }
    reactDomClient_production.version = '19.1.0'
    return reactDomClient_production
}
var hasRequiredClient
function requireClient() {
    if (hasRequiredClient) return client.exports
    hasRequiredClient = 1
    function checkDCE() {
        if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
        ) {
            return
        }
        try {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE)
        } catch (err) {
            console.error(err)
        }
    }
    {
        checkDCE()
        client.exports = requireReactDomClient_production()
    }
    return client.exports
}
var clientExports = requireClient()
const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(clientExports)
var dist = {}
var hasRequiredDist
function requireDist() {
    if (hasRequiredDist) return dist
    hasRequiredDist = 1
    Object.defineProperty(dist, '__esModule', { value: true })
    dist.parse = parse2
    dist.serialize = serialize2
    const cookieNameRegExp = /^[\u0021-\u003A\u003C\u003E-\u007E]+$/
    const cookieValueRegExp = /^[\u0021-\u003A\u003C-\u007E]*$/
    const domainValueRegExp =
        /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i
    const pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/
    const __toString = Object.prototype.toString
    const NullObject = /* @__PURE__ */ (() => {
        const C = function () {}
        C.prototype = /* @__PURE__ */ Object.create(null)
        return C
    })()
    function parse2(str, options2) {
        const obj = new NullObject()
        const len = str.length
        if (len < 2) return obj
        const dec = options2?.decode || decode
        let index2 = 0
        do {
            const eqIdx = str.indexOf('=', index2)
            if (eqIdx === -1) break
            const colonIdx = str.indexOf(';', index2)
            const endIdx = colonIdx === -1 ? len : colonIdx
            if (eqIdx > endIdx) {
                index2 = str.lastIndexOf(';', eqIdx - 1) + 1
                continue
            }
            const keyStartIdx = startIndex(str, index2, eqIdx)
            const keyEndIdx = endIndex(str, eqIdx, keyStartIdx)
            const key = str.slice(keyStartIdx, keyEndIdx)
            if (obj[key] === void 0) {
                let valStartIdx = startIndex(str, eqIdx + 1, endIdx)
                let valEndIdx = endIndex(str, endIdx, valStartIdx)
                const value = dec(str.slice(valStartIdx, valEndIdx))
                obj[key] = value
            }
            index2 = endIdx + 1
        } while (index2 < len)
        return obj
    }
    function startIndex(str, index2, max2) {
        do {
            const code = str.charCodeAt(index2)
            if (code !== 32 && code !== 9) return index2
        } while (++index2 < max2)
        return max2
    }
    function endIndex(str, index2, min2) {
        while (index2 > min2) {
            const code = str.charCodeAt(--index2)
            if (code !== 32 && code !== 9) return index2 + 1
        }
        return min2
    }
    function serialize2(name, val, options2) {
        const enc = options2?.encode || encodeURIComponent
        if (!cookieNameRegExp.test(name)) {
            throw new TypeError(`argument name is invalid: ${name}`)
        }
        const value = enc(val)
        if (!cookieValueRegExp.test(value)) {
            throw new TypeError(`argument val is invalid: ${val}`)
        }
        let str = name + '=' + value
        if (!options2) return str
        if (options2.maxAge !== void 0) {
            if (!Number.isInteger(options2.maxAge)) {
                throw new TypeError(`option maxAge is invalid: ${options2.maxAge}`)
            }
            str += '; Max-Age=' + options2.maxAge
        }
        if (options2.domain) {
            if (!domainValueRegExp.test(options2.domain)) {
                throw new TypeError(`option domain is invalid: ${options2.domain}`)
            }
            str += '; Domain=' + options2.domain
        }
        if (options2.path) {
            if (!pathValueRegExp.test(options2.path)) {
                throw new TypeError(`option path is invalid: ${options2.path}`)
            }
            str += '; Path=' + options2.path
        }
        if (options2.expires) {
            if (!isDate2(options2.expires) || !Number.isFinite(options2.expires.valueOf())) {
                throw new TypeError(`option expires is invalid: ${options2.expires}`)
            }
            str += '; Expires=' + options2.expires.toUTCString()
        }
        if (options2.httpOnly) {
            str += '; HttpOnly'
        }
        if (options2.secure) {
            str += '; Secure'
        }
        if (options2.partitioned) {
            str += '; Partitioned'
        }
        if (options2.priority) {
            const priority =
                typeof options2.priority === 'string' ? options2.priority.toLowerCase() : void 0
            switch (priority) {
                case 'low':
                    str += '; Priority=Low'
                    break
                case 'medium':
                    str += '; Priority=Medium'
                    break
                case 'high':
                    str += '; Priority=High'
                    break
                default:
                    throw new TypeError(`option priority is invalid: ${options2.priority}`)
            }
        }
        if (options2.sameSite) {
            const sameSite =
                typeof options2.sameSite === 'string'
                    ? options2.sameSite.toLowerCase()
                    : options2.sameSite
            switch (sameSite) {
                case true:
                case 'strict':
                    str += '; SameSite=Strict'
                    break
                case 'lax':
                    str += '; SameSite=Lax'
                    break
                case 'none':
                    str += '; SameSite=None'
                    break
                default:
                    throw new TypeError(`option sameSite is invalid: ${options2.sameSite}`)
            }
        }
        return str
    }
    function decode(str) {
        if (str.indexOf('%') === -1) return str
        try {
            return decodeURIComponent(str)
        } catch (e) {
            return str
        }
    }
    function isDate2(val) {
        return __toString.call(val) === '[object Date]'
    }
    return dist
}
requireDist()
var PopStateEventType = 'popstate'
function createHashHistory(options2 = {}) {
    function createHashLocation(window2, globalHistory) {
        let {
            pathname = '/',
            search = '',
            hash: hash2 = ''
        } = parsePath(window2.location.hash.substring(1))
        if (!pathname.startsWith('/') && !pathname.startsWith('.')) {
            pathname = '/' + pathname
        }
        return createLocation(
            '',
            { pathname, search, hash: hash2 },
            // state defaults to `null` because `window.history.state` does
            (globalHistory.state && globalHistory.state.usr) || null,
            (globalHistory.state && globalHistory.state.key) || 'default'
        )
    }
    function createHashHref(window2, to) {
        let base = window2.document.querySelector('base')
        let href2 = ''
        if (base && base.getAttribute('href')) {
            let url = window2.location.href
            let hashIndex = url.indexOf('#')
            href2 = hashIndex === -1 ? url : url.slice(0, hashIndex)
        }
        return href2 + '#' + (typeof to === 'string' ? to : createPath(to))
    }
    function validateHashLocation(location, to) {
        warning(
            location.pathname.charAt(0) === '/',
            `relative pathnames are not supported in hash history.push(${JSON.stringify(to)})`
        )
    }
    return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options2)
}
function invariant$1(value, message) {
    if (value === false || value === null || typeof value === 'undefined') {
        throw new Error(message)
    }
}
function warning(cond, message) {
    if (!cond) {
        if (typeof console !== 'undefined') console.warn(message)
        try {
            throw new Error(message)
        } catch (e) {}
    }
}
function createKey() {
    return Math.random().toString(36).substring(2, 10)
}
function getHistoryState(location, index2) {
    return {
        usr: location.state,
        key: location.key,
        idx: index2
    }
}
function createLocation(current, to, state = null, key) {
    let location = {
        pathname: typeof current === 'string' ? current : current.pathname,
        search: '',
        hash: '',
        ...(typeof to === 'string' ? parsePath(to) : to),
        state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: (to && to.key) || key || createKey()
    }
    return location
}
function createPath({ pathname = '/', search = '', hash: hash2 = '' }) {
    if (search && search !== '?') pathname += search.charAt(0) === '?' ? search : '?' + search
    if (hash2 && hash2 !== '#') pathname += hash2.charAt(0) === '#' ? hash2 : '#' + hash2
    return pathname
}
function parsePath(path) {
    let parsedPath = {}
    if (path) {
        let hashIndex = path.indexOf('#')
        if (hashIndex >= 0) {
            parsedPath.hash = path.substring(hashIndex)
            path = path.substring(0, hashIndex)
        }
        let searchIndex = path.indexOf('?')
        if (searchIndex >= 0) {
            parsedPath.search = path.substring(searchIndex)
            path = path.substring(0, searchIndex)
        }
        if (path) {
            parsedPath.pathname = path
        }
    }
    return parsedPath
}
function getUrlBasedHistory(getLocation, createHref2, validateLocation, options2 = {}) {
    let { window: window2 = document.defaultView, v5Compat = false } = options2
    let globalHistory = window2.history
    let action = 'POP'
    let listener = null
    let index2 = getIndex()
    if (index2 == null) {
        index2 = 0
        globalHistory.replaceState({ ...globalHistory.state, idx: index2 }, '')
    }
    function getIndex() {
        let state = globalHistory.state || { idx: null }
        return state.idx
    }
    function handlePop() {
        action = 'POP'
        let nextIndex = getIndex()
        let delta = nextIndex == null ? null : nextIndex - index2
        index2 = nextIndex
        if (listener) {
            listener({ action, location: history.location, delta })
        }
    }
    function push(to, state) {
        action = 'PUSH'
        let location = createLocation(history.location, to, state)
        if (validateLocation) validateLocation(location, to)
        index2 = getIndex() + 1
        let historyState = getHistoryState(location, index2)
        let url = history.createHref(location)
        try {
            globalHistory.pushState(historyState, '', url)
        } catch (error) {
            if (error instanceof DOMException && error.name === 'DataCloneError') {
                throw error
            }
            window2.location.assign(url)
        }
        if (v5Compat && listener) {
            listener({ action, location: history.location, delta: 1 })
        }
    }
    function replace2(to, state) {
        action = 'REPLACE'
        let location = createLocation(history.location, to, state)
        if (validateLocation) validateLocation(location, to)
        index2 = getIndex()
        let historyState = getHistoryState(location, index2)
        let url = history.createHref(location)
        globalHistory.replaceState(historyState, '', url)
        if (v5Compat && listener) {
            listener({ action, location: history.location, delta: 0 })
        }
    }
    function createURL(to) {
        return createBrowserURLImpl(to)
    }
    let history = {
        get action() {
            return action
        },
        get location() {
            return getLocation(window2, globalHistory)
        },
        listen(fn) {
            if (listener) {
                throw new Error('A history only accepts one active listener')
            }
            window2.addEventListener(PopStateEventType, handlePop)
            listener = fn
            return () => {
                window2.removeEventListener(PopStateEventType, handlePop)
                listener = null
            }
        },
        createHref(to) {
            return createHref2(window2, to)
        },
        createURL,
        encodeLocation(to) {
            let url = createURL(to)
            return {
                pathname: url.pathname,
                search: url.search,
                hash: url.hash
            }
        },
        push,
        replace: replace2,
        go(n) {
            return globalHistory.go(n)
        }
    }
    return history
}
function createBrowserURLImpl(to, isAbsolute = false) {
    let base = 'http://localhost'
    if (typeof window !== 'undefined') {
        base = window.location.origin !== 'null' ? window.location.origin : window.location.href
    }
    invariant$1(base, 'No window.location.(origin|href) available to create URL')
    let href2 = typeof to === 'string' ? to : createPath(to)
    href2 = href2.replace(/ $/, '%20')
    if (!isAbsolute && href2.startsWith('//')) {
        href2 = base + href2
    }
    return new URL(href2, base)
}
function matchRoutes(routes, locationArg, basename = '/') {
    return matchRoutesImpl(routes, locationArg, basename, false)
}
function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
    let location = typeof locationArg === 'string' ? parsePath(locationArg) : locationArg
    let pathname = stripBasename(location.pathname || '/', basename)
    if (pathname == null) {
        return null
    }
    let branches = flattenRoutes(routes)
    rankRouteBranches(branches)
    let matches = null
    for (let i = 0; matches == null && i < branches.length; ++i) {
        let decoded = decodePath(pathname)
        matches = matchRouteBranch(branches[i], decoded, allowPartial)
    }
    return matches
}
function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = '') {
    let flattenRoute = (route, index2, relativePath) => {
        let meta = {
            relativePath: relativePath === void 0 ? route.path || '' : relativePath,
            caseSensitive: route.caseSensitive === true,
            childrenIndex: index2,
            route
        }
        if (meta.relativePath.startsWith('/')) {
            invariant$1(
                meta.relativePath.startsWith(parentPath),
                `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
            )
            meta.relativePath = meta.relativePath.slice(parentPath.length)
        }
        let path = joinPaths([parentPath, meta.relativePath])
        let routesMeta = parentsMeta.concat(meta)
        if (route.children && route.children.length > 0) {
            invariant$1(
                // Our types know better, but runtime JS may not!
                // @ts-expect-error
                route.index !== true,
                `Index routes must not have child routes. Please remove all child routes from route path "${path}".`
            )
            flattenRoutes(route.children, branches, routesMeta, path)
        }
        if (route.path == null && !route.index) {
            return
        }
        branches.push({
            path,
            score: computeScore(path, route.index),
            routesMeta
        })
    }
    routes.forEach((route, index2) => {
        if (route.path === '' || !route.path?.includes('?')) {
            flattenRoute(route, index2)
        } else {
            for (let exploded of explodeOptionalSegments(route.path)) {
                flattenRoute(route, index2, exploded)
            }
        }
    })
    return branches
}
function explodeOptionalSegments(path) {
    let segments = path.split('/')
    if (segments.length === 0) return []
    let [first2, ...rest] = segments
    let isOptional = first2.endsWith('?')
    let required = first2.replace(/\?$/, '')
    if (rest.length === 0) {
        return isOptional ? [required, ''] : [required]
    }
    let restExploded = explodeOptionalSegments(rest.join('/'))
    let result = []
    result.push(
        ...restExploded.map((subpath) =>
            subpath === '' ? required : [required, subpath].join('/')
        )
    )
    if (isOptional) {
        result.push(...restExploded)
    }
    return result.map((exploded) => (path.startsWith('/') && exploded === '' ? '/' : exploded))
}
function rankRouteBranches(branches) {
    branches.sort((a2, b) =>
        a2.score !== b.score
            ? b.score - a2.score
            : compareIndexes(
                  a2.routesMeta.map((meta) => meta.childrenIndex),
                  b.routesMeta.map((meta) => meta.childrenIndex)
              )
    )
}
var paramRe = /^:[\w-]+$/
var dynamicSegmentValue = 3
var indexRouteValue = 2
var emptySegmentValue = 1
var staticSegmentValue = 10
var splatPenalty = -2
var isSplat = (s2) => s2 === '*'
function computeScore(path, index2) {
    let segments = path.split('/')
    let initialScore = segments.length
    if (segments.some(isSplat)) {
        initialScore += splatPenalty
    }
    if (index2) {
        initialScore += indexRouteValue
    }
    return segments
        .filter((s2) => !isSplat(s2))
        .reduce(
            (score, segment) =>
                score +
                (paramRe.test(segment)
                    ? dynamicSegmentValue
                    : segment === ''
                      ? emptySegmentValue
                      : staticSegmentValue),
            initialScore
        )
}
function compareIndexes(a2, b) {
    let siblings = a2.length === b.length && a2.slice(0, -1).every((n, i) => n === b[i])
    return siblings
        ? // If two routes are siblings, we should try to match the earlier sibling
          // first. This allows people to have fine-grained control over the matching
          // behavior by simply putting routes with identical paths in the order they
          // want them tried.
          a2[a2.length - 1] - b[b.length - 1]
        : // Otherwise, it doesn't really make sense to rank non-siblings by index,
          // so they sort equally.
          0
}
function matchRouteBranch(branch, pathname, allowPartial = false) {
    let { routesMeta } = branch
    let matchedParams = {}
    let matchedPathname = '/'
    let matches = []
    for (let i = 0; i < routesMeta.length; ++i) {
        let meta = routesMeta[i]
        let end = i === routesMeta.length - 1
        let remainingPathname =
            matchedPathname === '/' ? pathname : pathname.slice(matchedPathname.length) || '/'
        let match2 = matchPath(
            { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },
            remainingPathname
        )
        let route = meta.route
        if (!match2 && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
            match2 = matchPath(
                {
                    path: meta.relativePath,
                    caseSensitive: meta.caseSensitive,
                    end: false
                },
                remainingPathname
            )
        }
        if (!match2) {
            return null
        }
        Object.assign(matchedParams, match2.params)
        matches.push({
            // TODO: Can this as be avoided?
            params: matchedParams,
            pathname: joinPaths([matchedPathname, match2.pathname]),
            pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
            route
        })
        if (match2.pathnameBase !== '/') {
            matchedPathname = joinPaths([matchedPathname, match2.pathnameBase])
        }
    }
    return matches
}
function matchPath(pattern, pathname) {
    if (typeof pattern === 'string') {
        pattern = { path: pattern, caseSensitive: false, end: true }
    }
    let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end)
    let match2 = pathname.match(matcher)
    if (!match2) return null
    let matchedPathname = match2[0]
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, '$1')
    let captureGroups = match2.slice(1)
    let params = compiledParams.reduce((memo2, { paramName, isOptional }, index2) => {
        if (paramName === '*') {
            let splatValue = captureGroups[index2] || ''
            pathnameBase = matchedPathname
                .slice(0, matchedPathname.length - splatValue.length)
                .replace(/(.)\/+$/, '$1')
        }
        const value = captureGroups[index2]
        if (isOptional && !value) {
            memo2[paramName] = void 0
        } else {
            memo2[paramName] = (value || '').replace(/%2F/g, '/')
        }
        return memo2
    }, {})
    return {
        params,
        pathname: matchedPathname,
        pathnameBase,
        pattern
    }
}
function compilePath(path, caseSensitive = false, end = true) {
    warning(
        path === '*' || !path.endsWith('*') || path.endsWith('/*'),
        `Route path "${path}" will be treated as if it were "${path.replace(/\*$/, '/*')}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path.replace(/\*$/, '/*')}".`
    )
    let params = []
    let regexpSource =
        '^' +
        path
            .replace(/\/*\*?$/, '')
            .replace(/^\/*/, '/')
            .replace(/[\\.*+^${}|()[\]]/g, '\\$&')
            .replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
                params.push({ paramName, isOptional: isOptional != null })
                return isOptional ? '/?([^\\/]+)?' : '/([^\\/]+)'
            })
    if (path.endsWith('*')) {
        params.push({ paramName: '*' })
        regexpSource += path === '*' || path === '/*' ? '(.*)$' : '(?:\\/(.+)|\\/*)$'
    } else if (end) {
        regexpSource += '\\/*$'
    } else if (path !== '' && path !== '/') {
        regexpSource += '(?:(?=\\/|$))'
    } else;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : 'i')
    return [matcher, params]
}
function decodePath(value) {
    try {
        return value
            .split('/')
            .map((v) => decodeURIComponent(v).replace(/\//g, '%2F'))
            .join('/')
    } catch (error) {
        warning(
            false,
            `The URL path "${value}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`
        )
        return value
    }
}
function stripBasename(pathname, basename) {
    if (basename === '/') return pathname
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
        return null
    }
    let startIndex = basename.endsWith('/') ? basename.length - 1 : basename.length
    let nextChar = pathname.charAt(startIndex)
    if (nextChar && nextChar !== '/') {
        return null
    }
    return pathname.slice(startIndex) || '/'
}
function resolvePath(to, fromPathname = '/') {
    let {
        pathname: toPathname,
        search = '',
        hash: hash2 = ''
    } = typeof to === 'string' ? parsePath(to) : to
    let pathname = toPathname
        ? toPathname.startsWith('/')
            ? toPathname
            : resolvePathname(toPathname, fromPathname)
        : fromPathname
    return {
        pathname,
        search: normalizeSearch(search),
        hash: normalizeHash(hash2)
    }
}
function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, '').split('/')
    let relativeSegments = relativePath.split('/')
    relativeSegments.forEach((segment) => {
        if (segment === '..') {
            if (segments.length > 1) segments.pop()
        } else if (segment !== '.') {
            segments.push(segment)
        }
    })
    return segments.length > 1 ? segments.join('/') : '/'
}
function getInvalidPathError(char2, field, dest, path) {
    return `Cannot include a '${char2}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
        path
    )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`
}
function getPathContributingMatches(matches) {
    return matches.filter(
        (match2, index2) => index2 === 0 || (match2.route.path && match2.route.path.length > 0)
    )
}
function getResolveToMatches(matches) {
    let pathMatches = getPathContributingMatches(matches)
    return pathMatches.map((match2, idx) =>
        idx === pathMatches.length - 1 ? match2.pathname : match2.pathnameBase
    )
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
    let to
    if (typeof toArg === 'string') {
        to = parsePath(toArg)
    } else {
        to = { ...toArg }
        invariant$1(
            !to.pathname || !to.pathname.includes('?'),
            getInvalidPathError('?', 'pathname', 'search', to)
        )
        invariant$1(
            !to.pathname || !to.pathname.includes('#'),
            getInvalidPathError('#', 'pathname', 'hash', to)
        )
        invariant$1(
            !to.search || !to.search.includes('#'),
            getInvalidPathError('#', 'search', 'hash', to)
        )
    }
    let isEmptyPath = toArg === '' || to.pathname === ''
    let toPathname = isEmptyPath ? '/' : to.pathname
    let from2
    if (toPathname == null) {
        from2 = locationPathname
    } else {
        let routePathnameIndex = routePathnames.length - 1
        if (!isPathRelative && toPathname.startsWith('..')) {
            let toSegments = toPathname.split('/')
            while (toSegments[0] === '..') {
                toSegments.shift()
                routePathnameIndex -= 1
            }
            to.pathname = toSegments.join('/')
        }
        from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : '/'
    }
    let path = resolvePath(to, from2)
    let hasExplicitTrailingSlash = toPathname && toPathname !== '/' && toPathname.endsWith('/')
    let hasCurrentTrailingSlash =
        (isEmptyPath || toPathname === '.') && locationPathname.endsWith('/')
    if (!path.pathname.endsWith('/') && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
        path.pathname += '/'
    }
    return path
}
var joinPaths = (paths) => paths.join('/').replace(/\/\/+/g, '/')
var normalizePathname = (pathname) => pathname.replace(/\/+$/, '').replace(/^\/*/, '/')
var normalizeSearch = (search) =>
    !search || search === '?' ? '' : search.startsWith('?') ? search : '?' + search
var normalizeHash = (hash2) =>
    !hash2 || hash2 === '#' ? '' : hash2.startsWith('#') ? hash2 : '#' + hash2
function isRouteErrorResponse(error) {
    return (
        error != null &&
        typeof error.status === 'number' &&
        typeof error.statusText === 'string' &&
        typeof error.internal === 'boolean' &&
        'data' in error
    )
}
var validMutationMethodsArr = ['POST', 'PUT', 'PATCH', 'DELETE']
new Set(validMutationMethodsArr)
var validRequestMethodsArr = ['GET', ...validMutationMethodsArr]
new Set(validRequestMethodsArr)
var DataRouterContext = reactExports.createContext(null)
DataRouterContext.displayName = 'DataRouter'
var DataRouterStateContext = reactExports.createContext(null)
DataRouterStateContext.displayName = 'DataRouterState'
var ViewTransitionContext = reactExports.createContext({
    isTransitioning: false
})
ViewTransitionContext.displayName = 'ViewTransition'
var FetchersContext = reactExports.createContext(/* @__PURE__ */ new Map())
FetchersContext.displayName = 'Fetchers'
var AwaitContext = reactExports.createContext(null)
AwaitContext.displayName = 'Await'
var NavigationContext = reactExports.createContext(null)
NavigationContext.displayName = 'Navigation'
var LocationContext = reactExports.createContext(null)
LocationContext.displayName = 'Location'
var RouteContext = reactExports.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
})
RouteContext.displayName = 'Route'
var RouteErrorContext = reactExports.createContext(null)
RouteErrorContext.displayName = 'RouteError'
function useHref(to, { relative } = {}) {
    invariant$1(
        useInRouterContext(),
        // TODO: This error is probably because they somehow have 2 versions of the
        // router loaded. We can help them understand how to avoid that.
        `useHref() may be used only in the context of a <Router> component.`
    )
    let { basename, navigator: navigator2 } = reactExports.useContext(NavigationContext)
    let { hash: hash2, pathname, search } = useResolvedPath(to, { relative })
    let joinedPathname = pathname
    if (basename !== '/') {
        joinedPathname = pathname === '/' ? basename : joinPaths([basename, pathname])
    }
    return navigator2.createHref({ pathname: joinedPathname, search, hash: hash2 })
}
function useInRouterContext() {
    return reactExports.useContext(LocationContext) != null
}
function useLocation() {
    invariant$1(
        useInRouterContext(),
        // TODO: This error is probably because they somehow have 2 versions of the
        // router loaded. We can help them understand how to avoid that.
        `useLocation() may be used only in the context of a <Router> component.`
    )
    return reactExports.useContext(LocationContext).location
}
var navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`
function useIsomorphicLayoutEffect(cb) {
    let isStatic = reactExports.useContext(NavigationContext).static
    if (!isStatic) {
        reactExports.useLayoutEffect(cb)
    }
}
function useNavigate() {
    let { isDataRoute } = reactExports.useContext(RouteContext)
    return isDataRoute ? useNavigateStable() : useNavigateUnstable()
}
function useNavigateUnstable() {
    invariant$1(
        useInRouterContext(),
        // TODO: This error is probably because they somehow have 2 versions of the
        // router loaded. We can help them understand how to avoid that.
        `useNavigate() may be used only in the context of a <Router> component.`
    )
    let dataRouterContext = reactExports.useContext(DataRouterContext)
    let { basename, navigator: navigator2 } = reactExports.useContext(NavigationContext)
    let { matches } = reactExports.useContext(RouteContext)
    let { pathname: locationPathname } = useLocation()
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches))
    let activeRef = reactExports.useRef(false)
    useIsomorphicLayoutEffect(() => {
        activeRef.current = true
    })
    let navigate = reactExports.useCallback(
        (to, options2 = {}) => {
            warning(activeRef.current, navigateEffectWarning)
            if (!activeRef.current) return
            if (typeof to === 'number') {
                navigator2.go(to)
                return
            }
            let path = resolveTo(
                to,
                JSON.parse(routePathnamesJson),
                locationPathname,
                options2.relative === 'path'
            )
            if (dataRouterContext == null && basename !== '/') {
                path.pathname =
                    path.pathname === '/' ? basename : joinPaths([basename, path.pathname])
            }
            ;(!!options2.replace ? navigator2.replace : navigator2.push)(
                path,
                options2.state,
                options2
            )
        },
        [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]
    )
    return navigate
}
var OutletContext = reactExports.createContext(null)
function useOutlet(context) {
    let outlet = reactExports.useContext(RouteContext).outlet
    if (outlet) {
        return /* @__PURE__ */ reactExports.createElement(
            OutletContext.Provider,
            { value: context },
            outlet
        )
    }
    return outlet
}
function useResolvedPath(to, { relative } = {}) {
    let { matches } = reactExports.useContext(RouteContext)
    let { pathname: locationPathname } = useLocation()
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches))
    return reactExports.useMemo(
        () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === 'path'),
        [to, routePathnamesJson, locationPathname, relative]
    )
}
function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg)
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
    invariant$1(
        useInRouterContext(),
        // TODO: This error is probably because they somehow have 2 versions of the
        // router loaded. We can help them understand how to avoid that.
        `useRoutes() may be used only in the context of a <Router> component.`
    )
    let { navigator: navigator2, static: isStatic } = reactExports.useContext(NavigationContext)
    let { matches: parentMatches } = reactExports.useContext(RouteContext)
    let routeMatch = parentMatches[parentMatches.length - 1]
    let parentParams = routeMatch ? routeMatch.params : {}
    let parentPathname = routeMatch ? routeMatch.pathname : '/'
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : '/'
    let parentRoute = routeMatch && routeMatch.route
    {
        let parentPath = (parentRoute && parentRoute.path) || ''
        warningOnce(
            parentPathname,
            !parentRoute || parentPath.endsWith('*') || parentPath.endsWith('*?'),
            `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === '/' ? '*' : `${parentPath}/*`}">.`
        )
    }
    let locationFromContext = useLocation()
    let location
    if (locationArg) {
        let parsedLocationArg =
            typeof locationArg === 'string' ? parsePath(locationArg) : locationArg
        invariant$1(
            parentPathnameBase === '/' ||
                parsedLocationArg.pathname?.startsWith(parentPathnameBase),
            `When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${parentPathnameBase}" but pathname "${parsedLocationArg.pathname}" was given in the \`location\` prop.`
        )
        location = parsedLocationArg
    } else {
        location = locationFromContext
    }
    let pathname = location.pathname || '/'
    let remainingPathname = pathname
    if (parentPathnameBase !== '/') {
        let parentSegments = parentPathnameBase.replace(/^\//, '').split('/')
        let segments = pathname.replace(/^\//, '').split('/')
        remainingPathname = '/' + segments.slice(parentSegments.length).join('/')
    }
    let matches =
        !isStatic &&
        dataRouterState &&
        dataRouterState.matches &&
        dataRouterState.matches.length > 0
            ? dataRouterState.matches
            : matchRoutes(routes, { pathname: remainingPathname })
    {
        warning(
            parentRoute || matches != null,
            `No routes matched location "${location.pathname}${location.search}${location.hash}" `
        )
        warning(
            matches == null ||
                matches[matches.length - 1].route.element !== void 0 ||
                matches[matches.length - 1].route.Component !== void 0 ||
                matches[matches.length - 1].route.lazy !== void 0,
            `Matched leaf route at location "${location.pathname}${location.search}${location.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
        )
    }
    let renderedMatches = _renderMatches(
        matches &&
            matches.map((match2) =>
                Object.assign({}, match2, {
                    params: Object.assign({}, parentParams, match2.params),
                    pathname: joinPaths([
                        parentPathnameBase,
                        // Re-encode pathnames that were decoded inside matchRoutes
                        navigator2.encodeLocation
                            ? navigator2.encodeLocation(match2.pathname).pathname
                            : match2.pathname
                    ]),
                    pathnameBase:
                        match2.pathnameBase === '/'
                            ? parentPathnameBase
                            : joinPaths([
                                  parentPathnameBase,
                                  // Re-encode pathnames that were decoded inside matchRoutes
                                  navigator2.encodeLocation
                                      ? navigator2.encodeLocation(match2.pathnameBase).pathname
                                      : match2.pathnameBase
                              ])
                })
            ),
        parentMatches,
        dataRouterState,
        future
    )
    if (locationArg && renderedMatches) {
        return /* @__PURE__ */ reactExports.createElement(
            LocationContext.Provider,
            {
                value: {
                    location: {
                        pathname: '/',
                        search: '',
                        hash: '',
                        state: null,
                        key: 'default',
                        ...location
                    },
                    navigationType: 'POP'
                    /* Pop */
                }
            },
            renderedMatches
        )
    }
    return renderedMatches
}
function DefaultErrorComponent() {
    let error = useRouteError()
    let message = isRouteErrorResponse(error)
        ? `${error.status} ${error.statusText}`
        : error instanceof Error
          ? error.message
          : JSON.stringify(error)
    let stack = error instanceof Error ? error.stack : null
    let lightgrey = 'rgba(200,200,200, 0.5)'
    let preStyles = { padding: '0.5rem', backgroundColor: lightgrey }
    let codeStyles = { padding: '2px 4px', backgroundColor: lightgrey }
    let devInfo = null
    {
        console.error('Error handled by React Router default ErrorBoundary:', error)
        devInfo = /* @__PURE__ */ reactExports.createElement(
            reactExports.Fragment,
            null,
            /* @__PURE__ */ reactExports.createElement('p', null, '💿 Hey developer 👋'),
            /* @__PURE__ */ reactExports.createElement(
                'p',
                null,
                'You can provide a way better UX than this when your app throws errors by providing your own ',
                /* @__PURE__ */ reactExports.createElement(
                    'code',
                    { style: codeStyles },
                    'ErrorBoundary'
                ),
                ' or',
                ' ',
                /* @__PURE__ */ reactExports.createElement(
                    'code',
                    { style: codeStyles },
                    'errorElement'
                ),
                ' prop on your route.'
            )
        )
    }
    return /* @__PURE__ */ reactExports.createElement(
        reactExports.Fragment,
        null,
        /* @__PURE__ */ reactExports.createElement('h2', null, 'Unexpected Application Error!'),
        /* @__PURE__ */ reactExports.createElement(
            'h3',
            { style: { fontStyle: 'italic' } },
            message
        ),
        stack
            ? /* @__PURE__ */ reactExports.createElement('pre', { style: preStyles }, stack)
            : null,
        devInfo
    )
}
var defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null)
var RenderErrorBoundary = class extends reactExports.Component {
    constructor(props) {
        super(props)
        this.state = {
            location: props.location,
            revalidation: props.revalidation,
            error: props.error
        }
    }
    static getDerivedStateFromError(error) {
        return { error }
    }
    static getDerivedStateFromProps(props, state) {
        if (
            state.location !== props.location ||
            (state.revalidation !== 'idle' && props.revalidation === 'idle')
        ) {
            return {
                error: props.error,
                location: props.location,
                revalidation: props.revalidation
            }
        }
        return {
            error: props.error !== void 0 ? props.error : state.error,
            location: state.location,
            revalidation: props.revalidation || state.revalidation
        }
    }
    componentDidCatch(error, errorInfo) {
        console.error('React Router caught the following error during render', error, errorInfo)
    }
    render() {
        return this.state.error !== void 0
            ? /* @__PURE__ */ reactExports.createElement(
                  RouteContext.Provider,
                  { value: this.props.routeContext },
                  /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
                      value: this.state.error,
                      children: this.props.component
                  })
              )
            : this.props.children
    }
}
function RenderedRoute({ routeContext, match: match2, children }) {
    let dataRouterContext = reactExports.useContext(DataRouterContext)
    if (
        dataRouterContext &&
        dataRouterContext.static &&
        dataRouterContext.staticContext &&
        (match2.route.errorElement || match2.route.ErrorBoundary)
    ) {
        dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id
    }
    return /* @__PURE__ */ reactExports.createElement(
        RouteContext.Provider,
        { value: routeContext },
        children
    )
}
function _renderMatches(matches, parentMatches = [], dataRouterState = null, future = null) {
    if (matches == null) {
        if (!dataRouterState) {
            return null
        }
        if (dataRouterState.errors) {
            matches = dataRouterState.matches
        } else if (
            parentMatches.length === 0 &&
            !dataRouterState.initialized &&
            dataRouterState.matches.length > 0
        ) {
            matches = dataRouterState.matches
        } else {
            return null
        }
    }
    let renderedMatches = matches
    let errors = dataRouterState?.errors
    if (errors != null) {
        let errorIndex = renderedMatches.findIndex(
            (m) => m.route.id && errors?.[m.route.id] !== void 0
        )
        invariant$1(
            errorIndex >= 0,
            `Could not find a matching route for errors on route IDs: ${Object.keys(errors).join(
                ','
            )}`
        )
        renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1))
    }
    let renderFallback = false
    let fallbackIndex = -1
    if (dataRouterState) {
        for (let i = 0; i < renderedMatches.length; i++) {
            let match2 = renderedMatches[i]
            if (match2.route.HydrateFallback || match2.route.hydrateFallbackElement) {
                fallbackIndex = i
            }
            if (match2.route.id) {
                let { loaderData, errors: errors2 } = dataRouterState
                let needsToRunLoader =
                    match2.route.loader &&
                    !loaderData.hasOwnProperty(match2.route.id) &&
                    (!errors2 || errors2[match2.route.id] === void 0)
                if (match2.route.lazy || needsToRunLoader) {
                    renderFallback = true
                    if (fallbackIndex >= 0) {
                        renderedMatches = renderedMatches.slice(0, fallbackIndex + 1)
                    } else {
                        renderedMatches = [renderedMatches[0]]
                    }
                    break
                }
            }
        }
    }
    return renderedMatches.reduceRight((outlet, match2, index2) => {
        let error
        let shouldRenderHydrateFallback = false
        let errorElement = null
        let hydrateFallbackElement = null
        if (dataRouterState) {
            error = errors && match2.route.id ? errors[match2.route.id] : void 0
            errorElement = match2.route.errorElement || defaultErrorElement
            if (renderFallback) {
                if (fallbackIndex < 0 && index2 === 0) {
                    warningOnce(
                        'route-fallback',
                        false,
                        'No `HydrateFallback` element provided to render during initial hydration'
                    )
                    shouldRenderHydrateFallback = true
                    hydrateFallbackElement = null
                } else if (fallbackIndex === index2) {
                    shouldRenderHydrateFallback = true
                    hydrateFallbackElement = match2.route.hydrateFallbackElement || null
                }
            }
        }
        let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1))
        let getChildren = () => {
            let children
            if (error) {
                children = errorElement
            } else if (shouldRenderHydrateFallback) {
                children = hydrateFallbackElement
            } else if (match2.route.Component) {
                children = /* @__PURE__ */ reactExports.createElement(match2.route.Component, null)
            } else if (match2.route.element) {
                children = match2.route.element
            } else {
                children = outlet
            }
            return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
                match: match2,
                routeContext: {
                    outlet,
                    matches: matches2,
                    isDataRoute: dataRouterState != null
                },
                children
            })
        }
        return dataRouterState &&
            (match2.route.ErrorBoundary || match2.route.errorElement || index2 === 0)
            ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
                  location: dataRouterState.location,
                  revalidation: dataRouterState.revalidation,
                  component: errorElement,
                  error,
                  children: getChildren(),
                  routeContext: { outlet: null, matches: matches2, isDataRoute: true }
              })
            : getChildren()
    }, null)
}
function getDataRouterConsoleError(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`
}
function useDataRouterContext(hookName) {
    let ctx = reactExports.useContext(DataRouterContext)
    invariant$1(ctx, getDataRouterConsoleError(hookName))
    return ctx
}
function useDataRouterState(hookName) {
    let state = reactExports.useContext(DataRouterStateContext)
    invariant$1(state, getDataRouterConsoleError(hookName))
    return state
}
function useRouteContext(hookName) {
    let route = reactExports.useContext(RouteContext)
    invariant$1(route, getDataRouterConsoleError(hookName))
    return route
}
function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName)
    let thisRoute = route.matches[route.matches.length - 1]
    invariant$1(
        thisRoute.route.id,
        `${hookName} can only be used on routes that contain a unique "id"`
    )
    return thisRoute.route.id
}
function useRouteId() {
    return useCurrentRouteId(
        'useRouteId'
        /* UseRouteId */
    )
}
function useRouteError() {
    let error = reactExports.useContext(RouteErrorContext)
    let state = useDataRouterState(
        'useRouteError'
        /* UseRouteError */
    )
    let routeId = useCurrentRouteId(
        'useRouteError'
        /* UseRouteError */
    )
    if (error !== void 0) {
        return error
    }
    return state.errors?.[routeId]
}
function useNavigateStable() {
    let { router } = useDataRouterContext(
        'useNavigate'
        /* UseNavigateStable */
    )
    let id = useCurrentRouteId(
        'useNavigate'
        /* UseNavigateStable */
    )
    let activeRef = reactExports.useRef(false)
    useIsomorphicLayoutEffect(() => {
        activeRef.current = true
    })
    let navigate = reactExports.useCallback(
        async (to, options2 = {}) => {
            warning(activeRef.current, navigateEffectWarning)
            if (!activeRef.current) return
            if (typeof to === 'number') {
                router.navigate(to)
            } else {
                await router.navigate(to, { fromRouteId: id, ...options2 })
            }
        },
        [router, id]
    )
    return navigate
}
var alreadyWarned = {}
function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
        alreadyWarned[key] = true
        warning(false, message)
    }
}
reactExports.memo(DataRoutes)
function DataRoutes({ routes, future, state }) {
    return useRoutesImpl(routes, void 0, state, future)
}
function Navigate({ to, replace: replace2, state, relative }) {
    invariant$1(
        useInRouterContext(),
        // TODO: This error is probably because they somehow have 2 versions of
        // the router loaded. We can help them understand how to avoid that.
        `<Navigate> may be used only in the context of a <Router> component.`
    )
    let { static: isStatic } = reactExports.useContext(NavigationContext)
    warning(
        !isStatic,
        `<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.`
    )
    let { matches } = reactExports.useContext(RouteContext)
    let { pathname: locationPathname } = useLocation()
    let navigate = useNavigate()
    let path = resolveTo(to, getResolveToMatches(matches), locationPathname, relative === 'path')
    let jsonPath = JSON.stringify(path)
    reactExports.useEffect(() => {
        navigate(JSON.parse(jsonPath), { replace: replace2, state, relative })
    }, [navigate, jsonPath, relative, replace2, state])
    return null
}
function Outlet(props) {
    return useOutlet(props.context)
}
function Route(_props) {
    invariant$1(
        false,
        `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`
    )
}
function Router({
    basename: basenameProp = '/',
    children = null,
    location: locationProp,
    navigationType = 'POP',
    navigator: navigator2,
    static: staticProp = false
}) {
    invariant$1(
        !useInRouterContext(),
        `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
    )
    let basename = basenameProp.replace(/^\/*/, '/')
    let navigationContext = reactExports.useMemo(
        () => ({
            basename,
            navigator: navigator2,
            static: staticProp,
            future: {}
        }),
        [basename, navigator2, staticProp]
    )
    if (typeof locationProp === 'string') {
        locationProp = parsePath(locationProp)
    }
    let {
        pathname = '/',
        search = '',
        hash: hash2 = '',
        state = null,
        key = 'default'
    } = locationProp
    let locationContext = reactExports.useMemo(() => {
        let trailingPathname = stripBasename(pathname, basename)
        if (trailingPathname == null) {
            return null
        }
        return {
            location: {
                pathname: trailingPathname,
                search,
                hash: hash2,
                state,
                key
            },
            navigationType
        }
    }, [basename, pathname, search, hash2, state, key, navigationType])
    warning(
        locationContext != null,
        `<Router basename="${basename}"> is not able to match the URL "${pathname}${search}${hash2}" because it does not start with the basename, so the <Router> won't render anything.`
    )
    if (locationContext == null) {
        return null
    }
    return /* @__PURE__ */ reactExports.createElement(
        NavigationContext.Provider,
        { value: navigationContext },
        /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
            children,
            value: locationContext
        })
    )
}
function Routes({ children, location }) {
    return useRoutes(createRoutesFromChildren(children), location)
}
function createRoutesFromChildren(children, parentPath = []) {
    let routes = []
    reactExports.Children.forEach(children, (element, index2) => {
        if (!reactExports.isValidElement(element)) {
            return
        }
        let treePath = [...parentPath, index2]
        if (element.type === reactExports.Fragment) {
            routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath))
            return
        }
        invariant$1(
            element.type === Route,
            `[${typeof element.type === 'string' ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`
        )
        invariant$1(
            !element.props.index || !element.props.children,
            'An index route cannot have child routes.'
        )
        let route = {
            id: element.props.id || treePath.join('-'),
            caseSensitive: element.props.caseSensitive,
            element: element.props.element,
            Component: element.props.Component,
            index: element.props.index,
            path: element.props.path,
            loader: element.props.loader,
            action: element.props.action,
            hydrateFallbackElement: element.props.hydrateFallbackElement,
            HydrateFallback: element.props.HydrateFallback,
            errorElement: element.props.errorElement,
            ErrorBoundary: element.props.ErrorBoundary,
            hasErrorBoundary:
                element.props.hasErrorBoundary === true ||
                element.props.ErrorBoundary != null ||
                element.props.errorElement != null,
            shouldRevalidate: element.props.shouldRevalidate,
            handle: element.props.handle,
            lazy: element.props.lazy
        }
        if (element.props.children) {
            route.children = createRoutesFromChildren(element.props.children, treePath)
        }
        routes.push(route)
    })
    return routes
}
var defaultMethod = 'get'
var defaultEncType = 'application/x-www-form-urlencoded'
function isHtmlElement(object2) {
    return object2 != null && typeof object2.tagName === 'string'
}
function isButtonElement(object2) {
    return isHtmlElement(object2) && object2.tagName.toLowerCase() === 'button'
}
function isFormElement(object2) {
    return isHtmlElement(object2) && object2.tagName.toLowerCase() === 'form'
}
function isInputElement(object2) {
    return isHtmlElement(object2) && object2.tagName.toLowerCase() === 'input'
}
function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)
}
function shouldProcessLinkClick(event, target) {
    return (
        event.button === 0 && // Ignore everything but left clicks
        (!target || target === '_self') && // Let browser handle "target=_blank" etc.
        !isModifiedEvent(event)
    )
}
var _formDataSupportsSubmitter = null
function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
        try {
            new FormData(
                document.createElement('form'),
                // @ts-expect-error if FormData supports the submitter parameter, this will throw
                0
            )
            _formDataSupportsSubmitter = false
        } catch (e) {
            _formDataSupportsSubmitter = true
        }
    }
    return _formDataSupportsSubmitter
}
var supportedFormEncTypes = /* @__PURE__ */ new Set([
    'application/x-www-form-urlencoded',
    'multipart/form-data',
    'text/plain'
])
function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
        warning(
            false,
            `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
        )
        return null
    }
    return encType
}
function getFormSubmissionInfo(target, basename) {
    let method
    let action
    let encType
    let formData
    let body
    if (isFormElement(target)) {
        let attr = target.getAttribute('action')
        action = attr ? stripBasename(attr, basename) : null
        method = target.getAttribute('method') || defaultMethod
        encType = getFormEncType(target.getAttribute('enctype')) || defaultEncType
        formData = new FormData(target)
    } else if (
        isButtonElement(target) ||
        (isInputElement(target) && (target.type === 'submit' || target.type === 'image'))
    ) {
        let form = target.form
        if (form == null) {
            throw new Error(`Cannot submit a <button> or <input type="submit"> without a <form>`)
        }
        let attr = target.getAttribute('formaction') || form.getAttribute('action')
        action = attr ? stripBasename(attr, basename) : null
        method = target.getAttribute('formmethod') || form.getAttribute('method') || defaultMethod
        encType =
            getFormEncType(target.getAttribute('formenctype')) ||
            getFormEncType(form.getAttribute('enctype')) ||
            defaultEncType
        formData = new FormData(form, target)
        if (!isFormDataSubmitterSupported()) {
            let { name, type, value } = target
            if (type === 'image') {
                let prefix2 = name ? `${name}.` : ''
                formData.append(`${prefix2}x`, '0')
                formData.append(`${prefix2}y`, '0')
            } else if (name) {
                formData.append(name, value)
            }
        }
    } else if (isHtmlElement(target)) {
        throw new Error(
            `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
        )
    } else {
        method = defaultMethod
        action = null
        encType = defaultEncType
        body = target
    }
    if (formData && encType === 'text/plain') {
        body = formData
        formData = void 0
    }
    return { action, method: method.toLowerCase(), encType, formData, body }
}
function invariant2(value, message) {
    if (value === false || value === null || typeof value === 'undefined') {
        throw new Error(message)
    }
}
async function loadRouteModule(route, routeModulesCache) {
    if (route.id in routeModulesCache) {
        return routeModulesCache[route.id]
    }
    try {
        let routeModule = await import(
            /* @vite-ignore */
            /* webpackIgnore: true */
            route.module
        )
        routeModulesCache[route.id] = routeModule
        return routeModule
    } catch (error) {
        console.error(`Error loading route module \`${route.module}\`, reloading page...`)
        console.error(error)
        if (
            window.__reactRouterContext &&
            window.__reactRouterContext.isSpaMode && // @ts-expect-error
            void 0
        );
        window.location.reload()
        return new Promise(() => {})
    }
}
function isHtmlLinkDescriptor(object2) {
    if (object2 == null) {
        return false
    }
    if (object2.href == null) {
        return (
            object2.rel === 'preload' &&
            typeof object2.imageSrcSet === 'string' &&
            typeof object2.imageSizes === 'string'
        )
    }
    return typeof object2.rel === 'string' && typeof object2.href === 'string'
}
async function getKeyedPrefetchLinks(matches, manifest, routeModules) {
    let links = await Promise.all(
        matches.map(async (match2) => {
            let route = manifest.routes[match2.route.id]
            if (route) {
                let mod = await loadRouteModule(route, routeModules)
                return mod.links ? mod.links() : []
            }
            return []
        })
    )
    return dedupeLinkDescriptors(
        links
            .flat(1)
            .filter(isHtmlLinkDescriptor)
            .filter((link) => link.rel === 'stylesheet' || link.rel === 'preload')
            .map((link) =>
                link.rel === 'stylesheet'
                    ? { ...link, rel: 'prefetch', as: 'style' }
                    : { ...link, rel: 'prefetch' }
            )
    )
}
function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {
    let isNew = (match2, index2) => {
        if (!currentMatches[index2]) return true
        return match2.route.id !== currentMatches[index2].route.id
    }
    let matchPathChanged = (match2, index2) => {
        return (
            // param change, /users/123 -> /users/456
            currentMatches[index2].pathname !== match2.pathname || // splat param changed, which is not present in match.path
            // e.g. /files/images/avatar.jpg -> files/finances.xls
            (currentMatches[index2].route.path?.endsWith('*') &&
                currentMatches[index2].params['*'] !== match2.params['*'])
        )
    }
    if (mode === 'assets') {
        return nextMatches.filter(
            (match2, index2) => isNew(match2, index2) || matchPathChanged(match2, index2)
        )
    }
    if (mode === 'data') {
        return nextMatches.filter((match2, index2) => {
            let manifestRoute = manifest.routes[match2.route.id]
            if (!manifestRoute || !manifestRoute.hasLoader) {
                return false
            }
            if (isNew(match2, index2) || matchPathChanged(match2, index2)) {
                return true
            }
            if (match2.route.shouldRevalidate) {
                let routeChoice = match2.route.shouldRevalidate({
                    currentUrl: new URL(
                        location.pathname + location.search + location.hash,
                        window.origin
                    ),
                    currentParams: currentMatches[0]?.params || {},
                    nextUrl: new URL(page, window.origin),
                    nextParams: match2.params,
                    defaultShouldRevalidate: true
                })
                if (typeof routeChoice === 'boolean') {
                    return routeChoice
                }
            }
            return true
        })
    }
    return []
}
function getModuleLinkHrefs(matches, manifest, { includeHydrateFallback } = {}) {
    return dedupeHrefs(
        matches
            .map((match2) => {
                let route = manifest.routes[match2.route.id]
                if (!route) return []
                let hrefs = [route.module]
                if (route.clientActionModule) {
                    hrefs = hrefs.concat(route.clientActionModule)
                }
                if (route.clientLoaderModule) {
                    hrefs = hrefs.concat(route.clientLoaderModule)
                }
                if (includeHydrateFallback && route.hydrateFallbackModule) {
                    hrefs = hrefs.concat(route.hydrateFallbackModule)
                }
                if (route.imports) {
                    hrefs = hrefs.concat(route.imports)
                }
                return hrefs
            })
            .flat(1)
    )
}
function dedupeHrefs(hrefs) {
    return [...new Set(hrefs)]
}
function sortKeys(obj) {
    let sorted = {}
    let keys2 = Object.keys(obj).sort()
    for (let key of keys2) {
        sorted[key] = obj[key]
    }
    return sorted
}
function dedupeLinkDescriptors(descriptors2, preloads) {
    let set = /* @__PURE__ */ new Set()
    new Set(preloads)
    return descriptors2.reduce((deduped, descriptor) => {
        let key = JSON.stringify(sortKeys(descriptor))
        if (!set.has(key)) {
            set.add(key)
            deduped.push({ key, link: descriptor })
        }
        return deduped
    }, [])
}
Object.getOwnPropertyNames(Object.prototype).sort().join('\0')
var NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([100, 101, 204, 205])
function singleFetchUrl(reqUrl, basename) {
    let url =
        typeof reqUrl === 'string'
            ? new URL(
                  reqUrl,
                  // This can be called during the SSR flow via PrefetchPageLinksImpl so
                  // don't assume window is available
                  typeof window === 'undefined' ? 'server://singlefetch/' : window.location.origin
              )
            : reqUrl
    if (url.pathname === '/') {
        url.pathname = '_root.data'
    } else if (basename && stripBasename(url.pathname, basename) === '/') {
        url.pathname = `${basename.replace(/\/$/, '')}/_root.data`
    } else {
        url.pathname = `${url.pathname.replace(/\/$/, '')}.data`
    }
    return url
}
function useDataRouterContext2() {
    let context = reactExports.useContext(DataRouterContext)
    invariant2(
        context,
        'You must render this element inside a <DataRouterContext.Provider> element'
    )
    return context
}
function useDataRouterStateContext() {
    let context = reactExports.useContext(DataRouterStateContext)
    invariant2(
        context,
        'You must render this element inside a <DataRouterStateContext.Provider> element'
    )
    return context
}
var FrameworkContext = reactExports.createContext(void 0)
FrameworkContext.displayName = 'FrameworkContext'
function useFrameworkContext() {
    let context = reactExports.useContext(FrameworkContext)
    invariant2(context, 'You must render this element inside a <HydratedRouter> element')
    return context
}
function usePrefetchBehavior(prefetch, theirElementProps) {
    let frameworkContext = reactExports.useContext(FrameworkContext)
    let [maybePrefetch, setMaybePrefetch] = reactExports.useState(false)
    let [shouldPrefetch, setShouldPrefetch] = reactExports.useState(false)
    let { onFocus: onFocus2, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps
    let ref = reactExports.useRef(null)
    reactExports.useEffect(() => {
        if (prefetch === 'render') {
            setShouldPrefetch(true)
        }
        if (prefetch === 'viewport') {
            let callback = (entries) => {
                entries.forEach((entry) => {
                    setShouldPrefetch(entry.isIntersecting)
                })
            }
            let observer = new IntersectionObserver(callback, { threshold: 0.5 })
            if (ref.current) observer.observe(ref.current)
            return () => {
                observer.disconnect()
            }
        }
    }, [prefetch])
    reactExports.useEffect(() => {
        if (maybePrefetch) {
            let id = setTimeout(() => {
                setShouldPrefetch(true)
            }, 100)
            return () => {
                clearTimeout(id)
            }
        }
    }, [maybePrefetch])
    let setIntent = () => {
        setMaybePrefetch(true)
    }
    let cancelIntent = () => {
        setMaybePrefetch(false)
        setShouldPrefetch(false)
    }
    if (!frameworkContext) {
        return [false, ref, {}]
    }
    if (prefetch !== 'intent') {
        return [shouldPrefetch, ref, {}]
    }
    return [
        shouldPrefetch,
        ref,
        {
            onFocus: composeEventHandlers(onFocus2, setIntent),
            onBlur: composeEventHandlers(onBlur, cancelIntent),
            onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
            onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
            onTouchStart: composeEventHandlers(onTouchStart, setIntent)
        }
    ]
}
function composeEventHandlers(theirHandler, ourHandler) {
    return (event) => {
        theirHandler && theirHandler(event)
        if (!event.defaultPrevented) {
            ourHandler(event)
        }
    }
}
function PrefetchPageLinks({ page, ...dataLinkProps }) {
    let { router } = useDataRouterContext2()
    let matches = reactExports.useMemo(
        () => matchRoutes(router.routes, page, router.basename),
        [router.routes, page, router.basename]
    )
    if (!matches) {
        return null
    }
    return /* @__PURE__ */ reactExports.createElement(PrefetchPageLinksImpl, {
        page,
        matches,
        ...dataLinkProps
    })
}
function useKeyedPrefetchLinks(matches) {
    let { manifest, routeModules } = useFrameworkContext()
    let [keyedPrefetchLinks, setKeyedPrefetchLinks] = reactExports.useState([])
    reactExports.useEffect(() => {
        let interrupted = false
        void getKeyedPrefetchLinks(matches, manifest, routeModules).then((links) => {
            if (!interrupted) {
                setKeyedPrefetchLinks(links)
            }
        })
        return () => {
            interrupted = true
        }
    }, [matches, manifest, routeModules])
    return keyedPrefetchLinks
}
function PrefetchPageLinksImpl({ page, matches: nextMatches, ...linkProps }) {
    let location = useLocation()
    let { manifest, routeModules } = useFrameworkContext()
    let { basename } = useDataRouterContext2()
    let { loaderData, matches } = useDataRouterStateContext()
    let newMatchesForData = reactExports.useMemo(
        () => getNewMatchesForLinks(page, nextMatches, matches, manifest, location, 'data'),
        [page, nextMatches, matches, manifest, location]
    )
    let newMatchesForAssets = reactExports.useMemo(
        () => getNewMatchesForLinks(page, nextMatches, matches, manifest, location, 'assets'),
        [page, nextMatches, matches, manifest, location]
    )
    let dataHrefs = reactExports.useMemo(() => {
        if (page === location.pathname + location.search + location.hash) {
            return []
        }
        let routesParams = /* @__PURE__ */ new Set()
        let foundOptOutRoute = false
        nextMatches.forEach((m) => {
            let manifestRoute = manifest.routes[m.route.id]
            if (!manifestRoute || !manifestRoute.hasLoader) {
                return
            }
            if (
                !newMatchesForData.some((m2) => m2.route.id === m.route.id) &&
                m.route.id in loaderData &&
                routeModules[m.route.id]?.shouldRevalidate
            ) {
                foundOptOutRoute = true
            } else if (manifestRoute.hasClientLoader) {
                foundOptOutRoute = true
            } else {
                routesParams.add(m.route.id)
            }
        })
        if (routesParams.size === 0) {
            return []
        }
        let url = singleFetchUrl(page, basename)
        if (foundOptOutRoute && routesParams.size > 0) {
            url.searchParams.set(
                '_routes',
                nextMatches
                    .filter((m) => routesParams.has(m.route.id))
                    .map((m) => m.route.id)
                    .join(',')
            )
        }
        return [url.pathname + url.search]
    }, [
        basename,
        loaderData,
        location,
        manifest,
        newMatchesForData,
        nextMatches,
        page,
        routeModules
    ])
    let moduleHrefs = reactExports.useMemo(
        () => getModuleLinkHrefs(newMatchesForAssets, manifest),
        [newMatchesForAssets, manifest]
    )
    let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets)
    return /* @__PURE__ */ reactExports.createElement(
        reactExports.Fragment,
        null,
        dataHrefs.map((href2) =>
            /* @__PURE__ */ reactExports.createElement('link', {
                key: href2,
                rel: 'prefetch',
                as: 'fetch',
                href: href2,
                ...linkProps
            })
        ),
        moduleHrefs.map((href2) =>
            /* @__PURE__ */ reactExports.createElement('link', {
                key: href2,
                rel: 'modulepreload',
                href: href2,
                ...linkProps
            })
        ),
        keyedPrefetchLinks.map(({ key, link }) =>
            // these don't spread `linkProps` because they are full link descriptors
            // already with their own props
            /* @__PURE__ */ reactExports.createElement('link', { key, ...link })
        )
    )
}
function mergeRefs(...refs) {
    return (value) => {
        refs.forEach((ref) => {
            if (typeof ref === 'function') {
                ref(value)
            } else if (ref != null) {
                ref.current = value
            }
        })
    }
}
var isBrowser$1 =
    typeof window !== 'undefined' &&
    typeof window.document !== 'undefined' &&
    typeof window.document.createElement !== 'undefined'
try {
    if (isBrowser$1) {
        window.__reactRouterVersion = '7.6.0'
    }
} catch (e) {}
function HashRouter({ basename, children, window: window2 }) {
    let historyRef = reactExports.useRef()
    if (historyRef.current == null) {
        historyRef.current = createHashHistory({ window: window2, v5Compat: true })
    }
    let history = historyRef.current
    let [state, setStateImpl] = reactExports.useState({
        action: history.action,
        location: history.location
    })
    let setState = reactExports.useCallback(
        (newState) => {
            reactExports.startTransition(() => setStateImpl(newState))
        },
        [setStateImpl]
    )
    reactExports.useLayoutEffect(() => history.listen(setState), [history, setState])
    return /* @__PURE__ */ reactExports.createElement(Router, {
        basename,
        children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    })
}
var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i
var Link = reactExports.forwardRef(function LinkWithRef(
    {
        onClick,
        discover = 'render',
        prefetch = 'none',
        relative,
        reloadDocument,
        replace: replace2,
        state,
        target,
        to,
        preventScrollReset,
        viewTransition,
        ...rest
    },
    forwardedRef
) {
    let { basename } = reactExports.useContext(NavigationContext)
    let isAbsolute = typeof to === 'string' && ABSOLUTE_URL_REGEX2.test(to)
    let absoluteHref
    let isExternal = false
    if (typeof to === 'string' && isAbsolute) {
        absoluteHref = to
        if (isBrowser$1) {
            try {
                let currentUrl = new URL(window.location.href)
                let targetUrl = to.startsWith('//')
                    ? new URL(currentUrl.protocol + to)
                    : new URL(to)
                let path = stripBasename(targetUrl.pathname, basename)
                if (targetUrl.origin === currentUrl.origin && path != null) {
                    to = path + targetUrl.search + targetUrl.hash
                } else {
                    isExternal = true
                }
            } catch (e) {
                warning(
                    false,
                    `<Link to="${to}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
                )
            }
        }
    }
    let href2 = useHref(to, { relative })
    let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(prefetch, rest)
    let internalOnClick = useLinkClickHandler(to, {
        replace: replace2,
        state,
        target,
        preventScrollReset,
        relative,
        viewTransition
    })
    function handleClick(event) {
        if (onClick) onClick(event)
        if (!event.defaultPrevented) {
            internalOnClick(event)
        }
    }
    let link =
        // eslint-disable-next-line jsx-a11y/anchor-has-content
        /* @__PURE__ */ reactExports.createElement('a', {
            ...rest,
            ...prefetchHandlers,
            href: absoluteHref || href2,
            onClick: isExternal || reloadDocument ? onClick : handleClick,
            ref: mergeRefs(forwardedRef, prefetchRef),
            target,
            'data-discover': !isAbsolute && discover === 'render' ? 'true' : void 0
        })
    return shouldPrefetch && !isAbsolute
        ? /* @__PURE__ */ reactExports.createElement(
              reactExports.Fragment,
              null,
              link,
              /* @__PURE__ */ reactExports.createElement(PrefetchPageLinks, { page: href2 })
          )
        : link
})
Link.displayName = 'Link'
var NavLink = reactExports.forwardRef(function NavLinkWithRef(
    {
        'aria-current': ariaCurrentProp = 'page',
        caseSensitive = false,
        className: classNameProp = '',
        end = false,
        style: styleProp,
        to,
        viewTransition,
        children,
        ...rest
    },
    ref
) {
    let path = useResolvedPath(to, { relative: rest.relative })
    let location = useLocation()
    let routerState = reactExports.useContext(DataRouterStateContext)
    let { navigator: navigator2, basename } = reactExports.useContext(NavigationContext)
    let isTransitioning =
        routerState != null && // Conditional usage is OK here because the usage of a data router is static
        // eslint-disable-next-line react-hooks/rules-of-hooks
        useViewTransitionState(path) &&
        viewTransition === true
    let toPathname = navigator2.encodeLocation
        ? navigator2.encodeLocation(path).pathname
        : path.pathname
    let locationPathname = location.pathname
    let nextLocationPathname =
        routerState && routerState.navigation && routerState.navigation.location
            ? routerState.navigation.location.pathname
            : null
    if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase()
        nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null
        toPathname = toPathname.toLowerCase()
    }
    if (nextLocationPathname && basename) {
        nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname
    }
    const endSlashPosition =
        toPathname !== '/' && toPathname.endsWith('/') ? toPathname.length - 1 : toPathname.length
    let isActive =
        locationPathname === toPathname ||
        (!end &&
            locationPathname.startsWith(toPathname) &&
            locationPathname.charAt(endSlashPosition) === '/')
    let isPending =
        nextLocationPathname != null &&
        (nextLocationPathname === toPathname ||
            (!end &&
                nextLocationPathname.startsWith(toPathname) &&
                nextLocationPathname.charAt(toPathname.length) === '/'))
    let renderProps = {
        isActive,
        isPending,
        isTransitioning
    }
    let ariaCurrent = isActive ? ariaCurrentProp : void 0
    let className
    if (typeof classNameProp === 'function') {
        className = classNameProp(renderProps)
    } else {
        className = [
            classNameProp,
            isActive ? 'active' : null,
            isPending ? 'pending' : null,
            isTransitioning ? 'transitioning' : null
        ]
            .filter(Boolean)
            .join(' ')
    }
    let style = typeof styleProp === 'function' ? styleProp(renderProps) : styleProp
    return /* @__PURE__ */ reactExports.createElement(
        Link,
        {
            ...rest,
            'aria-current': ariaCurrent,
            className,
            ref,
            style,
            to,
            viewTransition
        },
        typeof children === 'function' ? children(renderProps) : children
    )
})
NavLink.displayName = 'NavLink'
var Form = reactExports.forwardRef(
    (
        {
            discover = 'render',
            fetcherKey,
            navigate,
            reloadDocument,
            replace: replace2,
            state,
            method = defaultMethod,
            action,
            onSubmit,
            relative,
            preventScrollReset,
            viewTransition,
            ...props
        },
        forwardedRef
    ) => {
        let submit = useSubmit()
        let formAction = useFormAction(action, { relative })
        let formMethod = method.toLowerCase() === 'get' ? 'get' : 'post'
        let isAbsolute = typeof action === 'string' && ABSOLUTE_URL_REGEX2.test(action)
        let submitHandler = (event) => {
            onSubmit && onSubmit(event)
            if (event.defaultPrevented) return
            event.preventDefault()
            let submitter = event.nativeEvent.submitter
            let submitMethod = submitter?.getAttribute('formmethod') || method
            submit(submitter || event.currentTarget, {
                fetcherKey,
                method: submitMethod,
                navigate,
                replace: replace2,
                state,
                relative,
                preventScrollReset,
                viewTransition
            })
        }
        return /* @__PURE__ */ reactExports.createElement('form', {
            ref: forwardedRef,
            method: formMethod,
            action: formAction,
            onSubmit: reloadDocument ? onSubmit : submitHandler,
            ...props,
            'data-discover': !isAbsolute && discover === 'render' ? 'true' : void 0
        })
    }
)
Form.displayName = 'Form'
function getDataRouterConsoleError2(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`
}
function useDataRouterContext3(hookName) {
    let ctx = reactExports.useContext(DataRouterContext)
    invariant$1(ctx, getDataRouterConsoleError2(hookName))
    return ctx
}
function useLinkClickHandler(
    to,
    { target, replace: replaceProp, state, preventScrollReset, relative, viewTransition } = {}
) {
    let navigate = useNavigate()
    let location = useLocation()
    let path = useResolvedPath(to, { relative })
    return reactExports.useCallback(
        (event) => {
            if (shouldProcessLinkClick(event, target)) {
                event.preventDefault()
                let replace2 =
                    replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path)
                navigate(to, {
                    replace: replace2,
                    state,
                    preventScrollReset,
                    relative,
                    viewTransition
                })
            }
        },
        [
            location,
            navigate,
            path,
            replaceProp,
            state,
            target,
            to,
            preventScrollReset,
            relative,
            viewTransition
        ]
    )
}
var fetcherId = 0
var getUniqueFetcherId = () => `__${String(++fetcherId)}__`
function useSubmit() {
    let { router } = useDataRouterContext3(
        'useSubmit'
        /* UseSubmit */
    )
    let { basename } = reactExports.useContext(NavigationContext)
    let currentRouteId = useRouteId()
    return reactExports.useCallback(
        async (target, options2 = {}) => {
            let { action, method, encType, formData, body } = getFormSubmissionInfo(
                target,
                basename
            )
            if (options2.navigate === false) {
                let key = options2.fetcherKey || getUniqueFetcherId()
                await router.fetch(key, currentRouteId, options2.action || action, {
                    preventScrollReset: options2.preventScrollReset,
                    formData,
                    body,
                    formMethod: options2.method || method,
                    formEncType: options2.encType || encType,
                    flushSync: options2.flushSync
                })
            } else {
                await router.navigate(options2.action || action, {
                    preventScrollReset: options2.preventScrollReset,
                    formData,
                    body,
                    formMethod: options2.method || method,
                    formEncType: options2.encType || encType,
                    replace: options2.replace,
                    state: options2.state,
                    fromRouteId: currentRouteId,
                    flushSync: options2.flushSync,
                    viewTransition: options2.viewTransition
                })
            }
        },
        [router, basename, currentRouteId]
    )
}
function useFormAction(action, { relative } = {}) {
    let { basename } = reactExports.useContext(NavigationContext)
    let routeContext = reactExports.useContext(RouteContext)
    invariant$1(routeContext, 'useFormAction must be used inside a RouteContext')
    let [match2] = routeContext.matches.slice(-1)
    let path = { ...useResolvedPath(action ? action : '.', { relative }) }
    let location = useLocation()
    if (action == null) {
        path.search = location.search
        let params = new URLSearchParams(path.search)
        let indexValues = params.getAll('index')
        let hasNakedIndexParam = indexValues.some((v) => v === '')
        if (hasNakedIndexParam) {
            params.delete('index')
            indexValues.filter((v) => v).forEach((v) => params.append('index', v))
            let qs = params.toString()
            path.search = qs ? `?${qs}` : ''
        }
    }
    if ((!action || action === '.') && match2.route.index) {
        path.search = path.search ? path.search.replace(/^\?/, '?index&') : '?index'
    }
    if (basename !== '/') {
        path.pathname = path.pathname === '/' ? basename : joinPaths([basename, path.pathname])
    }
    return createPath(path)
}
function useViewTransitionState(to, opts = {}) {
    let vtContext = reactExports.useContext(ViewTransitionContext)
    invariant$1(
        vtContext != null,
        "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
    )
    let { basename } = useDataRouterContext3(
        'useViewTransitionState'
        /* useViewTransitionState */
    )
    let path = useResolvedPath(to, { relative: opts.relative })
    if (!vtContext.isTransitioning) {
        return false
    }
    let currentPath =
        stripBasename(vtContext.currentLocation.pathname, basename) ||
        vtContext.currentLocation.pathname
    let nextPath =
        stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname
    return (
        matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null
    )
}
/* @__PURE__ */ new Set([...NO_BODY_STATUS_CODES, 304])
var reactDomExports = requireReactDom()
function bind(fn, thisArg) {
    return function wrap() {
        return fn.apply(thisArg, arguments)
    }
}
const { toString: toString$2 } = Object.prototype
const { getPrototypeOf } = Object
const { iterator, toStringTag } = Symbol
const kindOf = /* @__PURE__ */ ((cache) => (thing) => {
    const str = toString$2.call(thing)
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase())
})(/* @__PURE__ */ Object.create(null))
const kindOfTest = (type) => {
    type = type.toLowerCase()
    return (thing) => kindOf(thing) === type
}
const typeOfTest = (type) => (thing) => typeof thing === type
const { isArray: isArray$2 } = Array
const isUndefined = typeOfTest('undefined')
function isBuffer$1(val) {
    return (
        val !== null &&
        !isUndefined(val) &&
        val.constructor !== null &&
        !isUndefined(val.constructor) &&
        isFunction$2(val.constructor.isBuffer) &&
        val.constructor.isBuffer(val)
    )
}
const isArrayBuffer = kindOfTest('ArrayBuffer')
function isArrayBufferView(val) {
    let result
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val)
    } else {
        result = val && val.buffer && isArrayBuffer(val.buffer)
    }
    return result
}
const isString$1 = typeOfTest('string')
const isFunction$2 = typeOfTest('function')
const isNumber$2 = typeOfTest('number')
const isObject$1 = (thing) => thing !== null && typeof thing === 'object'
const isBoolean$1 = (thing) => thing === true || thing === false
const isPlainObject$1 = (val) => {
    if (kindOf(val) !== 'object') {
        return false
    }
    const prototype2 = getPrototypeOf(val)
    return (
        (prototype2 === null ||
            prototype2 === Object.prototype ||
            Object.getPrototypeOf(prototype2) === null) &&
        !(toStringTag in val) &&
        !(iterator in val)
    )
}
const isDate = kindOfTest('Date')
const isFile = kindOfTest('File')
const isBlob = kindOfTest('Blob')
const isFileList = kindOfTest('FileList')
const isStream = (val) => isObject$1(val) && isFunction$2(val.pipe)
const isFormData = (thing) => {
    let kind
    return (
        thing &&
        ((typeof FormData === 'function' && thing instanceof FormData) ||
            (isFunction$2(thing.append) &&
                ((kind = kindOf(thing)) === 'formdata' || // detect form-data instance
                    (kind === 'object' &&
                        isFunction$2(thing.toString) &&
                        thing.toString() === '[object FormData]'))))
    )
}
const isURLSearchParams = kindOfTest('URLSearchParams')
const [isReadableStream, isRequest, isResponse, isHeaders] = [
    'ReadableStream',
    'Request',
    'Response',
    'Headers'
].map(kindOfTest)
const trim$1 = (str) =>
    str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '')
function forEach(obj, fn, { allOwnKeys = false } = {}) {
    if (obj === null || typeof obj === 'undefined') {
        return
    }
    let i
    let l
    if (typeof obj !== 'object') {
        obj = [obj]
    }
    if (isArray$2(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
            fn.call(null, obj[i], i, obj)
        }
    } else {
        const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj)
        const len = keys2.length
        let key
        for (i = 0; i < len; i++) {
            key = keys2[i]
            fn.call(null, obj[key], key, obj)
        }
    }
}
function findKey(obj, key) {
    key = key.toLowerCase()
    const keys2 = Object.keys(obj)
    let i = keys2.length
    let _key
    while (i-- > 0) {
        _key = keys2[i]
        if (key === _key.toLowerCase()) {
            return _key
        }
    }
    return null
}
const _global = (() => {
    if (typeof globalThis !== 'undefined') return globalThis
    return typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : global
})()
const isContextDefined = (context) => !isUndefined(context) && context !== _global
function merge() {
    const { caseless } = (isContextDefined(this) && this) || {}
    const result = {}
    const assignValue = (val, key) => {
        const targetKey = (caseless && findKey(result, key)) || key
        if (isPlainObject$1(result[targetKey]) && isPlainObject$1(val)) {
            result[targetKey] = merge(result[targetKey], val)
        } else if (isPlainObject$1(val)) {
            result[targetKey] = merge({}, val)
        } else if (isArray$2(val)) {
            result[targetKey] = val.slice()
        } else {
            result[targetKey] = val
        }
    }
    for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue)
    }
    return result
}
const extend$1 = (a2, b, thisArg, { allOwnKeys } = {}) => {
    forEach(
        b,
        (val, key) => {
            if (thisArg && isFunction$2(val)) {
                a2[key] = bind(val, thisArg)
            } else {
                a2[key] = val
            }
        },
        { allOwnKeys }
    )
    return a2
}
const stripBOM = (content) => {
    if (content.charCodeAt(0) === 65279) {
        content = content.slice(1)
    }
    return content
}
const inherits = (constructor, superConstructor, props, descriptors2) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2)
    constructor.prototype.constructor = constructor
    Object.defineProperty(constructor, 'super', {
        value: superConstructor.prototype
    })
    props && Object.assign(constructor.prototype, props)
}
const toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
    let props
    let i
    let prop
    const merged = {}
    destObj = destObj || {}
    if (sourceObj == null) return destObj
    do {
        props = Object.getOwnPropertyNames(sourceObj)
        i = props.length
        while (i-- > 0) {
            prop = props[i]
            if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
                destObj[prop] = sourceObj[prop]
                merged[prop] = true
            }
        }
        sourceObj = filter2 !== false && getPrototypeOf(sourceObj)
    } while (
        sourceObj &&
        (!filter2 || filter2(sourceObj, destObj)) &&
        sourceObj !== Object.prototype
    )
    return destObj
}
const endsWith = (str, searchString, position2) => {
    str = String(str)
    if (position2 === void 0 || position2 > str.length) {
        position2 = str.length
    }
    position2 -= searchString.length
    const lastIndex = str.indexOf(searchString, position2)
    return lastIndex !== -1 && lastIndex === position2
}
const toArray$1 = (thing) => {
    if (!thing) return null
    if (isArray$2(thing)) return thing
    let i = thing.length
    if (!isNumber$2(i)) return null
    const arr = new Array(i)
    while (i-- > 0) {
        arr[i] = thing[i]
    }
    return arr
}
const isTypedArray$1 = /* @__PURE__ */ ((TypedArray) => {
    return (thing) => {
        return TypedArray && thing instanceof TypedArray
    }
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array))
const forEachEntry = (obj, fn) => {
    const generator = obj && obj[iterator]
    const _iterator = generator.call(obj)
    let result
    while ((result = _iterator.next()) && !result.done) {
        const pair = result.value
        fn.call(obj, pair[0], pair[1])
    }
}
const matchAll = (regExp, str) => {
    let matches
    const arr = []
    while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches)
    }
    return arr
}
const isHTMLForm = kindOfTest('HTMLFormElement')
const toCamelCase = (str) => {
    return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2
    })
}
const hasOwnProperty$1 = (
    ({ hasOwnProperty: hasOwnProperty2 }) =>
    (obj, prop) =>
        hasOwnProperty2.call(obj, prop)
)(Object.prototype)
const isRegExp = kindOfTest('RegExp')
const reduceDescriptors = (obj, reducer) => {
    const descriptors2 = Object.getOwnPropertyDescriptors(obj)
    const reducedDescriptors = {}
    forEach(descriptors2, (descriptor, name) => {
        let ret
        if ((ret = reducer(descriptor, name, obj)) !== false) {
            reducedDescriptors[name] = ret || descriptor
        }
    })
    Object.defineProperties(obj, reducedDescriptors)
}
const freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction$2(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
            return false
        }
        const value = obj[name]
        if (!isFunction$2(value)) return
        descriptor.enumerable = false
        if ('writable' in descriptor) {
            descriptor.writable = false
            return
        }
        if (!descriptor.set) {
            descriptor.set = () => {
                throw Error("Can not rewrite read-only method '" + name + "'")
            }
        }
    })
}
const toObjectSet = (arrayOrString, delimiter2) => {
    const obj = {}
    const define2 = (arr) => {
        arr.forEach((value) => {
            obj[value] = true
        })
    }
    isArray$2(arrayOrString)
        ? define2(arrayOrString)
        : define2(String(arrayOrString).split(delimiter2))
    return obj
}
const noop$2 = () => {}
const toFiniteNumber = (value, defaultValue) => {
    return value != null && Number.isFinite((value = +value)) ? value : defaultValue
}
function isSpecCompliantForm(thing) {
    return !!(
        thing &&
        isFunction$2(thing.append) &&
        thing[toStringTag] === 'FormData' &&
        thing[iterator]
    )
}
const toJSONObject = (obj) => {
    const stack = new Array(10)
    const visit = (source, i) => {
        if (isObject$1(source)) {
            if (stack.indexOf(source) >= 0) {
                return
            }
            if (!('toJSON' in source)) {
                stack[i] = source
                const target = isArray$2(source) ? [] : {}
                forEach(source, (value, key) => {
                    const reducedValue = visit(value, i + 1)
                    !isUndefined(reducedValue) && (target[key] = reducedValue)
                })
                stack[i] = void 0
                return target
            }
        }
        return source
    }
    return visit(obj, 0)
}
const isAsyncFn = kindOfTest('AsyncFunction')
const isThenable = (thing) =>
    thing &&
    (isObject$1(thing) || isFunction$2(thing)) &&
    isFunction$2(thing.then) &&
    isFunction$2(thing.catch)
const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
    if (setImmediateSupported) {
        return setImmediate
    }
    return postMessageSupported
        ? ((token2, callbacks) => {
              _global.addEventListener(
                  'message',
                  ({ source, data }) => {
                      if (source === _global && data === token2) {
                          callbacks.length && callbacks.shift()()
                      }
                  },
                  false
              )
              return (cb) => {
                  callbacks.push(cb)
                  _global.postMessage(token2, '*')
              }
          })(`axios@${Math.random()}`, [])
        : (cb) => setTimeout(cb)
})(typeof setImmediate === 'function', isFunction$2(_global.postMessage))
const asap =
    typeof queueMicrotask !== 'undefined'
        ? queueMicrotask.bind(_global)
        : (typeof process !== 'undefined' && process.nextTick) || _setImmediate
const isIterable = (thing) => thing != null && isFunction$2(thing[iterator])
const utils$1 = {
    isArray: isArray$2,
    isArrayBuffer,
    isBuffer: isBuffer$1,
    isFormData,
    isArrayBufferView,
    isString: isString$1,
    isNumber: isNumber$2,
    isBoolean: isBoolean$1,
    isObject: isObject$1,
    isPlainObject: isPlainObject$1,
    isReadableStream,
    isRequest,
    isResponse,
    isHeaders,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction: isFunction$2,
    isStream,
    isURLSearchParams,
    isTypedArray: isTypedArray$1,
    isFileList,
    forEach,
    merge,
    extend: extend$1,
    trim: trim$1,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray: toArray$1,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty: hasOwnProperty$1,
    hasOwnProp: hasOwnProperty$1,
    // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop: noop$2,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable,
    setImmediate: _setImmediate,
    asap,
    isIterable
}
function AxiosError$1(message, code, config2, request, response) {
    Error.call(this)
    if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor)
    } else {
        this.stack = new Error().stack
    }
    this.message = message
    this.name = 'AxiosError'
    code && (this.code = code)
    config2 && (this.config = config2)
    request && (this.request = request)
    if (response) {
        this.response = response
        this.status = response.status ? response.status : null
    }
}
utils$1.inherits(AxiosError$1, Error, {
    toJSON: function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: utils$1.toJSONObject(this.config),
            code: this.code,
            status: this.status
        }
    }
})
const prototype$1 = AxiosError$1.prototype
const descriptors = {}
;[
    'ERR_BAD_OPTION_VALUE',
    'ERR_BAD_OPTION',
    'ECONNABORTED',
    'ETIMEDOUT',
    'ERR_NETWORK',
    'ERR_FR_TOO_MANY_REDIRECTS',
    'ERR_DEPRECATED',
    'ERR_BAD_RESPONSE',
    'ERR_BAD_REQUEST',
    'ERR_CANCELED',
    'ERR_NOT_SUPPORT',
    'ERR_INVALID_URL'
    // eslint-disable-next-line func-names
].forEach((code) => {
    descriptors[code] = { value: code }
})
Object.defineProperties(AxiosError$1, descriptors)
Object.defineProperty(prototype$1, 'isAxiosError', { value: true })
AxiosError$1.from = (error, code, config2, request, response, customProps) => {
    const axiosError = Object.create(prototype$1)
    utils$1.toFlatObject(
        error,
        axiosError,
        function filter2(obj) {
            return obj !== Error.prototype
        },
        (prop) => {
            return prop !== 'isAxiosError'
        }
    )
    AxiosError$1.call(axiosError, error.message, code, config2, request, response)
    axiosError.cause = error
    axiosError.name = error.name
    customProps && Object.assign(axiosError, customProps)
    return axiosError
}
const httpAdapter = null
function isVisitable(thing) {
    return utils$1.isPlainObject(thing) || utils$1.isArray(thing)
}
function removeBrackets(key) {
    return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key
}
function renderKey(path, key, dots) {
    if (!path) return key
    return path
        .concat(key)
        .map(function each(token2, i) {
            token2 = removeBrackets(token2)
            return !dots && i ? '[' + token2 + ']' : token2
        })
        .join(dots ? '.' : '')
}
function isFlatArray(arr) {
    return utils$1.isArray(arr) && !arr.some(isVisitable)
}
const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop)
})
function toFormData$1(obj, formData, options2) {
    if (!utils$1.isObject(obj)) {
        throw new TypeError('target must be an object')
    }
    formData = formData || new FormData()
    options2 = utils$1.toFlatObject(
        options2,
        {
            metaTokens: true,
            dots: false,
            indexes: false
        },
        false,
        function defined3(option, source) {
            return !utils$1.isUndefined(source[option])
        }
    )
    const metaTokens = options2.metaTokens
    const visitor = options2.visitor || defaultVisitor
    const dots = options2.dots
    const indexes = options2.indexes
    const _Blob = options2.Blob || (typeof Blob !== 'undefined' && Blob)
    const useBlob = _Blob && utils$1.isSpecCompliantForm(formData)
    if (!utils$1.isFunction(visitor)) {
        throw new TypeError('visitor must be a function')
    }
    function convertValue(value) {
        if (value === null) return ''
        if (utils$1.isDate(value)) {
            return value.toISOString()
        }
        if (!useBlob && utils$1.isBlob(value)) {
            throw new AxiosError$1('Blob is not supported. Use a Buffer instead.')
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
            return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value)
        }
        return value
    }
    function defaultVisitor(value, key, path) {
        let arr = value
        if (value && !path && typeof value === 'object') {
            if (utils$1.endsWith(key, '{}')) {
                key = metaTokens ? key : key.slice(0, -2)
                value = JSON.stringify(value)
            } else if (
                (utils$1.isArray(value) && isFlatArray(value)) ||
                ((utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) &&
                    (arr = utils$1.toArray(value)))
            ) {
                key = removeBrackets(key)
                arr.forEach(function each(el, index2) {
                    !(utils$1.isUndefined(el) || el === null) &&
                        formData.append(
                            // eslint-disable-next-line no-nested-ternary
                            indexes === true
                                ? renderKey([key], index2, dots)
                                : indexes === null
                                  ? key
                                  : key + '[]',
                            convertValue(el)
                        )
                })
                return false
            }
        }
        if (isVisitable(value)) {
            return true
        }
        formData.append(renderKey(path, key, dots), convertValue(value))
        return false
    }
    const stack = []
    const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
    })
    function build(value, path) {
        if (utils$1.isUndefined(value)) return
        if (stack.indexOf(value) !== -1) {
            throw Error('Circular reference detected in ' + path.join('.'))
        }
        stack.push(value)
        utils$1.forEach(value, function each(el, key) {
            const result =
                !(utils$1.isUndefined(el) || el === null) &&
                visitor.call(
                    formData,
                    el,
                    utils$1.isString(key) ? key.trim() : key,
                    path,
                    exposedHelpers
                )
            if (result === true) {
                build(el, path ? path.concat(key) : [key])
            }
        })
        stack.pop()
    }
    if (!utils$1.isObject(obj)) {
        throw new TypeError('data must be an object')
    }
    build(obj)
    return formData
}
function encode$1(str) {
    const charMap = {
        '!': '%21',
        "'": '%27',
        '(': '%28',
        ')': '%29',
        '~': '%7E',
        '%20': '+',
        '%00': '\0'
    }
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match2) {
        return charMap[match2]
    })
}
function AxiosURLSearchParams(params, options2) {
    this._pairs = []
    params && toFormData$1(params, this, options2)
}
const prototype = AxiosURLSearchParams.prototype
prototype.append = function append(name, value) {
    this._pairs.push([name, value])
}
prototype.toString = function toString(encoder) {
    const _encode = encoder
        ? function (value) {
              return encoder.call(this, value, encode$1)
          }
        : encode$1
    return this._pairs
        .map(function each(pair) {
            return _encode(pair[0]) + '=' + _encode(pair[1])
        }, '')
        .join('&')
}
function encode(val) {
    return encodeURIComponent(val)
        .replace(/%3A/gi, ':')
        .replace(/%24/g, '$')
        .replace(/%2C/gi, ',')
        .replace(/%20/g, '+')
        .replace(/%5B/gi, '[')
        .replace(/%5D/gi, ']')
}
function buildURL(url, params, options2) {
    if (!params) {
        return url
    }
    const _encode = (options2 && options2.encode) || encode
    if (utils$1.isFunction(options2)) {
        options2 = {
            serialize: options2
        }
    }
    const serializeFn = options2 && options2.serialize
    let serializedParams
    if (serializeFn) {
        serializedParams = serializeFn(params, options2)
    } else {
        serializedParams = utils$1.isURLSearchParams(params)
            ? params.toString()
            : new AxiosURLSearchParams(params, options2).toString(_encode)
    }
    if (serializedParams) {
        const hashmarkIndex = url.indexOf('#')
        if (hashmarkIndex !== -1) {
            url = url.slice(0, hashmarkIndex)
        }
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams
    }
    return url
}
class InterceptorManager {
    constructor() {
        this.handlers = []
    }
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options2) {
        this.handlers.push({
            fulfilled,
            rejected,
            synchronous: options2 ? options2.synchronous : false,
            runWhen: options2 ? options2.runWhen : null
        })
        return this.handlers.length - 1
    }
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id) {
        if (this.handlers[id]) {
            this.handlers[id] = null
        }
    }
    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
        if (this.handlers) {
            this.handlers = []
        }
    }
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
            if (h !== null) {
                fn(h)
            }
        })
    }
}
const transitionalDefaults = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
}
const URLSearchParams$1 =
    typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams
const FormData$1 = typeof FormData !== 'undefined' ? FormData : null
const Blob$1 = typeof Blob !== 'undefined' ? Blob : null
const platform$1 = {
    isBrowser: true,
    classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
    },
    protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
}
const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined'
const _navigator = (typeof navigator === 'object' && navigator) || void 0
const hasStandardBrowserEnv =
    hasBrowserEnv &&
    (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0)
const hasStandardBrowserWebWorkerEnv = (() => {
    return (
        typeof WorkerGlobalScope !== 'undefined' && // eslint-disable-next-line no-undef
        self instanceof WorkerGlobalScope &&
        typeof self.importScripts === 'function'
    )
})()
const origin = (hasBrowserEnv && window.location.href) || 'http://localhost'
const utils = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            hasBrowserEnv,
            hasStandardBrowserEnv,
            hasStandardBrowserWebWorkerEnv,
            navigator: _navigator,
            origin
        },
        Symbol.toStringTag,
        { value: 'Module' }
    )
)
const platform = {
    ...utils,
    ...platform$1
}
function toURLEncodedForm(data, options2) {
    return toFormData$1(
        data,
        new platform.classes.URLSearchParams(),
        Object.assign(
            {
                visitor: function (value, key, path, helpers) {
                    if (platform.isNode && utils$1.isBuffer(value)) {
                        this.append(key, value.toString('base64'))
                        return false
                    }
                    return helpers.defaultVisitor.apply(this, arguments)
                }
            },
            options2
        )
    )
}
function parsePropPath(name) {
    return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match2) => {
        return match2[0] === '[]' ? '' : match2[1] || match2[0]
    })
}
function arrayToObject(arr) {
    const obj = {}
    const keys2 = Object.keys(arr)
    let i
    const len = keys2.length
    let key
    for (i = 0; i < len; i++) {
        key = keys2[i]
        obj[key] = arr[key]
    }
    return obj
}
function formDataToJSON(formData) {
    function buildPath(path, value, target, index2) {
        let name = path[index2++]
        if (name === '__proto__') return true
        const isNumericKey = Number.isFinite(+name)
        const isLast = index2 >= path.length
        name = !name && utils$1.isArray(target) ? target.length : name
        if (isLast) {
            if (utils$1.hasOwnProp(target, name)) {
                target[name] = [target[name], value]
            } else {
                target[name] = value
            }
            return !isNumericKey
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
            target[name] = []
        }
        const result = buildPath(path, value, target[name], index2)
        if (result && utils$1.isArray(target[name])) {
            target[name] = arrayToObject(target[name])
        }
        return !isNumericKey
    }
    if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {}
        utils$1.forEachEntry(formData, (name, value) => {
            buildPath(parsePropPath(name), value, obj, 0)
        })
        return obj
    }
    return null
}
function stringifySafely(rawValue, parser, encoder) {
    if (utils$1.isString(rawValue)) {
        try {
            ;(parser || JSON.parse)(rawValue)
            return utils$1.trim(rawValue)
        } catch (e) {
            if (e.name !== 'SyntaxError') {
                throw e
            }
        }
    }
    return (encoder || JSON.stringify)(rawValue)
}
const defaults$1 = {
    transitional: transitionalDefaults,
    adapter: ['xhr', 'http', 'fetch'],
    transformRequest: [
        function transformRequest(data, headers) {
            const contentType = headers.getContentType() || ''
            const hasJSONContentType = contentType.indexOf('application/json') > -1
            const isObjectPayload = utils$1.isObject(data)
            if (isObjectPayload && utils$1.isHTMLForm(data)) {
                data = new FormData(data)
            }
            const isFormData2 = utils$1.isFormData(data)
            if (isFormData2) {
                return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data
            }
            if (
                utils$1.isArrayBuffer(data) ||
                utils$1.isBuffer(data) ||
                utils$1.isStream(data) ||
                utils$1.isFile(data) ||
                utils$1.isBlob(data) ||
                utils$1.isReadableStream(data)
            ) {
                return data
            }
            if (utils$1.isArrayBufferView(data)) {
                return data.buffer
            }
            if (utils$1.isURLSearchParams(data)) {
                headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false)
                return data.toString()
            }
            let isFileList2
            if (isObjectPayload) {
                if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
                    return toURLEncodedForm(data, this.formSerializer).toString()
                }
                if (
                    (isFileList2 = utils$1.isFileList(data)) ||
                    contentType.indexOf('multipart/form-data') > -1
                ) {
                    const _FormData = this.env && this.env.FormData
                    return toFormData$1(
                        isFileList2 ? { 'files[]': data } : data,
                        _FormData && new _FormData(),
                        this.formSerializer
                    )
                }
            }
            if (isObjectPayload || hasJSONContentType) {
                headers.setContentType('application/json', false)
                return stringifySafely(data)
            }
            return data
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            const transitional2 = this.transitional || defaults$1.transitional
            const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing
            const JSONRequested = this.responseType === 'json'
            if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
                return data
            }
            if (
                data &&
                utils$1.isString(data) &&
                ((forcedJSONParsing && !this.responseType) || JSONRequested)
            ) {
                const silentJSONParsing = transitional2 && transitional2.silentJSONParsing
                const strictJSONParsing = !silentJSONParsing && JSONRequested
                try {
                    return JSON.parse(data)
                } catch (e) {
                    if (strictJSONParsing) {
                        if (e.name === 'SyntaxError') {
                            throw AxiosError$1.from(
                                e,
                                AxiosError$1.ERR_BAD_RESPONSE,
                                this,
                                null,
                                this.response
                            )
                        }
                        throw e
                    }
                }
            }
            return data
        }
    ],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
    },
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300
    },
    headers: {
        common: {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': void 0
        }
    }
}
utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
    defaults$1.headers[method] = {}
})
const ignoreDuplicateOf = utils$1.toObjectSet([
    'age',
    'authorization',
    'content-length',
    'content-type',
    'etag',
    'expires',
    'from',
    'host',
    'if-modified-since',
    'if-unmodified-since',
    'last-modified',
    'location',
    'max-forwards',
    'proxy-authorization',
    'referer',
    'retry-after',
    'user-agent'
])
const parseHeaders = (rawHeaders) => {
    const parsed = {}
    let key
    let val
    let i
    rawHeaders &&
        rawHeaders.split('\n').forEach(function parser(line2) {
            i = line2.indexOf(':')
            key = line2.substring(0, i).trim().toLowerCase()
            val = line2.substring(i + 1).trim()
            if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
                return
            }
            if (key === 'set-cookie') {
                if (parsed[key]) {
                    parsed[key].push(val)
                } else {
                    parsed[key] = [val]
                }
            } else {
                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val
            }
        })
    return parsed
}
const $internals = Symbol('internals')
function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase()
}
function normalizeValue(value) {
    if (value === false || value == null) {
        return value
    }
    return utils$1.isArray(value) ? value.map(normalizeValue) : String(value)
}
function parseTokens(str) {
    const tokens = /* @__PURE__ */ Object.create(null)
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g
    let match2
    while ((match2 = tokensRE.exec(str))) {
        tokens[match2[1]] = match2[2]
    }
    return tokens
}
const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim())
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
    if (utils$1.isFunction(filter2)) {
        return filter2.call(this, value, header)
    }
    if (isHeaderNameFilter) {
        value = header
    }
    if (!utils$1.isString(value)) return
    if (utils$1.isString(filter2)) {
        return value.indexOf(filter2) !== -1
    }
    if (utils$1.isRegExp(filter2)) {
        return filter2.test(value)
    }
}
function formatHeader(header) {
    return header
        .trim()
        .toLowerCase()
        .replace(/([a-z\d])(\w*)/g, (w2, char2, str) => {
            return char2.toUpperCase() + str
        })
}
function buildAccessors(obj, header) {
    const accessorName = utils$1.toCamelCase(' ' + header)
    ;['get', 'set', 'has'].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
            value: function (arg1, arg2, arg3) {
                return this[methodName].call(this, header, arg1, arg2, arg3)
            },
            configurable: true
        })
    })
}
let AxiosHeaders$1 = class AxiosHeaders {
    constructor(headers) {
        headers && this.set(headers)
    }
    set(header, valueOrRewrite, rewrite) {
        const self2 = this
        function setHeader(_value, _header, _rewrite) {
            const lHeader = normalizeHeader(_header)
            if (!lHeader) {
                throw new Error('header name must be a non-empty string')
            }
            const key = utils$1.findKey(self2, lHeader)
            if (
                !key ||
                self2[key] === void 0 ||
                _rewrite === true ||
                (_rewrite === void 0 && self2[key] !== false)
            ) {
                self2[key || _header] = normalizeValue(_value)
            }
        }
        const setHeaders = (headers, _rewrite) =>
            utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite))
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
            setHeaders(header, valueOrRewrite)
        } else if (
            utils$1.isString(header) &&
            (header = header.trim()) &&
            !isValidHeaderName(header)
        ) {
            setHeaders(parseHeaders(header), valueOrRewrite)
        } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {
            let obj = {},
                dest,
                key
            for (const entry of header) {
                if (!utils$1.isArray(entry)) {
                    throw TypeError('Object iterator must return a key-value pair')
                }
                obj[(key = entry[0])] = (dest = obj[key])
                    ? utils$1.isArray(dest)
                        ? [...dest, entry[1]]
                        : [dest, entry[1]]
                    : entry[1]
            }
            setHeaders(obj, valueOrRewrite)
        } else {
            header != null && setHeader(valueOrRewrite, header, rewrite)
        }
        return this
    }
    get(header, parser) {
        header = normalizeHeader(header)
        if (header) {
            const key = utils$1.findKey(this, header)
            if (key) {
                const value = this[key]
                if (!parser) {
                    return value
                }
                if (parser === true) {
                    return parseTokens(value)
                }
                if (utils$1.isFunction(parser)) {
                    return parser.call(this, value, key)
                }
                if (utils$1.isRegExp(parser)) {
                    return parser.exec(value)
                }
                throw new TypeError('parser must be boolean|regexp|function')
            }
        }
    }
    has(header, matcher) {
        header = normalizeHeader(header)
        if (header) {
            const key = utils$1.findKey(this, header)
            return !!(
                key &&
                this[key] !== void 0 &&
                (!matcher || matchHeaderValue(this, this[key], key, matcher))
            )
        }
        return false
    }
    delete(header, matcher) {
        const self2 = this
        let deleted = false
        function deleteHeader(_header) {
            _header = normalizeHeader(_header)
            if (_header) {
                const key = utils$1.findKey(self2, _header)
                if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
                    delete self2[key]
                    deleted = true
                }
            }
        }
        if (utils$1.isArray(header)) {
            header.forEach(deleteHeader)
        } else {
            deleteHeader(header)
        }
        return deleted
    }
    clear(matcher) {
        const keys2 = Object.keys(this)
        let i = keys2.length
        let deleted = false
        while (i--) {
            const key = keys2[i]
            if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
                delete this[key]
                deleted = true
            }
        }
        return deleted
    }
    normalize(format2) {
        const self2 = this
        const headers = {}
        utils$1.forEach(this, (value, header) => {
            const key = utils$1.findKey(headers, header)
            if (key) {
                self2[key] = normalizeValue(value)
                delete self2[header]
                return
            }
            const normalized = format2 ? formatHeader(header) : String(header).trim()
            if (normalized !== header) {
                delete self2[header]
            }
            self2[normalized] = normalizeValue(value)
            headers[normalized] = true
        })
        return this
    }
    concat(...targets) {
        return this.constructor.concat(this, ...targets)
    }
    toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null)
        utils$1.forEach(this, (value, header) => {
            value != null &&
                value !== false &&
                (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value)
        })
        return obj
    }
    [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]()
    }
    toString() {
        return Object.entries(this.toJSON())
            .map(([header, value]) => header + ': ' + value)
            .join('\n')
    }
    getSetCookie() {
        return this.get('set-cookie') || []
    }
    get [Symbol.toStringTag]() {
        return 'AxiosHeaders'
    }
    static from(thing) {
        return thing instanceof this ? thing : new this(thing)
    }
    static concat(first2, ...targets) {
        const computed = new this(first2)
        targets.forEach((target) => computed.set(target))
        return computed
    }
    static accessor(header) {
        const internals =
            (this[$internals] =
            this[$internals] =
                {
                    accessors: {}
                })
        const accessors = internals.accessors
        const prototype2 = this.prototype
        function defineAccessor(_header) {
            const lHeader = normalizeHeader(_header)
            if (!accessors[lHeader]) {
                buildAccessors(prototype2, _header)
                accessors[lHeader] = true
            }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header)
        return this
    }
}
AxiosHeaders$1.accessor([
    'Content-Type',
    'Content-Length',
    'Accept',
    'Accept-Encoding',
    'User-Agent',
    'Authorization'
])
utils$1.reduceDescriptors(AxiosHeaders$1.prototype, ({ value }, key) => {
    let mapped = key[0].toUpperCase() + key.slice(1)
    return {
        get: () => value,
        set(headerValue) {
            this[mapped] = headerValue
        }
    }
})
utils$1.freezeMethods(AxiosHeaders$1)
function transformData(fns, response) {
    const config2 = this || defaults$1
    const context = response || config2
    const headers = AxiosHeaders$1.from(context.headers)
    let data = context.data
    utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config2, data, headers.normalize(), response ? response.status : void 0)
    })
    headers.normalize()
    return data
}
function isCancel$1(value) {
    return !!(value && value.__CANCEL__)
}
function CanceledError$1(message, config2, request) {
    AxiosError$1.call(
        this,
        message == null ? 'canceled' : message,
        AxiosError$1.ERR_CANCELED,
        config2,
        request
    )
    this.name = 'CanceledError'
}
utils$1.inherits(CanceledError$1, AxiosError$1, {
    __CANCEL__: true
})
function settle(resolve, reject, response) {
    const validateStatus2 = response.config.validateStatus
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
        resolve(response)
    } else {
        reject(
            new AxiosError$1(
                'Request failed with status code ' + response.status,
                [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][
                    Math.floor(response.status / 100) - 4
                ],
                response.config,
                response.request,
                response
            )
        )
    }
}
function parseProtocol(url) {
    const match2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url)
    return (match2 && match2[1]) || ''
}
function speedometer(samplesCount, min2) {
    samplesCount = samplesCount || 10
    const bytes = new Array(samplesCount)
    const timestamps = new Array(samplesCount)
    let head = 0
    let tail = 0
    let firstSampleTS
    min2 = min2 !== void 0 ? min2 : 1e3
    return function push(chunkLength) {
        const now = Date.now()
        const startedAt = timestamps[tail]
        if (!firstSampleTS) {
            firstSampleTS = now
        }
        bytes[head] = chunkLength
        timestamps[head] = now
        let i = tail
        let bytesCount = 0
        while (i !== head) {
            bytesCount += bytes[i++]
            i = i % samplesCount
        }
        head = (head + 1) % samplesCount
        if (head === tail) {
            tail = (tail + 1) % samplesCount
        }
        if (now - firstSampleTS < min2) {
            return
        }
        const passed = startedAt && now - startedAt
        return passed ? Math.round((bytesCount * 1e3) / passed) : void 0
    }
}
function throttle$1(fn, freq) {
    let timestamp = 0
    let threshold2 = 1e3 / freq
    let lastArgs
    let timer
    const invoke = (args, now = Date.now()) => {
        timestamp = now
        lastArgs = null
        if (timer) {
            clearTimeout(timer)
            timer = null
        }
        fn.apply(null, args)
    }
    const throttled = (...args) => {
        const now = Date.now()
        const passed = now - timestamp
        if (passed >= threshold2) {
            invoke(args, now)
        } else {
            lastArgs = args
            if (!timer) {
                timer = setTimeout(() => {
                    timer = null
                    invoke(lastArgs)
                }, threshold2 - passed)
            }
        }
    }
    const flush = () => lastArgs && invoke(lastArgs)
    return [throttled, flush]
}
const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
    let bytesNotified = 0
    const _speedometer = speedometer(50, 250)
    return throttle$1((e) => {
        const loaded = e.loaded
        const total = e.lengthComputable ? e.total : void 0
        const progressBytes = loaded - bytesNotified
        const rate = _speedometer(progressBytes)
        const inRange = loaded <= total
        bytesNotified = loaded
        const data = {
            loaded,
            total,
            progress: total ? loaded / total : void 0,
            bytes: progressBytes,
            rate: rate ? rate : void 0,
            estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
            event: e,
            lengthComputable: total != null,
            [isDownloadStream ? 'download' : 'upload']: true
        }
        listener(data)
    }, freq)
}
const progressEventDecorator = (total, throttled) => {
    const lengthComputable = total != null
    return [
        (loaded) =>
            throttled[0]({
                lengthComputable,
                total,
                loaded
            }),
        throttled[1]
    ]
}
const asyncDecorator =
    (fn) =>
    (...args) =>
        utils$1.asap(() => fn(...args))
const isURLSameOrigin = platform.hasStandardBrowserEnv
    ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
          url = new URL(url, platform.origin)
          return (
              origin2.protocol === url.protocol &&
              origin2.host === url.host &&
              (isMSIE || origin2.port === url.port)
          )
      })(
          new URL(platform.origin),
          platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
      )
    : () => true
const cookies = platform.hasStandardBrowserEnv
    ? // Standard browser envs support document.cookie
      {
          write(name, value, expires, path, domain, secure) {
              const cookie = [name + '=' + encodeURIComponent(value)]
              utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString())
              utils$1.isString(path) && cookie.push('path=' + path)
              utils$1.isString(domain) && cookie.push('domain=' + domain)
              secure === true && cookie.push('secure')
              document.cookie = cookie.join('; ')
          },
          read(name) {
              const match2 = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'))
              return match2 ? decodeURIComponent(match2[3]) : null
          },
          remove(name) {
              this.write(name, '', Date.now() - 864e5)
          }
      }
    : // Non-standard browser env (web workers, react-native) lack needed support.
      {
          write() {},
          read() {
              return null
          },
          remove() {}
      }
function isAbsoluteURL(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url)
}
function combineURLs(baseURL, relativeURL) {
    return relativeURL
        ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL
}
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
    let isRelativeUrl = !isAbsoluteURL(requestedURL)
    if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
        return combineURLs(baseURL, requestedURL)
    }
    return requestedURL
}
const headersToObject = (thing) => (thing instanceof AxiosHeaders$1 ? { ...thing } : thing)
function mergeConfig$1(config1, config2) {
    config2 = config2 || {}
    const config3 = {}
    function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
            return utils$1.merge.call({ caseless }, target, source)
        } else if (utils$1.isPlainObject(source)) {
            return utils$1.merge({}, source)
        } else if (utils$1.isArray(source)) {
            return source.slice()
        }
        return source
    }
    function mergeDeepProperties(a2, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
            return getMergedValue(a2, b, prop, caseless)
        } else if (!utils$1.isUndefined(a2)) {
            return getMergedValue(void 0, a2, prop, caseless)
        }
    }
    function valueFromConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
            return getMergedValue(void 0, b)
        }
    }
    function defaultToConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
            return getMergedValue(void 0, b)
        } else if (!utils$1.isUndefined(a2)) {
            return getMergedValue(void 0, a2)
        }
    }
    function mergeDirectKeys(a2, b, prop) {
        if (prop in config2) {
            return getMergedValue(a2, b)
        } else if (prop in config1) {
            return getMergedValue(void 0, a2)
        }
    }
    const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a2, b, prop) =>
            mergeDeepProperties(headersToObject(a2), headersToObject(b), prop, true)
    }
    utils$1.forEach(
        Object.keys(Object.assign({}, config1, config2)),
        function computeConfigValue(prop) {
            const merge2 = mergeMap[prop] || mergeDeepProperties
            const configValue = merge2(config1[prop], config2[prop], prop)
            ;(utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys) ||
                (config3[prop] = configValue)
        }
    )
    return config3
}
const resolveConfig = (config2) => {
    const newConfig = mergeConfig$1({}, config2)
    let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig
    newConfig.headers = headers = AxiosHeaders$1.from(headers)
    newConfig.url = buildURL(
        buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls),
        config2.params,
        config2.paramsSerializer
    )
    if (auth) {
        headers.set(
            'Authorization',
            'Basic ' +
                btoa(
                    (auth.username || '') +
                        ':' +
                        (auth.password ? unescape(encodeURIComponent(auth.password)) : '')
                )
        )
    }
    let contentType
    if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
            headers.setContentType(void 0)
        } else if ((contentType = headers.getContentType()) !== false) {
            const [type, ...tokens] = contentType
                ? contentType
                      .split(';')
                      .map((token2) => token2.trim())
                      .filter(Boolean)
                : []
            headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '))
        }
    }
    if (platform.hasStandardBrowserEnv) {
        withXSRFToken &&
            utils$1.isFunction(withXSRFToken) &&
            (withXSRFToken = withXSRFToken(newConfig))
        if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
            const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName)
            if (xsrfValue) {
                headers.set(xsrfHeaderName, xsrfValue)
            }
        }
    }
    return newConfig
}
const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined'
const xhrAdapter =
    isXHRAdapterSupported &&
    function (config2) {
        return new Promise(function dispatchXhrRequest(resolve, reject) {
            const _config = resolveConfig(config2)
            let requestData = _config.data
            const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize()
            let { responseType, onUploadProgress, onDownloadProgress } = _config
            let onCanceled
            let uploadThrottled, downloadThrottled
            let flushUpload, flushDownload
            function done() {
                flushUpload && flushUpload()
                flushDownload && flushDownload()
                _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled)
                _config.signal && _config.signal.removeEventListener('abort', onCanceled)
            }
            let request = new XMLHttpRequest()
            request.open(_config.method.toUpperCase(), _config.url, true)
            request.timeout = _config.timeout
            function onloadend() {
                if (!request) {
                    return
                }
                const responseHeaders = AxiosHeaders$1.from(
                    'getAllResponseHeaders' in request && request.getAllResponseHeaders()
                )
                const responseData =
                    !responseType || responseType === 'text' || responseType === 'json'
                        ? request.responseText
                        : request.response
                const response = {
                    data: responseData,
                    status: request.status,
                    statusText: request.statusText,
                    headers: responseHeaders,
                    config: config2,
                    request
                }
                settle(
                    function _resolve(value) {
                        resolve(value)
                        done()
                    },
                    function _reject(err) {
                        reject(err)
                        done()
                    },
                    response
                )
                request = null
            }
            if ('onloadend' in request) {
                request.onloadend = onloadend
            } else {
                request.onreadystatechange = function handleLoad() {
                    if (!request || request.readyState !== 4) {
                        return
                    }
                    if (
                        request.status === 0 &&
                        !(request.responseURL && request.responseURL.indexOf('file:') === 0)
                    ) {
                        return
                    }
                    setTimeout(onloadend)
                }
            }
            request.onabort = function handleAbort() {
                if (!request) {
                    return
                }
                reject(
                    new AxiosError$1('Request aborted', AxiosError$1.ECONNABORTED, config2, request)
                )
                request = null
            }
            request.onerror = function handleError() {
                reject(
                    new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config2, request)
                )
                request = null
            }
            request.ontimeout = function handleTimeout() {
                let timeoutErrorMessage = _config.timeout
                    ? 'timeout of ' + _config.timeout + 'ms exceeded'
                    : 'timeout exceeded'
                const transitional2 = _config.transitional || transitionalDefaults
                if (_config.timeoutErrorMessage) {
                    timeoutErrorMessage = _config.timeoutErrorMessage
                }
                reject(
                    new AxiosError$1(
                        timeoutErrorMessage,
                        transitional2.clarifyTimeoutError
                            ? AxiosError$1.ETIMEDOUT
                            : AxiosError$1.ECONNABORTED,
                        config2,
                        request
                    )
                )
                request = null
            }
            requestData === void 0 && requestHeaders.setContentType(null)
            if ('setRequestHeader' in request) {
                utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
                    request.setRequestHeader(key, val)
                })
            }
            if (!utils$1.isUndefined(_config.withCredentials)) {
                request.withCredentials = !!_config.withCredentials
            }
            if (responseType && responseType !== 'json') {
                request.responseType = _config.responseType
            }
            if (onDownloadProgress) {
                ;[downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true)
                request.addEventListener('progress', downloadThrottled)
            }
            if (onUploadProgress && request.upload) {
                ;[uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress)
                request.upload.addEventListener('progress', uploadThrottled)
                request.upload.addEventListener('loadend', flushUpload)
            }
            if (_config.cancelToken || _config.signal) {
                onCanceled = (cancel) => {
                    if (!request) {
                        return
                    }
                    reject(
                        !cancel || cancel.type
                            ? new CanceledError$1(null, config2, request)
                            : cancel
                    )
                    request.abort()
                    request = null
                }
                _config.cancelToken && _config.cancelToken.subscribe(onCanceled)
                if (_config.signal) {
                    _config.signal.aborted
                        ? onCanceled()
                        : _config.signal.addEventListener('abort', onCanceled)
                }
            }
            const protocol = parseProtocol(_config.url)
            if (protocol && platform.protocols.indexOf(protocol) === -1) {
                reject(
                    new AxiosError$1(
                        'Unsupported protocol ' + protocol + ':',
                        AxiosError$1.ERR_BAD_REQUEST,
                        config2
                    )
                )
                return
            }
            request.send(requestData || null)
        })
    }
const composeSignals = (signals, timeout) => {
    const { length: length2 } = (signals = signals ? signals.filter(Boolean) : [])
    if (timeout || length2) {
        let controller = new AbortController()
        let aborted
        const onabort = function (reason) {
            if (!aborted) {
                aborted = true
                unsubscribe()
                const err = reason instanceof Error ? reason : this.reason
                controller.abort(
                    err instanceof AxiosError$1
                        ? err
                        : new CanceledError$1(err instanceof Error ? err.message : err)
                )
            }
        }
        let timer =
            timeout &&
            setTimeout(() => {
                timer = null
                onabort(
                    new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT)
                )
            }, timeout)
        const unsubscribe = () => {
            if (signals) {
                timer && clearTimeout(timer)
                timer = null
                signals.forEach((signal2) => {
                    signal2.unsubscribe
                        ? signal2.unsubscribe(onabort)
                        : signal2.removeEventListener('abort', onabort)
                })
                signals = null
            }
        }
        signals.forEach((signal2) => signal2.addEventListener('abort', onabort))
        const { signal } = controller
        signal.unsubscribe = () => utils$1.asap(unsubscribe)
        return signal
    }
}
const streamChunk = function* (chunk, chunkSize) {
    let len = chunk.byteLength
    if (len < chunkSize) {
        yield chunk
        return
    }
    let pos = 0
    let end
    while (pos < len) {
        end = pos + chunkSize
        yield chunk.slice(pos, end)
        pos = end
    }
}
const readBytes = async function* (iterable, chunkSize) {
    for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize)
    }
}
const readStream = async function* (stream) {
    if (stream[Symbol.asyncIterator]) {
        yield* stream
        return
    }
    const reader = stream.getReader()
    try {
        for (;;) {
            const { done, value } = await reader.read()
            if (done) {
                break
            }
            yield value
        }
    } finally {
        await reader.cancel()
    }
}
const trackStream = (stream, chunkSize, onProgress, onFinish) => {
    const iterator2 = readBytes(stream, chunkSize)
    let bytes = 0
    let done
    let _onFinish = (e) => {
        if (!done) {
            done = true
            onFinish && onFinish(e)
        }
    }
    return new ReadableStream(
        {
            async pull(controller) {
                try {
                    const { done: done2, value } = await iterator2.next()
                    if (done2) {
                        _onFinish()
                        controller.close()
                        return
                    }
                    let len = value.byteLength
                    if (onProgress) {
                        let loadedBytes = (bytes += len)
                        onProgress(loadedBytes)
                    }
                    controller.enqueue(new Uint8Array(value))
                } catch (err) {
                    _onFinish(err)
                    throw err
                }
            },
            cancel(reason) {
                _onFinish(reason)
                return iterator2.return()
            }
        },
        {
            highWaterMark: 2
        }
    )
}
const isFetchSupported =
    typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function'
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function'
const encodeText =
    isFetchSupported &&
    (typeof TextEncoder === 'function'
        ? /* @__PURE__ */ (
              (encoder) => (str) =>
                  encoder.encode(str)
          )(new TextEncoder())
        : async (str) => new Uint8Array(await new Response(str).arrayBuffer()))
const test = (fn, ...args) => {
    try {
        return !!fn(...args)
    } catch (e) {
        return false
    }
}
const supportsRequestStream =
    isReadableStreamSupported &&
    test(() => {
        let duplexAccessed = false
        const hasContentType = new Request(platform.origin, {
            body: new ReadableStream(),
            method: 'POST',
            get duplex() {
                duplexAccessed = true
                return 'half'
            }
        }).headers.has('Content-Type')
        return duplexAccessed && !hasContentType
    })
const DEFAULT_CHUNK_SIZE = 64 * 1024
const supportsResponseStream =
    isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response('').body))
const resolvers = {
    stream: supportsResponseStream && ((res) => res.body)
}
isFetchSupported &&
    ((res) => {
        ;['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach((type) => {
            !resolvers[type] &&
                (resolvers[type] = utils$1.isFunction(res[type])
                    ? (res2) => res2[type]()
                    : (_, config2) => {
                          throw new AxiosError$1(
                              `Response type '${type}' is not supported`,
                              AxiosError$1.ERR_NOT_SUPPORT,
                              config2
                          )
                      })
        })
    })(new Response())
const getBodyLength = async (body) => {
    if (body == null) {
        return 0
    }
    if (utils$1.isBlob(body)) {
        return body.size
    }
    if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
            method: 'POST',
            body
        })
        return (await _request.arrayBuffer()).byteLength
    }
    if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength
    }
    if (utils$1.isURLSearchParams(body)) {
        body = body + ''
    }
    if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength
    }
}
const resolveBodyLength = async (headers, body) => {
    const length2 = utils$1.toFiniteNumber(headers.getContentLength())
    return length2 == null ? getBodyLength(body) : length2
}
const fetchAdapter =
    isFetchSupported &&
    (async (config2) => {
        let {
            url,
            method,
            data,
            signal,
            cancelToken,
            timeout,
            onDownloadProgress,
            onUploadProgress,
            responseType,
            headers,
            withCredentials = 'same-origin',
            fetchOptions
        } = resolveConfig(config2)
        responseType = responseType ? (responseType + '').toLowerCase() : 'text'
        let composedSignal = composeSignals(
            [signal, cancelToken && cancelToken.toAbortSignal()],
            timeout
        )
        let request
        const unsubscribe =
            composedSignal &&
            composedSignal.unsubscribe &&
            (() => {
                composedSignal.unsubscribe()
            })
        let requestContentLength
        try {
            if (
                onUploadProgress &&
                supportsRequestStream &&
                method !== 'get' &&
                method !== 'head' &&
                (requestContentLength = await resolveBodyLength(headers, data)) !== 0
            ) {
                let _request = new Request(url, {
                    method: 'POST',
                    body: data,
                    duplex: 'half'
                })
                let contentTypeHeader
                if (
                    utils$1.isFormData(data) &&
                    (contentTypeHeader = _request.headers.get('content-type'))
                ) {
                    headers.setContentType(contentTypeHeader)
                }
                if (_request.body) {
                    const [onProgress, flush] = progressEventDecorator(
                        requestContentLength,
                        progressEventReducer(asyncDecorator(onUploadProgress))
                    )
                    data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush)
                }
            }
            if (!utils$1.isString(withCredentials)) {
                withCredentials = withCredentials ? 'include' : 'omit'
            }
            const isCredentialsSupported = 'credentials' in Request.prototype
            request = new Request(url, {
                ...fetchOptions,
                signal: composedSignal,
                method: method.toUpperCase(),
                headers: headers.normalize().toJSON(),
                body: data,
                duplex: 'half',
                credentials: isCredentialsSupported ? withCredentials : void 0
            })
            let response = await fetch(request)
            const isStreamResponse =
                supportsResponseStream && (responseType === 'stream' || responseType === 'response')
            if (
                supportsResponseStream &&
                (onDownloadProgress || (isStreamResponse && unsubscribe))
            ) {
                const options2 = {}
                ;['status', 'statusText', 'headers'].forEach((prop) => {
                    options2[prop] = response[prop]
                })
                const responseContentLength = utils$1.toFiniteNumber(
                    response.headers.get('content-length')
                )
                const [onProgress, flush] =
                    (onDownloadProgress &&
                        progressEventDecorator(
                            responseContentLength,
                            progressEventReducer(asyncDecorator(onDownloadProgress), true)
                        )) ||
                    []
                response = new Response(
                    trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
                        flush && flush()
                        unsubscribe && unsubscribe()
                    }),
                    options2
                )
            }
            responseType = responseType || 'text'
            let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || 'text'](
                response,
                config2
            )
            !isStreamResponse && unsubscribe && unsubscribe()
            return await new Promise((resolve, reject) => {
                settle(resolve, reject, {
                    data: responseData,
                    headers: AxiosHeaders$1.from(response.headers),
                    status: response.status,
                    statusText: response.statusText,
                    config: config2,
                    request
                })
            })
        } catch (err) {
            unsubscribe && unsubscribe()
            if (err && err.name === 'TypeError' && /Load failed|fetch/i.test(err.message)) {
                throw Object.assign(
                    new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config2, request),
                    {
                        cause: err.cause || err
                    }
                )
            }
            throw AxiosError$1.from(err, err && err.code, config2, request)
        }
    })
const knownAdapters = {
    http: httpAdapter,
    xhr: xhrAdapter,
    fetch: fetchAdapter
}
utils$1.forEach(knownAdapters, (fn, value) => {
    if (fn) {
        try {
            Object.defineProperty(fn, 'name', { value })
        } catch (e) {}
        Object.defineProperty(fn, 'adapterName', { value })
    }
})
const renderReason = (reason) => `- ${reason}`
const isResolvedHandle = (adapter) =>
    utils$1.isFunction(adapter) || adapter === null || adapter === false
const adapters = {
    getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2]
        const { length: length2 } = adapters2
        let nameOrAdapter
        let adapter
        const rejectedReasons = {}
        for (let i = 0; i < length2; i++) {
            nameOrAdapter = adapters2[i]
            let id
            adapter = nameOrAdapter
            if (!isResolvedHandle(nameOrAdapter)) {
                adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()]
                if (adapter === void 0) {
                    throw new AxiosError$1(`Unknown adapter '${id}'`)
                }
            }
            if (adapter) {
                break
            }
            rejectedReasons[id || '#' + i] = adapter
        }
        if (!adapter) {
            const reasons = Object.entries(rejectedReasons).map(
                ([id, state]) =>
                    `adapter ${id} ` +
                    (state === false
                        ? 'is not supported by the environment'
                        : 'is not available in the build')
            )
            let s2 = length2
                ? reasons.length > 1
                    ? 'since :\n' + reasons.map(renderReason).join('\n')
                    : ' ' + renderReason(reasons[0])
                : 'as no adapter specified'
            throw new AxiosError$1(
                `There is no suitable adapter to dispatch the request ` + s2,
                'ERR_NOT_SUPPORT'
            )
        }
        return adapter
    },
    adapters: knownAdapters
}
function throwIfCancellationRequested(config2) {
    if (config2.cancelToken) {
        config2.cancelToken.throwIfRequested()
    }
    if (config2.signal && config2.signal.aborted) {
        throw new CanceledError$1(null, config2)
    }
}
function dispatchRequest(config2) {
    throwIfCancellationRequested(config2)
    config2.headers = AxiosHeaders$1.from(config2.headers)
    config2.data = transformData.call(config2, config2.transformRequest)
    if (['post', 'put', 'patch'].indexOf(config2.method) !== -1) {
        config2.headers.setContentType('application/x-www-form-urlencoded', false)
    }
    const adapter = adapters.getAdapter(config2.adapter || defaults$1.adapter)
    return adapter(config2).then(
        function onAdapterResolution(response) {
            throwIfCancellationRequested(config2)
            response.data = transformData.call(config2, config2.transformResponse, response)
            response.headers = AxiosHeaders$1.from(response.headers)
            return response
        },
        function onAdapterRejection(reason) {
            if (!isCancel$1(reason)) {
                throwIfCancellationRequested(config2)
                if (reason && reason.response) {
                    reason.response.data = transformData.call(
                        config2,
                        config2.transformResponse,
                        reason.response
                    )
                    reason.response.headers = AxiosHeaders$1.from(reason.response.headers)
                }
            }
            return Promise.reject(reason)
        }
    )
}
const VERSION$1 = '1.9.0'
const validators$1 = {}
;['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
    validators$1[type] = function validator2(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type
    }
})
const deprecatedWarnings = {}
validators$1.transitional = function transitional(validator2, version, message) {
    function formatMessage(opt, desc) {
        return (
            '[Axios v' +
            VERSION$1 +
            "] Transitional option '" +
            opt +
            "'" +
            desc +
            (message ? '. ' + message : '')
        )
    }
    return (value, opt, opts) => {
        if (validator2 === false) {
            throw new AxiosError$1(
                formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
                AxiosError$1.ERR_DEPRECATED
            )
        }
        if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true
            console.warn(
                formatMessage(
                    opt,
                    ' has been deprecated since v' +
                        version +
                        ' and will be removed in the near future'
                )
            )
        }
        return validator2 ? validator2(value, opt, opts) : true
    }
}
validators$1.spelling = function spelling(correctSpelling) {
    return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`)
        return true
    }
}
function assertOptions(options2, schema, allowUnknown) {
    if (typeof options2 !== 'object') {
        throw new AxiosError$1('options must be an object', AxiosError$1.ERR_BAD_OPTION_VALUE)
    }
    const keys2 = Object.keys(options2)
    let i = keys2.length
    while (i-- > 0) {
        const opt = keys2[i]
        const validator2 = schema[opt]
        if (validator2) {
            const value = options2[opt]
            const result = value === void 0 || validator2(value, opt, options2)
            if (result !== true) {
                throw new AxiosError$1(
                    'option ' + opt + ' must be ' + result,
                    AxiosError$1.ERR_BAD_OPTION_VALUE
                )
            }
            continue
        }
        if (allowUnknown !== true) {
            throw new AxiosError$1('Unknown option ' + opt, AxiosError$1.ERR_BAD_OPTION)
        }
    }
}
const validator = {
    assertOptions,
    validators: validators$1
}
const validators = validator.validators
let Axios$1 = class Axios {
    constructor(instanceConfig) {
        this.defaults = instanceConfig || {}
        this.interceptors = {
            request: new InterceptorManager(),
            response: new InterceptorManager()
        }
    }
    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    async request(configOrUrl, config2) {
        try {
            return await this._request(configOrUrl, config2)
        } catch (err) {
            if (err instanceof Error) {
                let dummy = {}
                Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error())
                const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : ''
                try {
                    if (!err.stack) {
                        err.stack = stack
                    } else if (
                        stack &&
                        !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))
                    ) {
                        err.stack += '\n' + stack
                    }
                } catch (e) {}
            }
            throw err
        }
    }
    _request(configOrUrl, config2) {
        if (typeof configOrUrl === 'string') {
            config2 = config2 || {}
            config2.url = configOrUrl
        } else {
            config2 = configOrUrl || {}
        }
        config2 = mergeConfig$1(this.defaults, config2)
        const { transitional: transitional2, paramsSerializer, headers } = config2
        if (transitional2 !== void 0) {
            validator.assertOptions(
                transitional2,
                {
                    silentJSONParsing: validators.transitional(validators.boolean),
                    forcedJSONParsing: validators.transitional(validators.boolean),
                    clarifyTimeoutError: validators.transitional(validators.boolean)
                },
                false
            )
        }
        if (paramsSerializer != null) {
            if (utils$1.isFunction(paramsSerializer)) {
                config2.paramsSerializer = {
                    serialize: paramsSerializer
                }
            } else {
                validator.assertOptions(
                    paramsSerializer,
                    {
                        encode: validators.function,
                        serialize: validators.function
                    },
                    true
                )
            }
        }
        if (config2.allowAbsoluteUrls !== void 0);
        else if (this.defaults.allowAbsoluteUrls !== void 0) {
            config2.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls
        } else {
            config2.allowAbsoluteUrls = true
        }
        validator.assertOptions(
            config2,
            {
                baseUrl: validators.spelling('baseURL'),
                withXsrfToken: validators.spelling('withXSRFToken')
            },
            true
        )
        config2.method = (config2.method || this.defaults.method || 'get').toLowerCase()
        let contextHeaders = headers && utils$1.merge(headers.common, headers[config2.method])
        headers &&
            utils$1.forEach(
                ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                (method) => {
                    delete headers[method]
                }
            )
        config2.headers = AxiosHeaders$1.concat(contextHeaders, headers)
        const requestInterceptorChain = []
        let synchronousRequestInterceptors = true
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
            if (
                typeof interceptor.runWhen === 'function' &&
                interceptor.runWhen(config2) === false
            ) {
                return
            }
            synchronousRequestInterceptors =
                synchronousRequestInterceptors && interceptor.synchronous
            requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected)
        })
        const responseInterceptorChain = []
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
            responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected)
        })
        let promise
        let i = 0
        let len
        if (!synchronousRequestInterceptors) {
            const chain = [dispatchRequest.bind(this), void 0]
            chain.unshift.apply(chain, requestInterceptorChain)
            chain.push.apply(chain, responseInterceptorChain)
            len = chain.length
            promise = Promise.resolve(config2)
            while (i < len) {
                promise = promise.then(chain[i++], chain[i++])
            }
            return promise
        }
        len = requestInterceptorChain.length
        let newConfig = config2
        i = 0
        while (i < len) {
            const onFulfilled = requestInterceptorChain[i++]
            const onRejected = requestInterceptorChain[i++]
            try {
                newConfig = onFulfilled(newConfig)
            } catch (error) {
                onRejected.call(this, error)
                break
            }
        }
        try {
            promise = dispatchRequest.call(this, newConfig)
        } catch (error) {
            return Promise.reject(error)
        }
        i = 0
        len = responseInterceptorChain.length
        while (i < len) {
            promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++])
        }
        return promise
    }
    getUri(config2) {
        config2 = mergeConfig$1(this.defaults, config2)
        const fullPath = buildFullPath(config2.baseURL, config2.url, config2.allowAbsoluteUrls)
        return buildURL(fullPath, config2.params, config2.paramsSerializer)
    }
}
utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    Axios$1.prototype[method] = function (url, config2) {
        return this.request(
            mergeConfig$1(config2 || {}, {
                method,
                url,
                data: (config2 || {}).data
            })
        )
    }
})
utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config2) {
            return this.request(
                mergeConfig$1(config2 || {}, {
                    method,
                    headers: isForm
                        ? {
                              'Content-Type': 'multipart/form-data'
                          }
                        : {},
                    url,
                    data
                })
            )
        }
    }
    Axios$1.prototype[method] = generateHTTPMethod()
    Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true)
})
let CancelToken$1 = class CancelToken {
    constructor(executor) {
        if (typeof executor !== 'function') {
            throw new TypeError('executor must be a function.')
        }
        let resolvePromise
        this.promise = new Promise(function promiseExecutor(resolve) {
            resolvePromise = resolve
        })
        const token2 = this
        this.promise.then((cancel) => {
            if (!token2._listeners) return
            let i = token2._listeners.length
            while (i-- > 0) {
                token2._listeners[i](cancel)
            }
            token2._listeners = null
        })
        this.promise.then = (onfulfilled) => {
            let _resolve
            const promise = new Promise((resolve) => {
                token2.subscribe(resolve)
                _resolve = resolve
            }).then(onfulfilled)
            promise.cancel = function reject() {
                token2.unsubscribe(_resolve)
            }
            return promise
        }
        executor(function cancel(message, config2, request) {
            if (token2.reason) {
                return
            }
            token2.reason = new CanceledError$1(message, config2, request)
            resolvePromise(token2.reason)
        })
    }
    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
        if (this.reason) {
            throw this.reason
        }
    }
    /**
     * Subscribe to the cancel signal
     */
    subscribe(listener) {
        if (this.reason) {
            listener(this.reason)
            return
        }
        if (this._listeners) {
            this._listeners.push(listener)
        } else {
            this._listeners = [listener]
        }
    }
    /**
     * Unsubscribe from the cancel signal
     */
    unsubscribe(listener) {
        if (!this._listeners) {
            return
        }
        const index2 = this._listeners.indexOf(listener)
        if (index2 !== -1) {
            this._listeners.splice(index2, 1)
        }
    }
    toAbortSignal() {
        const controller = new AbortController()
        const abort = (err) => {
            controller.abort(err)
        }
        this.subscribe(abort)
        controller.signal.unsubscribe = () => this.unsubscribe(abort)
        return controller.signal
    }
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
        let cancel
        const token2 = new CancelToken(function executor(c2) {
            cancel = c2
        })
        return {
            token: token2,
            cancel
        }
    }
}
function spread$1(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr)
    }
}
function isAxiosError$1(payload) {
    return utils$1.isObject(payload) && payload.isAxiosError === true
}
const HttpStatusCode$1 = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
}
Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
    HttpStatusCode$1[value] = key
})
function createInstance(defaultConfig) {
    const context = new Axios$1(defaultConfig)
    const instance = bind(Axios$1.prototype.request, context)
    utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true })
    utils$1.extend(instance, context, null, { allOwnKeys: true })
    instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig$1(defaultConfig, instanceConfig))
    }
    return instance
}
const axios = createInstance(defaults$1)
axios.Axios = Axios$1
axios.CanceledError = CanceledError$1
axios.CancelToken = CancelToken$1
axios.isCancel = isCancel$1
axios.VERSION = VERSION$1
axios.toFormData = toFormData$1
axios.AxiosError = AxiosError$1
axios.Cancel = axios.CanceledError
axios.all = function all(promises) {
    return Promise.all(promises)
}
axios.spread = spread$1
axios.isAxiosError = isAxiosError$1
axios.mergeConfig = mergeConfig$1
axios.AxiosHeaders = AxiosHeaders$1
axios.formToJSON = (thing) =>
    formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing)
axios.getAdapter = adapters.getAdapter
axios.HttpStatusCode = HttpStatusCode$1
axios.default = axios
const {
    Axios: Axios2,
    AxiosError,
    CanceledError,
    isCancel,
    CancelToken: CancelToken2,
    VERSION,
    all: all2,
    Cancel,
    isAxiosError,
    spread,
    toFormData,
    AxiosHeaders: AxiosHeaders2,
    HttpStatusCode,
    formToJSON,
    getAdapter,
    mergeConfig
} = axios
const API_URL = 'http://192.168.2.133:8000/api'
const api = axios.create({
    baseURL: API_URL,
    withCredentials: true,
    headers: {
        'Content-Type': 'application/json'
    }
})
api.interceptors.request.use(
    (config2) => {
        const token2 = sessionStorage.getItem('token')
        if (token2) {
            config2.headers.Authorization = `Bearer ${token2}`
        }
        return config2
    },
    (error) => {
        return Promise.reject(error)
    }
)
const GlobalToast = ({ message, show, onClose, isPositive, title, delay }) => {
    const toastRef = reactExports.useRef(null)
    const toastInstance = reactExports.useRef(null)
    reactExports.useEffect(() => {
        if (toastRef.current) {
            toastInstance.current = bootstrap_bundle_minExports.Toast.getOrCreateInstance(
                toastRef.current,
                {
                    autohide: true,
                    delay
                }
            )
        }
    }, [delay])
    reactExports.useEffect(() => {
        if (show && toastInstance.current) {
            toastInstance.current.show()
        }
    }, [show])
    reactExports.useEffect(() => {
        const toastEl = toastRef.current
        const handleHidden = () => onClose()
        if (toastEl) {
            toastEl.addEventListener('hidden.bs.toast', handleHidden)
        }
        return () => {
            if (toastEl) {
                toastEl.removeEventListener('hidden.bs.toast', handleHidden)
            }
        }
    }, [onClose])
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        ref: toastRef,
        className: `toast bg-${isPositive ? 'success' : 'danger'}-subtle shadow-lg mb-3`,
        role: 'alert',
        'aria-live': 'assertive',
        'aria-atomic': 'true',
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'toast-header',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                        className: `bi ${isPositive ? 'bi-check-circle-fill text-success' : 'bi-exclamation-triangle-fill text-danger'} me-2`
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                        className: 'me-auto',
                        children: title
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('small', {
                        className: 'text-muted',
                        children: 'Just now'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                        type: 'button',
                        className: 'btn-close',
                        'data-bs-dismiss': 'toast',
                        'aria-label': 'Close'
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'toast-body',
                children: message
            })
        ]
    })
}
const ToastContext = reactExports.createContext()
const ToastProvider = ({ children }) => {
    const [toasts, setToasts] = reactExports.useState([])
    const showToast = reactExports.useCallback((options2) => {
        const id = Date.now() + Math.random()
        setToasts((prev2) => [
            {
                id,
                message: options2.message || '',
                title: options2.title || 'Notification',
                isPositive: options2.isPositive !== false,
                delay: options2.delay || 3e3
            },
            ...prev2
        ])
    }, [])
    const removeToast = reactExports.useCallback((id) => {
        setToasts((prev2) => prev2.filter((t) => t.id !== id))
    }, [])
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(ToastContext.Provider, {
        value: { showToast },
        children: [
            children,
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'toast-container position-fixed top-0 end-0 p-3 mt-5 z-1055',
                style: { zIndex: 1055 },
                children: toasts.map((toast) =>
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                        GlobalToast,
                        {
                            ...toast,
                            show: true,
                            onClose: () => removeToast(toast.id)
                        },
                        toast.id
                    )
                )
            })
        ]
    })
}
const useToast = () => reactExports.useContext(ToastContext)
const APIContext = reactExports.createContext()
const APIProvider = ({ children }) => {
    const { showToast } = useToast()
    const [authUser, setAuthUser] = reactExports.useState(null)
    const [authLoading, setAuthLoading] = reactExports.useState(true)
    const navigate = useNavigate()
    reactExports.useEffect(() => {
        const fetchUserDetails = async () => {
            setAuthLoading(true)
            try {
                const token2 = sessionStorage.getItem('token')
                if (token2) {
                    api.defaults.headers.common['Authorization'] = `Bearer ${token2}`
                    const data = await getAuthUser()
                    if (data) {
                        setAuthUser(data)
                    } else {
                        sessionStorage.removeItem('token')
                        delete api.defaults.headers.common['Authorization']
                        navigate('/login')
                    }
                } else {
                    navigate('/login')
                }
            } catch (error) {
                console.error('Error fetching auth user:', error)
                sessionStorage.removeItem('token')
                delete api.defaults.headers.common['Authorization']
                navigate('/login')
            } finally {
                setAuthLoading(false)
            }
        }
        fetchUserDetails()
    }, [])
    const makeRequest = async (method, endpoint, data = null, setLoading, setData, setError) => {
        try {
            if (setLoading) setLoading(true)
            const config2 = data ? { data } : {}
            const response = await api[method](endpoint, data, config2)
            if (setData) setData(response.data)
            if (response.data?.message && method != 'get') {
                showToast({
                    message: response.data.message,
                    title: 'Success',
                    isPositive: true,
                    delay: 5e3
                })
            }
            return response.data
        } catch (error) {
            const errMsg = error?.response?.data?.message || error.message || 'An error occurred.'
            console.error(`Error with ${method.toUpperCase()} ${endpoint}:`, errMsg)
            if (setError) setError(errMsg)
            showToast({
                message: errMsg,
                title: 'Error',
                isPositive: false,
                delay: 5e3
            })
            return null
        } finally {
            if (setLoading) setLoading(false)
        }
    }
    const getData = (endpoint, setData, setLoading, setError) =>
        makeRequest('get', endpoint, null, setLoading, setData, setError)
    const postData = (endpoint, data, setData, setLoading, setError) =>
        makeRequest('post', endpoint, data, setLoading, setData, setError)
    const putData = (endpoint, data, setData, setLoading, setError) =>
        makeRequest('put', endpoint, data, setLoading, setData, setError)
    const patchData = (endpoint, data, setData, setLoading, setError) =>
        makeRequest('patch', endpoint, data, setLoading, setData, setError)
    const deleteData = (endpoint, setLoading, setError) =>
        makeRequest('delete', endpoint, null, setLoading, null, setError)
    const login = async (username, password, setLoading, setError) => {
        const response = await makeRequest(
            'post',
            '/login',
            { username, password },
            setLoading,
            null,
            setError
        )
        if (response?.token) {
            sessionStorage.setItem('token', response.token)
            api.defaults.headers.common['Authorization'] = `Bearer ${response.token}`
            return response.message
        }
        return null
    }
    const logout = async (setLoading, setError) => {
        await makeRequest('post', '/logout', {}, setLoading, null, setError)
        setAuthUser(null)
        sessionStorage.removeItem('token')
        delete api.defaults.headers.common['Authorization']
    }
    const getAuthUser = async () => {
        try {
            const { data } = await api.get('/auth')
            setAuthUser(data)
            return data
        } catch (error) {
            console.error('Fetch user failed:', error?.response?.data || error.message)
            return null
        }
    }
    const getComments = async (ticketId) => await getData(`/tickets/${ticketId}/comments`)
    const showComment = async (ticketId, commentId) =>
        await getData(`/tickets/${ticketId}/comments/${commentId}`)
    const addComment = async (ticketId, commentData, setLoading, setError) =>
        await postData(`/tickets/${ticketId}/comments`, commentData, () => {}, setLoading, setError)
    const updateComment = async (ticketId, commentId, commentData) =>
        await putData(`/tickets/${ticketId}/comments/${commentId}`, commentData)
    const deleteComment = async (ticketId, commentId) =>
        await deleteData(`/tickets/${ticketId}/comments/${commentId}`)
    const addTicket = async (ticketData) => await postData('/tickets', ticketData)
    const approveTicket = async (ticketId) => await postData(`/tickets/${ticketId}/approve`, {})
    const assignTicket = async (ticketId, assignedTo) =>
        await postData(`/tickets/${ticketId}/assign`, { assigned_to: assignedTo })
    const deleteTicket = async (ticketId) => await deleteData(`/tickets/${ticketId}`)
    const requestPasswordReset = async (data, setLoading, setError) =>
        await postData('/forgot-password', data, () => {}, setLoading, setError)
    const passwordReset = async (data, setLoading, setError) =>
        await postData('/reset-password', data, () => {}, setLoading, setError)
    return /* @__PURE__ */ jsxRuntimeExports.jsx(APIContext.Provider, {
        value: {
            login,
            logout,
            authUser,
            setAuthUser,
            getAuthUser,
            getData,
            postData,
            putData,
            patchData,
            deleteData,
            addTicket,
            approveTicket,
            assignTicket,
            deleteTicket,
            getComments,
            showComment,
            addComment,
            updateComment,
            deleteComment,
            requestPasswordReset,
            passwordReset
        },
        children: authLoading
            ? /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                  className:
                      'position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-50 d-flex justify-content-center align-items-center flex-column',
                  children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                          className: 'd-flex gap-4',
                          children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                  className: 'spinner-grow text-light',
                                  role: 'status',
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                      className: 'visually-hidden',
                                      children: 'Loading...'
                                  })
                              }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                  className: 'spinner-grow text-light',
                                  role: 'status',
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                      className: 'visually-hidden',
                                      children: 'Loading...'
                                  })
                              }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                  className: 'spinner-grow text-light',
                                  role: 'status',
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                      className: 'visually-hidden',
                                      children: 'Loading...'
                                  })
                              })
                          ]
                      }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                          className: 'text-light mt-3',
                          children: 'Authenticating'
                      })
                  ]
              })
            : children
    })
}
const useAPI = () => reactExports.useContext(APIContext)
const ThemeContext$1 = reactExports.createContext()
const ThemeProvider = ({ children }) => {
    const storedTheme = localStorage.getItem('theme') === 'dark'
    const [darkMode, setDarkMode] = reactExports.useState(storedTheme)
    reactExports.useEffect(() => {
        localStorage.setItem('theme', darkMode ? 'dark' : 'light')
        const htmlElement = document.querySelector('html')
        htmlElement.setAttribute('data-bs-theme', darkMode ? 'dark' : 'light')
    }, [darkMode])
    const toggleDarkTheme = () => {
        setDarkMode((prevMode) => !prevMode)
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeContext$1.Provider, {
        value: { darkMode, toggleDarkTheme },
        children
    })
}
function ThemeSwitch() {
    const { darkMode, toggleDarkTheme } = reactExports.useContext(ThemeContext$1)
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className: 'd-flex form-check form-switch align-items-center',
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                className: 'form-check-input bg-light-subtle',
                type: 'checkbox',
                id: 'themeSwitch',
                onChange: toggleDarkTheme,
                checked: darkMode,
                style: { cursor: 'pointer' }
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                className: 'form-check-label fs-5 ps-2',
                htmlFor: 'themeSwitch',
                style: { cursor: 'pointer' },
                children: darkMode
                    ? /* @__PURE__ */ jsxRuntimeExports.jsx('i', { className: 'bi bi-moon-fill' })
                    : /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                          className: 'text-warning bi bi-brightness-high-fill'
                      })
            })
        ]
    })
}
function FullScreenLoader({
    title = 'Loading',
    message = 'Please wait...',
    spinnerColor = 'light'
}) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className:
            'position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-75 d-flex justify-content-center align-items-center',
        style: { zIndex: 2e3 },
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'text-center text-white',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: `spinner-border text-${spinnerColor} mb-4`,
                    role: 'status',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                        className: 'visually-hidden',
                        children: [title, '...']
                    })
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                    className: 'fw-semibold',
                    children: title
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                    className: 'text-white-50 mb-0',
                    children: message
                })
            ]
        })
    })
}
const pages$1 = [
    { page: 'Dashboard', link: '/dashboard' }
    // { page: 'Profile', link: '/profile' },
    // { page: 'Settings', link: '/settings' }
]
function TopNavigation() {
    const { logout, authUser } = useAPI()
    const location = useLocation()
    const navigate = useNavigate()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const handleLogout = async (e) => {
        e.preventDefault()
        const response = await logout(setLoading, setError)
        if (response) navigate('/login')
    }
    const pathnames = location.pathname.split('/').filter((x2) => x2)
    const breadcrumbItems = [
        ...pathnames.map((name, index2) => {
            const routeTo = `/${pathnames.slice(0, index2 + 1).join('/')}`
            return /* @__PURE__ */ jsxRuntimeExports.jsx(
                'li',
                {
                    className: 'breadcrumb-item active',
                    'aria-current': 'page',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Link, {
                        className: 'text-decoration-none',
                        to: routeTo,
                        children: name.charAt(0).toUpperCase() + name.slice(1)
                    })
                },
                routeTo
            )
        })
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            loading &&
                /* @__PURE__ */ jsxRuntimeExports.jsx(FullScreenLoader, {
                    title: 'Logging out',
                    message: 'Please wait while we sign you out securely.'
                }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'navbar navbar-expand-md bg-light-subtle shadow-lg sticky-top',
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'col d-flex justify-content-between order-3',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('nav', {
                            className: 'd-flex align-items-center mx-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('ol', {
                                className: 'breadcrumb mb-0',
                                children: breadcrumbItems
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'me-4 d-flex',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'dropdown mx-2',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                            type: 'button',
                                            className:
                                                'btn bg-transparent border-0 p-1 position-relative',
                                            'data-bs-toggle': 'dropdown',
                                            'aria-expanded': 'false',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                    className: 'bi bi-bell-fill fs-4 mx-1'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                    className:
                                                        'badge bg-danger border border-light position-absolute mt-2 start-100 top-0 translate-middle',
                                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        'span',
                                                        { children: '3' }
                                                    )
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                                            className:
                                                'dropdown-menu dropdown-menu-end shadow-lg rounded-3 border-0',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                                    className:
                                                        'dropdown-header text-center fw-bold py-3',
                                                    children: 'Notifications'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                                    children:
                                                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'a',
                                                            {
                                                                className:
                                                                    'dropdown-item d-flex align-items-start',
                                                                href: '#',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'me-3',
                                                                            children:
                                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                    'i',
                                                                                    {
                                                                                        className:
                                                                                            'bi bi-box-seam text-primary fs-5'
                                                                                    }
                                                                                )
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                        'div',
                                                                        {
                                                                            children: [
                                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                    'div',
                                                                                    {
                                                                                        className:
                                                                                            'fw-semibold',
                                                                                        children:
                                                                                            'New Ticket Received'
                                                                                    }
                                                                                ),
                                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                    'small',
                                                                                    {
                                                                                        className:
                                                                                            'text-muted',
                                                                                        children:
                                                                                            '2 mins ago'
                                                                                    }
                                                                                )
                                                                            ]
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                                    children:
                                                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'a',
                                                            {
                                                                className:
                                                                    'dropdown-item d-flex align-items-start',
                                                                href: '#',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'me-3',
                                                                            children:
                                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                    'i',
                                                                                    {
                                                                                        className:
                                                                                            'bi bi-chat-dots text-secondary fs-5'
                                                                                    }
                                                                                )
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                        'div',
                                                                        {
                                                                            children: [
                                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                    'div',
                                                                                    {
                                                                                        className:
                                                                                            'fw-semibold',
                                                                                        children:
                                                                                            'Message from HR Department'
                                                                                    }
                                                                                ),
                                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                    'small',
                                                                                    {
                                                                                        className:
                                                                                            'text-muted',
                                                                                        children:
                                                                                            '10 mins ago'
                                                                                    }
                                                                                )
                                                                            ]
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                                    children:
                                                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'a',
                                                            {
                                                                className:
                                                                    'dropdown-item d-flex align-items-start',
                                                                href: '#',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'me-3',
                                                                            children:
                                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                    'i',
                                                                                    {
                                                                                        className:
                                                                                            'bi bi-exclamation-triangle text-warning fs-5'
                                                                                    }
                                                                                )
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                        'div',
                                                                        {
                                                                            children: [
                                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                    'div',
                                                                                    {
                                                                                        className:
                                                                                            'fw-semibold',
                                                                                        children:
                                                                                            'System Update Available'
                                                                                    }
                                                                                ),
                                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                    'small',
                                                                                    {
                                                                                        className:
                                                                                            'text-muted',
                                                                                        children:
                                                                                            '1 hour ago'
                                                                                    }
                                                                                )
                                                                            ]
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        'hr',
                                                        { className: 'dropdown-divider' }
                                                    )
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        'a',
                                                        {
                                                            className:
                                                                'dropdown-item text-center fw-bold',
                                                            href: '#',
                                                            children: 'View All Notifications'
                                                        }
                                                    )
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'd-flex dropdown align-items-center',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs(Link, {
                                            className:
                                                'dropdown-toggle text-decoration-none link-body-emphasis mx-4',
                                            'data-bs-toggle': 'dropdown',
                                            to: '#',
                                            children: [
                                                authUser?.profile_picture
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx('img', {
                                                          src: authUser?.profile_picture,
                                                          alt: 'Profile',
                                                          width: 32,
                                                          height: 32,
                                                          className:
                                                              'rounded-circle object-cover me-2'
                                                      })
                                                    : /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                          className:
                                                              'bg-secondary text-white rounded-circle d-inline-flex align-items-center justify-content-center me-2',
                                                          style: {
                                                              width: '32px',
                                                              height: '32px',
                                                              fontSize: '1rem'
                                                          },
                                                          children:
                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  'span',
                                                                  {
                                                                      children:
                                                                          authUser?.name?.[0] || '?'
                                                                  }
                                                              )
                                                      }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                    children: authUser?.name
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                                            className:
                                                'dropdown-menu dropdown-menu-end bg-body shadow text-body text-small',
                                            children: [
                                                pages$1.map((page, index2) =>
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        'li',
                                                        {
                                                            children:
                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                    NavLink,
                                                                    {
                                                                        className: ({ isActive }) =>
                                                                            `dropdown-item ${isActive ? 'active' : ''}`,
                                                                        to: page.link,
                                                                        children: page.page
                                                                    }
                                                                )
                                                        },
                                                        index2
                                                    )
                                                ),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        'hr',
                                                        { className: 'dropdown-divider' }
                                                    )
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        'button',
                                                        {
                                                            className: 'dropdown-item',
                                                            onClick: handleLogout,
                                                            children: 'Sign out'
                                                        }
                                                    )
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeSwitch, {})
                            ]
                        })
                    ]
                })
            })
        ]
    })
}
const logoDark = '' + new URL('logo-black-Bl-Gl_Q7.png', import.meta.url).href
const logoLight = '' + new URL('logo-white-oJU84BPy.png', import.meta.url).href
var DefaultContext = {
    color: void 0,
    size: void 0,
    className: void 0,
    style: void 0,
    attr: void 0
}
var IconContext = React.createContext && /* @__PURE__ */ React.createContext(DefaultContext)
var _excluded$u = ['attr', 'size', 'title']
function _objectWithoutProperties$o(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$o(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$o(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _extends$z() {
    _extends$z = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$z.apply(this, arguments)
}
function ownKeys$H(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$G(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$H(Object(t), true).forEach(function (r3) {
                  _defineProperty$N(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$H(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$N(obj, key, value) {
    key = _toPropertyKey$M(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$M(t) {
    var i = _toPrimitive$M(t, 'string')
    return 'symbol' == typeof i ? i : i + ''
}
function _toPrimitive$M(t, r2) {
    if ('object' != typeof t || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != typeof i) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function Tree2Element(tree) {
    return (
        tree &&
        tree.map((node2, i) =>
            /* @__PURE__ */ React.createElement(
                node2.tag,
                _objectSpread$G(
                    {
                        key: i
                    },
                    node2.attr
                ),
                Tree2Element(node2.child)
            )
        )
    )
}
function GenIcon(data) {
    return (props) =>
        /* @__PURE__ */ React.createElement(
            IconBase,
            _extends$z(
                {
                    attr: _objectSpread$G({}, data.attr)
                },
                props
            ),
            Tree2Element(data.child)
        )
}
function IconBase(props) {
    var elem = (conf) => {
        var { attr, size, title } = props,
            svgProps = _objectWithoutProperties$o(props, _excluded$u)
        var computedSize = size || conf.size || '1em'
        var className
        if (conf.className) className = conf.className
        if (props.className) className = (className ? className + ' ' : '') + props.className
        return /* @__PURE__ */ React.createElement(
            'svg',
            _extends$z(
                {
                    stroke: 'currentColor',
                    fill: 'currentColor',
                    strokeWidth: '0'
                },
                conf.attr,
                attr,
                svgProps,
                {
                    className,
                    style: _objectSpread$G(
                        _objectSpread$G(
                            {
                                color: props.color || conf.color
                            },
                            conf.style
                        ),
                        props.style
                    ),
                    height: computedSize,
                    width: computedSize,
                    xmlns: 'http://www.w3.org/2000/svg'
                }
            ),
            title && /* @__PURE__ */ React.createElement('title', null, title),
            props.children
        )
    }
    return IconContext !== void 0
        ? /* @__PURE__ */ React.createElement(IconContext.Consumer, null, (conf) => elem(conf))
        : elem(DefaultContext)
}
function FaArrowRight(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M190.5 66.9l22.2-22.2c9.4-9.4 24.6-9.4 33.9 0L441 239c9.4 9.4 9.4 24.6 0 33.9L246.6 467.3c-9.4 9.4-24.6 9.4-33.9 0l-22.2-22.2c-9.5-9.5-9.3-25 .4-34.3L311.4 296H24c-13.3 0-24-10.7-24-24v-32c0-13.3 10.7-24 24-24h287.4L190.9 101.2c-9.8-9.3-10-24.8-.4-34.3z'
                },
                child: []
            }
        ]
    })(props)
}
function FaBan(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z'
                },
                child: []
            }
        ]
    })(props)
}
function FaBolt(props) {
    return GenIcon({
        attr: { viewBox: '0 0 320 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M296 160H180.6l42.6-129.8C227.2 15 215.7 0 200 0H56C44 0 33.8 8.9 32.2 20.8l-32 240C-1.7 275.2 9.5 288 24 288h118.7L96.6 482.5c-3.6 15.2 8 29.5 23.3 29.5 8.4 0 16.4-4.4 20.8-12l176-304c9.3-15.9-2.2-36-20.7-36z'
                },
                child: []
            }
        ]
    })(props)
}
function FaCalendarDay(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M0 464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V192H0v272zm64-192c0-8.8 7.2-16 16-16h96c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16v-96zM400 64h-48V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H160V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H48C21.5 64 0 85.5 0 112v48h448v-48c0-26.5-21.5-48-48-48z'
                },
                child: []
            }
        ]
    })(props)
}
function FaChartLine(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M496 384H64V80c0-8.84-7.16-16-16-16H16C7.16 64 0 71.16 0 80v336c0 17.67 14.33 32 32 32h464c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM464 96H345.94c-21.38 0-32.09 25.85-16.97 40.97l32.4 32.4L288 242.75l-73.37-73.37c-12.5-12.5-32.76-12.5-45.25 0l-68.69 68.69c-6.25 6.25-6.25 16.38 0 22.63l22.62 22.62c6.25 6.25 16.38 6.25 22.63 0L192 237.25l73.37 73.37c12.5 12.5 32.76 12.5 45.25 0l96-96 32.4 32.4c15.12 15.12 40.97 4.41 40.97-16.97V112c.01-8.84-7.15-16-15.99-16z'
                },
                child: []
            }
        ]
    })(props)
}
function FaCheckCircle(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z'
                },
                child: []
            }
        ]
    })(props)
}
function FaCheck(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'
                },
                child: []
            }
        ]
    })(props)
}
function FaClipboardCheck(props) {
    return GenIcon({
        attr: { viewBox: '0 0 384 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm121.2 231.8l-143 141.8c-4.7 4.7-12.3 4.6-17-.1l-82.6-83.3c-4.7-4.7-4.6-12.3.1-17L99.1 285c4.7-4.7 12.3-4.6 17 .1l46 46.4 106-105.2c4.7-4.7 12.3-4.6 17 .1l28.2 28.4c4.7 4.8 4.6 12.3-.1 17z'
                },
                child: []
            }
        ]
    })(props)
}
function FaClipboardList(props) {
    return GenIcon({
        attr: { viewBox: '0 0 384 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM96 424c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24zm0-96c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24zm0-96c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24zm96-192c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm128 368c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16zm0-96c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16zm0-96c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16z'
                },
                child: []
            }
        ]
    })(props)
}
function FaClipboard(props) {
    return GenIcon({
        attr: { viewBox: '0 0 384 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z'
                },
                child: []
            }
        ]
    })(props)
}
function FaClock(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M256,8C119,8,8,119,8,256S119,504,256,504,504,393,504,256,393,8,256,8Zm92.49,313h0l-20,25a16,16,0,0,1-22.49,2.5h0l-67-49.72a40,40,0,0,1-15-31.23V112a16,16,0,0,1,16-16h32a16,16,0,0,1,16,16V256l58,42.5A16,16,0,0,1,348.49,321Z'
                },
                child: []
            }
        ]
    })(props)
}
function FaDoorClosed(props) {
    return GenIcon({
        attr: { viewBox: '0 0 640 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M624 448H512V50.8C512 22.78 490.47 0 464 0H175.99c-26.47 0-48 22.78-48 50.8V448H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h608c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16zM415.99 288c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32c.01 17.67-14.32 32-32 32z'
                },
                child: []
            }
        ]
    })(props)
}
function FaEdit(props) {
    return GenIcon({
        attr: { viewBox: '0 0 576 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M402.6 83.2l90.2 90.2c3.8 3.8 3.8 10 0 13.8L274.4 405.6l-92.8 10.3c-12.4 1.4-22.9-9.1-21.5-21.5l10.3-92.8L388.8 83.2c3.8-3.8 10-3.8 13.8 0zm162-22.9l-48.8-48.8c-15.2-15.2-39.9-15.2-55.2 0l-35.4 35.4c-3.8 3.8-3.8 10 0 13.8l90.2 90.2c3.8 3.8 10 3.8 13.8 0l35.4-35.4c15.2-15.3 15.2-40 0-55.2zM384 346.2V448H64V128h229.8c3.2 0 6.2-1.3 8.5-3.5l40-40c7.6-7.6 2.2-20.5-8.5-20.5H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V306.2c0-10.7-12.9-16-20.5-8.5l-40 40c-2.2 2.3-3.5 5.3-3.5 8.5z'
                },
                child: []
            }
        ]
    })(props)
}
function FaExternalLinkAlt(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z'
                },
                child: []
            }
        ]
    })(props)
}
function FaEyeSlash(props) {
    return GenIcon({
        attr: { viewBox: '0 0 640 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M320 400c-75.85 0-137.25-58.71-142.9-133.11L72.2 185.82c-13.79 17.3-26.48 35.59-36.72 55.59a32.35 32.35 0 0 0 0 29.19C89.71 376.41 197.07 448 320 448c26.91 0 52.87-4 77.89-10.46L346 397.39a144.13 144.13 0 0 1-26 2.61zm313.82 58.1l-110.55-85.44a331.25 331.25 0 0 0 81.25-102.07 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64a308.15 308.15 0 0 0-147.32 37.7L45.46 3.37A16 16 0 0 0 23 6.18L3.37 31.45A16 16 0 0 0 6.18 53.9l588.36 454.73a16 16 0 0 0 22.46-2.81l19.64-25.27a16 16 0 0 0-2.82-22.45zm-183.72-142l-39.3-30.38A94.75 94.75 0 0 0 416 256a94.76 94.76 0 0 0-121.31-92.21A47.65 47.65 0 0 1 304 192a46.64 46.64 0 0 1-1.54 10l-73.61-56.89A142.31 142.31 0 0 1 320 112a143.92 143.92 0 0 1 144 144c0 21.63-5.29 41.79-13.9 60.11z'
                },
                child: []
            }
        ]
    })(props)
}
function FaEye(props) {
    return GenIcon({
        attr: { viewBox: '0 0 576 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z'
                },
                child: []
            }
        ]
    })(props)
}
function FaHourglassHalf(props) {
    return GenIcon({
        attr: { viewBox: '0 0 384 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M360 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24zm-75.078 384H99.08c17.059-46.797 52.096-80 92.92-80 40.821 0 75.862 33.196 92.922 80zm.019-256H99.078C91.988 108.548 88 86.748 88 64h208c0 22.805-3.987 44.587-11.059 64z'
                },
                child: []
            }
        ]
    })(props)
}
function FaLock(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M400 224h-24v-72C376 68.2 307.8 0 224 0S72 68.2 72 152v72H48c-26.5 0-48 21.5-48 48v192c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V272c0-26.5-21.5-48-48-48zm-104 0H152v-72c0-39.7 32.3-72 72-72s72 32.3 72 72v72z'
                },
                child: []
            }
        ]
    })(props)
}
function FaNetworkWired(props) {
    return GenIcon({
        attr: { viewBox: '0 0 640 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M640 264v-16c0-8.84-7.16-16-16-16H344v-40h72c17.67 0 32-14.33 32-32V32c0-17.67-14.33-32-32-32H224c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h72v40H16c-8.84 0-16 7.16-16 16v16c0 8.84 7.16 16 16 16h104v40H64c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h160c17.67 0 32-14.33 32-32V352c0-17.67-14.33-32-32-32h-56v-40h304v40h-56c-17.67 0-32 14.33-32 32v128c0 17.67 14.33 32 32 32h160c17.67 0 32-14.33 32-32V352c0-17.67-14.33-32-32-32h-56v-40h104c8.84 0 16-7.16 16-16zM256 128V64h128v64H256zm-64 320H96v-64h96v64zm352 0h-96v-64h96v64z'
                },
                child: []
            }
        ]
    })(props)
}
function FaPaperPlane(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M476 3.2L12.5 270.6c-18.1 10.4-15.8 35.6 2.2 43.2L121 358.4l287.3-253.2c5.5-4.9 13.3 2.6 8.6 8.3L176 407v80.5c0 23.6 28.5 32.9 42.5 15.8L282 426l124.6 52.2c14.2 6 30.4-2.9 33-18.2l72-432C515 7.8 493.3-6.8 476 3.2z'
                },
                child: []
            }
        ]
    })(props)
}
function FaPause(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z'
                },
                child: []
            }
        ]
    })(props)
}
function FaPlay(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z'
                },
                child: []
            }
        ]
    })(props)
}
function FaPlus(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z'
                },
                child: []
            }
        ]
    })(props)
}
function FaRedoAlt(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M256.455 8c66.269.119 126.437 26.233 170.859 68.685l35.715-35.715C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.75c-30.864-28.899-70.801-44.907-113.23-45.273-92.398-.798-170.283 73.977-169.484 169.442C88.764 348.009 162.184 424 256 424c41.127 0 79.997-14.678 110.629-41.556 4.743-4.161 11.906-3.908 16.368.553l39.662 39.662c4.872 4.872 4.631 12.815-.482 17.433C378.202 479.813 319.926 504 256 504 119.034 504 8.001 392.967 8 256.002 7.999 119.193 119.646 7.755 256.455 8z'
                },
                child: []
            }
        ]
    })(props)
}
function FaRedo(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M500.33 0h-47.41a12 12 0 0 0-12 12.57l4 82.76A247.42 247.42 0 0 0 256 8C119.34 8 7.9 119.53 8 256.19 8.1 393.07 119.1 504 256 504a247.1 247.1 0 0 0 166.18-63.91 12 12 0 0 0 .48-17.43l-34-34a12 12 0 0 0-16.38-.55A176 176 0 1 1 402.1 157.8l-101.53-4.87a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12h200.33a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12z'
                },
                child: []
            }
        ]
    })(props)
}
function FaServer(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M480 160H32c-17.673 0-32-14.327-32-32V64c0-17.673 14.327-32 32-32h448c17.673 0 32 14.327 32 32v64c0 17.673-14.327 32-32 32zm-48-88c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm-64 0c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm112 248H32c-17.673 0-32-14.327-32-32v-64c0-17.673 14.327-32 32-32h448c17.673 0 32 14.327 32 32v64c0 17.673-14.327 32-32 32zm-48-88c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm-64 0c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm112 248H32c-17.673 0-32-14.327-32-32v-64c0-17.673 14.327-32 32-32h448c17.673 0 32 14.327 32 32v64c0 17.673-14.327 32-32 32zm-48-88c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm-64 0c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24z'
                },
                child: []
            }
        ]
    })(props)
}
function FaSpinner(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z'
                },
                child: []
            }
        ]
    })(props)
}
function FaTicketAlt(props) {
    return GenIcon({
        attr: { viewBox: '0 0 576 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M128 160h320v192H128V160zm400 96c0 26.51 21.49 48 48 48v96c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48v-96c26.51 0 48-21.49 48-48s-21.49-48-48-48v-96c0-26.51 21.49-48 48-48h480c26.51 0 48 21.49 48 48v96c-26.51 0-48 21.49-48 48zm-48-104c0-13.255-10.745-24-24-24H120c-13.255 0-24 10.745-24 24v208c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V152z'
                },
                child: []
            }
        ]
    })(props)
}
function FaTimesCircle(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z'
                },
                child: []
            }
        ]
    })(props)
}
function FaTimes(props) {
    return GenIcon({
        attr: { viewBox: '0 0 352 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z'
                },
                child: []
            }
        ]
    })(props)
}
function FaTrash(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z'
                },
                child: []
            }
        ]
    })(props)
}
function FaUndo(props) {
    return GenIcon({
        attr: { viewBox: '0 0 512 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M212.333 224.333H12c-6.627 0-12-5.373-12-12V12C0 5.373 5.373 0 12 0h48c6.627 0 12 5.373 12 12v78.112C117.773 39.279 184.26 7.47 258.175 8.007c136.906.994 246.448 111.623 246.157 248.532C504.041 393.258 393.12 504 256.333 504c-64.089 0-122.496-24.313-166.51-64.215-5.099-4.622-5.334-12.554-.467-17.42l33.967-33.967c4.474-4.474 11.662-4.717 16.401-.525C170.76 415.336 211.58 432 256.333 432c97.268 0 176-78.716 176-176 0-97.267-78.716-176-176-176-58.496 0-110.28 28.476-142.274 72.333h98.274c6.627 0 12 5.373 12 12v48c0 6.627-5.373 12-12 12z'
                },
                child: []
            }
        ]
    })(props)
}
function FaUnlock(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M400 256H152V152.9c0-39.6 31.7-72.5 71.3-72.9 40-.4 72.7 32.1 72.7 72v16c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24v-16C376 68 307.5-.3 223.5 0 139.5.3 72 69.5 72 153.5V256H48c-26.5 0-48 21.5-48 48v160c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48z'
                },
                child: []
            }
        ]
    })(props)
}
function FaUserCheck(props) {
    return GenIcon({
        attr: { viewBox: '0 0 640 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4zm323-128.4l-27.8-28.1c-4.6-4.7-12.1-4.7-16.8-.1l-104.8 104-45.5-45.8c-4.6-4.7-12.1-4.7-16.8-.1l-28.1 27.9c-4.7 4.6-4.7 12.1-.1 16.8l81.7 82.3c4.6 4.7 12.1 4.7 16.8.1l141.3-140.2c4.6-4.7 4.7-12.2.1-16.8z'
                },
                child: []
            }
        ]
    })(props)
}
function FaUserLock(props) {
    return GenIcon({
        attr: { viewBox: '0 0 640 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M224 256A128 128 0 1 0 96 128a128 128 0 0 0 128 128zm96 64a63.08 63.08 0 0 1 8.1-30.5c-4.8-.5-9.5-1.5-14.5-1.5h-16.7a174.08 174.08 0 0 1-145.8 0h-16.7A134.43 134.43 0 0 0 0 422.4V464a48 48 0 0 0 48 48h280.9a63.54 63.54 0 0 1-8.9-32zm288-32h-32v-80a80 80 0 0 0-160 0v80h-32a32 32 0 0 0-32 32v160a32 32 0 0 0 32 32h224a32 32 0 0 0 32-32V320a32 32 0 0 0-32-32zM496 432a32 32 0 1 1 32-32 32 32 0 0 1-32 32zm32-144h-64v-80a32 32 0 0 1 64 0z'
                },
                child: []
            }
        ]
    })(props)
}
function FaUserSlash(props) {
    return GenIcon({
        attr: { viewBox: '0 0 640 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M633.8 458.1L362.3 248.3C412.1 230.7 448 183.8 448 128 448 57.3 390.7 0 320 0c-67.1 0-121.5 51.8-126.9 117.4L45.5 3.4C38.5-2 28.5-.8 23 6.2L3.4 31.4c-5.4 7-4.2 17 2.8 22.4l588.4 454.7c7 5.4 17 4.2 22.5-2.8l19.6-25.3c5.4-6.8 4.1-16.9-2.9-22.3zM96 422.4V464c0 26.5 21.5 48 48 48h350.2L207.4 290.3C144.2 301.3 96 356 96 422.4z'
                },
                child: []
            }
        ]
    })(props)
}
function FaUser(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z'
                },
                child: []
            }
        ]
    })(props)
}
function FaRegStickyNote(props) {
    return GenIcon({
        attr: { viewBox: '0 0 448 512' },
        child: [
            {
                tag: 'path',
                attr: {
                    d: 'M448 348.106V80c0-26.51-21.49-48-48-48H48C21.49 32 0 53.49 0 80v351.988c0 26.51 21.49 48 48 48h268.118a48 48 0 0 0 33.941-14.059l83.882-83.882A48 48 0 0 0 448 348.106zm-128 80v-76.118h76.118L320 428.106zM400 80v223.988H296c-13.255 0-24 10.745-24 24v104H48V80h352z'
                },
                child: []
            }
        ]
    })(props)
}
const pages = [
    {
        page: 'Dashboard',
        link: '/dashboard',
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaChartLine, {}),
        subPages: [
            { name: 'Team Overview', link: '/dashboard/overview' },
            { name: 'Team Activities', link: '/dashboard/activities' }
            // { name: 'Team Reports', link: '/dashboard/reports' }
        ],
        permission: 'view dashboard'
    },
    {
        page: 'Service Desk',
        link: '/servicedesk',
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaTicketAlt, {}),
        subPages: [
            { name: 'My Overview', link: '/servicedesk/overview' },
            { name: 'My Tickets', link: '/servicedesk/tickets' }
            // { name: 'My Reports', link: '/servicedesk/reports' }
        ],
        permission: 'access service desk'
    },
    {
        page: 'Employees',
        link: '/employees',
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaUser, {}),
        subPages: [
            { name: 'All Employees', link: '/employees/all' },
            { name: 'Departments', link: '/employees/departments' },
            { name: 'Roles & Permissions', link: '/employees/roles' },
            { name: 'Activity Logs', link: '/employees/logs' }
        ],
        permission: 'manage employees'
    },
    {
        page: 'Directory',
        link: '/directory',
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaNetworkWired, {}),
        subPages: [{ name: 'Telephone list', link: '/directory/telephoneList' }],
        permission: 'view general directory'
    },
    {
        page: 'IT Directory',
        link: '/itdirectory',
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaServer, {}),
        subPages: [
            { name: 'Telephone lines', link: '/itdirectory/telephones' },
            { name: 'Internet lines', link: '/itdirectory/internet' },
            { name: 'IP Addresses', link: '/itdirectory/ipAddress' },
            { name: 'Anydesk IDs', link: '/itdirectory/anydesks' },
            { name: 'Printers', link: '/itdirectory/printers' }
            // { name: 'Accounts', link: '/itdirectory/accounts' }
        ],
        permission: 'view it directory'
    },
    {
        page: 'Reports',
        link: '/reports',
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx('i', { className: 'bi bi-bar-chart' }),
        subPages: [
            { name: 'Ticket Analytics', link: '/reports/analytics' },
            // { name: 'SLA Performance', link: '/reports/slaPerformance' },
            { name: 'Performance Tracking', link: '/reports/performance' }
            // { name: 'Employee Feedback ', link: '/reports/feedback' }
        ],
        permission: 'view analytics reports'
    }
    // {
    //     page: 'Settings',
    //     link: '/settings',
    //     icon: <FaCog />,
    //     subPages: [
    //         { name: 'General Settings', link: '/settings/generalSettings' },
    //         { name: 'Security & Authentication', link: '/settings/authentication' },
    //         { name: 'Email & Notifications', link: '/settings/notification' },
    //         { name: 'System Logs & Audits', link: '/settings/logs' },
    //         { name: 'Department Settings', link: '/settings/department' }
    //     ],
    //     permission: 'manage system settings'
    // }
]
function SideNavigation() {
    const { authUser } = useAPI()
    const { darkMode } = reactExports.useContext(ThemeContext$1)
    const location = useLocation()
    const [openMenus, setOpenMenus] = reactExports.useState({})
    const toggleMenu = (index2) => {
        setOpenMenus((prev2) => ({
            ...prev2,
            [index2]: !prev2[index2]
        }))
    }
    const visiblePages = pages.filter(
        (page) => !page.permission || authUser?.all_permissions.includes(page.permission)
    )
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className:
            'd-flex flex-column bg-light-subtle border-end border-light-subtle shadow-lg pt-3 sticky-top vh-100',
        style: { width: '280px' },
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Link, {
                to: '/',
                className:
                    'd-flex align-items-center justify-content-center text-decoration-none link-body-emphasis',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('img', {
                        src: !darkMode ? logoDark : logoLight,
                        className: 'img-fluid',
                        width: 35
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                        className: 'fs-3 fw-semibold ms-2',
                        children: 'Michaela'
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'flex-grow-1 p-2 overflow-auto scroll',
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                    className: 'flex-column nav p-2',
                    children: visiblePages.map((page, index2) => {
                        const isActive = location.pathname.startsWith(page.link)
                        const isOpen = openMenus[index2]
                        return /* @__PURE__ */ jsxRuntimeExports.jsx(
                            'li',
                            {
                                className: 'mb-1',
                                children: page.subPages
                                    ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          jsxRuntimeExports.Fragment,
                                          {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                      className: `nav-link d-flex align-items-center px-3 py-2 rounded w-100 text-start 
                                        ${isActive ? 'text-light bg-primary' : 'text-light-emphasis'} 
                                        ${isOpen ? 'active-menu' : ''}`,
                                                      onClick: () => toggleMenu(index2),
                                                      children: [
                                                          page.icon,
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'span',
                                                              {
                                                                  className: 'ms-2',
                                                                  children: page.page
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'i',
                                                              {
                                                                  className: `bi ms-auto ${isOpen ? 'bi-chevron-down' : 'bi-chevron-right'}`
                                                              }
                                                          )
                                                      ]
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                      className: `collapse-content ${isOpen ? 'show' : ''}`,
                                                      children:
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'ul',
                                                              {
                                                                  className: 'flex-column nav',
                                                                  children: page.subPages.map(
                                                                      (subPage, subIndex) =>
                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                              'li',
                                                                              {
                                                                                  children:
                                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                          NavLink,
                                                                                          {
                                                                                              to: subPage.link,
                                                                                              className:
                                                                                                  ({
                                                                                                      isActive:
                                                                                                          isActive2
                                                                                                  }) => `nav-link text-light-emphasis ps-3 border-start ms-4 my-1 p-1 
                                                        ${isActive2 ? 'text-decoration-underline underline-offset-8 fw-bold' : ''}`,
                                                                                              children:
                                                                                                  subPage.name
                                                                                          }
                                                                                      )
                                                                              },
                                                                              subIndex
                                                                          )
                                                                  )
                                                              }
                                                          )
                                                  })
                                              ]
                                          }
                                      )
                                    : /* @__PURE__ */ jsxRuntimeExports.jsxs(NavLink, {
                                          to: page.link,
                                          className: `nav-link d-flex align-items-center px-3 py-2 rounded 
                                    ${isActive ? 'bg-primary text-white' : 'text-light-emphasis'}`,
                                          children: [
                                              page.icon,
                                              ' ',
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'ms-2',
                                                  children: page.page
                                              })
                                          ]
                                      })
                            },
                            index2
                        )
                    })
                })
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className:
                    'bg-primary border text-center text-white mt-auto small flex-column d-flex',
                children: [
                    authUser?.role?.name &&
                        /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                            className: 'text-uppercase border-bottom p-1 fs-4 flex-column',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                children: authUser.role.name
                            })
                        }),
                    authUser?.department?.name &&
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('strong', {
                            style: { fontSize: '0.7rem' },
                            className: 'text-uppercase border-bottom p-1 flex-column',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                    children: authUser.department.name
                                }),
                                ' '
                            ]
                        }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                        className: 'p-2',
                        children: '© 2025 Goldnines'
                    })
                ]
            })
        ]
    })
}
function Chat() {
    const [message, setMessage] = reactExports.useState('')
    const sendMessage = () => {}
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className:
                    'btn btn-primary border-2 border-light p-2 position-fixed rounded-circle shadow bottom-0 end-0 mb-4 me-4 z-3',
                type: 'button',
                'data-bs-toggle': 'collapse',
                'data-bs-target': '#chatBox',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                        className: 'bi bi-chat-fill fs-4 mx-1'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                        className:
                            'badge bg-danger border border-light p-2 position-absolute rounded-circle start-100 top-0 translate-middle',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                            className: '',
                            children: '99+'
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'collapse position-fixed shadow-lg bottom-0 end-0 mb-5 me-5 z-1',
                id: 'chatBox',
                style: { width: '300px' },
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'card rounded-4',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className:
                                'd-flex card-header align-items-center bg-primary text-white py-2',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                    className: 'fs-5',
                                    children: 'IT DEPARTMENT'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                    className: 'text-success bi bi-circle-fill ms-2',
                                    style: { fontSize: '0.5rem' }
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                    type: 'button',
                                    className: 'btn-close btn-close-white ms-auto',
                                    'data-bs-toggle': 'collapse',
                                    'data-bs-target': '#chatBox'
                                })
                            ]
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'card-body text-center',
                            style: { height: '300px', overflowY: 'auto' },
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'text-muted',
                                    children: [
                                        'IT-Minio',
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                            className:
                                                'bg-success rounded-pill text-light ms-1 opacity-50 px-2 small',
                                            children: 'online'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'text-muted',
                                    children: [
                                        'IT-Justine',
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                            className:
                                                'bg-success rounded-pill text-light ms-1 opacity-50 px-2 small',
                                            children: 'online'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'text-muted',
                                    children: [
                                        'IT-Gilbert',
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                            className:
                                                'bg-success rounded-pill text-light ms-1 opacity-50 px-2 small',
                                            children: 'online'
                                        })
                                    ]
                                })
                            ]
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'card-footer py-3',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'input-group',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                        type: 'text',
                                        className: 'form-control',
                                        placeholder: 'Type a message...',
                                        value: message,
                                        onChange: (e) => setMessage(e.target.value)
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        className: 'btn btn-primary',
                                        onClick: sendMessage,
                                        disabled: !message.trim(),
                                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'p-0 rotate-45',
                                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                className: 'bi-send-fill'
                                            })
                                        })
                                    })
                                ]
                            })
                        })
                    ]
                })
            })
        ]
    })
}
function MainLayout() {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'd-flex bg-dark-subtle',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(SideNavigation, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'w-100',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(TopNavigation, {}),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'p-4 w-100 d-flex flex-column',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {})
                            })
                        ]
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Chat, {})
        ]
    })
}
function AuthLayout() {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'container d-flex justify-content-center align-items-center vh-100',
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {})
        })
    })
}
function ProfileLayout() {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(TopNavigation, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'd-flex',
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'p-4 mt-5',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {})
                })
            })
        ]
    })
}
function ServiceDeskTicketLayout() {
    const { authUser } = useAPI()
    const tabs = [
        {
            tab: 'All Tickets',
            link: '/servicedesk/tickets/all',
            permission: 'view all tickets tab'
        },
        {
            tab: 'Pending',
            link: '/servicedesk/tickets/pending',
            permission: 'view pending tickets tab'
        },
        { tab: 'New', link: '/servicedesk/tickets/new', permission: 'view new tickets tab' },
        { tab: 'Open', link: '/servicedesk/tickets/open', permission: 'view open tickets tab' },
        {
            tab: 'In Progress',
            link: '/servicedesk/tickets/inprogress',
            permission: 'view inprogress tickets tab'
        },
        {
            tab: 'Resolved',
            link: '/servicedesk/tickets/resolved',
            permission: 'view resolved tickets tab'
        },
        {
            tab: 'Closed',
            link: '/servicedesk/tickets/closed',
            permission: 'view closed tickets tab'
        },
        {
            tab: 'Failed',
            link: '/servicedesk/tickets/failed',
            permission: 'view failed tickets tab'
        },
        {
            tab: 'Rejected',
            link: '/servicedesk/tickets/rejected',
            permission: 'view rejected tickets tab'
        }
    ]
    const visibleTabs = tabs.filter(
        (tab) => !tab.permission || authUser?.all_permissions?.includes(tab.permission)
    )
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className: 'card shadow w-100',
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className:
                    'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                children: 'My Tickets'
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'card-body',
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'p-3',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('nav', {
                            className: 'navbar navbar-expand-lg mb-4 border rounded-pill shadow',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'px-3 w-100',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        className: 'navbar-toggler',
                                        type: 'button',
                                        'data-bs-toggle': 'collapse',
                                        'data-bs-target': '#ticketTabs',
                                        'aria-controls': 'ticketTabs',
                                        'aria-expanded': 'false',
                                        'aria-label': 'Toggle navigation',
                                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                            className: 'navbar-toggler-icon'
                                        })
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                        className: 'collapse navbar-collapse',
                                        id: 'ticketTabs',
                                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                                            className: 'nav nav-pills d-flex w-100',
                                            children: visibleTabs.map((tab, index2) =>
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    'li',
                                                    {
                                                        className:
                                                            'nav-item flex-grow-1 text-center',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                NavLink,
                                                                {
                                                                    className: ({ isActive }) =>
                                                                        `nav-link rounded-pill ${isActive ? 'active' : 'link-body-emphasis bg-light-subtle'}`,
                                                                    to: tab.link,
                                                                    children:
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'span',
                                                                            {
                                                                                className: 'mx-2',
                                                                                children: tab.tab
                                                                            }
                                                                        )
                                                                }
                                                            )
                                                    },
                                                    index2
                                                )
                                            )
                                        })
                                    })
                                ]
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {})
                    ]
                })
            })
        ]
    })
}
function Profile() {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'display-1 fw-bold',
        children: 'Profile'
    })
}
function Settings() {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'display-1 fw-bold',
        children: 'Settingsas'
    })
}
function ErrorPage({ errorCode }) {
    const errorMessages = {
        403: 'Sorry, you don’t have permission to access this page.',
        404: 'Oops! The page you’re looking for doesn’t exist or has been moved.',
        500: 'Something went wrong on our server. Please try again later.'
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className:
            'd-flex flex-column align-items-center justify-content-center vh-100 bg-black text-white text-center',
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx('img', {
                src: logoLight,
                className: 'mb-3',
                alt: 'logo',
                width: 80
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('h1', {
                className: 'display-1 fw-bold',
                children: errorCode
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                className: 'fs-5 mb-4',
                children: errorMessages[errorCode] || 'An unexpected error occurred.'
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('p', { children: 'What you can do:' }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                className: 'text-start',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('li', {
                        className: 'mb-2',
                        children: [
                            'Return to the',
                            ' ',
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Link, {
                                to: '/dashboard',
                                className: 'btn-sm btn rounded-4 btn-outline-light px-3',
                                children: 'Dashboard'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                        className: 'mb-2',
                        children:
                            'If you believe this is an error, please contact your Administrator.'
                    })
                ]
            })
        ]
    })
}
/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function functionalUpdate(updater, input) {
    return typeof updater === 'function' ? updater(input) : updater
}
function makeStateUpdater(key, instance) {
    return (updater) => {
        instance.setState((old) => {
            return {
                ...old,
                [key]: functionalUpdate(updater, old[key])
            }
        })
    }
}
function isFunction$1(d) {
    return d instanceof Function
}
function isNumberArray$1(d) {
    return Array.isArray(d) && d.every((val) => typeof val === 'number')
}
function flattenBy(arr, getChildren) {
    const flat = []
    const recurse = (subArr) => {
        subArr.forEach((item) => {
            flat.push(item)
            const children = getChildren(item)
            if (children != null && children.length) {
                recurse(children)
            }
        })
    }
    recurse(arr)
    return flat
}
function memo(getDeps, fn, opts) {
    let deps = []
    let result
    return (depArgs) => {
        let depTime
        if (opts.key && opts.debug) depTime = Date.now()
        const newDeps = getDeps(depArgs)
        const depsChanged =
            newDeps.length !== deps.length || newDeps.some((dep, index2) => deps[index2] !== dep)
        if (!depsChanged) {
            return result
        }
        deps = newDeps
        let resultTime
        if (opts.key && opts.debug) resultTime = Date.now()
        result = fn(...newDeps)
        opts == null || opts.onChange == null || opts.onChange(result)
        if (opts.key && opts.debug) {
            if (opts != null && opts.debug()) {
                const depEndTime = Math.round((Date.now() - depTime) * 100) / 100
                const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100
                const resultFpsPercentage = resultEndTime / 16
                const pad2 = (str, num) => {
                    str = String(str)
                    while (str.length < num) {
                        str = ' ' + str
                    }
                    return str
                }
                console.info(
                    `%c⏱ ${pad2(resultEndTime, 5)} /${pad2(depEndTime, 5)} ms`,
                    `
            font-size: .6rem;
            font-weight: bold;
            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`,
                    opts == null ? void 0 : opts.key
                )
            }
        }
        return result
    }
}
function getMemoOptions(tableOptions, debugLevel, key, onChange2) {
    return {
        debug: () => {
            var _tableOptions$debugAl
            return (_tableOptions$debugAl =
                tableOptions == null ? void 0 : tableOptions.debugAll) != null
                ? _tableOptions$debugAl
                : tableOptions[debugLevel]
        },
        key: false,
        onChange: onChange2
    }
}
function createCell(table, row, column2, columnId) {
    const getRenderValue = () => {
        var _cell$getValue
        return (_cell$getValue = cell.getValue()) != null
            ? _cell$getValue
            : table.options.renderFallbackValue
    }
    const cell = {
        id: `${row.id}_${column2.id}`,
        row,
        column: column2,
        getValue: () => row.getValue(columnId),
        renderValue: getRenderValue,
        getContext: memo(
            () => [table, column2, row, cell],
            (table2, column22, row2, cell2) => ({
                table: table2,
                column: column22,
                row: row2,
                cell: cell2,
                getValue: cell2.getValue,
                renderValue: cell2.renderValue
            }),
            getMemoOptions(table.options, 'debugCells')
        )
    }
    table._features.forEach((feature) => {
        feature.createCell == null || feature.createCell(cell, column2, row, table)
    }, {})
    return cell
}
function createColumn(table, columnDef, depth, parent) {
    var _ref3, _resolvedColumnDef$id
    const defaultColumn = table._getDefaultColumnDef()
    const resolvedColumnDef = {
        ...defaultColumn,
        ...columnDef
    }
    const accessorKey = resolvedColumnDef.accessorKey
    let id =
        (_ref3 =
            (_resolvedColumnDef$id = resolvedColumnDef.id) != null
                ? _resolvedColumnDef$id
                : accessorKey
                  ? typeof String.prototype.replaceAll === 'function'
                      ? accessorKey.replaceAll('.', '_')
                      : accessorKey.replace(/\./g, '_')
                  : void 0) != null
            ? _ref3
            : typeof resolvedColumnDef.header === 'string'
              ? resolvedColumnDef.header
              : void 0
    let accessorFn
    if (resolvedColumnDef.accessorFn) {
        accessorFn = resolvedColumnDef.accessorFn
    } else if (accessorKey) {
        if (accessorKey.includes('.')) {
            accessorFn = (originalRow) => {
                let result = originalRow
                for (const key of accessorKey.split('.')) {
                    var _result
                    result = (_result = result) == null ? void 0 : _result[key]
                }
                return result
            }
        } else {
            accessorFn = (originalRow) => originalRow[resolvedColumnDef.accessorKey]
        }
    }
    if (!id) {
        throw new Error()
    }
    let column2 = {
        id: `${String(id)}`,
        accessorFn,
        parent,
        depth,
        columnDef: resolvedColumnDef,
        columns: [],
        getFlatColumns: memo(
            () => [true],
            () => {
                var _column$columns
                return [
                    column2,
                    ...((_column$columns = column2.columns) == null
                        ? void 0
                        : _column$columns.flatMap((d) => d.getFlatColumns()))
                ]
            },
            getMemoOptions(table.options, 'debugColumns')
        ),
        getLeafColumns: memo(
            () => [table._getOrderColumnsFn()],
            (orderColumns2) => {
                var _column$columns2
                if ((_column$columns2 = column2.columns) != null && _column$columns2.length) {
                    let leafColumns = column2.columns.flatMap((column22) =>
                        column22.getLeafColumns()
                    )
                    return orderColumns2(leafColumns)
                }
                return [column2]
            },
            getMemoOptions(table.options, 'debugColumns')
        )
    }
    for (const feature of table._features) {
        feature.createColumn == null || feature.createColumn(column2, table)
    }
    return column2
}
const debug = 'debugHeaders'
function createHeader(table, column2, options2) {
    var _options$id
    const id = (_options$id = options2.id) != null ? _options$id : column2.id
    let header = {
        id,
        column: column2,
        index: options2.index,
        isPlaceholder: !!options2.isPlaceholder,
        placeholderId: options2.placeholderId,
        depth: options2.depth,
        subHeaders: [],
        colSpan: 0,
        rowSpan: 0,
        headerGroup: null,
        getLeafHeaders: () => {
            const leafHeaders = []
            const recurseHeader = (h) => {
                if (h.subHeaders && h.subHeaders.length) {
                    h.subHeaders.map(recurseHeader)
                }
                leafHeaders.push(h)
            }
            recurseHeader(header)
            return leafHeaders
        },
        getContext: () => ({
            table,
            header,
            column: column2
        })
    }
    table._features.forEach((feature) => {
        feature.createHeader == null || feature.createHeader(header, table)
    })
    return header
}
const Headers = {
    createTable: (table) => {
        table.getHeaderGroups = memo(
            () => [
                table.getAllColumns(),
                table.getVisibleLeafColumns(),
                table.getState().columnPinning.left,
                table.getState().columnPinning.right
            ],
            (allColumns, leafColumns, left, right) => {
                var _left$map$filter, _right$map$filter
                const leftColumns =
                    (_left$map$filter =
                        left == null
                            ? void 0
                            : left
                                  .map((columnId) => leafColumns.find((d) => d.id === columnId))
                                  .filter(Boolean)) != null
                        ? _left$map$filter
                        : []
                const rightColumns =
                    (_right$map$filter =
                        right == null
                            ? void 0
                            : right
                                  .map((columnId) => leafColumns.find((d) => d.id === columnId))
                                  .filter(Boolean)) != null
                        ? _right$map$filter
                        : []
                const centerColumns = leafColumns.filter(
                    (column2) =>
                        !(left != null && left.includes(column2.id)) &&
                        !(right != null && right.includes(column2.id))
                )
                const headerGroups = buildHeaderGroups(
                    allColumns,
                    [...leftColumns, ...centerColumns, ...rightColumns],
                    table
                )
                return headerGroups
            },
            getMemoOptions(table.options, debug)
        )
        table.getCenterHeaderGroups = memo(
            () => [
                table.getAllColumns(),
                table.getVisibleLeafColumns(),
                table.getState().columnPinning.left,
                table.getState().columnPinning.right
            ],
            (allColumns, leafColumns, left, right) => {
                leafColumns = leafColumns.filter(
                    (column2) =>
                        !(left != null && left.includes(column2.id)) &&
                        !(right != null && right.includes(column2.id))
                )
                return buildHeaderGroups(allColumns, leafColumns, table, 'center')
            },
            getMemoOptions(table.options, debug)
        )
        table.getLeftHeaderGroups = memo(
            () => [
                table.getAllColumns(),
                table.getVisibleLeafColumns(),
                table.getState().columnPinning.left
            ],
            (allColumns, leafColumns, left) => {
                var _left$map$filter2
                const orderedLeafColumns =
                    (_left$map$filter2 =
                        left == null
                            ? void 0
                            : left
                                  .map((columnId) => leafColumns.find((d) => d.id === columnId))
                                  .filter(Boolean)) != null
                        ? _left$map$filter2
                        : []
                return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left')
            },
            getMemoOptions(table.options, debug)
        )
        table.getRightHeaderGroups = memo(
            () => [
                table.getAllColumns(),
                table.getVisibleLeafColumns(),
                table.getState().columnPinning.right
            ],
            (allColumns, leafColumns, right) => {
                var _right$map$filter2
                const orderedLeafColumns =
                    (_right$map$filter2 =
                        right == null
                            ? void 0
                            : right
                                  .map((columnId) => leafColumns.find((d) => d.id === columnId))
                                  .filter(Boolean)) != null
                        ? _right$map$filter2
                        : []
                return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right')
            },
            getMemoOptions(table.options, debug)
        )
        table.getFooterGroups = memo(
            () => [table.getHeaderGroups()],
            (headerGroups) => {
                return [...headerGroups].reverse()
            },
            getMemoOptions(table.options, debug)
        )
        table.getLeftFooterGroups = memo(
            () => [table.getLeftHeaderGroups()],
            (headerGroups) => {
                return [...headerGroups].reverse()
            },
            getMemoOptions(table.options, debug)
        )
        table.getCenterFooterGroups = memo(
            () => [table.getCenterHeaderGroups()],
            (headerGroups) => {
                return [...headerGroups].reverse()
            },
            getMemoOptions(table.options, debug)
        )
        table.getRightFooterGroups = memo(
            () => [table.getRightHeaderGroups()],
            (headerGroups) => {
                return [...headerGroups].reverse()
            },
            getMemoOptions(table.options, debug)
        )
        table.getFlatHeaders = memo(
            () => [table.getHeaderGroups()],
            (headerGroups) => {
                return headerGroups
                    .map((headerGroup) => {
                        return headerGroup.headers
                    })
                    .flat()
            },
            getMemoOptions(table.options, debug)
        )
        table.getLeftFlatHeaders = memo(
            () => [table.getLeftHeaderGroups()],
            (left) => {
                return left
                    .map((headerGroup) => {
                        return headerGroup.headers
                    })
                    .flat()
            },
            getMemoOptions(table.options, debug)
        )
        table.getCenterFlatHeaders = memo(
            () => [table.getCenterHeaderGroups()],
            (left) => {
                return left
                    .map((headerGroup) => {
                        return headerGroup.headers
                    })
                    .flat()
            },
            getMemoOptions(table.options, debug)
        )
        table.getRightFlatHeaders = memo(
            () => [table.getRightHeaderGroups()],
            (left) => {
                return left
                    .map((headerGroup) => {
                        return headerGroup.headers
                    })
                    .flat()
            },
            getMemoOptions(table.options, debug)
        )
        table.getCenterLeafHeaders = memo(
            () => [table.getCenterFlatHeaders()],
            (flatHeaders) => {
                return flatHeaders.filter((header) => {
                    var _header$subHeaders
                    return !(
                        (_header$subHeaders = header.subHeaders) != null &&
                        _header$subHeaders.length
                    )
                })
            },
            getMemoOptions(table.options, debug)
        )
        table.getLeftLeafHeaders = memo(
            () => [table.getLeftFlatHeaders()],
            (flatHeaders) => {
                return flatHeaders.filter((header) => {
                    var _header$subHeaders2
                    return !(
                        (_header$subHeaders2 = header.subHeaders) != null &&
                        _header$subHeaders2.length
                    )
                })
            },
            getMemoOptions(table.options, debug)
        )
        table.getRightLeafHeaders = memo(
            () => [table.getRightFlatHeaders()],
            (flatHeaders) => {
                return flatHeaders.filter((header) => {
                    var _header$subHeaders3
                    return !(
                        (_header$subHeaders3 = header.subHeaders) != null &&
                        _header$subHeaders3.length
                    )
                })
            },
            getMemoOptions(table.options, debug)
        )
        table.getLeafHeaders = memo(
            () => [
                table.getLeftHeaderGroups(),
                table.getCenterHeaderGroups(),
                table.getRightHeaderGroups()
            ],
            (left, center, right) => {
                var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$
                return [
                    ...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) !=
                    null
                        ? _left$0$headers
                        : []),
                    ...((_center$0$headers =
                        (_center$ = center[0]) == null ? void 0 : _center$.headers) != null
                        ? _center$0$headers
                        : []),
                    ...((_right$0$headers =
                        (_right$ = right[0]) == null ? void 0 : _right$.headers) != null
                        ? _right$0$headers
                        : [])
                ]
                    .map((header) => {
                        return header.getLeafHeaders()
                    })
                    .flat()
            },
            getMemoOptions(table.options, debug)
        )
    }
}
function buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {
    var _headerGroups$0$heade, _headerGroups$
    let maxDepth = 0
    const findMaxDepth = function (columns, depth) {
        if (depth === void 0) {
            depth = 1
        }
        maxDepth = Math.max(maxDepth, depth)
        columns
            .filter((column2) => column2.getIsVisible())
            .forEach((column2) => {
                var _column$columns
                if ((_column$columns = column2.columns) != null && _column$columns.length) {
                    findMaxDepth(column2.columns, depth + 1)
                }
            }, 0)
    }
    findMaxDepth(allColumns)
    let headerGroups = []
    const createHeaderGroup = (headersToGroup, depth) => {
        const headerGroup = {
            depth,
            id: [headerFamily, `${depth}`].filter(Boolean).join('_'),
            headers: []
        }
        const pendingParentHeaders = []
        headersToGroup.forEach((headerToGroup) => {
            const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]
            const isLeafHeader = headerToGroup.column.depth === headerGroup.depth
            let column2
            let isPlaceholder = false
            if (isLeafHeader && headerToGroup.column.parent) {
                column2 = headerToGroup.column.parent
            } else {
                column2 = headerToGroup.column
                isPlaceholder = true
            }
            if (
                latestPendingParentHeader &&
                (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) ===
                    column2
            ) {
                latestPendingParentHeader.subHeaders.push(headerToGroup)
            } else {
                const header = createHeader(table, column2, {
                    id: [
                        headerFamily,
                        depth,
                        column2.id,
                        headerToGroup == null ? void 0 : headerToGroup.id
                    ]
                        .filter(Boolean)
                        .join('_'),
                    isPlaceholder,
                    placeholderId: isPlaceholder
                        ? `${pendingParentHeaders.filter((d) => d.column === column2).length}`
                        : void 0,
                    depth,
                    index: pendingParentHeaders.length
                })
                header.subHeaders.push(headerToGroup)
                pendingParentHeaders.push(header)
            }
            headerGroup.headers.push(headerToGroup)
            headerToGroup.headerGroup = headerGroup
        })
        headerGroups.push(headerGroup)
        if (depth > 0) {
            createHeaderGroup(pendingParentHeaders, depth - 1)
        }
    }
    const bottomHeaders = columnsToGroup.map((column2, index2) =>
        createHeader(table, column2, {
            depth: maxDepth,
            index: index2
        })
    )
    createHeaderGroup(bottomHeaders, maxDepth - 1)
    headerGroups.reverse()
    const recurseHeadersForSpans = (headers) => {
        const filteredHeaders = headers.filter((header) => header.column.getIsVisible())
        return filteredHeaders.map((header) => {
            let colSpan = 0
            let rowSpan = 0
            let childRowSpans = [0]
            if (header.subHeaders && header.subHeaders.length) {
                childRowSpans = []
                recurseHeadersForSpans(header.subHeaders).forEach((_ref3) => {
                    let { colSpan: childColSpan, rowSpan: childRowSpan } = _ref3
                    colSpan += childColSpan
                    childRowSpans.push(childRowSpan)
                })
            } else {
                colSpan = 1
            }
            const minChildRowSpan = Math.min(...childRowSpans)
            rowSpan = rowSpan + minChildRowSpan
            header.colSpan = colSpan
            header.rowSpan = rowSpan
            return {
                colSpan,
                rowSpan
            }
        })
    }
    recurseHeadersForSpans(
        (_headerGroups$0$heade =
            (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null
            ? _headerGroups$0$heade
            : []
    )
    return headerGroups
}
const createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {
    let row = {
        id,
        index: rowIndex,
        original,
        depth,
        parentId,
        _valuesCache: {},
        _uniqueValuesCache: {},
        getValue: (columnId) => {
            if (row._valuesCache.hasOwnProperty(columnId)) {
                return row._valuesCache[columnId]
            }
            const column2 = table.getColumn(columnId)
            if (!(column2 != null && column2.accessorFn)) {
                return void 0
            }
            row._valuesCache[columnId] = column2.accessorFn(row.original, rowIndex)
            return row._valuesCache[columnId]
        },
        getUniqueValues: (columnId) => {
            if (row._uniqueValuesCache.hasOwnProperty(columnId)) {
                return row._uniqueValuesCache[columnId]
            }
            const column2 = table.getColumn(columnId)
            if (!(column2 != null && column2.accessorFn)) {
                return void 0
            }
            if (!column2.columnDef.getUniqueValues) {
                row._uniqueValuesCache[columnId] = [row.getValue(columnId)]
                return row._uniqueValuesCache[columnId]
            }
            row._uniqueValuesCache[columnId] = column2.columnDef.getUniqueValues(
                row.original,
                rowIndex
            )
            return row._uniqueValuesCache[columnId]
        },
        renderValue: (columnId) => {
            var _row$getValue
            return (_row$getValue = row.getValue(columnId)) != null
                ? _row$getValue
                : table.options.renderFallbackValue
        },
        subRows: [],
        getLeafRows: () => flattenBy(row.subRows, (d) => d.subRows),
        getParentRow: () => (row.parentId ? table.getRow(row.parentId, true) : void 0),
        getParentRows: () => {
            let parentRows = []
            let currentRow = row
            while (true) {
                const parentRow = currentRow.getParentRow()
                if (!parentRow) break
                parentRows.push(parentRow)
                currentRow = parentRow
            }
            return parentRows.reverse()
        },
        getAllCells: memo(
            () => [table.getAllLeafColumns()],
            (leafColumns) => {
                return leafColumns.map((column2) => {
                    return createCell(table, row, column2, column2.id)
                })
            },
            getMemoOptions(table.options, 'debugRows')
        ),
        _getAllCellsByColumnId: memo(
            () => [row.getAllCells()],
            (allCells) => {
                return allCells.reduce((acc, cell) => {
                    acc[cell.column.id] = cell
                    return acc
                }, {})
            },
            getMemoOptions(table.options, 'debugRows')
        )
    }
    for (let i = 0; i < table._features.length; i++) {
        const feature = table._features[i]
        feature == null || feature.createRow == null || feature.createRow(row, table)
    }
    return row
}
const ColumnFaceting = {
    createColumn: (column2, table) => {
        column2._getFacetedRowModel =
            table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column2.id)
        column2.getFacetedRowModel = () => {
            if (!column2._getFacetedRowModel) {
                return table.getPreFilteredRowModel()
            }
            return column2._getFacetedRowModel()
        }
        column2._getFacetedUniqueValues =
            table.options.getFacetedUniqueValues &&
            table.options.getFacetedUniqueValues(table, column2.id)
        column2.getFacetedUniqueValues = () => {
            if (!column2._getFacetedUniqueValues) {
                return /* @__PURE__ */ new Map()
            }
            return column2._getFacetedUniqueValues()
        }
        column2._getFacetedMinMaxValues =
            table.options.getFacetedMinMaxValues &&
            table.options.getFacetedMinMaxValues(table, column2.id)
        column2.getFacetedMinMaxValues = () => {
            if (!column2._getFacetedMinMaxValues) {
                return void 0
            }
            return column2._getFacetedMinMaxValues()
        }
    }
}
const includesString = (row, columnId, filterValue) => {
    var _filterValue$toString, _row$getValue
    const search =
        filterValue == null || (_filterValue$toString = filterValue.toString()) == null
            ? void 0
            : _filterValue$toString.toLowerCase()
    return Boolean(
        (_row$getValue = row.getValue(columnId)) == null ||
            (_row$getValue = _row$getValue.toString()) == null ||
            (_row$getValue = _row$getValue.toLowerCase()) == null
            ? void 0
            : _row$getValue.includes(search)
    )
}
includesString.autoRemove = (val) => testFalsey(val)
const includesStringSensitive = (row, columnId, filterValue) => {
    var _row$getValue2
    return Boolean(
        (_row$getValue2 = row.getValue(columnId)) == null ||
            (_row$getValue2 = _row$getValue2.toString()) == null
            ? void 0
            : _row$getValue2.includes(filterValue)
    )
}
includesStringSensitive.autoRemove = (val) => testFalsey(val)
const equalsString = (row, columnId, filterValue) => {
    var _row$getValue3
    return (
        ((_row$getValue3 = row.getValue(columnId)) == null ||
        (_row$getValue3 = _row$getValue3.toString()) == null
            ? void 0
            : _row$getValue3.toLowerCase()) ===
        (filterValue == null ? void 0 : filterValue.toLowerCase())
    )
}
equalsString.autoRemove = (val) => testFalsey(val)
const arrIncludes = (row, columnId, filterValue) => {
    var _row$getValue4
    return (_row$getValue4 = row.getValue(columnId)) == null
        ? void 0
        : _row$getValue4.includes(filterValue)
}
arrIncludes.autoRemove = (val) => testFalsey(val)
const arrIncludesAll = (row, columnId, filterValue) => {
    return !filterValue.some((val) => {
        var _row$getValue5
        return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val))
    })
}
arrIncludesAll.autoRemove = (val) => testFalsey(val) || !(val != null && val.length)
const arrIncludesSome = (row, columnId, filterValue) => {
    return filterValue.some((val) => {
        var _row$getValue6
        return (_row$getValue6 = row.getValue(columnId)) == null
            ? void 0
            : _row$getValue6.includes(val)
    })
}
arrIncludesSome.autoRemove = (val) => testFalsey(val) || !(val != null && val.length)
const equals = (row, columnId, filterValue) => {
    return row.getValue(columnId) === filterValue
}
equals.autoRemove = (val) => testFalsey(val)
const weakEquals = (row, columnId, filterValue) => {
    return row.getValue(columnId) == filterValue
}
weakEquals.autoRemove = (val) => testFalsey(val)
const inNumberRange = (row, columnId, filterValue) => {
    let [min2, max2] = filterValue
    const rowValue = row.getValue(columnId)
    return rowValue >= min2 && rowValue <= max2
}
inNumberRange.resolveFilterValue = (val) => {
    let [unsafeMin, unsafeMax] = val
    let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin
    let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax
    let min2 = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin
    let max2 = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax
    if (min2 > max2) {
        const temp = min2
        min2 = max2
        max2 = temp
    }
    return [min2, max2]
}
inNumberRange.autoRemove = (val) => testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))
const filterFns = {
    includesString,
    includesStringSensitive,
    equalsString,
    arrIncludes,
    arrIncludesAll,
    arrIncludesSome,
    equals,
    weakEquals,
    inNumberRange
}
function testFalsey(val) {
    return val === void 0 || val === null || val === ''
}
const ColumnFiltering = {
    getDefaultColumnDef: () => {
        return {
            filterFn: 'auto'
        }
    },
    getInitialState: (state) => {
        return {
            columnFilters: [],
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            onColumnFiltersChange: makeStateUpdater('columnFilters', table),
            filterFromLeafRows: false,
            maxLeafRowFilterDepth: 100
        }
    },
    createColumn: (column2, table) => {
        column2.getAutoFilterFn = () => {
            const firstRow = table.getCoreRowModel().flatRows[0]
            const value = firstRow == null ? void 0 : firstRow.getValue(column2.id)
            if (typeof value === 'string') {
                return filterFns.includesString
            }
            if (typeof value === 'number') {
                return filterFns.inNumberRange
            }
            if (typeof value === 'boolean') {
                return filterFns.equals
            }
            if (value !== null && typeof value === 'object') {
                return filterFns.equals
            }
            if (Array.isArray(value)) {
                return filterFns.arrIncludes
            }
            return filterFns.weakEquals
        }
        column2.getFilterFn = () => {
            var _table$options$filter, _table$options$filter2
            return isFunction$1(column2.columnDef.filterFn)
                ? column2.columnDef.filterFn
                : column2.columnDef.filterFn === 'auto'
                  ? column2.getAutoFilterFn()
                  : // @ts-ignore
                    (_table$options$filter =
                          (_table$options$filter2 = table.options.filterFns) == null
                              ? void 0
                              : _table$options$filter2[column2.columnDef.filterFn]) != null
                    ? _table$options$filter
                    : filterFns[column2.columnDef.filterFn]
        }
        column2.getCanFilter = () => {
            var _column$columnDef$ena, _table$options$enable, _table$options$enable2
            return (
                ((_column$columnDef$ena = column2.columnDef.enableColumnFilter) != null
                    ? _column$columnDef$ena
                    : true) &&
                ((_table$options$enable = table.options.enableColumnFilters) != null
                    ? _table$options$enable
                    : true) &&
                ((_table$options$enable2 = table.options.enableFilters) != null
                    ? _table$options$enable2
                    : true) &&
                !!column2.accessorFn
            )
        }
        column2.getIsFiltered = () => column2.getFilterIndex() > -1
        column2.getFilterValue = () => {
            var _table$getState$colum
            return (_table$getState$colum = table.getState().columnFilters) == null ||
                (_table$getState$colum = _table$getState$colum.find((d) => d.id === column2.id)) ==
                    null
                ? void 0
                : _table$getState$colum.value
        }
        column2.getFilterIndex = () => {
            var _table$getState$colum2, _table$getState$colum3
            return (_table$getState$colum2 =
                (_table$getState$colum3 = table.getState().columnFilters) == null
                    ? void 0
                    : _table$getState$colum3.findIndex((d) => d.id === column2.id)) != null
                ? _table$getState$colum2
                : -1
        }
        column2.setFilterValue = (value) => {
            table.setColumnFilters((old) => {
                const filterFn = column2.getFilterFn()
                const previousFilter = old == null ? void 0 : old.find((d) => d.id === column2.id)
                const newFilter = functionalUpdate(
                    value,
                    previousFilter ? previousFilter.value : void 0
                )
                if (shouldAutoRemoveFilter(filterFn, newFilter, column2)) {
                    var _old$filter
                    return (_old$filter =
                        old == null ? void 0 : old.filter((d) => d.id !== column2.id)) != null
                        ? _old$filter
                        : []
                }
                const newFilterObj = {
                    id: column2.id,
                    value: newFilter
                }
                if (previousFilter) {
                    var _old$map
                    return (_old$map =
                        old == null
                            ? void 0
                            : old.map((d) => {
                                  if (d.id === column2.id) {
                                      return newFilterObj
                                  }
                                  return d
                              })) != null
                        ? _old$map
                        : []
                }
                if (old != null && old.length) {
                    return [...old, newFilterObj]
                }
                return [newFilterObj]
            })
        }
    },
    createRow: (row, _table) => {
        row.columnFilters = {}
        row.columnFiltersMeta = {}
    },
    createTable: (table) => {
        table.setColumnFilters = (updater) => {
            const leafColumns = table.getAllLeafColumns()
            const updateFn = (old) => {
                var _functionalUpdate
                return (_functionalUpdate = functionalUpdate(updater, old)) == null
                    ? void 0
                    : _functionalUpdate.filter((filter2) => {
                          const column2 = leafColumns.find((d) => d.id === filter2.id)
                          if (column2) {
                              const filterFn = column2.getFilterFn()
                              if (shouldAutoRemoveFilter(filterFn, filter2.value, column2)) {
                                  return false
                              }
                          }
                          return true
                      })
            }
            table.options.onColumnFiltersChange == null ||
                table.options.onColumnFiltersChange(updateFn)
        }
        table.resetColumnFilters = (defaultState) => {
            var _table$initialState$c, _table$initialState
            table.setColumnFilters(
                defaultState
                    ? []
                    : (_table$initialState$c =
                            (_table$initialState = table.initialState) == null
                                ? void 0
                                : _table$initialState.columnFilters) != null
                      ? _table$initialState$c
                      : []
            )
        }
        table.getPreFilteredRowModel = () => table.getCoreRowModel()
        table.getFilteredRowModel = () => {
            if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {
                table._getFilteredRowModel = table.options.getFilteredRowModel(table)
            }
            if (table.options.manualFiltering || !table._getFilteredRowModel) {
                return table.getPreFilteredRowModel()
            }
            return table._getFilteredRowModel()
        }
    }
}
function shouldAutoRemoveFilter(filterFn, value, column2) {
    return (
        (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column2) : false) ||
        typeof value === 'undefined' ||
        (typeof value === 'string' && !value)
    )
}
const sum = (columnId, _leafRows, childRows) => {
    return childRows.reduce((sum2, next2) => {
        const nextValue = next2.getValue(columnId)
        return sum2 + (typeof nextValue === 'number' ? nextValue : 0)
    }, 0)
}
const min$3 = (columnId, _leafRows, childRows) => {
    let min2
    childRows.forEach((row) => {
        const value = row.getValue(columnId)
        if (value != null && (min2 > value || (min2 === void 0 && value >= value))) {
            min2 = value
        }
    })
    return min2
}
const max$3 = (columnId, _leafRows, childRows) => {
    let max2
    childRows.forEach((row) => {
        const value = row.getValue(columnId)
        if (value != null && (max2 < value || (max2 === void 0 && value >= value))) {
            max2 = value
        }
    })
    return max2
}
const extent = (columnId, _leafRows, childRows) => {
    let min2
    let max2
    childRows.forEach((row) => {
        const value = row.getValue(columnId)
        if (value != null) {
            if (min2 === void 0) {
                if (value >= value) min2 = max2 = value
            } else {
                if (min2 > value) min2 = value
                if (max2 < value) max2 = value
            }
        }
    })
    return [min2, max2]
}
const mean = (columnId, leafRows) => {
    let count2 = 0
    let sum2 = 0
    leafRows.forEach((row) => {
        let value = row.getValue(columnId)
        if (value != null && (value = +value) >= value) {
            ++count2, (sum2 += value)
        }
    })
    if (count2) return sum2 / count2
    return
}
const median = (columnId, leafRows) => {
    if (!leafRows.length) {
        return
    }
    const values = leafRows.map((row) => row.getValue(columnId))
    if (!isNumberArray$1(values)) {
        return
    }
    if (values.length === 1) {
        return values[0]
    }
    const mid = Math.floor(values.length / 2)
    const nums = values.sort((a2, b) => a2 - b)
    return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2
}
const unique = (columnId, leafRows) => {
    return Array.from(new Set(leafRows.map((d) => d.getValue(columnId))).values())
}
const uniqueCount = (columnId, leafRows) => {
    return new Set(leafRows.map((d) => d.getValue(columnId))).size
}
const count = (_columnId, leafRows) => {
    return leafRows.length
}
const aggregationFns = {
    sum,
    min: min$3,
    max: max$3,
    extent,
    mean,
    median,
    unique,
    uniqueCount,
    count
}
const ColumnGrouping = {
    getDefaultColumnDef: () => {
        return {
            aggregatedCell: (props) => {
                var _toString, _props$getValue
                return (_toString =
                    (_props$getValue = props.getValue()) == null || _props$getValue.toString == null
                        ? void 0
                        : _props$getValue.toString()) != null
                    ? _toString
                    : null
            },
            aggregationFn: 'auto'
        }
    },
    getInitialState: (state) => {
        return {
            grouping: [],
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            onGroupingChange: makeStateUpdater('grouping', table),
            groupedColumnMode: 'reorder'
        }
    },
    createColumn: (column2, table) => {
        column2.toggleGrouping = () => {
            table.setGrouping((old) => {
                if (old != null && old.includes(column2.id)) {
                    return old.filter((d) => d !== column2.id)
                }
                return [...(old != null ? old : []), column2.id]
            })
        }
        column2.getCanGroup = () => {
            var _column$columnDef$ena, _table$options$enable
            return (
                ((_column$columnDef$ena = column2.columnDef.enableGrouping) != null
                    ? _column$columnDef$ena
                    : true) &&
                ((_table$options$enable = table.options.enableGrouping) != null
                    ? _table$options$enable
                    : true) &&
                (!!column2.accessorFn || !!column2.columnDef.getGroupingValue)
            )
        }
        column2.getIsGrouped = () => {
            var _table$getState$group
            return (_table$getState$group = table.getState().grouping) == null
                ? void 0
                : _table$getState$group.includes(column2.id)
        }
        column2.getGroupedIndex = () => {
            var _table$getState$group2
            return (_table$getState$group2 = table.getState().grouping) == null
                ? void 0
                : _table$getState$group2.indexOf(column2.id)
        }
        column2.getToggleGroupingHandler = () => {
            const canGroup = column2.getCanGroup()
            return () => {
                if (!canGroup) return
                column2.toggleGrouping()
            }
        }
        column2.getAutoAggregationFn = () => {
            const firstRow = table.getCoreRowModel().flatRows[0]
            const value = firstRow == null ? void 0 : firstRow.getValue(column2.id)
            if (typeof value === 'number') {
                return aggregationFns.sum
            }
            if (Object.prototype.toString.call(value) === '[object Date]') {
                return aggregationFns.extent
            }
        }
        column2.getAggregationFn = () => {
            var _table$options$aggreg, _table$options$aggreg2
            if (!column2) {
                throw new Error()
            }
            return isFunction$1(column2.columnDef.aggregationFn)
                ? column2.columnDef.aggregationFn
                : column2.columnDef.aggregationFn === 'auto'
                  ? column2.getAutoAggregationFn()
                  : (_table$options$aggreg =
                          (_table$options$aggreg2 = table.options.aggregationFns) == null
                              ? void 0
                              : _table$options$aggreg2[column2.columnDef.aggregationFn]) != null
                    ? _table$options$aggreg
                    : aggregationFns[column2.columnDef.aggregationFn]
        }
    },
    createTable: (table) => {
        table.setGrouping = (updater) =>
            table.options.onGroupingChange == null
                ? void 0
                : table.options.onGroupingChange(updater)
        table.resetGrouping = (defaultState) => {
            var _table$initialState$g, _table$initialState
            table.setGrouping(
                defaultState
                    ? []
                    : (_table$initialState$g =
                            (_table$initialState = table.initialState) == null
                                ? void 0
                                : _table$initialState.grouping) != null
                      ? _table$initialState$g
                      : []
            )
        }
        table.getPreGroupedRowModel = () => table.getFilteredRowModel()
        table.getGroupedRowModel = () => {
            if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {
                table._getGroupedRowModel = table.options.getGroupedRowModel(table)
            }
            if (table.options.manualGrouping || !table._getGroupedRowModel) {
                return table.getPreGroupedRowModel()
            }
            return table._getGroupedRowModel()
        }
    },
    createRow: (row, table) => {
        row.getIsGrouped = () => !!row.groupingColumnId
        row.getGroupingValue = (columnId) => {
            if (row._groupingValuesCache.hasOwnProperty(columnId)) {
                return row._groupingValuesCache[columnId]
            }
            const column2 = table.getColumn(columnId)
            if (!(column2 != null && column2.columnDef.getGroupingValue)) {
                return row.getValue(columnId)
            }
            row._groupingValuesCache[columnId] = column2.columnDef.getGroupingValue(row.original)
            return row._groupingValuesCache[columnId]
        }
        row._groupingValuesCache = {}
    },
    createCell: (cell, column2, row, table) => {
        cell.getIsGrouped = () => column2.getIsGrouped() && column2.id === row.groupingColumnId
        cell.getIsPlaceholder = () => !cell.getIsGrouped() && column2.getIsGrouped()
        cell.getIsAggregated = () => {
            var _row$subRows
            return (
                !cell.getIsGrouped() &&
                !cell.getIsPlaceholder() &&
                !!((_row$subRows = row.subRows) != null && _row$subRows.length)
            )
        }
    }
}
function orderColumns(leafColumns, grouping, groupedColumnMode) {
    if (!(grouping != null && grouping.length) || !groupedColumnMode) {
        return leafColumns
    }
    const nonGroupingColumns = leafColumns.filter((col) => !grouping.includes(col.id))
    if (groupedColumnMode === 'remove') {
        return nonGroupingColumns
    }
    const groupingColumns = grouping
        .map((g) => leafColumns.find((col) => col.id === g))
        .filter(Boolean)
    return [...groupingColumns, ...nonGroupingColumns]
}
const ColumnOrdering = {
    getInitialState: (state) => {
        return {
            columnOrder: [],
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            onColumnOrderChange: makeStateUpdater('columnOrder', table)
        }
    },
    createColumn: (column2, table) => {
        column2.getIndex = memo(
            (position2) => [_getVisibleLeafColumns(table, position2)],
            (columns) => columns.findIndex((d) => d.id === column2.id),
            getMemoOptions(table.options, 'debugColumns')
        )
        column2.getIsFirstColumn = (position2) => {
            var _columns$
            const columns = _getVisibleLeafColumns(table, position2)
            return ((_columns$ = columns[0]) == null ? void 0 : _columns$.id) === column2.id
        }
        column2.getIsLastColumn = (position2) => {
            var _columns
            const columns = _getVisibleLeafColumns(table, position2)
            return (
                ((_columns = columns[columns.length - 1]) == null ? void 0 : _columns.id) ===
                column2.id
            )
        }
    },
    createTable: (table) => {
        table.setColumnOrder = (updater) =>
            table.options.onColumnOrderChange == null
                ? void 0
                : table.options.onColumnOrderChange(updater)
        table.resetColumnOrder = (defaultState) => {
            var _table$initialState$c
            table.setColumnOrder(
                defaultState
                    ? []
                    : (_table$initialState$c = table.initialState.columnOrder) != null
                      ? _table$initialState$c
                      : []
            )
        }
        table._getOrderColumnsFn = memo(
            () => [
                table.getState().columnOrder,
                table.getState().grouping,
                table.options.groupedColumnMode
            ],
            (columnOrder, grouping, groupedColumnMode) => (columns) => {
                let orderedColumns = []
                if (!(columnOrder != null && columnOrder.length)) {
                    orderedColumns = columns
                } else {
                    const columnOrderCopy = [...columnOrder]
                    const columnsCopy = [...columns]
                    while (columnsCopy.length && columnOrderCopy.length) {
                        const targetColumnId = columnOrderCopy.shift()
                        const foundIndex = columnsCopy.findIndex((d) => d.id === targetColumnId)
                        if (foundIndex > -1) {
                            orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0])
                        }
                    }
                    orderedColumns = [...orderedColumns, ...columnsCopy]
                }
                return orderColumns(orderedColumns, grouping, groupedColumnMode)
            },
            getMemoOptions(table.options, 'debugTable')
        )
    }
}
const getDefaultColumnPinningState = () => ({
    left: [],
    right: []
})
const ColumnPinning = {
    getInitialState: (state) => {
        return {
            columnPinning: getDefaultColumnPinningState(),
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            onColumnPinningChange: makeStateUpdater('columnPinning', table)
        }
    },
    createColumn: (column2, table) => {
        column2.pin = (position2) => {
            const columnIds = column2
                .getLeafColumns()
                .map((d) => d.id)
                .filter(Boolean)
            table.setColumnPinning((old) => {
                var _old$left3, _old$right3
                if (position2 === 'right') {
                    var _old$left, _old$right
                    return {
                        left: ((_old$left = old == null ? void 0 : old.left) != null
                            ? _old$left
                            : []
                        ).filter((d) => !(columnIds != null && columnIds.includes(d))),
                        right: [
                            ...((_old$right = old == null ? void 0 : old.right) != null
                                ? _old$right
                                : []
                            ).filter((d) => !(columnIds != null && columnIds.includes(d))),
                            ...columnIds
                        ]
                    }
                }
                if (position2 === 'left') {
                    var _old$left2, _old$right2
                    return {
                        left: [
                            ...((_old$left2 = old == null ? void 0 : old.left) != null
                                ? _old$left2
                                : []
                            ).filter((d) => !(columnIds != null && columnIds.includes(d))),
                            ...columnIds
                        ],
                        right: ((_old$right2 = old == null ? void 0 : old.right) != null
                            ? _old$right2
                            : []
                        ).filter((d) => !(columnIds != null && columnIds.includes(d)))
                    }
                }
                return {
                    left: ((_old$left3 = old == null ? void 0 : old.left) != null
                        ? _old$left3
                        : []
                    ).filter((d) => !(columnIds != null && columnIds.includes(d))),
                    right: ((_old$right3 = old == null ? void 0 : old.right) != null
                        ? _old$right3
                        : []
                    ).filter((d) => !(columnIds != null && columnIds.includes(d)))
                }
            })
        }
        column2.getCanPin = () => {
            const leafColumns = column2.getLeafColumns()
            return leafColumns.some((d) => {
                var _d$columnDef$enablePi, _ref3, _table$options$enable
                return (
                    ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null
                        ? _d$columnDef$enablePi
                        : true) &&
                    ((_ref3 =
                        (_table$options$enable = table.options.enableColumnPinning) != null
                            ? _table$options$enable
                            : table.options.enablePinning) != null
                        ? _ref3
                        : true)
                )
            })
        }
        column2.getIsPinned = () => {
            const leafColumnIds = column2.getLeafColumns().map((d) => d.id)
            const { left, right } = table.getState().columnPinning
            const isLeft = leafColumnIds.some((d) => (left == null ? void 0 : left.includes(d)))
            const isRight = leafColumnIds.some((d) => (right == null ? void 0 : right.includes(d)))
            return isLeft ? 'left' : isRight ? 'right' : false
        }
        column2.getPinnedIndex = () => {
            var _table$getState$colum, _table$getState$colum2
            const position2 = column2.getIsPinned()
            return position2
                ? (_table$getState$colum =
                      (_table$getState$colum2 = table.getState().columnPinning) == null ||
                      (_table$getState$colum2 = _table$getState$colum2[position2]) == null
                          ? void 0
                          : _table$getState$colum2.indexOf(column2.id)) != null
                    ? _table$getState$colum
                    : -1
                : 0
        }
    },
    createRow: (row, table) => {
        row.getCenterVisibleCells = memo(
            () => [
                row._getAllVisibleCells(),
                table.getState().columnPinning.left,
                table.getState().columnPinning.right
            ],
            (allCells, left, right) => {
                const leftAndRight = [
                    ...(left != null ? left : []),
                    ...(right != null ? right : [])
                ]
                return allCells.filter((d) => !leftAndRight.includes(d.column.id))
            },
            getMemoOptions(table.options, 'debugRows')
        )
        row.getLeftVisibleCells = memo(
            () => [row._getAllVisibleCells(), table.getState().columnPinning.left],
            (allCells, left) => {
                const cells = (left != null ? left : [])
                    .map((columnId) => allCells.find((cell) => cell.column.id === columnId))
                    .filter(Boolean)
                    .map((d) => ({
                        ...d,
                        position: 'left'
                    }))
                return cells
            },
            getMemoOptions(table.options, 'debugRows')
        )
        row.getRightVisibleCells = memo(
            () => [row._getAllVisibleCells(), table.getState().columnPinning.right],
            (allCells, right) => {
                const cells = (right != null ? right : [])
                    .map((columnId) => allCells.find((cell) => cell.column.id === columnId))
                    .filter(Boolean)
                    .map((d) => ({
                        ...d,
                        position: 'right'
                    }))
                return cells
            },
            getMemoOptions(table.options, 'debugRows')
        )
    },
    createTable: (table) => {
        table.setColumnPinning = (updater) =>
            table.options.onColumnPinningChange == null
                ? void 0
                : table.options.onColumnPinningChange(updater)
        table.resetColumnPinning = (defaultState) => {
            var _table$initialState$c, _table$initialState
            return table.setColumnPinning(
                defaultState
                    ? getDefaultColumnPinningState()
                    : (_table$initialState$c =
                            (_table$initialState = table.initialState) == null
                                ? void 0
                                : _table$initialState.columnPinning) != null
                      ? _table$initialState$c
                      : getDefaultColumnPinningState()
            )
        }
        table.getIsSomeColumnsPinned = (position2) => {
            var _pinningState$positio
            const pinningState = table.getState().columnPinning
            if (!position2) {
                var _pinningState$left, _pinningState$right
                return Boolean(
                    ((_pinningState$left = pinningState.left) == null
                        ? void 0
                        : _pinningState$left.length) ||
                        ((_pinningState$right = pinningState.right) == null
                            ? void 0
                            : _pinningState$right.length)
                )
            }
            return Boolean(
                (_pinningState$positio = pinningState[position2]) == null
                    ? void 0
                    : _pinningState$positio.length
            )
        }
        table.getLeftLeafColumns = memo(
            () => [table.getAllLeafColumns(), table.getState().columnPinning.left],
            (allColumns, left) => {
                return (left != null ? left : [])
                    .map((columnId) => allColumns.find((column2) => column2.id === columnId))
                    .filter(Boolean)
            },
            getMemoOptions(table.options, 'debugColumns')
        )
        table.getRightLeafColumns = memo(
            () => [table.getAllLeafColumns(), table.getState().columnPinning.right],
            (allColumns, right) => {
                return (right != null ? right : [])
                    .map((columnId) => allColumns.find((column2) => column2.id === columnId))
                    .filter(Boolean)
            },
            getMemoOptions(table.options, 'debugColumns')
        )
        table.getCenterLeafColumns = memo(
            () => [
                table.getAllLeafColumns(),
                table.getState().columnPinning.left,
                table.getState().columnPinning.right
            ],
            (allColumns, left, right) => {
                const leftAndRight = [
                    ...(left != null ? left : []),
                    ...(right != null ? right : [])
                ]
                return allColumns.filter((d) => !leftAndRight.includes(d.id))
            },
            getMemoOptions(table.options, 'debugColumns')
        )
    }
}
function safelyAccessDocument(_document) {
    return _document || (typeof document !== 'undefined' ? document : null)
}
const defaultColumnSizing = {
    size: 150,
    minSize: 20,
    maxSize: Number.MAX_SAFE_INTEGER
}
const getDefaultColumnSizingInfoState = () => ({
    startOffset: null,
    startSize: null,
    deltaOffset: null,
    deltaPercentage: null,
    isResizingColumn: false,
    columnSizingStart: []
})
const ColumnSizing = {
    getDefaultColumnDef: () => {
        return defaultColumnSizing
    },
    getInitialState: (state) => {
        return {
            columnSizing: {},
            columnSizingInfo: getDefaultColumnSizingInfoState(),
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            columnResizeMode: 'onEnd',
            columnResizeDirection: 'ltr',
            onColumnSizingChange: makeStateUpdater('columnSizing', table),
            onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)
        }
    },
    createColumn: (column2, table) => {
        column2.getSize = () => {
            var _column$columnDef$min, _ref3, _column$columnDef$max
            const columnSize = table.getState().columnSizing[column2.id]
            return Math.min(
                Math.max(
                    (_column$columnDef$min = column2.columnDef.minSize) != null
                        ? _column$columnDef$min
                        : defaultColumnSizing.minSize,
                    (_ref3 = columnSize != null ? columnSize : column2.columnDef.size) != null
                        ? _ref3
                        : defaultColumnSizing.size
                ),
                (_column$columnDef$max = column2.columnDef.maxSize) != null
                    ? _column$columnDef$max
                    : defaultColumnSizing.maxSize
            )
        }
        column2.getStart = memo(
            (position2) => [
                position2,
                _getVisibleLeafColumns(table, position2),
                table.getState().columnSizing
            ],
            (position2, columns) =>
                columns
                    .slice(0, column2.getIndex(position2))
                    .reduce((sum2, column22) => sum2 + column22.getSize(), 0),
            getMemoOptions(table.options, 'debugColumns')
        )
        column2.getAfter = memo(
            (position2) => [
                position2,
                _getVisibleLeafColumns(table, position2),
                table.getState().columnSizing
            ],
            (position2, columns) =>
                columns
                    .slice(column2.getIndex(position2) + 1)
                    .reduce((sum2, column22) => sum2 + column22.getSize(), 0),
            getMemoOptions(table.options, 'debugColumns')
        )
        column2.resetSize = () => {
            table.setColumnSizing((_ref22) => {
                let { [column2.id]: _, ...rest } = _ref22
                return rest
            })
        }
        column2.getCanResize = () => {
            var _column$columnDef$ena, _table$options$enable
            return (
                ((_column$columnDef$ena = column2.columnDef.enableResizing) != null
                    ? _column$columnDef$ena
                    : true) &&
                ((_table$options$enable = table.options.enableColumnResizing) != null
                    ? _table$options$enable
                    : true)
            )
        }
        column2.getIsResizing = () => {
            return table.getState().columnSizingInfo.isResizingColumn === column2.id
        }
    },
    createHeader: (header, table) => {
        header.getSize = () => {
            let sum2 = 0
            const recurse = (header2) => {
                if (header2.subHeaders.length) {
                    header2.subHeaders.forEach(recurse)
                } else {
                    var _header$column$getSiz
                    sum2 +=
                        (_header$column$getSiz = header2.column.getSize()) != null
                            ? _header$column$getSiz
                            : 0
                }
            }
            recurse(header)
            return sum2
        }
        header.getStart = () => {
            if (header.index > 0) {
                const prevSiblingHeader = header.headerGroup.headers[header.index - 1]
                return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()
            }
            return 0
        }
        header.getResizeHandler = (_contextDocument) => {
            const column2 = table.getColumn(header.column.id)
            const canResize = column2 == null ? void 0 : column2.getCanResize()
            return (e) => {
                if (!column2 || !canResize) {
                    return
                }
                e.persist == null || e.persist()
                if (isTouchStartEvent(e)) {
                    if (e.touches && e.touches.length > 1) {
                        return
                    }
                }
                const startSize = header.getSize()
                const columnSizingStart = header
                    ? header.getLeafHeaders().map((d) => [d.column.id, d.column.getSize()])
                    : [[column2.id, column2.getSize()]]
                const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX
                const newColumnSizing = {}
                const updateOffset = (eventType, clientXPos) => {
                    if (typeof clientXPos !== 'number') {
                        return
                    }
                    table.setColumnSizingInfo((old) => {
                        var _old$startOffset, _old$startSize
                        const deltaDirection =
                            table.options.columnResizeDirection === 'rtl' ? -1 : 1
                        const deltaOffset =
                            (clientXPos -
                                ((_old$startOffset = old == null ? void 0 : old.startOffset) != null
                                    ? _old$startOffset
                                    : 0)) *
                            deltaDirection
                        const deltaPercentage = Math.max(
                            deltaOffset /
                                ((_old$startSize = old == null ? void 0 : old.startSize) != null
                                    ? _old$startSize
                                    : 0),
                            -0.999999
                        )
                        old.columnSizingStart.forEach((_ref3) => {
                            let [columnId, headerSize] = _ref3
                            newColumnSizing[columnId] =
                                Math.round(
                                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100
                                ) / 100
                        })
                        return {
                            ...old,
                            deltaOffset,
                            deltaPercentage
                        }
                    })
                    if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {
                        table.setColumnSizing((old) => ({
                            ...old,
                            ...newColumnSizing
                        }))
                    }
                }
                const onMove = (clientXPos) => updateOffset('move', clientXPos)
                const onEnd = (clientXPos) => {
                    updateOffset('end', clientXPos)
                    table.setColumnSizingInfo((old) => ({
                        ...old,
                        isResizingColumn: false,
                        startOffset: null,
                        startSize: null,
                        deltaOffset: null,
                        deltaPercentage: null,
                        columnSizingStart: []
                    }))
                }
                const contextDocument = safelyAccessDocument(_contextDocument)
                const mouseEvents = {
                    moveHandler: (e22) => onMove(e22.clientX),
                    upHandler: (e22) => {
                        contextDocument == null ||
                            contextDocument.removeEventListener(
                                'mousemove',
                                mouseEvents.moveHandler
                            )
                        contextDocument == null ||
                            contextDocument.removeEventListener('mouseup', mouseEvents.upHandler)
                        onEnd(e22.clientX)
                    }
                }
                const touchEvents = {
                    moveHandler: (e22) => {
                        if (e22.cancelable) {
                            e22.preventDefault()
                            e22.stopPropagation()
                        }
                        onMove(e22.touches[0].clientX)
                        return false
                    },
                    upHandler: (e22) => {
                        var _e$touches$
                        contextDocument == null ||
                            contextDocument.removeEventListener(
                                'touchmove',
                                touchEvents.moveHandler
                            )
                        contextDocument == null ||
                            contextDocument.removeEventListener('touchend', touchEvents.upHandler)
                        if (e22.cancelable) {
                            e22.preventDefault()
                            e22.stopPropagation()
                        }
                        onEnd((_e$touches$ = e22.touches[0]) == null ? void 0 : _e$touches$.clientX)
                    }
                }
                const passiveIfSupported = passiveEventSupported()
                    ? {
                          passive: false
                      }
                    : false
                if (isTouchStartEvent(e)) {
                    contextDocument == null ||
                        contextDocument.addEventListener(
                            'touchmove',
                            touchEvents.moveHandler,
                            passiveIfSupported
                        )
                    contextDocument == null ||
                        contextDocument.addEventListener(
                            'touchend',
                            touchEvents.upHandler,
                            passiveIfSupported
                        )
                } else {
                    contextDocument == null ||
                        contextDocument.addEventListener(
                            'mousemove',
                            mouseEvents.moveHandler,
                            passiveIfSupported
                        )
                    contextDocument == null ||
                        contextDocument.addEventListener(
                            'mouseup',
                            mouseEvents.upHandler,
                            passiveIfSupported
                        )
                }
                table.setColumnSizingInfo((old) => ({
                    ...old,
                    startOffset: clientX,
                    startSize,
                    deltaOffset: 0,
                    deltaPercentage: 0,
                    columnSizingStart,
                    isResizingColumn: column2.id
                }))
            }
        }
    },
    createTable: (table) => {
        table.setColumnSizing = (updater) =>
            table.options.onColumnSizingChange == null
                ? void 0
                : table.options.onColumnSizingChange(updater)
        table.setColumnSizingInfo = (updater) =>
            table.options.onColumnSizingInfoChange == null
                ? void 0
                : table.options.onColumnSizingInfoChange(updater)
        table.resetColumnSizing = (defaultState) => {
            var _table$initialState$c
            table.setColumnSizing(
                defaultState
                    ? {}
                    : (_table$initialState$c = table.initialState.columnSizing) != null
                      ? _table$initialState$c
                      : {}
            )
        }
        table.resetHeaderSizeInfo = (defaultState) => {
            var _table$initialState$c2
            table.setColumnSizingInfo(
                defaultState
                    ? getDefaultColumnSizingInfoState()
                    : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null
                      ? _table$initialState$c2
                      : getDefaultColumnSizingInfoState()
            )
        }
        table.getTotalSize = () => {
            var _table$getHeaderGroup, _table$getHeaderGroup2
            return (_table$getHeaderGroup =
                (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null
                    ? void 0
                    : _table$getHeaderGroup2.headers.reduce((sum2, header) => {
                          return sum2 + header.getSize()
                      }, 0)) != null
                ? _table$getHeaderGroup
                : 0
        }
        table.getLeftTotalSize = () => {
            var _table$getLeftHeaderG, _table$getLeftHeaderG2
            return (_table$getLeftHeaderG =
                (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null
                    ? void 0
                    : _table$getLeftHeaderG2.headers.reduce((sum2, header) => {
                          return sum2 + header.getSize()
                      }, 0)) != null
                ? _table$getLeftHeaderG
                : 0
        }
        table.getCenterTotalSize = () => {
            var _table$getCenterHeade, _table$getCenterHeade2
            return (_table$getCenterHeade =
                (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null
                    ? void 0
                    : _table$getCenterHeade2.headers.reduce((sum2, header) => {
                          return sum2 + header.getSize()
                      }, 0)) != null
                ? _table$getCenterHeade
                : 0
        }
        table.getRightTotalSize = () => {
            var _table$getRightHeader, _table$getRightHeader2
            return (_table$getRightHeader =
                (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null
                    ? void 0
                    : _table$getRightHeader2.headers.reduce((sum2, header) => {
                          return sum2 + header.getSize()
                      }, 0)) != null
                ? _table$getRightHeader
                : 0
        }
    }
}
let passiveSupported = null
function passiveEventSupported() {
    if (typeof passiveSupported === 'boolean') return passiveSupported
    let supported = false
    try {
        const options2 = {
            get passive() {
                supported = true
                return false
            }
        }
        const noop22 = () => {}
        window.addEventListener('test', noop22, options2)
        window.removeEventListener('test', noop22)
    } catch (err) {
        supported = false
    }
    passiveSupported = supported
    return passiveSupported
}
function isTouchStartEvent(e) {
    return e.type === 'touchstart'
}
const ColumnVisibility = {
    getInitialState: (state) => {
        return {
            columnVisibility: {},
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)
        }
    },
    createColumn: (column2, table) => {
        column2.toggleVisibility = (value) => {
            if (column2.getCanHide()) {
                table.setColumnVisibility((old) => ({
                    ...old,
                    [column2.id]: value != null ? value : !column2.getIsVisible()
                }))
            }
        }
        column2.getIsVisible = () => {
            var _ref3, _table$getState$colum
            const childColumns = column2.columns
            return (_ref3 = childColumns.length
                ? childColumns.some((c2) => c2.getIsVisible())
                : (_table$getState$colum = table.getState().columnVisibility) == null
                  ? void 0
                  : _table$getState$colum[column2.id]) != null
                ? _ref3
                : true
        }
        column2.getCanHide = () => {
            var _column$columnDef$ena, _table$options$enable
            return (
                ((_column$columnDef$ena = column2.columnDef.enableHiding) != null
                    ? _column$columnDef$ena
                    : true) &&
                ((_table$options$enable = table.options.enableHiding) != null
                    ? _table$options$enable
                    : true)
            )
        }
        column2.getToggleVisibilityHandler = () => {
            return (e) => {
                column2.toggleVisibility == null || column2.toggleVisibility(e.target.checked)
            }
        }
    },
    createRow: (row, table) => {
        row._getAllVisibleCells = memo(
            () => [row.getAllCells(), table.getState().columnVisibility],
            (cells) => {
                return cells.filter((cell) => cell.column.getIsVisible())
            },
            getMemoOptions(table.options, 'debugRows')
        )
        row.getVisibleCells = memo(
            () => [
                row.getLeftVisibleCells(),
                row.getCenterVisibleCells(),
                row.getRightVisibleCells()
            ],
            (left, center, right) => [...left, ...center, ...right],
            getMemoOptions(table.options, 'debugRows')
        )
    },
    createTable: (table) => {
        const makeVisibleColumnsMethod = (key, getColumns) => {
            return memo(
                () => [
                    getColumns(),
                    getColumns()
                        .filter((d) => d.getIsVisible())
                        .map((d) => d.id)
                        .join('_')
                ],
                (columns) => {
                    return columns.filter((d) =>
                        d.getIsVisible == null ? void 0 : d.getIsVisible()
                    )
                },
                getMemoOptions(table.options, 'debugColumns')
            )
        }
        table.getVisibleFlatColumns = makeVisibleColumnsMethod('getVisibleFlatColumns', () =>
            table.getAllFlatColumns()
        )
        table.getVisibleLeafColumns = makeVisibleColumnsMethod('getVisibleLeafColumns', () =>
            table.getAllLeafColumns()
        )
        table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod(
            'getLeftVisibleLeafColumns',
            () => table.getLeftLeafColumns()
        )
        table.getRightVisibleLeafColumns = makeVisibleColumnsMethod(
            'getRightVisibleLeafColumns',
            () => table.getRightLeafColumns()
        )
        table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod(
            'getCenterVisibleLeafColumns',
            () => table.getCenterLeafColumns()
        )
        table.setColumnVisibility = (updater) =>
            table.options.onColumnVisibilityChange == null
                ? void 0
                : table.options.onColumnVisibilityChange(updater)
        table.resetColumnVisibility = (defaultState) => {
            var _table$initialState$c
            table.setColumnVisibility(
                defaultState
                    ? {}
                    : (_table$initialState$c = table.initialState.columnVisibility) != null
                      ? _table$initialState$c
                      : {}
            )
        }
        table.toggleAllColumnsVisible = (value) => {
            var _value
            value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible()
            table.setColumnVisibility(
                table.getAllLeafColumns().reduce(
                    (obj, column2) => ({
                        ...obj,
                        [column2.id]: !value
                            ? !(column2.getCanHide != null && column2.getCanHide())
                            : value
                    }),
                    {}
                )
            )
        }
        table.getIsAllColumnsVisible = () =>
            !table
                .getAllLeafColumns()
                .some((column2) => !(column2.getIsVisible != null && column2.getIsVisible()))
        table.getIsSomeColumnsVisible = () =>
            table
                .getAllLeafColumns()
                .some((column2) => (column2.getIsVisible == null ? void 0 : column2.getIsVisible()))
        table.getToggleAllColumnsVisibilityHandler = () => {
            return (e) => {
                var _target
                table.toggleAllColumnsVisible(
                    (_target = e.target) == null ? void 0 : _target.checked
                )
            }
        }
    }
}
function _getVisibleLeafColumns(table, position2) {
    return !position2
        ? table.getVisibleLeafColumns()
        : position2 === 'center'
          ? table.getCenterVisibleLeafColumns()
          : position2 === 'left'
            ? table.getLeftVisibleLeafColumns()
            : table.getRightVisibleLeafColumns()
}
const GlobalFaceting = {
    createTable: (table) => {
        table._getGlobalFacetedRowModel =
            table.options.getFacetedRowModel &&
            table.options.getFacetedRowModel(table, '__global__')
        table.getGlobalFacetedRowModel = () => {
            if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {
                return table.getPreFilteredRowModel()
            }
            return table._getGlobalFacetedRowModel()
        }
        table._getGlobalFacetedUniqueValues =
            table.options.getFacetedUniqueValues &&
            table.options.getFacetedUniqueValues(table, '__global__')
        table.getGlobalFacetedUniqueValues = () => {
            if (!table._getGlobalFacetedUniqueValues) {
                return /* @__PURE__ */ new Map()
            }
            return table._getGlobalFacetedUniqueValues()
        }
        table._getGlobalFacetedMinMaxValues =
            table.options.getFacetedMinMaxValues &&
            table.options.getFacetedMinMaxValues(table, '__global__')
        table.getGlobalFacetedMinMaxValues = () => {
            if (!table._getGlobalFacetedMinMaxValues) {
                return
            }
            return table._getGlobalFacetedMinMaxValues()
        }
    }
}
const GlobalFiltering = {
    getInitialState: (state) => {
        return {
            globalFilter: void 0,
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            onGlobalFilterChange: makeStateUpdater('globalFilter', table),
            globalFilterFn: 'auto',
            getColumnCanGlobalFilter: (column2) => {
                var _table$getCoreRowMode
                const value =
                    (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null ||
                    (_table$getCoreRowMode =
                        _table$getCoreRowMode._getAllCellsByColumnId()[column2.id]) == null
                        ? void 0
                        : _table$getCoreRowMode.getValue()
                return typeof value === 'string' || typeof value === 'number'
            }
        }
    },
    createColumn: (column2, table) => {
        column2.getCanGlobalFilter = () => {
            var _column$columnDef$ena,
                _table$options$enable,
                _table$options$enable2,
                _table$options$getCol
            return (
                ((_column$columnDef$ena = column2.columnDef.enableGlobalFilter) != null
                    ? _column$columnDef$ena
                    : true) &&
                ((_table$options$enable = table.options.enableGlobalFilter) != null
                    ? _table$options$enable
                    : true) &&
                ((_table$options$enable2 = table.options.enableFilters) != null
                    ? _table$options$enable2
                    : true) &&
                ((_table$options$getCol =
                    table.options.getColumnCanGlobalFilter == null
                        ? void 0
                        : table.options.getColumnCanGlobalFilter(column2)) != null
                    ? _table$options$getCol
                    : true) &&
                !!column2.accessorFn
            )
        }
    },
    createTable: (table) => {
        table.getGlobalAutoFilterFn = () => {
            return filterFns.includesString
        }
        table.getGlobalFilterFn = () => {
            var _table$options$filter, _table$options$filter2
            const { globalFilterFn } = table.options
            return isFunction$1(globalFilterFn)
                ? globalFilterFn
                : globalFilterFn === 'auto'
                  ? table.getGlobalAutoFilterFn()
                  : (_table$options$filter =
                          (_table$options$filter2 = table.options.filterFns) == null
                              ? void 0
                              : _table$options$filter2[globalFilterFn]) != null
                    ? _table$options$filter
                    : filterFns[globalFilterFn]
        }
        table.setGlobalFilter = (updater) => {
            table.options.onGlobalFilterChange == null ||
                table.options.onGlobalFilterChange(updater)
        }
        table.resetGlobalFilter = (defaultState) => {
            table.setGlobalFilter(defaultState ? void 0 : table.initialState.globalFilter)
        }
    }
}
const RowExpanding = {
    getInitialState: (state) => {
        return {
            expanded: {},
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            onExpandedChange: makeStateUpdater('expanded', table),
            paginateExpandedRows: true
        }
    },
    createTable: (table) => {
        let registered = false
        let queued = false
        table._autoResetExpanded = () => {
            var _ref3, _table$options$autoRe
            if (!registered) {
                table._queue(() => {
                    registered = true
                })
                return
            }
            if (
                (_ref3 =
                    (_table$options$autoRe = table.options.autoResetAll) != null
                        ? _table$options$autoRe
                        : table.options.autoResetExpanded) != null
                    ? _ref3
                    : !table.options.manualExpanding
            ) {
                if (queued) return
                queued = true
                table._queue(() => {
                    table.resetExpanded()
                    queued = false
                })
            }
        }
        table.setExpanded = (updater) =>
            table.options.onExpandedChange == null
                ? void 0
                : table.options.onExpandedChange(updater)
        table.toggleAllRowsExpanded = (expanded) => {
            if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {
                table.setExpanded(true)
            } else {
                table.setExpanded({})
            }
        }
        table.resetExpanded = (defaultState) => {
            var _table$initialState$e, _table$initialState
            table.setExpanded(
                defaultState
                    ? {}
                    : (_table$initialState$e =
                            (_table$initialState = table.initialState) == null
                                ? void 0
                                : _table$initialState.expanded) != null
                      ? _table$initialState$e
                      : {}
            )
        }
        table.getCanSomeRowsExpand = () => {
            return table.getPrePaginationRowModel().flatRows.some((row) => row.getCanExpand())
        }
        table.getToggleAllRowsExpandedHandler = () => {
            return (e) => {
                e.persist == null || e.persist()
                table.toggleAllRowsExpanded()
            }
        }
        table.getIsSomeRowsExpanded = () => {
            const expanded = table.getState().expanded
            return expanded === true || Object.values(expanded).some(Boolean)
        }
        table.getIsAllRowsExpanded = () => {
            const expanded = table.getState().expanded
            if (typeof expanded === 'boolean') {
                return expanded === true
            }
            if (!Object.keys(expanded).length) {
                return false
            }
            if (table.getRowModel().flatRows.some((row) => !row.getIsExpanded())) {
                return false
            }
            return true
        }
        table.getExpandedDepth = () => {
            let maxDepth = 0
            const rowIds =
                table.getState().expanded === true
                    ? Object.keys(table.getRowModel().rowsById)
                    : Object.keys(table.getState().expanded)
            rowIds.forEach((id) => {
                const splitId = id.split('.')
                maxDepth = Math.max(maxDepth, splitId.length)
            })
            return maxDepth
        }
        table.getPreExpandedRowModel = () => table.getSortedRowModel()
        table.getExpandedRowModel = () => {
            if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {
                table._getExpandedRowModel = table.options.getExpandedRowModel(table)
            }
            if (table.options.manualExpanding || !table._getExpandedRowModel) {
                return table.getPreExpandedRowModel()
            }
            return table._getExpandedRowModel()
        }
    },
    createRow: (row, table) => {
        row.toggleExpanded = (expanded) => {
            table.setExpanded((old) => {
                var _expanded
                const exists = old === true ? true : !!(old != null && old[row.id])
                let oldExpanded = {}
                if (old === true) {
                    Object.keys(table.getRowModel().rowsById).forEach((rowId) => {
                        oldExpanded[rowId] = true
                    })
                } else {
                    oldExpanded = old
                }
                expanded = (_expanded = expanded) != null ? _expanded : !exists
                if (!exists && expanded) {
                    return {
                        ...oldExpanded,
                        [row.id]: true
                    }
                }
                if (exists && !expanded) {
                    const { [row.id]: _, ...rest } = oldExpanded
                    return rest
                }
                return old
            })
        }
        row.getIsExpanded = () => {
            var _table$options$getIsR
            const expanded = table.getState().expanded
            return !!((_table$options$getIsR =
                table.options.getIsRowExpanded == null
                    ? void 0
                    : table.options.getIsRowExpanded(row)) != null
                ? _table$options$getIsR
                : expanded === true || (expanded == null ? void 0 : expanded[row.id]))
        }
        row.getCanExpand = () => {
            var _table$options$getRow, _table$options$enable, _row$subRows
            return (_table$options$getRow =
                table.options.getRowCanExpand == null
                    ? void 0
                    : table.options.getRowCanExpand(row)) != null
                ? _table$options$getRow
                : ((_table$options$enable = table.options.enableExpanding) != null
                      ? _table$options$enable
                      : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length)
        }
        row.getIsAllParentsExpanded = () => {
            let isFullyExpanded = true
            let currentRow = row
            while (isFullyExpanded && currentRow.parentId) {
                currentRow = table.getRow(currentRow.parentId, true)
                isFullyExpanded = currentRow.getIsExpanded()
            }
            return isFullyExpanded
        }
        row.getToggleExpandedHandler = () => {
            const canExpand = row.getCanExpand()
            return () => {
                if (!canExpand) return
                row.toggleExpanded()
            }
        }
    }
}
const defaultPageIndex = 0
const defaultPageSize = 10
const getDefaultPaginationState = () => ({
    pageIndex: defaultPageIndex,
    pageSize: defaultPageSize
})
const RowPagination = {
    getInitialState: (state) => {
        return {
            ...state,
            pagination: {
                ...getDefaultPaginationState(),
                ...(state == null ? void 0 : state.pagination)
            }
        }
    },
    getDefaultOptions: (table) => {
        return {
            onPaginationChange: makeStateUpdater('pagination', table)
        }
    },
    createTable: (table) => {
        let registered = false
        let queued = false
        table._autoResetPageIndex = () => {
            var _ref3, _table$options$autoRe
            if (!registered) {
                table._queue(() => {
                    registered = true
                })
                return
            }
            if (
                (_ref3 =
                    (_table$options$autoRe = table.options.autoResetAll) != null
                        ? _table$options$autoRe
                        : table.options.autoResetPageIndex) != null
                    ? _ref3
                    : !table.options.manualPagination
            ) {
                if (queued) return
                queued = true
                table._queue(() => {
                    table.resetPageIndex()
                    queued = false
                })
            }
        }
        table.setPagination = (updater) => {
            const safeUpdater = (old) => {
                let newState = functionalUpdate(updater, old)
                return newState
            }
            return table.options.onPaginationChange == null
                ? void 0
                : table.options.onPaginationChange(safeUpdater)
        }
        table.resetPagination = (defaultState) => {
            var _table$initialState$p
            table.setPagination(
                defaultState
                    ? getDefaultPaginationState()
                    : (_table$initialState$p = table.initialState.pagination) != null
                      ? _table$initialState$p
                      : getDefaultPaginationState()
            )
        }
        table.setPageIndex = (updater) => {
            table.setPagination((old) => {
                let pageIndex = functionalUpdate(updater, old.pageIndex)
                const maxPageIndex =
                    typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1
                        ? Number.MAX_SAFE_INTEGER
                        : table.options.pageCount - 1
                pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))
                return {
                    ...old,
                    pageIndex
                }
            })
        }
        table.resetPageIndex = (defaultState) => {
            var _table$initialState$p2, _table$initialState
            table.setPageIndex(
                defaultState
                    ? defaultPageIndex
                    : (_table$initialState$p2 =
                            (_table$initialState = table.initialState) == null ||
                            (_table$initialState = _table$initialState.pagination) == null
                                ? void 0
                                : _table$initialState.pageIndex) != null
                      ? _table$initialState$p2
                      : defaultPageIndex
            )
        }
        table.resetPageSize = (defaultState) => {
            var _table$initialState$p3, _table$initialState2
            table.setPageSize(
                defaultState
                    ? defaultPageSize
                    : (_table$initialState$p3 =
                            (_table$initialState2 = table.initialState) == null ||
                            (_table$initialState2 = _table$initialState2.pagination) == null
                                ? void 0
                                : _table$initialState2.pageSize) != null
                      ? _table$initialState$p3
                      : defaultPageSize
            )
        }
        table.setPageSize = (updater) => {
            table.setPagination((old) => {
                const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))
                const topRowIndex = old.pageSize * old.pageIndex
                const pageIndex = Math.floor(topRowIndex / pageSize)
                return {
                    ...old,
                    pageIndex,
                    pageSize
                }
            })
        }
        table.setPageCount = (updater) =>
            table.setPagination((old) => {
                var _table$options$pageCo
                let newPageCount = functionalUpdate(
                    updater,
                    (_table$options$pageCo = table.options.pageCount) != null
                        ? _table$options$pageCo
                        : -1
                )
                if (typeof newPageCount === 'number') {
                    newPageCount = Math.max(-1, newPageCount)
                }
                return {
                    ...old,
                    pageCount: newPageCount
                }
            })
        table.getPageOptions = memo(
            () => [table.getPageCount()],
            (pageCount) => {
                let pageOptions = []
                if (pageCount && pageCount > 0) {
                    pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)
                }
                return pageOptions
            },
            getMemoOptions(table.options, 'debugTable')
        )
        table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0
        table.getCanNextPage = () => {
            const { pageIndex } = table.getState().pagination
            const pageCount = table.getPageCount()
            if (pageCount === -1) {
                return true
            }
            if (pageCount === 0) {
                return false
            }
            return pageIndex < pageCount - 1
        }
        table.previousPage = () => {
            return table.setPageIndex((old) => old - 1)
        }
        table.nextPage = () => {
            return table.setPageIndex((old) => {
                return old + 1
            })
        }
        table.firstPage = () => {
            return table.setPageIndex(0)
        }
        table.lastPage = () => {
            return table.setPageIndex(table.getPageCount() - 1)
        }
        table.getPrePaginationRowModel = () => table.getExpandedRowModel()
        table.getPaginationRowModel = () => {
            if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {
                table._getPaginationRowModel = table.options.getPaginationRowModel(table)
            }
            if (table.options.manualPagination || !table._getPaginationRowModel) {
                return table.getPrePaginationRowModel()
            }
            return table._getPaginationRowModel()
        }
        table.getPageCount = () => {
            var _table$options$pageCo2
            return (_table$options$pageCo2 = table.options.pageCount) != null
                ? _table$options$pageCo2
                : Math.ceil(table.getRowCount() / table.getState().pagination.pageSize)
        }
        table.getRowCount = () => {
            var _table$options$rowCou
            return (_table$options$rowCou = table.options.rowCount) != null
                ? _table$options$rowCou
                : table.getPrePaginationRowModel().rows.length
        }
    }
}
const getDefaultRowPinningState = () => ({
    top: [],
    bottom: []
})
const RowPinning = {
    getInitialState: (state) => {
        return {
            rowPinning: getDefaultRowPinningState(),
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            onRowPinningChange: makeStateUpdater('rowPinning', table)
        }
    },
    createRow: (row, table) => {
        row.pin = (position2, includeLeafRows, includeParentRows) => {
            const leafRowIds = includeLeafRows
                ? row.getLeafRows().map((_ref3) => {
                      let { id } = _ref3
                      return id
                  })
                : []
            const parentRowIds = includeParentRows
                ? row.getParentRows().map((_ref22) => {
                      let { id } = _ref22
                      return id
                  })
                : []
            const rowIds = /* @__PURE__ */ new Set([...parentRowIds, row.id, ...leafRowIds])
            table.setRowPinning((old) => {
                var _old$top3, _old$bottom3
                if (position2 === 'bottom') {
                    var _old$top, _old$bottom
                    return {
                        top: ((_old$top = old == null ? void 0 : old.top) != null
                            ? _old$top
                            : []
                        ).filter((d) => !(rowIds != null && rowIds.has(d))),
                        bottom: [
                            ...((_old$bottom = old == null ? void 0 : old.bottom) != null
                                ? _old$bottom
                                : []
                            ).filter((d) => !(rowIds != null && rowIds.has(d))),
                            ...Array.from(rowIds)
                        ]
                    }
                }
                if (position2 === 'top') {
                    var _old$top2, _old$bottom2
                    return {
                        top: [
                            ...((_old$top2 = old == null ? void 0 : old.top) != null
                                ? _old$top2
                                : []
                            ).filter((d) => !(rowIds != null && rowIds.has(d))),
                            ...Array.from(rowIds)
                        ],
                        bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null
                            ? _old$bottom2
                            : []
                        ).filter((d) => !(rowIds != null && rowIds.has(d)))
                    }
                }
                return {
                    top: ((_old$top3 = old == null ? void 0 : old.top) != null
                        ? _old$top3
                        : []
                    ).filter((d) => !(rowIds != null && rowIds.has(d))),
                    bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null
                        ? _old$bottom3
                        : []
                    ).filter((d) => !(rowIds != null && rowIds.has(d)))
                }
            })
        }
        row.getCanPin = () => {
            var _ref3
            const { enableRowPinning, enablePinning } = table.options
            if (typeof enableRowPinning === 'function') {
                return enableRowPinning(row)
            }
            return (_ref3 = enableRowPinning != null ? enableRowPinning : enablePinning) != null
                ? _ref3
                : true
        }
        row.getIsPinned = () => {
            const rowIds = [row.id]
            const { top, bottom } = table.getState().rowPinning
            const isTop = rowIds.some((d) => (top == null ? void 0 : top.includes(d)))
            const isBottom = rowIds.some((d) => (bottom == null ? void 0 : bottom.includes(d)))
            return isTop ? 'top' : isBottom ? 'bottom' : false
        }
        row.getPinnedIndex = () => {
            var _ref4, _visiblePinnedRowIds$
            const position2 = row.getIsPinned()
            if (!position2) return -1
            const visiblePinnedRowIds =
                (_ref4 = position2 === 'top' ? table.getTopRows() : table.getBottomRows()) == null
                    ? void 0
                    : _ref4.map((_ref5) => {
                          let { id } = _ref5
                          return id
                      })
            return (_visiblePinnedRowIds$ =
                visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null
                ? _visiblePinnedRowIds$
                : -1
        }
    },
    createTable: (table) => {
        table.setRowPinning = (updater) =>
            table.options.onRowPinningChange == null
                ? void 0
                : table.options.onRowPinningChange(updater)
        table.resetRowPinning = (defaultState) => {
            var _table$initialState$r, _table$initialState
            return table.setRowPinning(
                defaultState
                    ? getDefaultRowPinningState()
                    : (_table$initialState$r =
                            (_table$initialState = table.initialState) == null
                                ? void 0
                                : _table$initialState.rowPinning) != null
                      ? _table$initialState$r
                      : getDefaultRowPinningState()
            )
        }
        table.getIsSomeRowsPinned = (position2) => {
            var _pinningState$positio
            const pinningState = table.getState().rowPinning
            if (!position2) {
                var _pinningState$top, _pinningState$bottom
                return Boolean(
                    ((_pinningState$top = pinningState.top) == null
                        ? void 0
                        : _pinningState$top.length) ||
                        ((_pinningState$bottom = pinningState.bottom) == null
                            ? void 0
                            : _pinningState$bottom.length)
                )
            }
            return Boolean(
                (_pinningState$positio = pinningState[position2]) == null
                    ? void 0
                    : _pinningState$positio.length
            )
        }
        table._getPinnedRows = (visibleRows, pinnedRowIds, position2) => {
            var _table$options$keepPi
            const rows = (
                (_table$options$keepPi = table.options.keepPinnedRows) != null
                    ? _table$options$keepPi
                    : true
            )
                ? //get all rows that are pinned even if they would not be otherwise visible
                  //account for expanded parent rows, but not pagination or filtering
                  (pinnedRowIds != null ? pinnedRowIds : []).map((rowId) => {
                      const row = table.getRow(rowId, true)
                      return row.getIsAllParentsExpanded() ? row : null
                  })
                : //else get only visible rows that are pinned
                  (pinnedRowIds != null ? pinnedRowIds : []).map((rowId) =>
                      visibleRows.find((row) => row.id === rowId)
                  )
            return rows.filter(Boolean).map((d) => ({
                ...d,
                position: position2
            }))
        }
        table.getTopRows = memo(
            () => [table.getRowModel().rows, table.getState().rowPinning.top],
            (allRows, topPinnedRowIds) => table._getPinnedRows(allRows, topPinnedRowIds, 'top'),
            getMemoOptions(table.options, 'debugRows')
        )
        table.getBottomRows = memo(
            () => [table.getRowModel().rows, table.getState().rowPinning.bottom],
            (allRows, bottomPinnedRowIds) =>
                table._getPinnedRows(allRows, bottomPinnedRowIds, 'bottom'),
            getMemoOptions(table.options, 'debugRows')
        )
        table.getCenterRows = memo(
            () => [
                table.getRowModel().rows,
                table.getState().rowPinning.top,
                table.getState().rowPinning.bottom
            ],
            (allRows, top, bottom) => {
                const topAndBottom = /* @__PURE__ */ new Set([
                    ...(top != null ? top : []),
                    ...(bottom != null ? bottom : [])
                ])
                return allRows.filter((d) => !topAndBottom.has(d.id))
            },
            getMemoOptions(table.options, 'debugRows')
        )
    }
}
const RowSelection = {
    getInitialState: (state) => {
        return {
            rowSelection: {},
            ...state
        }
    },
    getDefaultOptions: (table) => {
        return {
            onRowSelectionChange: makeStateUpdater('rowSelection', table),
            enableRowSelection: true,
            enableMultiRowSelection: true,
            enableSubRowSelection: true
            // enableGroupingRowSelection: false,
            // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,
            // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,
        }
    },
    createTable: (table) => {
        table.setRowSelection = (updater) =>
            table.options.onRowSelectionChange == null
                ? void 0
                : table.options.onRowSelectionChange(updater)
        table.resetRowSelection = (defaultState) => {
            var _table$initialState$r
            return table.setRowSelection(
                defaultState
                    ? {}
                    : (_table$initialState$r = table.initialState.rowSelection) != null
                      ? _table$initialState$r
                      : {}
            )
        }
        table.toggleAllRowsSelected = (value) => {
            table.setRowSelection((old) => {
                value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()
                const rowSelection = {
                    ...old
                }
                const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows
                if (value) {
                    preGroupedFlatRows.forEach((row) => {
                        if (!row.getCanSelect()) {
                            return
                        }
                        rowSelection[row.id] = true
                    })
                } else {
                    preGroupedFlatRows.forEach((row) => {
                        delete rowSelection[row.id]
                    })
                }
                return rowSelection
            })
        }
        table.toggleAllPageRowsSelected = (value) =>
            table.setRowSelection((old) => {
                const resolvedValue =
                    typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected()
                const rowSelection = {
                    ...old
                }
                table.getRowModel().rows.forEach((row) => {
                    mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table)
                })
                return rowSelection
            })
        table.getPreSelectedRowModel = () => table.getCoreRowModel()
        table.getSelectedRowModel = memo(
            () => [table.getState().rowSelection, table.getCoreRowModel()],
            (rowSelection, rowModel) => {
                if (!Object.keys(rowSelection).length) {
                    return {
                        rows: [],
                        flatRows: [],
                        rowsById: {}
                    }
                }
                return selectRowsFn(table, rowModel)
            },
            getMemoOptions(table.options, 'debugTable')
        )
        table.getFilteredSelectedRowModel = memo(
            () => [table.getState().rowSelection, table.getFilteredRowModel()],
            (rowSelection, rowModel) => {
                if (!Object.keys(rowSelection).length) {
                    return {
                        rows: [],
                        flatRows: [],
                        rowsById: {}
                    }
                }
                return selectRowsFn(table, rowModel)
            },
            getMemoOptions(table.options, 'debugTable')
        )
        table.getGroupedSelectedRowModel = memo(
            () => [table.getState().rowSelection, table.getSortedRowModel()],
            (rowSelection, rowModel) => {
                if (!Object.keys(rowSelection).length) {
                    return {
                        rows: [],
                        flatRows: [],
                        rowsById: {}
                    }
                }
                return selectRowsFn(table, rowModel)
            },
            getMemoOptions(table.options, 'debugTable')
        )
        table.getIsAllRowsSelected = () => {
            const preGroupedFlatRows = table.getFilteredRowModel().flatRows
            const { rowSelection } = table.getState()
            let isAllRowsSelected = Boolean(
                preGroupedFlatRows.length && Object.keys(rowSelection).length
            )
            if (isAllRowsSelected) {
                if (preGroupedFlatRows.some((row) => row.getCanSelect() && !rowSelection[row.id])) {
                    isAllRowsSelected = false
                }
            }
            return isAllRowsSelected
        }
        table.getIsAllPageRowsSelected = () => {
            const paginationFlatRows = table
                .getPaginationRowModel()
                .flatRows.filter((row) => row.getCanSelect())
            const { rowSelection } = table.getState()
            let isAllPageRowsSelected = !!paginationFlatRows.length
            if (isAllPageRowsSelected && paginationFlatRows.some((row) => !rowSelection[row.id])) {
                isAllPageRowsSelected = false
            }
            return isAllPageRowsSelected
        }
        table.getIsSomeRowsSelected = () => {
            var _table$getState$rowSe
            const totalSelected = Object.keys(
                (_table$getState$rowSe = table.getState().rowSelection) != null
                    ? _table$getState$rowSe
                    : {}
            ).length
            return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length
        }
        table.getIsSomePageRowsSelected = () => {
            const paginationFlatRows = table.getPaginationRowModel().flatRows
            return table.getIsAllPageRowsSelected()
                ? false
                : paginationFlatRows
                      .filter((row) => row.getCanSelect())
                      .some((d) => d.getIsSelected() || d.getIsSomeSelected())
        }
        table.getToggleAllRowsSelectedHandler = () => {
            return (e) => {
                table.toggleAllRowsSelected(e.target.checked)
            }
        }
        table.getToggleAllPageRowsSelectedHandler = () => {
            return (e) => {
                table.toggleAllPageRowsSelected(e.target.checked)
            }
        }
    },
    createRow: (row, table) => {
        row.toggleSelected = (value, opts) => {
            const isSelected = row.getIsSelected()
            table.setRowSelection((old) => {
                var _opts$selectChildren
                value = typeof value !== 'undefined' ? value : !isSelected
                if (row.getCanSelect() && isSelected === value) {
                    return old
                }
                const selectedRowIds = {
                    ...old
                }
                mutateRowIsSelected(
                    selectedRowIds,
                    row.id,
                    value,
                    (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null
                        ? _opts$selectChildren
                        : true,
                    table
                )
                return selectedRowIds
            })
        }
        row.getIsSelected = () => {
            const { rowSelection } = table.getState()
            return isRowSelected(row, rowSelection)
        }
        row.getIsSomeSelected = () => {
            const { rowSelection } = table.getState()
            return isSubRowSelected(row, rowSelection) === 'some'
        }
        row.getIsAllSubRowsSelected = () => {
            const { rowSelection } = table.getState()
            return isSubRowSelected(row, rowSelection) === 'all'
        }
        row.getCanSelect = () => {
            var _table$options$enable
            if (typeof table.options.enableRowSelection === 'function') {
                return table.options.enableRowSelection(row)
            }
            return (_table$options$enable = table.options.enableRowSelection) != null
                ? _table$options$enable
                : true
        }
        row.getCanSelectSubRows = () => {
            var _table$options$enable2
            if (typeof table.options.enableSubRowSelection === 'function') {
                return table.options.enableSubRowSelection(row)
            }
            return (_table$options$enable2 = table.options.enableSubRowSelection) != null
                ? _table$options$enable2
                : true
        }
        row.getCanMultiSelect = () => {
            var _table$options$enable3
            if (typeof table.options.enableMultiRowSelection === 'function') {
                return table.options.enableMultiRowSelection(row)
            }
            return (_table$options$enable3 = table.options.enableMultiRowSelection) != null
                ? _table$options$enable3
                : true
        }
        row.getToggleSelectedHandler = () => {
            const canSelect = row.getCanSelect()
            return (e) => {
                var _target
                if (!canSelect) return
                row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked)
            }
        }
    }
}
const mutateRowIsSelected = (selectedRowIds, id, value, includeChildren, table) => {
    var _row$subRows
    const row = table.getRow(id, true)
    if (value) {
        if (!row.getCanMultiSelect()) {
            Object.keys(selectedRowIds).forEach((key) => delete selectedRowIds[key])
        }
        if (row.getCanSelect()) {
            selectedRowIds[id] = true
        }
    } else {
        delete selectedRowIds[id]
    }
    if (
        includeChildren &&
        (_row$subRows = row.subRows) != null &&
        _row$subRows.length &&
        row.getCanSelectSubRows()
    ) {
        row.subRows.forEach((row2) =>
            mutateRowIsSelected(selectedRowIds, row2.id, value, includeChildren, table)
        )
    }
}
function selectRowsFn(table, rowModel) {
    const rowSelection = table.getState().rowSelection
    const newSelectedFlatRows = []
    const newSelectedRowsById = {}
    const recurseRows = function (rows, depth) {
        return rows
            .map((row) => {
                var _row$subRows2
                const isSelected = isRowSelected(row, rowSelection)
                if (isSelected) {
                    newSelectedFlatRows.push(row)
                    newSelectedRowsById[row.id] = row
                }
                if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {
                    row = {
                        ...row,
                        subRows: recurseRows(row.subRows)
                    }
                }
                if (isSelected) {
                    return row
                }
            })
            .filter(Boolean)
    }
    return {
        rows: recurseRows(rowModel.rows),
        flatRows: newSelectedFlatRows,
        rowsById: newSelectedRowsById
    }
}
function isRowSelected(row, selection) {
    var _selection$row$id
    return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false
}
function isSubRowSelected(row, selection, table) {
    var _row$subRows3
    if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length)) return false
    let allChildrenSelected = true
    let someSelected = false
    row.subRows.forEach((subRow) => {
        if (someSelected && !allChildrenSelected) {
            return
        }
        if (subRow.getCanSelect()) {
            if (isRowSelected(subRow, selection)) {
                someSelected = true
            } else {
                allChildrenSelected = false
            }
        }
        if (subRow.subRows && subRow.subRows.length) {
            const subRowChildrenSelected = isSubRowSelected(subRow, selection)
            if (subRowChildrenSelected === 'all') {
                someSelected = true
            } else if (subRowChildrenSelected === 'some') {
                someSelected = true
                allChildrenSelected = false
            } else {
                allChildrenSelected = false
            }
        }
    })
    return allChildrenSelected ? 'all' : someSelected ? 'some' : false
}
const reSplitAlphaNumeric = /([0-9]+)/gm
const alphanumeric = (rowA, rowB, columnId) => {
    return compareAlphanumeric(
        toString$1(rowA.getValue(columnId)).toLowerCase(),
        toString$1(rowB.getValue(columnId)).toLowerCase()
    )
}
const alphanumericCaseSensitive = (rowA, rowB, columnId) => {
    return compareAlphanumeric(
        toString$1(rowA.getValue(columnId)),
        toString$1(rowB.getValue(columnId))
    )
}
const text = (rowA, rowB, columnId) => {
    return compareBasic(
        toString$1(rowA.getValue(columnId)).toLowerCase(),
        toString$1(rowB.getValue(columnId)).toLowerCase()
    )
}
const textCaseSensitive = (rowA, rowB, columnId) => {
    return compareBasic(toString$1(rowA.getValue(columnId)), toString$1(rowB.getValue(columnId)))
}
const datetime = (rowA, rowB, columnId) => {
    const a2 = rowA.getValue(columnId)
    const b = rowB.getValue(columnId)
    return a2 > b ? 1 : a2 < b ? -1 : 0
}
const basic = (rowA, rowB, columnId) => {
    return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))
}
function compareBasic(a2, b) {
    return a2 === b ? 0 : a2 > b ? 1 : -1
}
function toString$1(a2) {
    if (typeof a2 === 'number') {
        if (isNaN(a2) || a2 === Infinity || a2 === -Infinity) {
            return ''
        }
        return String(a2)
    }
    if (typeof a2 === 'string') {
        return a2
    }
    return ''
}
function compareAlphanumeric(aStr, bStr) {
    const a2 = aStr.split(reSplitAlphaNumeric).filter(Boolean)
    const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)
    while (a2.length && b.length) {
        const aa = a2.shift()
        const bb = b.shift()
        const an = parseInt(aa, 10)
        const bn = parseInt(bb, 10)
        const combo = [an, bn].sort()
        if (isNaN(combo[0])) {
            if (aa > bb) {
                return 1
            }
            if (bb > aa) {
                return -1
            }
            continue
        }
        if (isNaN(combo[1])) {
            return isNaN(an) ? -1 : 1
        }
        if (an > bn) {
            return 1
        }
        if (bn > an) {
            return -1
        }
    }
    return a2.length - b.length
}
const sortingFns = {
    alphanumeric,
    alphanumericCaseSensitive,
    text,
    textCaseSensitive,
    datetime,
    basic
}
const RowSorting = {
    getInitialState: (state) => {
        return {
            sorting: [],
            ...state
        }
    },
    getDefaultColumnDef: () => {
        return {
            sortingFn: 'auto',
            sortUndefined: 1
        }
    },
    getDefaultOptions: (table) => {
        return {
            onSortingChange: makeStateUpdater('sorting', table),
            isMultiSortEvent: (e) => {
                return e.shiftKey
            }
        }
    },
    createColumn: (column2, table) => {
        column2.getAutoSortingFn = () => {
            const firstRows = table.getFilteredRowModel().flatRows.slice(10)
            let isString2 = false
            for (const row of firstRows) {
                const value = row == null ? void 0 : row.getValue(column2.id)
                if (Object.prototype.toString.call(value) === '[object Date]') {
                    return sortingFns.datetime
                }
                if (typeof value === 'string') {
                    isString2 = true
                    if (value.split(reSplitAlphaNumeric).length > 1) {
                        return sortingFns.alphanumeric
                    }
                }
            }
            if (isString2) {
                return sortingFns.text
            }
            return sortingFns.basic
        }
        column2.getAutoSortDir = () => {
            const firstRow = table.getFilteredRowModel().flatRows[0]
            const value = firstRow == null ? void 0 : firstRow.getValue(column2.id)
            if (typeof value === 'string') {
                return 'asc'
            }
            return 'desc'
        }
        column2.getSortingFn = () => {
            var _table$options$sortin, _table$options$sortin2
            if (!column2) {
                throw new Error()
            }
            return isFunction$1(column2.columnDef.sortingFn)
                ? column2.columnDef.sortingFn
                : column2.columnDef.sortingFn === 'auto'
                  ? column2.getAutoSortingFn()
                  : (_table$options$sortin =
                          (_table$options$sortin2 = table.options.sortingFns) == null
                              ? void 0
                              : _table$options$sortin2[column2.columnDef.sortingFn]) != null
                    ? _table$options$sortin
                    : sortingFns[column2.columnDef.sortingFn]
        }
        column2.toggleSorting = (desc, multi) => {
            const nextSortingOrder = column2.getNextSortingOrder()
            const hasManualValue = typeof desc !== 'undefined' && desc !== null
            table.setSorting((old) => {
                const existingSorting = old == null ? void 0 : old.find((d) => d.id === column2.id)
                const existingIndex =
                    old == null ? void 0 : old.findIndex((d) => d.id === column2.id)
                let newSorting = []
                let sortAction
                let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'
                if (old != null && old.length && column2.getCanMultiSort() && multi) {
                    if (existingSorting) {
                        sortAction = 'toggle'
                    } else {
                        sortAction = 'add'
                    }
                } else {
                    if (old != null && old.length && existingIndex !== old.length - 1) {
                        sortAction = 'replace'
                    } else if (existingSorting) {
                        sortAction = 'toggle'
                    } else {
                        sortAction = 'replace'
                    }
                }
                if (sortAction === 'toggle') {
                    if (!hasManualValue) {
                        if (!nextSortingOrder) {
                            sortAction = 'remove'
                        }
                    }
                }
                if (sortAction === 'add') {
                    var _table$options$maxMul
                    newSorting = [
                        ...old,
                        {
                            id: column2.id,
                            desc: nextDesc
                        }
                    ]
                    newSorting.splice(
                        0,
                        newSorting.length -
                            ((_table$options$maxMul = table.options.maxMultiSortColCount) != null
                                ? _table$options$maxMul
                                : Number.MAX_SAFE_INTEGER)
                    )
                } else if (sortAction === 'toggle') {
                    newSorting = old.map((d) => {
                        if (d.id === column2.id) {
                            return {
                                ...d,
                                desc: nextDesc
                            }
                        }
                        return d
                    })
                } else if (sortAction === 'remove') {
                    newSorting = old.filter((d) => d.id !== column2.id)
                } else {
                    newSorting = [
                        {
                            id: column2.id,
                            desc: nextDesc
                        }
                    ]
                }
                return newSorting
            })
        }
        column2.getFirstSortDir = () => {
            var _ref3, _column$columnDef$sor
            const sortDescFirst =
                (_ref3 =
                    (_column$columnDef$sor = column2.columnDef.sortDescFirst) != null
                        ? _column$columnDef$sor
                        : table.options.sortDescFirst) != null
                    ? _ref3
                    : column2.getAutoSortDir() === 'desc'
            return sortDescFirst ? 'desc' : 'asc'
        }
        column2.getNextSortingOrder = (multi) => {
            var _table$options$enable, _table$options$enable2
            const firstSortDirection = column2.getFirstSortDir()
            const isSorted = column2.getIsSorted()
            if (!isSorted) {
                return firstSortDirection
            }
            if (
                isSorted !== firstSortDirection &&
                ((_table$options$enable = table.options.enableSortingRemoval) != null
                    ? _table$options$enable
                    : true) && // If enableSortRemove, enable in general
                (multi
                    ? (_table$options$enable2 = table.options.enableMultiRemove) != null
                        ? _table$options$enable2
                        : true
                    : true)
            ) {
                return false
            }
            return isSorted === 'desc' ? 'asc' : 'desc'
        }
        column2.getCanSort = () => {
            var _column$columnDef$ena, _table$options$enable3
            return (
                ((_column$columnDef$ena = column2.columnDef.enableSorting) != null
                    ? _column$columnDef$ena
                    : true) &&
                ((_table$options$enable3 = table.options.enableSorting) != null
                    ? _table$options$enable3
                    : true) &&
                !!column2.accessorFn
            )
        }
        column2.getCanMultiSort = () => {
            var _ref22, _column$columnDef$ena2
            return (_ref22 =
                (_column$columnDef$ena2 = column2.columnDef.enableMultiSort) != null
                    ? _column$columnDef$ena2
                    : table.options.enableMultiSort) != null
                ? _ref22
                : !!column2.accessorFn
        }
        column2.getIsSorted = () => {
            var _table$getState$sorti
            const columnSort =
                (_table$getState$sorti = table.getState().sorting) == null
                    ? void 0
                    : _table$getState$sorti.find((d) => d.id === column2.id)
            return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'
        }
        column2.getSortIndex = () => {
            var _table$getState$sorti2, _table$getState$sorti3
            return (_table$getState$sorti2 =
                (_table$getState$sorti3 = table.getState().sorting) == null
                    ? void 0
                    : _table$getState$sorti3.findIndex((d) => d.id === column2.id)) != null
                ? _table$getState$sorti2
                : -1
        }
        column2.clearSorting = () => {
            table.setSorting((old) =>
                old != null && old.length ? old.filter((d) => d.id !== column2.id) : []
            )
        }
        column2.getToggleSortingHandler = () => {
            const canSort = column2.getCanSort()
            return (e) => {
                if (!canSort) return
                e.persist == null || e.persist()
                column2.toggleSorting == null ||
                    column2.toggleSorting(
                        void 0,
                        column2.getCanMultiSort()
                            ? table.options.isMultiSortEvent == null
                                ? void 0
                                : table.options.isMultiSortEvent(e)
                            : false
                    )
            }
        }
    },
    createTable: (table) => {
        table.setSorting = (updater) =>
            table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater)
        table.resetSorting = (defaultState) => {
            var _table$initialState$s, _table$initialState
            table.setSorting(
                defaultState
                    ? []
                    : (_table$initialState$s =
                            (_table$initialState = table.initialState) == null
                                ? void 0
                                : _table$initialState.sorting) != null
                      ? _table$initialState$s
                      : []
            )
        }
        table.getPreSortedRowModel = () => table.getGroupedRowModel()
        table.getSortedRowModel = () => {
            if (!table._getSortedRowModel && table.options.getSortedRowModel) {
                table._getSortedRowModel = table.options.getSortedRowModel(table)
            }
            if (table.options.manualSorting || !table._getSortedRowModel) {
                return table.getPreSortedRowModel()
            }
            return table._getSortedRowModel()
        }
    }
}
const builtInFeatures = [
    Headers,
    ColumnVisibility,
    ColumnOrdering,
    ColumnPinning,
    ColumnFaceting,
    ColumnFiltering,
    GlobalFaceting,
    //depends on ColumnFaceting
    GlobalFiltering,
    //depends on ColumnFiltering
    RowSorting,
    ColumnGrouping,
    //depends on RowSorting
    RowExpanding,
    RowPagination,
    RowPinning,
    RowSelection,
    ColumnSizing
]
function createTable(options2) {
    var _options$_features, _options$initialState
    const _features = [
        ...builtInFeatures,
        ...((_options$_features = options2._features) != null ? _options$_features : [])
    ]
    let table = {
        _features
    }
    const defaultOptions = table._features.reduce((obj, feature) => {
        return Object.assign(
            obj,
            feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table)
        )
    }, {})
    const mergeOptions = (options22) => {
        if (table.options.mergeOptions) {
            return table.options.mergeOptions(defaultOptions, options22)
        }
        return {
            ...defaultOptions,
            ...options22
        }
    }
    const coreInitialState = {}
    let initialState = {
        ...coreInitialState,
        ...((_options$initialState = options2.initialState) != null ? _options$initialState : {})
    }
    table._features.forEach((feature) => {
        var _feature$getInitialSt
        initialState =
            (_feature$getInitialSt =
                feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) !=
            null
                ? _feature$getInitialSt
                : initialState
    })
    const queued = []
    let queuedTimeout = false
    const coreInstance = {
        _features,
        options: {
            ...defaultOptions,
            ...options2
        },
        initialState,
        _queue: (cb) => {
            queued.push(cb)
            if (!queuedTimeout) {
                queuedTimeout = true
                Promise.resolve()
                    .then(() => {
                        while (queued.length) {
                            queued.shift()()
                        }
                        queuedTimeout = false
                    })
                    .catch((error) =>
                        setTimeout(() => {
                            throw error
                        })
                    )
            }
        },
        reset: () => {
            table.setState(table.initialState)
        },
        setOptions: (updater) => {
            const newOptions = functionalUpdate(updater, table.options)
            table.options = mergeOptions(newOptions)
        },
        getState: () => {
            return table.options.state
        },
        setState: (updater) => {
            table.options.onStateChange == null || table.options.onStateChange(updater)
        },
        _getRowId: (row, index2, parent) => {
            var _table$options$getRow
            return (_table$options$getRow =
                table.options.getRowId == null
                    ? void 0
                    : table.options.getRowId(row, index2, parent)) != null
                ? _table$options$getRow
                : `${parent ? [parent.id, index2].join('.') : index2}`
        },
        getCoreRowModel: () => {
            if (!table._getCoreRowModel) {
                table._getCoreRowModel = table.options.getCoreRowModel(table)
            }
            return table._getCoreRowModel()
        },
        // The final calls start at the bottom of the model,
        // expanded rows, which then work their way up
        getRowModel: () => {
            return table.getPaginationRowModel()
        },
        //in next version, we should just pass in the row model as the optional 2nd arg
        getRow: (id, searchAll) => {
            let row = (searchAll ? table.getPrePaginationRowModel() : table.getRowModel()).rowsById[
                id
            ]
            if (!row) {
                row = table.getCoreRowModel().rowsById[id]
                if (!row) {
                    throw new Error()
                }
            }
            return row
        },
        _getDefaultColumnDef: memo(
            () => [table.options.defaultColumn],
            (defaultColumn) => {
                var _defaultColumn
                defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {}
                return {
                    header: (props) => {
                        const resolvedColumnDef = props.header.column.columnDef
                        if (resolvedColumnDef.accessorKey) {
                            return resolvedColumnDef.accessorKey
                        }
                        if (resolvedColumnDef.accessorFn) {
                            return resolvedColumnDef.id
                        }
                        return null
                    },
                    // footer: props => props.header.column.id,
                    cell: (props) => {
                        var _props$renderValue$to, _props$renderValue
                        return (_props$renderValue$to =
                            (_props$renderValue = props.renderValue()) == null ||
                            _props$renderValue.toString == null
                                ? void 0
                                : _props$renderValue.toString()) != null
                            ? _props$renderValue$to
                            : null
                    },
                    ...table._features.reduce((obj, feature) => {
                        return Object.assign(
                            obj,
                            feature.getDefaultColumnDef == null
                                ? void 0
                                : feature.getDefaultColumnDef()
                        )
                    }, {}),
                    ...defaultColumn
                }
            },
            getMemoOptions(options2, 'debugColumns')
        ),
        _getColumnDefs: () => table.options.columns,
        getAllColumns: memo(
            () => [table._getColumnDefs()],
            (columnDefs) => {
                const recurseColumns = function (columnDefs2, parent, depth) {
                    if (depth === void 0) {
                        depth = 0
                    }
                    return columnDefs2.map((columnDef) => {
                        const column2 = createColumn(table, columnDef, depth, parent)
                        const groupingColumnDef = columnDef
                        column2.columns = groupingColumnDef.columns
                            ? recurseColumns(groupingColumnDef.columns, column2, depth + 1)
                            : []
                        return column2
                    })
                }
                return recurseColumns(columnDefs)
            },
            getMemoOptions(options2, 'debugColumns')
        ),
        getAllFlatColumns: memo(
            () => [table.getAllColumns()],
            (allColumns) => {
                return allColumns.flatMap((column2) => {
                    return column2.getFlatColumns()
                })
            },
            getMemoOptions(options2, 'debugColumns')
        ),
        _getAllFlatColumnsById: memo(
            () => [table.getAllFlatColumns()],
            (flatColumns) => {
                return flatColumns.reduce((acc, column2) => {
                    acc[column2.id] = column2
                    return acc
                }, {})
            },
            getMemoOptions(options2, 'debugColumns')
        ),
        getAllLeafColumns: memo(
            () => [table.getAllColumns(), table._getOrderColumnsFn()],
            (allColumns, orderColumns2) => {
                let leafColumns = allColumns.flatMap((column2) => column2.getLeafColumns())
                return orderColumns2(leafColumns)
            },
            getMemoOptions(options2, 'debugColumns')
        ),
        getColumn: (columnId) => {
            const column2 = table._getAllFlatColumnsById()[columnId]
            return column2
        }
    }
    Object.assign(table, coreInstance)
    for (let index2 = 0; index2 < table._features.length; index2++) {
        const feature = table._features[index2]
        feature == null || feature.createTable == null || feature.createTable(table)
    }
    return table
}
function getCoreRowModel() {
    return (table) =>
        memo(
            () => [table.options.data],
            (data) => {
                const rowModel = {
                    rows: [],
                    flatRows: [],
                    rowsById: {}
                }
                const accessRows = function (originalRows, depth, parentRow) {
                    if (depth === void 0) {
                        depth = 0
                    }
                    const rows = []
                    for (let i = 0; i < originalRows.length; i++) {
                        const row = createRow(
                            table,
                            table._getRowId(originalRows[i], i, parentRow),
                            originalRows[i],
                            i,
                            depth,
                            void 0,
                            parentRow == null ? void 0 : parentRow.id
                        )
                        rowModel.flatRows.push(row)
                        rowModel.rowsById[row.id] = row
                        rows.push(row)
                        if (table.options.getSubRows) {
                            var _row$originalSubRows
                            row.originalSubRows = table.options.getSubRows(originalRows[i], i)
                            if (
                                (_row$originalSubRows = row.originalSubRows) != null &&
                                _row$originalSubRows.length
                            ) {
                                row.subRows = accessRows(row.originalSubRows, depth + 1, row)
                            }
                        }
                    }
                    return rows
                }
                rowModel.rows = accessRows(data)
                return rowModel
            },
            getMemoOptions(table.options, 'debugTable', 'getRowModel', () =>
                table._autoResetPageIndex()
            )
        )
}
function expandRows(rowModel) {
    const expandedRows = []
    const handleRow = (row) => {
        var _row$subRows
        expandedRows.push(row)
        if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {
            row.subRows.forEach(handleRow)
        }
    }
    rowModel.rows.forEach(handleRow)
    return {
        rows: expandedRows,
        flatRows: rowModel.flatRows,
        rowsById: rowModel.rowsById
    }
}
function filterRows(rows, filterRowImpl, table) {
    if (table.options.filterFromLeafRows) {
        return filterRowModelFromLeafs(rows, filterRowImpl, table)
    }
    return filterRowModelFromRoot(rows, filterRowImpl, table)
}
function filterRowModelFromLeafs(rowsToFilter, filterRow, table) {
    var _table$options$maxLea
    const newFilteredFlatRows = []
    const newFilteredRowsById = {}
    const maxDepth =
        (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null
            ? _table$options$maxLea
            : 100
    const recurseFilterRows = function (rowsToFilter2, depth) {
        if (depth === void 0) {
            depth = 0
        }
        const rows = []
        for (let i = 0; i < rowsToFilter2.length; i++) {
            var _row$subRows
            let row = rowsToFilter2[i]
            const newRow = createRow(
                table,
                row.id,
                row.original,
                row.index,
                row.depth,
                void 0,
                row.parentId
            )
            newRow.columnFilters = row.columnFilters
            if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {
                newRow.subRows = recurseFilterRows(row.subRows, depth + 1)
                row = newRow
                if (filterRow(row) && !newRow.subRows.length) {
                    rows.push(row)
                    newFilteredRowsById[row.id] = row
                    newFilteredFlatRows.push(row)
                    continue
                }
                if (filterRow(row) || newRow.subRows.length) {
                    rows.push(row)
                    newFilteredRowsById[row.id] = row
                    newFilteredFlatRows.push(row)
                    continue
                }
            } else {
                row = newRow
                if (filterRow(row)) {
                    rows.push(row)
                    newFilteredRowsById[row.id] = row
                    newFilteredFlatRows.push(row)
                }
            }
        }
        return rows
    }
    return {
        rows: recurseFilterRows(rowsToFilter),
        flatRows: newFilteredFlatRows,
        rowsById: newFilteredRowsById
    }
}
function filterRowModelFromRoot(rowsToFilter, filterRow, table) {
    var _table$options$maxLea2
    const newFilteredFlatRows = []
    const newFilteredRowsById = {}
    const maxDepth =
        (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null
            ? _table$options$maxLea2
            : 100
    const recurseFilterRows = function (rowsToFilter2, depth) {
        if (depth === void 0) {
            depth = 0
        }
        const rows = []
        for (let i = 0; i < rowsToFilter2.length; i++) {
            let row = rowsToFilter2[i]
            const pass = filterRow(row)
            if (pass) {
                var _row$subRows2
                if (
                    (_row$subRows2 = row.subRows) != null &&
                    _row$subRows2.length &&
                    depth < maxDepth
                ) {
                    const newRow = createRow(
                        table,
                        row.id,
                        row.original,
                        row.index,
                        row.depth,
                        void 0,
                        row.parentId
                    )
                    newRow.subRows = recurseFilterRows(row.subRows, depth + 1)
                    row = newRow
                }
                rows.push(row)
                newFilteredFlatRows.push(row)
                newFilteredRowsById[row.id] = row
            }
        }
        return rows
    }
    return {
        rows: recurseFilterRows(rowsToFilter),
        flatRows: newFilteredFlatRows,
        rowsById: newFilteredRowsById
    }
}
function getFilteredRowModel() {
    return (table) =>
        memo(
            () => [
                table.getPreFilteredRowModel(),
                table.getState().columnFilters,
                table.getState().globalFilter
            ],
            (rowModel, columnFilters, globalFilter) => {
                if (
                    !rowModel.rows.length ||
                    (!(columnFilters != null && columnFilters.length) && !globalFilter)
                ) {
                    for (let i = 0; i < rowModel.flatRows.length; i++) {
                        rowModel.flatRows[i].columnFilters = {}
                        rowModel.flatRows[i].columnFiltersMeta = {}
                    }
                    return rowModel
                }
                const resolvedColumnFilters = []
                const resolvedGlobalFilters = []
                ;(columnFilters != null ? columnFilters : []).forEach((d) => {
                    var _filterFn$resolveFilt
                    const column2 = table.getColumn(d.id)
                    if (!column2) {
                        return
                    }
                    const filterFn = column2.getFilterFn()
                    if (!filterFn) {
                        return
                    }
                    resolvedColumnFilters.push({
                        id: d.id,
                        filterFn,
                        resolvedValue:
                            (_filterFn$resolveFilt =
                                filterFn.resolveFilterValue == null
                                    ? void 0
                                    : filterFn.resolveFilterValue(d.value)) != null
                                ? _filterFn$resolveFilt
                                : d.value
                    })
                })
                const filterableIds = (columnFilters != null ? columnFilters : []).map((d) => d.id)
                const globalFilterFn = table.getGlobalFilterFn()
                const globallyFilterableColumns = table
                    .getAllLeafColumns()
                    .filter((column2) => column2.getCanGlobalFilter())
                if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {
                    filterableIds.push('__global__')
                    globallyFilterableColumns.forEach((column2) => {
                        var _globalFilterFn$resol
                        resolvedGlobalFilters.push({
                            id: column2.id,
                            filterFn: globalFilterFn,
                            resolvedValue:
                                (_globalFilterFn$resol =
                                    globalFilterFn.resolveFilterValue == null
                                        ? void 0
                                        : globalFilterFn.resolveFilterValue(globalFilter)) != null
                                    ? _globalFilterFn$resol
                                    : globalFilter
                        })
                    })
                }
                let currentColumnFilter
                let currentGlobalFilter
                for (let j = 0; j < rowModel.flatRows.length; j++) {
                    const row = rowModel.flatRows[j]
                    row.columnFilters = {}
                    if (resolvedColumnFilters.length) {
                        for (let i = 0; i < resolvedColumnFilters.length; i++) {
                            currentColumnFilter = resolvedColumnFilters[i]
                            const id = currentColumnFilter.id
                            row.columnFilters[id] = currentColumnFilter.filterFn(
                                row,
                                id,
                                currentColumnFilter.resolvedValue,
                                (filterMeta) => {
                                    row.columnFiltersMeta[id] = filterMeta
                                }
                            )
                        }
                    }
                    if (resolvedGlobalFilters.length) {
                        for (let i = 0; i < resolvedGlobalFilters.length; i++) {
                            currentGlobalFilter = resolvedGlobalFilters[i]
                            const id = currentGlobalFilter.id
                            if (
                                currentGlobalFilter.filterFn(
                                    row,
                                    id,
                                    currentGlobalFilter.resolvedValue,
                                    (filterMeta) => {
                                        row.columnFiltersMeta[id] = filterMeta
                                    }
                                )
                            ) {
                                row.columnFilters.__global__ = true
                                break
                            }
                        }
                        if (row.columnFilters.__global__ !== true) {
                            row.columnFilters.__global__ = false
                        }
                    }
                }
                const filterRowsImpl = (row) => {
                    for (let i = 0; i < filterableIds.length; i++) {
                        if (row.columnFilters[filterableIds[i]] === false) {
                            return false
                        }
                    }
                    return true
                }
                return filterRows(rowModel.rows, filterRowsImpl, table)
            },
            getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () =>
                table._autoResetPageIndex()
            )
        )
}
function getPaginationRowModel(opts) {
    return (table) =>
        memo(
            () => [
                table.getState().pagination,
                table.getPrePaginationRowModel(),
                table.options.paginateExpandedRows ? void 0 : table.getState().expanded
            ],
            (pagination, rowModel) => {
                if (!rowModel.rows.length) {
                    return rowModel
                }
                const { pageSize, pageIndex } = pagination
                let { rows, flatRows, rowsById } = rowModel
                const pageStart = pageSize * pageIndex
                const pageEnd = pageStart + pageSize
                rows = rows.slice(pageStart, pageEnd)
                let paginatedRowModel
                if (!table.options.paginateExpandedRows) {
                    paginatedRowModel = expandRows({
                        rows,
                        flatRows,
                        rowsById
                    })
                } else {
                    paginatedRowModel = {
                        rows,
                        flatRows,
                        rowsById
                    }
                }
                paginatedRowModel.flatRows = []
                const handleRow = (row) => {
                    paginatedRowModel.flatRows.push(row)
                    if (row.subRows.length) {
                        row.subRows.forEach(handleRow)
                    }
                }
                paginatedRowModel.rows.forEach(handleRow)
                return paginatedRowModel
            },
            getMemoOptions(table.options, 'debugTable')
        )
}
function getSortedRowModel() {
    return (table) =>
        memo(
            () => [table.getState().sorting, table.getPreSortedRowModel()],
            (sorting, rowModel) => {
                if (!rowModel.rows.length || !(sorting != null && sorting.length)) {
                    return rowModel
                }
                const sortingState = table.getState().sorting
                const sortedFlatRows = []
                const availableSorting = sortingState.filter((sort) => {
                    var _table$getColumn
                    return (_table$getColumn = table.getColumn(sort.id)) == null
                        ? void 0
                        : _table$getColumn.getCanSort()
                })
                const columnInfoById = {}
                availableSorting.forEach((sortEntry) => {
                    const column2 = table.getColumn(sortEntry.id)
                    if (!column2) return
                    columnInfoById[sortEntry.id] = {
                        sortUndefined: column2.columnDef.sortUndefined,
                        invertSorting: column2.columnDef.invertSorting,
                        sortingFn: column2.getSortingFn()
                    }
                })
                const sortData = (rows) => {
                    const sortedData = rows.map((row) => ({
                        ...row
                    }))
                    sortedData.sort((rowA, rowB) => {
                        for (let i = 0; i < availableSorting.length; i += 1) {
                            var _sortEntry$desc
                            const sortEntry = availableSorting[i]
                            const columnInfo = columnInfoById[sortEntry.id]
                            const sortUndefined = columnInfo.sortUndefined
                            const isDesc =
                                (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) !=
                                null
                                    ? _sortEntry$desc
                                    : false
                            let sortInt = 0
                            if (sortUndefined) {
                                const aValue = rowA.getValue(sortEntry.id)
                                const bValue = rowB.getValue(sortEntry.id)
                                const aUndefined = aValue === void 0
                                const bUndefined = bValue === void 0
                                if (aUndefined || bUndefined) {
                                    if (sortUndefined === 'first') return aUndefined ? -1 : 1
                                    if (sortUndefined === 'last') return aUndefined ? 1 : -1
                                    sortInt =
                                        aUndefined && bUndefined
                                            ? 0
                                            : aUndefined
                                              ? sortUndefined
                                              : -sortUndefined
                                }
                            }
                            if (sortInt === 0) {
                                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)
                            }
                            if (sortInt !== 0) {
                                if (isDesc) {
                                    sortInt *= -1
                                }
                                if (columnInfo.invertSorting) {
                                    sortInt *= -1
                                }
                                return sortInt
                            }
                        }
                        return rowA.index - rowB.index
                    })
                    sortedData.forEach((row) => {
                        var _row$subRows
                        sortedFlatRows.push(row)
                        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {
                            row.subRows = sortData(row.subRows)
                        }
                    })
                    return sortedData
                }
                return {
                    rows: sortData(rowModel.rows),
                    flatRows: sortedFlatRows,
                    rowsById: rowModel.rowsById
                }
            },
            getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () =>
                table._autoResetPageIndex()
            )
        )
}
/**
 * react-table
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function flexRender(Comp, props) {
    return !Comp
        ? null
        : isReactComponent(Comp)
          ? /* @__PURE__ */ reactExports.createElement(Comp, props)
          : Comp
}
function isReactComponent(component) {
    return (
        isClassComponent(component) ||
        typeof component === 'function' ||
        isExoticComponent(component)
    )
}
function isClassComponent(component) {
    return (
        typeof component === 'function' &&
        (() => {
            const proto = Object.getPrototypeOf(component)
            return proto.prototype && proto.prototype.isReactComponent
        })()
    )
}
function isExoticComponent(component) {
    return (
        typeof component === 'object' &&
        typeof component.$$typeof === 'symbol' &&
        ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)
    )
}
function useReactTable(options2) {
    const resolvedOptions = {
        state: {},
        // Dummy state
        onStateChange: () => {},
        // noop
        renderFallbackValue: null,
        ...options2
    }
    const [tableRef] = reactExports.useState(() => ({
        current: createTable(resolvedOptions)
    }))
    const [state, setState] = reactExports.useState(() => tableRef.current.initialState)
    tableRef.current.setOptions((prev2) => ({
        ...prev2,
        ...options2,
        state: {
            ...state,
            ...options2.state
        },
        // Similarly, we'll maintain both our internal state and any user-provided
        // state.
        onStateChange: (updater) => {
            setState(updater)
            options2.onStateChange == null || options2.onStateChange(updater)
        }
    }))
    return tableRef.current
}
function CustomTable({
    filter: filter2,
    hasPagination = true,
    hasSearch = true,
    hasExportOptions = false,
    hasEntriesNumber = true,
    hasFilterByHeader = false,
    data,
    columns,
    caption,
    topComponent,
    isloading
}) {
    const [globalFilter, setGlobalFilter] = reactExports.useState('')
    const [columnFilters, setColumnFilters] = reactExports.useState([])
    reactExports.useEffect(() => {
        setGlobalFilter(filter2 || '')
    }, [filter2])
    const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
        getSortedRowModel: getSortedRowModel(),
        getPaginationRowModel: getPaginationRowModel(),
        getFilteredRowModel: getFilteredRowModel(),
        getColumnFilteredRowModel: getFilteredRowModel(),
        state: {
            globalFilter,
            columnFilters
        },
        onGlobalFilterChange: setGlobalFilter,
        onColumnFiltersChange: setColumnFilters
    })
    const handleExport = (type) => {
        console.log(type)
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: '',
            children: isloading
                ? /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                      className: 'd-flex flex-column justify-content-center align-items-center',
                      style: { minHeight: '200px' },
                      children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                              className: 'spinner-grow text-primary mb-2',
                              role: 'status',
                              children: /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                  className: 'visually-hidden',
                                  children: 'Loading...'
                              })
                          }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                              className: 'text-muted fw-semibold',
                              children: 'Fetching data, please wait...'
                          })
                      ]
                  })
                : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                      children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                              className: 'd-flex align-items-center justify-content-between mb-3',
                              children: [
                                  topComponent && topComponent,
                                  hasEntriesNumber &&
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                          className: 'text-start',
                                          children: [
                                              'Show',
                                              ' ',
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('select', {
                                                  className: 'rounded mx-2 px-3',
                                                  value: table.getState().pagination.pageSize,
                                                  onChange: (e) =>
                                                      table.setPageSize(Number(e.target.value)),
                                                  children: [10, 20, 30, 50, 100].map((pageSize) =>
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          'option',
                                                          { value: pageSize, children: pageSize },
                                                          pageSize
                                                      )
                                                  )
                                              }),
                                              ' ',
                                              'entries'
                                          ]
                                      }),
                                  hasExportOptions &&
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                          className: 'btn-group gap-2',
                                          role: 'group',
                                          'aria-label': 'Export options',
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                  type: 'button',
                                                  className: 'btn btn-primary rounded-3',
                                                  onClick: handleExport('pdf'),
                                                  children: [
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                          className:
                                                              'bi bi-file-earmark-pdf-fill me-1'
                                                      }),
                                                      ' Export PDF'
                                                  ]
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                  type: 'button',
                                                  className: 'btn btn-primary text-light rounded-3',
                                                  onClick: handleExport('excel'),
                                                  children: [
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                          className:
                                                              'bi bi-file-earmark-excel-fill me-1'
                                                      }),
                                                      ' ',
                                                      'Export Excel'
                                                  ]
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                  type: 'button',
                                                  className: 'btn btn-primary rounded-3',
                                                  children: [
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                          className: 'bi bi-printer-fill me-1'
                                                      }),
                                                      ' Print'
                                                  ]
                                              })
                                          ]
                                      }),
                                  hasSearch &&
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                          className: '',
                                          style: { width: '400px' },
                                          children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                              className: 'input-group input-group-sm',
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className:
                                                          'input-group-text bg-primary text-light px-3 rounded-start-pill',
                                                      children: 'Search'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                      type: 'text',
                                                      placeholder: 'Search...',
                                                      value: globalFilter,
                                                      onChange: (e) =>
                                                          setGlobalFilter(e.target.value),
                                                      className: 'form-control rounded-end-pill'
                                                  })
                                              ]
                                          })
                                      })
                              ]
                          }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                              className: 'table-responsive rounded-3 border mb-3',
                              style: { overflow: 'visible' },
                              children: /* @__PURE__ */ jsxRuntimeExports.jsxs('table', {
                                  className: 'table table-hover text-wrap mb-3 text-center',
                                  children: [
                                      caption &&
                                          /* @__PURE__ */ jsxRuntimeExports.jsx('caption', {
                                              className: 'text-center',
                                              children: caption
                                          }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('thead', {
                                          children: table.getHeaderGroups().map((headerGroup) =>
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                  React.Fragment,
                                                  {
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'tr',
                                                              {
                                                                  children: headerGroup.headers.map(
                                                                      (header) =>
                                                                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                              'th',
                                                                              {
                                                                                  className:
                                                                                      'fw-semibold text-nowrap',
                                                                                  onClick:
                                                                                      header.column.getToggleSortingHandler(),
                                                                                  style: {
                                                                                      cursor: 'pointer',
                                                                                      borderRadius:
                                                                                          '30px'
                                                                                  },
                                                                                  children: [
                                                                                      flexRender(
                                                                                          header
                                                                                              .column
                                                                                              .columnDef
                                                                                              .header,
                                                                                          header.getContext()
                                                                                      ),
                                                                                      header.column.getIsSorted() &&
                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                              'i',
                                                                                              {
                                                                                                  className: `bi ${header.column.getIsSorted() === 'asc' ? 'bi-caret-down-fill' : 'bi-caret-up-fill'} ms-2`
                                                                                              }
                                                                                          )
                                                                                  ]
                                                                              },
                                                                              header.id
                                                                          )
                                                                  )
                                                              }
                                                          ),
                                                          hasFilterByHeader &&
                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  'tr',
                                                                  {
                                                                      children:
                                                                          headerGroup.headers.map(
                                                                              (header) =>
                                                                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                      'th',
                                                                                      {
                                                                                          children:
                                                                                              header.column.getCanFilter()
                                                                                                  ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                        'input',
                                                                                                        {
                                                                                                            className:
                                                                                                                'form-control form-control-sm',
                                                                                                            type: 'text',
                                                                                                            value:
                                                                                                                header.column.getFilterValue() ??
                                                                                                                '',
                                                                                                            onChange:
                                                                                                                (
                                                                                                                    e
                                                                                                                ) =>
                                                                                                                    header.column.setFilterValue(
                                                                                                                        e
                                                                                                                            .target
                                                                                                                            .value
                                                                                                                    ),
                                                                                                            placeholder: `Filter ${flexRender(header.column.columnDef.header, header.getContext())}`
                                                                                                        }
                                                                                                    )
                                                                                                  : null
                                                                                      },
                                                                                      `${header.id}-filter`
                                                                                  )
                                                                          )
                                                                  }
                                                              )
                                                      ]
                                                  },
                                                  headerGroup.id
                                              )
                                          )
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('tbody', {
                                          className: 'table-group-divider',
                                          children:
                                              table.getRowModel().rows.length > 0
                                                  ? table.getRowModel().rows.map((row) =>
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            'tr',
                                                            {
                                                                children: row
                                                                    .getVisibleCells()
                                                                    .map((cell) =>
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'td',
                                                                            {
                                                                                className:
                                                                                    'text-capitalize',
                                                                                children:
                                                                                    flexRender(
                                                                                        cell.column
                                                                                            .columnDef
                                                                                            .cell,
                                                                                        cell.getContext()
                                                                                    )
                                                                            },
                                                                            cell.id
                                                                        )
                                                                    )
                                                            },
                                                            row.id
                                                        )
                                                    )
                                                  : /* @__PURE__ */ jsxRuntimeExports.jsx('tr', {
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'td',
                                                                {
                                                                    colSpan: columns.length,
                                                                    className: 'text-center',
                                                                    children: 'No data available'
                                                                }
                                                            )
                                                    })
                                      })
                                  ]
                              })
                          }),
                          hasPagination &&
                              /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                  className: 'd-flex justify-content-end pagination',
                                  children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                          onClick: () => table.setPageIndex(0),
                                          disabled: !table.getCanPreviousPage(),
                                          className: 'btn btn-sm btn-light border rounded-start-3',
                                          children: 'First'
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                          onClick: () => table.previousPage(),
                                          disabled: !table.getCanPreviousPage(),
                                          className: 'btn btn-sm btn-light border px-3',
                                          children: '<'
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                          className: 'px-3',
                                          children: [
                                              'Page ',
                                              table.getState().pagination.pageIndex + 1,
                                              ' of',
                                              ' ',
                                              table.getPageCount()
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                          onClick: () => table.nextPage(),
                                          disabled: !table.getCanNextPage(),
                                          className: 'btn btn-sm btn-light border px-3',
                                          children: '>'
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                          onClick: () =>
                                              table.setPageIndex(table.getPageCount() - 1),
                                          disabled: !table.getCanNextPage(),
                                          className: 'btn btn-sm btn-light border rounded-end-3',
                                          children: 'Last'
                                      })
                                  ]
                              })
                      ]
                  })
        })
    })
}
const statusIcons = {
    pending: { icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaClock, {}), class: 'bg-warning' },
    new: {
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaClipboardList, {}),
        class: 'bg-secondary'
    },
    open: { icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaHourglassHalf, {}), class: 'bg-primary' },
    in_progress: { icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaSpinner, {}), class: 'bg-info' },
    on_hold: { icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaPause, {}), class: 'bg-warning' },
    resolved: {
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaCheckCircle, {}),
        class: 'bg-success'
    },
    reopened: { icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaRedo, {}), class: 'bg-info' },
    failed: { icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaBan, {}), class: 'bg-danger' },
    rejected: {
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaTimesCircle, {}),
        class: 'bg-danger'
    },
    closed: { icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaDoorClosed, {}), class: 'bg-secondary' }
}
function StatusBadge({ status }) {
    const info = statusIcons[status] || {
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaClock, {}),
        class: 'bg-secondary'
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
        className: `${info?.class} text-uppercase text-nowrap text-light small rounded-pill py-1 px-3 text-center`,
        children: [info?.icon, ' ', status ?? status?.replace('_', ' ').toUpperCase()]
    })
}
function AddTicketModal({ id, refreshList }) {
    const { postData, getData } = useAPI()
    const { showToast } = useToast()
    const navigate = useNavigate()
    useLocation()
    const modalRef = reactExports.useRef(null)
    const titleRef = reactExports.useRef(null)
    const [ticketData, setTicketData] = reactExports.useState({
        title: '',
        description: '',
        priority_id: '',
        department_id: ''
    })
    const [departments, setDepartments] = reactExports.useState([])
    const [priorities, setPriorities] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/departments', setDepartments, () => {}, setError)
        getData('/priorities', setPriorities, () => {}, setError)
    }, [])
    reactExports.useEffect(() => {
        const modalEl = modalRef.current
        if (!modalEl) return
        const handleShown = () => titleRef.current?.focus()
        modalEl.addEventListener('shown.bs.modal', handleShown)
        return () => modalEl.removeEventListener('shown.bs.modal', handleShown)
    }, [])
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setTicketData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setTicketData({
            title: '',
            description: '',
            priority_id: '',
            department_id: ''
        })
        setError('')
        document.querySelector('.needs-validation')?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        const response = await postData('/tickets', ticketData, setTicketData, setLoading, setError)
        if (response) {
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current).hide()
            resetForm()
            refreshList?.()
            navigate('/servicedesk/tickets/all', { replace: true })
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className: 'btn btn-primary text-nowrap border me-4',
                'data-bs-toggle': 'modal',
                'data-bs-target': `#${id}`,
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, { className: 'me-1' }),
                    'New Ticket'
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal modal-lg fade',
                id,
                tabIndex: '-1',
                'data-bs-backdrop': 'static',
                'data-bs-keyboard': 'false',
                ref: modalRef,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                        className: 'modal-title fw-semibold text-uppercase',
                                        children: 'Create New Ticket'
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-body p-3',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                                    className: 'row g-3 needs-validation p-3',
                                    noValidate: true,
                                    onSubmit: handleSubmit,
                                    children: [
                                        error &&
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'alert alert-danger text-center py-2',
                                                children: error
                                            }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'ticketTitle',
                                                    className: 'form-label',
                                                    children: 'Concern'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'ticketTitle',
                                                    name: 'title',
                                                    value: ticketData.title,
                                                    onChange: handleInputChange,
                                                    ref: titleRef,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter a title.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-6',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'ticketDepartment',
                                                    className: 'form-label',
                                                    children: 'Assigned Department'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs('select', {
                                                    className: 'form-select',
                                                    id: 'ticketDepartment',
                                                    name: 'department_id',
                                                    value: ticketData.department_id,
                                                    onChange: handleInputChange,
                                                    required: true,
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            'option',
                                                            {
                                                                value: '',
                                                                disabled: true,
                                                                children: 'Select Department'
                                                            }
                                                        ),
                                                        departments.map((dept) =>
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'option',
                                                                {
                                                                    value: dept.id,
                                                                    children: dept.name
                                                                },
                                                                dept.id
                                                            )
                                                        )
                                                    ]
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please choose a department.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-6',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'ticketPriority',
                                                    className: 'form-label',
                                                    children: 'Priority'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs('select', {
                                                    className: 'form-select',
                                                    id: 'ticketPriority',
                                                    name: 'priority_id',
                                                    value: ticketData.priority_id,
                                                    onChange: handleInputChange,
                                                    required: true,
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            'option',
                                                            {
                                                                value: '',
                                                                disabled: true,
                                                                children: 'Select Priority'
                                                            }
                                                        ),
                                                        priorities.map((priority) =>
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'option',
                                                                {
                                                                    value: priority.id,
                                                                    children: priority.name
                                                                },
                                                                priority.id
                                                            )
                                                        )
                                                    ]
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please select a priority.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'ticketDescription',
                                                    className: 'form-label',
                                                    children: 'Description'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                                    className: 'form-control',
                                                    id: 'ticketDescription',
                                                    name: 'description',
                                                    rows: '5',
                                                    value: ticketData.description,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please provide a description.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'modal-footer',
                                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                'button',
                                                {
                                                    type: 'submit',
                                                    className: 'btn btn-primary w-100',
                                                    disabled: loading,
                                                    children: loading
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              jsxRuntimeExports.Fragment,
                                                              {
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'span',
                                                                          {
                                                                              className:
                                                                                  'spinner-grow spinner-grow-sm me-2',
                                                                              role: 'status'
                                                                          }
                                                                      ),
                                                                      'Submitting...'
                                                                  ]
                                                              }
                                                          )
                                                        : 'Submit Ticket'
                                                }
                                            )
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function formatDateAndTimeVerbose(isoString) {
    if (!isoString) return ''
    const date2 = new Date(isoString)
    if (isNaN(date2)) return ''
    const dateOptions = { year: 'numeric', month: 'long', day: 'numeric' }
    const timeOptions = { hour: 'numeric', minute: '2-digit', hour12: true }
    const formattedDate = date2.toLocaleDateString(void 0, dateOptions)
    const formattedTime = date2.toLocaleTimeString(void 0, timeOptions)
    return `${formattedDate} at ${formattedTime}`
}
function ViewTicketDetailsModal({ id, data }) {
    const { addComment, updateComment, authUser } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [comments, setComments] = reactExports.useState(data?.comments || [])
    const [commentInput, setCommentInput] = reactExports.useState('')
    const [editingCommentId, setEditingCommentId] = reactExports.useState(null)
    const [editedComment, setEditedComment] = reactExports.useState('')
    const commentsContainerRef = reactExports.useRef(null)
    const commentRefs = reactExports.useRef({})
    reactExports.useEffect(() => {
        setComments(data?.comments)
    }, [data?.comments])
    const handleAddComment = async () => {
        if (!commentInput.trim()) return
        try {
            const newComment = await addComment(
                data?.id,
                { text: commentInput },
                setLoading,
                setError
            )
            setComments((prev2) => [newComment.comment, ...prev2])
            setCommentInput('')
            setTimeout(() => {
                if (commentsContainerRef.current) {
                    commentsContainerRef.current.scrollTo({ top: 0, behavior: 'smooth' })
                }
            }, 100)
        } catch (error2) {
            console.error('Failed to add comment:', error2)
        }
    }
    const handleEditComment = (commentId, currentText) => {
        setEditingCommentId(commentId)
        setEditedComment(currentText)
    }
    const handleUpdateComment = async () => {
        if (!editedComment.trim() || !editingCommentId) return
        try {
            const updated = await updateComment(data?.id, editingCommentId, {
                text: editedComment
            })
            setComments((prev2) =>
                prev2.map((comment2) =>
                    comment2?.id === editingCommentId
                        ? { ...comment2, text: updated?.comment?.text }
                        : comment2
                )
            )
            setTimeout(() => {
                const target = commentRefs.current[editingCommentId]
                if (target && commentsContainerRef.current) {
                    target.scrollIntoView({ behavior: 'smooth', block: 'center' })
                }
            }, 100)
            setEditingCommentId(null)
            setEditedComment('')
        } catch (error2) {
            console.error('Failed to update comment:', error2)
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        tabIndex: '-1',
        'aria-labelledby': 'ticketDetailsLabel',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-scrollable modal-dialog-centered modal-xl',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content border',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header bg-primary text-light',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('h5', {
                                className: 'modal-title',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                        className: 'small',
                                        children: 'Ticket# '
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                        className: 'fw-bold',
                                        children: data?.ticket_number
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close btn-close-white',
                                'data-bs-dismiss': 'modal',
                                'aria-label': 'Close'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-body',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'text-center mt-3 py-2',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h3', {
                                        className: 'fw-bold',
                                        children: data?.title
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                        className: 'text-muted m-0',
                                        children: data?.description
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'd-flex',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'col-7 p-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className: 'row g-3 mb-3',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'col-md-6',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                'div',
                                                                {
                                                                    className:
                                                                        'card shadow p-3 h-100 rounded-4',
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'h6',
                                                                            {
                                                                                className:
                                                                                    'fw-bold',
                                                                                children: 'Status:'
                                                                            }
                                                                        ),
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            StatusBadge,
                                                                            { status: data?.status }
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'col-md-6',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                'div',
                                                                {
                                                                    className:
                                                                        'card shadow p-3 h-100 rounded-4',
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'h6',
                                                                            {
                                                                                className:
                                                                                    'fw-bold',
                                                                                children:
                                                                                    'Priority:'
                                                                            }
                                                                        ),
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'span',
                                                                            {
                                                                                className:
                                                                                    'text-center fw-semibold',
                                                                                children:
                                                                                    data?.priority?.name
                                                                                        .replace(
                                                                                            '_',
                                                                                            ' '
                                                                                        )
                                                                                        .toUpperCase()
                                                                            }
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                    })
                                                ]
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className: 'row g-3 mb-3',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'col-md-6',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                'div',
                                                                {
                                                                    className:
                                                                        'card shadow p-3 h-100 rounded-4',
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'h5',
                                                                            {
                                                                                className:
                                                                                    'fw-bold',
                                                                                children:
                                                                                    'Requester:'
                                                                            }
                                                                        ),
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                            'div',
                                                                            {
                                                                                children: [
                                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                        'span',
                                                                                        {
                                                                                            className:
                                                                                                'me-2',
                                                                                            children:
                                                                                                'Name:'
                                                                                        }
                                                                                    ),
                                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                        'span',
                                                                                        {
                                                                                            className:
                                                                                                'fw-bold',
                                                                                            children:
                                                                                                data
                                                                                                    ?.requester
                                                                                                    ?.name
                                                                                        }
                                                                                    )
                                                                                ]
                                                                            }
                                                                        ),
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                            'div',
                                                                            {
                                                                                children: [
                                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                        'span',
                                                                                        {
                                                                                            className:
                                                                                                'me-2',
                                                                                            children:
                                                                                                'Department:'
                                                                                        }
                                                                                    ),
                                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                        'span',
                                                                                        {
                                                                                            className:
                                                                                                'fw-bold',
                                                                                            children:
                                                                                                data
                                                                                                    ?.origin_department
                                                                                                    ?.name
                                                                                        }
                                                                                    )
                                                                                ]
                                                                            }
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'col-md-6',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                'div',
                                                                {
                                                                    className:
                                                                        'card shadow p-3 h-100 rounded-4',
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'h5',
                                                                            {
                                                                                className:
                                                                                    'fw-bold',
                                                                                children:
                                                                                    'Assign To:'
                                                                            }
                                                                        ),
                                                                        data?.assigned_to
                                                                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                                  'div',
                                                                                  {
                                                                                      children: [
                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                                              'div',
                                                                                              {
                                                                                                  children:
                                                                                                      [
                                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                              'span',
                                                                                                              {
                                                                                                                  className:
                                                                                                                      'me-2',
                                                                                                                  children:
                                                                                                                      'Name:'
                                                                                                              }
                                                                                                          ),
                                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                              'span',
                                                                                                              {
                                                                                                                  className:
                                                                                                                      'fw-bold',
                                                                                                                  children:
                                                                                                                      data
                                                                                                                          ?.assigned_to
                                                                                                                          ?.name
                                                                                                              }
                                                                                                          )
                                                                                                      ]
                                                                                              }
                                                                                          ),
                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                                              'div',
                                                                                              {
                                                                                                  children:
                                                                                                      [
                                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                              'span',
                                                                                                              {
                                                                                                                  className:
                                                                                                                      'me-2',
                                                                                                                  children:
                                                                                                                      'Department:'
                                                                                                              }
                                                                                                          ),
                                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                              'span',
                                                                                                              {
                                                                                                                  className:
                                                                                                                      'fw-bold',
                                                                                                                  children:
                                                                                                                      data
                                                                                                                          ?.target_department
                                                                                                                          ?.name
                                                                                                              }
                                                                                                          )
                                                                                                      ]
                                                                                              }
                                                                                          )
                                                                                      ]
                                                                                  }
                                                                              )
                                                                            : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                  'span',
                                                                                  {
                                                                                      className:
                                                                                          'd-flex h-100 justify-content-center align-items-center',
                                                                                      children:
                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                              'span',
                                                                                              {
                                                                                                  className:
                                                                                                      'fw-bold',
                                                                                                  children:
                                                                                                      data
                                                                                                          ?.target_department
                                                                                                          ?.name
                                                                                              }
                                                                                          )
                                                                                  }
                                                                              )
                                                                    ]
                                                                }
                                                            )
                                                    })
                                                ]
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className: 'row g-3 mb-3',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'col-md-6',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                'div',
                                                                {
                                                                    className:
                                                                        'card shadow p-3 h-100 rounded-4',
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'h6',
                                                                            {
                                                                                className:
                                                                                    'fw-bold',
                                                                                children:
                                                                                    'Response Deadline:'
                                                                            }
                                                                        ),
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'span',
                                                                            {
                                                                                className:
                                                                                    'text-muted',
                                                                                children:
                                                                                    formatDateAndTimeVerbose(
                                                                                        data?.response_deadline
                                                                                    ) || 'N/A'
                                                                            }
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'col-md-6',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                'div',
                                                                {
                                                                    className:
                                                                        'card shadow p-3 h-100 rounded-4',
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'h6',
                                                                            {
                                                                                className:
                                                                                    'fw-bold',
                                                                                children:
                                                                                    'Resolution Deadline:'
                                                                            }
                                                                        ),
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'span',
                                                                            {
                                                                                className:
                                                                                    'text-muted',
                                                                                children:
                                                                                    formatDateAndTimeVerbose(
                                                                                        data?.resolution_deadline
                                                                                    ) || 'N/A'
                                                                            }
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                    })
                                                ]
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className: 'row g-3 mb-3',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'col-md-6',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                'div',
                                                                {
                                                                    className:
                                                                        'card shadow p-4 h-100 rounded-4 text-center',
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'h6',
                                                                            {
                                                                                className:
                                                                                    'fw-bold text-uppercase mb-3',
                                                                                children:
                                                                                    'SLA Compliance:'
                                                                            }
                                                                        ),
                                                                        data?.sla_breached
                                                                            ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                  'span',
                                                                                  {
                                                                                      className:
                                                                                          'py-2 px-4 rounded-pill text-light bg-danger',
                                                                                      children:
                                                                                          'SLA Breached'
                                                                                  }
                                                                              )
                                                                            : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                  'span',
                                                                                  {
                                                                                      className:
                                                                                          'py-2 px-4 rounded-pill text-light bg-success',
                                                                                      children:
                                                                                          'SLA Met'
                                                                                  }
                                                                              )
                                                                    ]
                                                                }
                                                            )
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'col-md-6',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                'div',
                                                                {
                                                                    className:
                                                                        'card shadow p-4 h-100 rounded-4',
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'h6',
                                                                            {
                                                                                className:
                                                                                    'fw-bold text-uppercase mb-3',
                                                                                children: 'Remarks:'
                                                                            }
                                                                        ),
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'span',
                                                                            {
                                                                                className:
                                                                                    'text-muted',
                                                                                style: {
                                                                                    wordWrap:
                                                                                        'break-word'
                                                                                },
                                                                                children:
                                                                                    data?.remarks ||
                                                                                    'No remarks provided'
                                                                            }
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                    })
                                                ]
                                            })
                                        ]
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                        className: 'col-5 p-3',
                                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'card shadow p-3 h-100 rounded-4',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                                                    className: 'fw-bold mb-2',
                                                    children: 'Comments'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    ref: commentsContainerRef,
                                                    className:
                                                        'overflow-auto p-3 border-top border-bottom',
                                                    style: { maxHeight: '300px' },
                                                    children:
                                                        comments?.length > 0
                                                            ? comments.map((comment2) =>
                                                                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                      'div',
                                                                      {
                                                                          className:
                                                                              'mb-4 border-bottom',
                                                                          ref: (el) =>
                                                                              (commentRefs.current[
                                                                                  comment2?.id
                                                                              ] = el),
                                                                          children: [
                                                                              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                                  'div',
                                                                                  {
                                                                                      className:
                                                                                          'd-flex justify-content-between align-items-center',
                                                                                      children: [
                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                                              'div',
                                                                                              {
                                                                                                  children:
                                                                                                      [
                                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                              'span',
                                                                                                              {
                                                                                                                  className:
                                                                                                                      'fw-bold fs-5',
                                                                                                                  children:
                                                                                                                      comment2
                                                                                                                          ?.user
                                                                                                                          ?.name
                                                                                                              }
                                                                                                          ),
                                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                              'span',
                                                                                                              {
                                                                                                                  className:
                                                                                                                      'text-muted ms-2',
                                                                                                                  children:
                                                                                                                      formatDateAndTimeVerbose(
                                                                                                                          comment2?.created_at ||
                                                                                                                              ''
                                                                                                                      )
                                                                                                              }
                                                                                                          ),
                                                                                                          comment2?.edited_at &&
                                                                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                                  'span',
                                                                                                                  {
                                                                                                                      className:
                                                                                                                          'badge bg-secondary text-light ms-2',
                                                                                                                      children:
                                                                                                                          'Edited'
                                                                                                                  }
                                                                                                              )
                                                                                                      ]
                                                                                              }
                                                                                          ),
                                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                              'div',
                                                                                              {
                                                                                                  children:
                                                                                                      comment2
                                                                                                          ?.user
                                                                                                          ?.id ==
                                                                                                          authUser.id &&
                                                                                                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                                                          'button',
                                                                                                          {
                                                                                                              className:
                                                                                                                  'btn btn-sm btn-outline-secondary',
                                                                                                              onClick:
                                                                                                                  () =>
                                                                                                                      handleEditComment(
                                                                                                                          comment2?.id,
                                                                                                                          comment2?.text
                                                                                                                      ),
                                                                                                              children:
                                                                                                                  [
                                                                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                                          FaEdit,
                                                                                                                          {
                                                                                                                              className:
                                                                                                                                  'me-1'
                                                                                                                          }
                                                                                                                      ),
                                                                                                                      'Edit'
                                                                                                                  ]
                                                                                                          }
                                                                                                      )
                                                                                              }
                                                                                          )
                                                                                      ]
                                                                                  }
                                                                              ),
                                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                  'div',
                                                                                  {
                                                                                      className:
                                                                                          'text-muted fw-semibold',
                                                                                      children:
                                                                                          comment2?.text
                                                                                  }
                                                                              )
                                                                          ]
                                                                      },
                                                                      comment2?.id
                                                                  )
                                                              )
                                                            : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  'div',
                                                                  {
                                                                      className: 'text-muted',
                                                                      children: 'No comments yet'
                                                                  }
                                                              )
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'd-flex mt-3',
                                                    children: editingCommentId
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              jsxRuntimeExports.Fragment,
                                                              {
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'input',
                                                                          {
                                                                              type: 'text',
                                                                              className:
                                                                                  'form-control rounded-3 rounded-end-0',
                                                                              value: editedComment,
                                                                              onChange: (e) =>
                                                                                  setEditedComment(
                                                                                      e.target.value
                                                                                  )
                                                                          }
                                                                      ),
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'button',
                                                                          {
                                                                              onClick:
                                                                                  handleUpdateComment,
                                                                              className:
                                                                                  'btn btn-primary rounded-3 rounded-start-0',
                                                                              children: 'Update'
                                                                          }
                                                                      ),
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'button',
                                                                          {
                                                                              onClick: () => {
                                                                                  setEditingCommentId(
                                                                                      null
                                                                                  )
                                                                                  setEditedComment(
                                                                                      ''
                                                                                  )
                                                                              },
                                                                              className:
                                                                                  'btn btn-secondary rounded-3 ms-2 btn-sm py-0',
                                                                              children: 'Cancel'
                                                                          }
                                                                      )
                                                                  ]
                                                              }
                                                          )
                                                        : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              jsxRuntimeExports.Fragment,
                                                              {
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'input',
                                                                          {
                                                                              type: 'text',
                                                                              className:
                                                                                  'form-control rounded-3 rounded-end-0',
                                                                              placeholder:
                                                                                  'Add a comment...',
                                                                              value: commentInput,
                                                                              onChange: (e) =>
                                                                                  setCommentInput(
                                                                                      e.target.value
                                                                                  )
                                                                          }
                                                                      ),
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'button',
                                                                          {
                                                                              onClick:
                                                                                  handleAddComment,
                                                                              className:
                                                                                  'btn btn-primary rounded-3 rounded-start-0',
                                                                              disabled: loading,
                                                                              children: loading
                                                                                  ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                        'span',
                                                                                        {
                                                                                            className:
                                                                                                'spinner-border spinner-border-sm',
                                                                                            role: 'status'
                                                                                        }
                                                                                    )
                                                                                  : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                        FaPaperPlane,
                                                                                        {}
                                                                                    )
                                                                          }
                                                                      )
                                                                  ]
                                                              }
                                                          )
                                                })
                                            ]
                                        })
                                    })
                                ]
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-footer d-flex justify-content-between',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            type: 'button',
                            className: 'btn btn-danger',
                            'data-bs-dismiss': 'modal',
                            children: 'Close'
                        })
                    })
                ]
            })
        })
    })
}
function ConfirmationModal({
    id,
    title,
    message,
    onConfirm,
    disableConfirm = false,
    confirmLabel = 'Confirm',
    confirmClass = 'btn-primary',
    cancelLabel = 'Cancel',
    cancelClass = 'btn-secondary'
}) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        tabIndex: '-1',
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title text-capitalize',
                                children: title
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal',
                                'aria-label': 'Close'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body text-center',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'p-4',
                            children: message
                        })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-footer',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: `btn text-capitalize ${cancelClass}`,
                                'data-bs-dismiss': 'modal',
                                children: cancelLabel
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: `btn text-capitalize ${confirmClass}`,
                                onClick: onConfirm,
                                'data-bs-dismiss': 'modal',
                                disabled: disableConfirm,
                                children: confirmLabel
                            })
                        ]
                    })
                ]
            })
        })
    })
}
function OpenTickets() {
    const { getData, postData, authUser } = useAPI()
    const { showToast } = useToast()
    const [selectedTickets, setSelectedTickets2] = reactExports.useState(null)
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const [confirmType, setConfirmType] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/tickets?status=open', setTickets, setLoading, setError)
    }, [])
    const handleStartButton = (ticket) => {
        setSelectedTickets2(ticket)
        setConfirmType('start')
        const modal = new bootstrap_bundle_minExports.Modal(document.getElementById('confirmModal'))
        modal.show()
    }
    const handleConfirm = () => {
        if (!selectedTickets) return
        const url = `/tickets/${selectedTickets.id}/start`
        postData(
            url,
            () => {},
            () => {},
            () => {},
            setError
        )
        getData('/tickets?status=open', setTickets, setLoading, setError)
    }
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        { header: 'Title', accessorKey: 'title' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#ticketDetailsModal',
                                        onClick: () => setSelectedTickets2(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        onClick: () => handleStartButton(row.original),
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaPlay, {}),
                                            ' Start Task'
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-4 fw-semibold text-center',
                        children: 'Open Tickets'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTicketModal,
                                    {
                                        id: 'AddTicketModal',
                                        refreshList: () =>
                                            getData(
                                                '/tickets?status=open',
                                                setTickets,
                                                setLoading,
                                                setError
                                            )
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: tickets
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTicketDetailsModal, {
                id: 'ticketDetailsModal',
                data: selectedTickets
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'confirmModal',
                title: `${confirmType} Ticket`,
                message: `Are you sure you want to ${confirmType} ticket #${selectedTickets?.ticket_number}?`,
                confirmLabel: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlay, {}), ' Start Task']
                }),
                confirmClass: 'btn-warning text-light',
                cancelLabel: 'Cancel',
                onConfirm: handleConfirm
            })
        ]
    })
}
function InProgressTickets() {
    const { postData, getData } = useAPI()
    const { showToast } = useToast()
    const [selectedTickets, setSelectedTickets2] = reactExports.useState(null)
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const [confirmType, setConfirmType] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/tickets?status=in_progress', setTickets, setLoading, setError)
    }, [])
    const handleStatusChange = (ticket, status) => {
        setSelectedTickets2(ticket)
        setConfirmType(status)
        const modal = new bootstrap_bundle_minExports.Modal(document.getElementById('confirmModal'))
        modal.show()
    }
    const handleConfirm = () => {
        if (!selectedTickets) return
        const url = `/tickets/${selectedTickets.id}/status`
        const status = confirmType
        postData(
            url,
            { status },
            () => {},
            () => {},
            setError
        )
        getData('/tickets?status=in_progress', setTickets, setLoading, setError)
    }
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        { header: 'Title', accessorKey: 'title' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#ticketDetailsModal',
                                        onClick: () => setSelectedTickets2(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        onClick: () => handleStatusChange(row.original, 'resolved'),
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                FaCheckCircle,
                                                {}
                                            ),
                                            ' Resolved'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        onClick: () => handleStatusChange(row.original, 'failed'),
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                FaTimesCircle,
                                                {}
                                            ),
                                            ' Failed'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        onClick: () => handleStatusChange(row.original, 'reopened'),
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaUndo, {}),
                                            ' Reopened'
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-4 fw-semibold text-center',
                        children: 'In Progress tickets'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTicketModal,
                                    {
                                        id: 'AddTicketModal',
                                        refreshList: () =>
                                            getData(
                                                '/tickets?status=in_progress',
                                                setTickets,
                                                setLoading,
                                                setError
                                            )
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: tickets
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTicketDetailsModal, {
                id: 'ticketDetailsModal',
                data: selectedTickets
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'confirmModal',
                title: `${confirmType} Ticket`,
                message: `Are you sure you want to ${confirmType} ticket #${selectedTickets?.ticket_number}?`,
                confirmLabel: confirmType,
                confirmClass:
                    confirmType === 'resolved'
                        ? 'btn-success text-light'
                        : confirmType === 'failed'
                          ? 'btn-danger text-light'
                          : 'btn-warning text-light',
                cancelLabel: 'Cancel',
                onConfirm: handleConfirm
            })
        ]
    })
}
function ClosedTickets() {
    const { getData } = useAPI()
    const [selectedTickets, setSelectedTickets2] = reactExports.useState(null)
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/tickets?status=closed', setTickets, setLoading, setError)
    }, [])
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        { header: 'Title', accessorKey: 'title' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                    className:
                                        'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                    'data-bs-toggle': 'modal',
                                    'data-bs-target': '#ticketDetailsModal',
                                    onClick: () => setSelectedTickets2(row.original),
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                        ' View'
                                    ]
                                })
                            })
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-4 fw-semibold text-center',
                        children: 'Closed tickets'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTicketModal,
                                    {
                                        id: 'AddTicketModal',
                                        refreshList: () =>
                                            getData(
                                                '/tickets?status=closed',
                                                setTickets,
                                                setLoading,
                                                setError
                                            )
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: tickets
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTicketDetailsModal, {
                id: 'ticketDetailsModal',
                data: selectedTickets
            })
        ]
    })
}
function FailedTickets() {
    const { getData } = useAPI()
    const [selectedTickets, setSelectedTickets2] = reactExports.useState(null)
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/tickets?status=failed', setTickets, setLoading, setError)
    }, [])
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        { header: 'Title', accessorKey: 'title' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                    className:
                                        'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                    'data-bs-toggle': 'modal',
                                    'data-bs-target': '#ticketDetailsModal',
                                    onClick: () => setSelectedTickets2(row.original),
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                        ' View'
                                    ]
                                })
                            })
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-4 fw-semibold text-center',
                        children: 'Failed tickets'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTicketModal,
                                    {
                                        id: 'AddTicketModal',
                                        refreshList: () =>
                                            getData(
                                                '/tickets?status=failed',
                                                setTickets,
                                                setLoading,
                                                setError
                                            )
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: tickets
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTicketDetailsModal, {
                id: 'ticketDetailsModal',
                data: selectedTickets
            })
        ]
    })
}
function formatDateVerbose(isoString) {
    if (!isoString) return ''
    const date2 = new Date(isoString)
    if (isNaN(date2)) return ''
    const options2 = { year: 'numeric', month: 'long', day: 'numeric' }
    return date2.toLocaleDateString(void 0, options2)
}
function AllTickets() {
    const { getData, authUser } = useAPI()
    const [selectedTickets, setSelectedTickets2] = reactExports.useState(null)
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData(`/tickets`, setTickets, setLoading, setError)
    }, [])
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        {
            header: 'Title',
            accessorKey: 'title',
            cell: ({ row }) => row.original.title || 'N/A'
        },
        {
            header: 'Updated At',
            accessorKey: 'updated_at',
            cell: ({ row }) => formatDateVerbose(row.original.updated_at)
        },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                    className:
                                        'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                    'data-bs-toggle': 'modal',
                                    'data-bs-target': '#ticketDetailsModal',
                                    onClick: () => setSelectedTickets2(row.original),
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {
                                            className: 'me-1'
                                        }),
                                        ' View'
                                    ]
                                })
                            })
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-4 fw-semibold text-center',
                        children: 'All Tickets'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTicketModal,
                                    {
                                        id: 'AddTicketModal',
                                        refreshList: () =>
                                            getData(`/tickets`, setTickets, setLoading, setError)
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: tickets
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTicketDetailsModal, {
                id: 'ticketDetailsModal',
                data: selectedTickets
            })
        ]
    })
}
function ResolvedTickets() {
    const { postData, getData } = useAPI()
    const { showToast } = useToast()
    const [selectedTickets, setSelectedTickets2] = reactExports.useState(null)
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const [confirmType, setConfirmType] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/tickets?status=resolved', setTickets, setLoading, setError)
    }, [])
    const handleStatusChange = (ticket, status) => {
        setSelectedTickets2(ticket)
        setConfirmType(status)
        const modal = new bootstrap_bundle_minExports.Modal(document.getElementById('confirmModal'))
        modal.show()
    }
    const handleConfirm = () => {
        if (!selectedTickets) return
        const url = `/tickets/${selectedTickets.id}/verify`
        const status = confirmType
        postData(
            url,
            { status },
            () => {},
            () => {},
            setError
        )
        getData('/tickets?status=in_progress', setTickets, setLoading, setError)
    }
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        { header: 'Title', accessorKey: 'title' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#ticketDetailsModal',
                                        onClick: () => setSelectedTickets2(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {
                                                className: 'me-1'
                                            }),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        onClick: () => handleStatusChange(row.original, 'closed'),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaCheckCircle, {
                                                className: 'me-1'
                                            }),
                                            ' Closed'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        onClick: () => handleStatusChange(row.original, 'failed'),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaTimesCircle, {
                                                className: 'me-1'
                                            }),
                                            ' Failed'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        onClick: () => handleStatusChange(row.original, 'reopened'),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaUndo, {
                                                className: 'me-1'
                                            }),
                                            ' Reopened'
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-4 fw-semibold text-center',
                        children: 'Resolved Tickets'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTicketModal,
                                    {
                                        id: 'AddTicketModal',
                                        refreshList: () =>
                                            getData(
                                                '/tickets?status=resolved',
                                                setTickets,
                                                setLoading,
                                                setError
                                            )
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: tickets
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTicketDetailsModal, {
                id: 'ticketDetailsModal',
                data: selectedTickets
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'confirmModal',
                title: `${confirmType} Ticket`,
                message: `Are you sure you want to ${confirmType} ticket #${selectedTickets?.ticket_number}?`,
                confirmLabel: confirmType,
                confirmClass:
                    confirmType === 'resolved'
                        ? 'btn-success text-light'
                        : confirmType === 'failed'
                          ? 'btn-danger text-light'
                          : 'btn-warning text-light',
                cancelLabel: 'Cancel',
                onConfirm: handleConfirm
            })
        ]
    })
}
function PendingTickets() {
    const { getData, postData } = useAPI()
    const { showToast } = useToast()
    const [selectedTickets, setSelectedTickets2] = reactExports.useState(null)
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const [confirmType, setConfirmType] = reactExports.useState('')
    const [remarks, setRemarks] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/tickets?status=pending', setTickets, setLoading, setError)
    }, [])
    const handleApproveButton = (ticket) => {
        setSelectedTickets2(ticket)
        setConfirmType('approve')
        const modal = new bootstrap_bundle_minExports.Modal(document.getElementById('confirmModal'))
        modal.show()
    }
    const handleRejectButton = (ticket) => {
        setSelectedTickets2(ticket)
        setConfirmType('reject')
        const modal = new bootstrap_bundle_minExports.Modal(document.getElementById('confirmModal'))
        modal.show()
    }
    const handleConfirm = () => {
        if (!selectedTickets) return
        const url =
            confirmType === 'approve'
                ? `/tickets/${selectedTickets.id}/approve`
                : `/tickets/${selectedTickets.id}/reject`
        const payload = confirmType === 'approve' ? () => {} : { remarks }
        postData(
            url,
            payload,
            () => {
                setRemarks('')
                setSelectedTickets2(null)
                getData('/tickets?status=pending', setTickets, setLoading, setError)
            },
            () => {},
            setError
        )
    }
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        { header: 'Title', accessorKey: 'title' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        onClick: () => handleApproveButton(row.original),
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaCheck, {}),
                                            ' Approve'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        onClick: () => handleRejectButton(row.original),
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaTimes, {}),
                                            ' Reject'
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-4 fw-semibold text-center',
                        children: 'Pending Tickets'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTicketModal,
                                    {
                                        id: 'AddTicketModal',
                                        refreshList: () =>
                                            getData(
                                                '/tickets?status=pending',
                                                setTickets,
                                                setLoading,
                                                setError
                                            )
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: tickets
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTicketDetailsModal, {
                id: 'ticketDetailsModal',
                data: selectedTickets
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'confirmModal',
                title: `${confirmType} Ticket`,
                message: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'mb-4',
                            children: `Are you sure you want to ${confirmType} ticket #${selectedTickets?.ticket_number}?`
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'mb-3 text-start',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                    htmlFor: 'remarks',
                                    className: 'form-label',
                                    children: 'Remarks'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                    className: 'form-control mb-1',
                                    id: 'remarks',
                                    rows: '5',
                                    value: remarks,
                                    onChange: (e) => setRemarks(e.target.value)
                                }),
                                !remarks.trim() &&
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                        className: 'small text-center text-danger',
                                        children: 'Remarks are required.'
                                    })
                            ]
                        })
                    ]
                }),
                confirmLabel: confirmType,
                confirmClass:
                    confirmType === 'approve' ? 'btn-success text-light' : 'btn-danger text-light',
                cancelLabel: 'Cancel',
                onConfirm: handleConfirm,
                disableConfirm: !remarks.trim()
            })
        ]
    })
}
function RejectedTickets() {
    const { getData } = useAPI()
    const [selectedTickets, setSelectedTickets2] = reactExports.useState(null)
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/tickets?status=rejected', setTickets, setLoading, setError)
    }, [])
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        { header: 'Title', accessorKey: 'title' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#ticketDetailsModal',
                                        onClick: () => setSelectedTickets2(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                FaRegStickyNote,
                                                {}
                                            ),
                                            ' Remarks'
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-4 fw-semibold text-center',
                        children: 'Rejected Tickets'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTicketModal,
                                    {
                                        id: 'AddTicketModal',
                                        refreshList: () =>
                                            getData(
                                                '/tickets?status=rejected',
                                                setTickets,
                                                setLoading,
                                                setError
                                            )
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: tickets
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTicketDetailsModal, {
                id: 'ticketDetailsModal',
                data: selectedTickets
            })
        ]
    })
}
function Placeholder$2({ height = '300px' }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'placeholder-glow w-100',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'placeholder col-12',
            style: { height }
        })
    })
}
function StatisticsCard({
    title,
    value,
    delta,
    iconClass,
    unit: unit2 = '',
    isTime = false,
    reverseDelta = false,
    loading = false,
    col = 4,
    redirectTo = ''
}) {
    const navigate = useNavigate()
    const isZero = value === null || value === void 0 || value === 0
    const trend = delta === 0 ? 'secondary' : delta > 0 ? 'success' : 'danger'
    const trendReverse = delta === 0 ? 'secondary' : delta > 0 ? 'danger' : 'success'
    let displayValue = value
    let displayDelta = delta
    const formatMinutesVerbose2 = (minutes, large = true) => {
        if (minutes === null || minutes === void 0 || minutes === 0) return 0
        minutes = Math.abs(minutes)
        let seconds = 0
        if (minutes < 1) {
            seconds = Math.round(minutes * 60)
        }
        const totalMinutes = minutes >= 1 ? Math.round(minutes) : 0
        const hours = Math.floor(totalMinutes / 60)
        const remainingMinutes = totalMinutes % 60
        const parts = []
        if (hours > 0) {
            parts.push(
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    'div',
                    {
                        className: `${large ? 'display-5' : 'fs-6'} fw-bold me-2`,
                        children: [
                            hours,
                            ' ',
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                className: 'fs-6',
                                children: ['hr', hours > 1 ? 's' : '']
                            })
                        ]
                    },
                    'hours'
                )
            )
        }
        if (remainingMinutes > 0 || (hours === 0 && seconds === 0)) {
            parts.push(
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    'div',
                    {
                        className: `${large && hours === 0 ? 'display-5' : 'fs-6'} fw-bold`,
                        children: [
                            remainingMinutes,
                            ' ',
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                className: 'fs-6',
                                children: ['min', remainingMinutes !== 1 ? 's' : '']
                            })
                        ]
                    },
                    'minutes'
                )
            )
        }
        if (seconds > 0) {
            parts.push(
                /* @__PURE__ */ jsxRuntimeExports.jsxs(
                    'div',
                    {
                        className: `${large && hours === 0 ? 'display-5' : 'fs-6'} fw-bold`,
                        children: [
                            seconds,
                            ' ',
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                className: 'fs-6',
                                children: ['sec', seconds !== 1 ? 's' : '']
                            })
                        ]
                    },
                    'seconds'
                )
            )
        }
        return parts
    }
    if (isTime) {
        displayValue =
            value !== null && value !== void 0 && value !== 0
                ? formatMinutesVerbose2(value, true)
                : '-'
        displayDelta =
            delta !== null && delta !== void 0 && delta !== 0
                ? formatMinutesVerbose2(delta, false)
                : '-'
    } else {
        displayValue = Math.abs(displayValue)
        displayDelta = Math.abs(displayDelta)
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: `col-xl-${col} h-50 p-3`,
        onClick: () => redirectTo && navigate(redirectTo),
        role: 'button',
        style: { cursor: redirectTo ? 'pointer' : 'default' },
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'card h-100 rounded-4 shadow text-center mb-3',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-header text-uppercase fw-semibold',
                    children: title
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className:
                        'card-body d-flex flex-column align-items-center justify-content-center',
                    children: loading
                        ? /* @__PURE__ */ jsxRuntimeExports.jsx(Placeholder$2, { height: '80px' })
                        : /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                              className: 'card-text display-4 m-0 fw-bold',
                              children: [
                                  isZero && !isTime ? '-' : displayValue,
                                  unit2 &&
                                      !isZero &&
                                      !isTime &&
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                          className: 'fs-6',
                                          children: unit2
                                      })
                              ]
                          })
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-footer border mb-0',
                    children: loading
                        ? /* @__PURE__ */ jsxRuntimeExports.jsx(Placeholder$2, { height: '30px' })
                        : /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                              className: 'd-flex flex-column',
                              children: [
                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                      className: `fs-6 fw-bold text-${reverseDelta ? trendReverse : trend} d-flex align-items-center justify-content-center`,
                                      children:
                                          delta !== null && delta !== void 0 && delta !== 0
                                              ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                    jsxRuntimeExports.Fragment,
                                                    {
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className: `bi ${(reverseDelta ? trendReverse === 'danger' : trend === 'success') ? 'bi-arrow-up-short' : 'bi-arrow-down-short'}`
                                                                }
                                                            ),
                                                            displayDelta,
                                                            unit2 &&
                                                                !isTime &&
                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                    'span',
                                                                    {
                                                                        className: 'fs-6',
                                                                        children: unit2
                                                                    }
                                                                ),
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className: `bi ${iconClass} ms-2`
                                                                }
                                                            )
                                                        ]
                                                    }
                                                )
                                              : '-'
                                  }),
                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                      style: { fontSize: '0.8rem' },
                                      className: 'text-muted',
                                      children: 'vs previous 30 days'
                                  })
                              ]
                          })
                })
            ]
        })
    })
}
function r(e) {
    var t,
        f,
        n = ''
    if ('string' == typeof e || 'number' == typeof e) n += e
    else if ('object' == typeof e)
        if (Array.isArray(e)) {
            var o = e.length
            for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += ' '), (n += f))
        } else for (f in e) e[f] && (n && (n += ' '), (n += f))
    return n
}
function clsx() {
    for (var e, t, f = 0, n = '', o = arguments.length; f < o; f++)
        (e = arguments[f]) && (t = r(e)) && (n && (n += ' '), (n += t))
    return n
}
var isArray_1
var hasRequiredIsArray
function requireIsArray() {
    if (hasRequiredIsArray) return isArray_1
    hasRequiredIsArray = 1
    var isArray2 = Array.isArray
    isArray_1 = isArray2
    return isArray_1
}
var _freeGlobal
var hasRequired_freeGlobal
function require_freeGlobal() {
    if (hasRequired_freeGlobal) return _freeGlobal
    hasRequired_freeGlobal = 1
    var freeGlobal =
        typeof commonjsGlobal == 'object' &&
        commonjsGlobal &&
        commonjsGlobal.Object === Object &&
        commonjsGlobal
    _freeGlobal = freeGlobal
    return _freeGlobal
}
var _root
var hasRequired_root
function require_root() {
    if (hasRequired_root) return _root
    hasRequired_root = 1
    var freeGlobal = require_freeGlobal()
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self
    var root = freeGlobal || freeSelf || Function('return this')()
    _root = root
    return _root
}
var _Symbol
var hasRequired_Symbol
function require_Symbol() {
    if (hasRequired_Symbol) return _Symbol
    hasRequired_Symbol = 1
    var root = require_root()
    var Symbol2 = root.Symbol
    _Symbol = Symbol2
    return _Symbol
}
var _getRawTag
var hasRequired_getRawTag
function require_getRawTag() {
    if (hasRequired_getRawTag) return _getRawTag
    hasRequired_getRawTag = 1
    var Symbol2 = require_Symbol()
    var objectProto = Object.prototype
    var hasOwnProperty2 = objectProto.hasOwnProperty
    var nativeObjectToString = objectProto.toString
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0
    function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag),
            tag = value[symToStringTag]
        try {
            value[symToStringTag] = void 0
            var unmasked = true
        } catch (e) {}
        var result = nativeObjectToString.call(value)
        if (unmasked) {
            if (isOwn) {
                value[symToStringTag] = tag
            } else {
                delete value[symToStringTag]
            }
        }
        return result
    }
    _getRawTag = getRawTag
    return _getRawTag
}
var _objectToString
var hasRequired_objectToString
function require_objectToString() {
    if (hasRequired_objectToString) return _objectToString
    hasRequired_objectToString = 1
    var objectProto = Object.prototype
    var nativeObjectToString = objectProto.toString
    function objectToString(value) {
        return nativeObjectToString.call(value)
    }
    _objectToString = objectToString
    return _objectToString
}
var _baseGetTag
var hasRequired_baseGetTag
function require_baseGetTag() {
    if (hasRequired_baseGetTag) return _baseGetTag
    hasRequired_baseGetTag = 1
    var Symbol2 = require_Symbol(),
        getRawTag = require_getRawTag(),
        objectToString = require_objectToString()
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]'
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0
    function baseGetTag(value) {
        if (value == null) {
            return value === void 0 ? undefinedTag : nullTag
        }
        return symToStringTag && symToStringTag in Object(value)
            ? getRawTag(value)
            : objectToString(value)
    }
    _baseGetTag = baseGetTag
    return _baseGetTag
}
var isObjectLike_1
var hasRequiredIsObjectLike
function requireIsObjectLike() {
    if (hasRequiredIsObjectLike) return isObjectLike_1
    hasRequiredIsObjectLike = 1
    function isObjectLike(value) {
        return value != null && typeof value == 'object'
    }
    isObjectLike_1 = isObjectLike
    return isObjectLike_1
}
var isSymbol_1
var hasRequiredIsSymbol
function requireIsSymbol() {
    if (hasRequiredIsSymbol) return isSymbol_1
    hasRequiredIsSymbol = 1
    var baseGetTag = require_baseGetTag(),
        isObjectLike = requireIsObjectLike()
    var symbolTag = '[object Symbol]'
    function isSymbol(value) {
        return typeof value == 'symbol' || (isObjectLike(value) && baseGetTag(value) == symbolTag)
    }
    isSymbol_1 = isSymbol
    return isSymbol_1
}
var _isKey
var hasRequired_isKey
function require_isKey() {
    if (hasRequired_isKey) return _isKey
    hasRequired_isKey = 1
    var isArray2 = requireIsArray(),
        isSymbol = requireIsSymbol()
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/
    function isKey(value, object2) {
        if (isArray2(value)) {
            return false
        }
        var type = typeof value
        if (
            type == 'number' ||
            type == 'symbol' ||
            type == 'boolean' ||
            value == null ||
            isSymbol(value)
        ) {
            return true
        }
        return (
            reIsPlainProp.test(value) ||
            !reIsDeepProp.test(value) ||
            (object2 != null && value in Object(object2))
        )
    }
    _isKey = isKey
    return _isKey
}
var isObject_1
var hasRequiredIsObject
function requireIsObject() {
    if (hasRequiredIsObject) return isObject_1
    hasRequiredIsObject = 1
    function isObject2(value) {
        var type = typeof value
        return value != null && (type == 'object' || type == 'function')
    }
    isObject_1 = isObject2
    return isObject_1
}
var isFunction_1
var hasRequiredIsFunction
function requireIsFunction() {
    if (hasRequiredIsFunction) return isFunction_1
    hasRequiredIsFunction = 1
    var baseGetTag = require_baseGetTag(),
        isObject2 = requireIsObject()
    var asyncTag = '[object AsyncFunction]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]'
    function isFunction2(value) {
        if (!isObject2(value)) {
            return false
        }
        var tag = baseGetTag(value)
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag
    }
    isFunction_1 = isFunction2
    return isFunction_1
}
var _coreJsData
var hasRequired_coreJsData
function require_coreJsData() {
    if (hasRequired_coreJsData) return _coreJsData
    hasRequired_coreJsData = 1
    var root = require_root()
    var coreJsData = root['__core-js_shared__']
    _coreJsData = coreJsData
    return _coreJsData
}
var _isMasked
var hasRequired_isMasked
function require_isMasked() {
    if (hasRequired_isMasked) return _isMasked
    hasRequired_isMasked = 1
    var coreJsData = require_coreJsData()
    var maskSrcKey = (function () {
        var uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || '')
        return uid ? 'Symbol(src)_1.' + uid : ''
    })()
    function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func
    }
    _isMasked = isMasked
    return _isMasked
}
var _toSource
var hasRequired_toSource
function require_toSource() {
    if (hasRequired_toSource) return _toSource
    hasRequired_toSource = 1
    var funcProto = Function.prototype
    var funcToString = funcProto.toString
    function toSource(func) {
        if (func != null) {
            try {
                return funcToString.call(func)
            } catch (e) {}
            try {
                return func + ''
            } catch (e) {}
        }
        return ''
    }
    _toSource = toSource
    return _toSource
}
var _baseIsNative
var hasRequired_baseIsNative
function require_baseIsNative() {
    if (hasRequired_baseIsNative) return _baseIsNative
    hasRequired_baseIsNative = 1
    var isFunction2 = requireIsFunction(),
        isMasked = require_isMasked(),
        isObject2 = requireIsObject(),
        toSource = require_toSource()
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g
    var reIsHostCtor = /^\[object .+?Constructor\]$/
    var funcProto = Function.prototype,
        objectProto = Object.prototype
    var funcToString = funcProto.toString
    var hasOwnProperty2 = objectProto.hasOwnProperty
    var reIsNative = RegExp(
        '^' +
            funcToString
                .call(hasOwnProperty2)
                .replace(reRegExpChar, '\\$&')
                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
            '$'
    )
    function baseIsNative(value) {
        if (!isObject2(value) || isMasked(value)) {
            return false
        }
        var pattern = isFunction2(value) ? reIsNative : reIsHostCtor
        return pattern.test(toSource(value))
    }
    _baseIsNative = baseIsNative
    return _baseIsNative
}
var _getValue
var hasRequired_getValue
function require_getValue() {
    if (hasRequired_getValue) return _getValue
    hasRequired_getValue = 1
    function getValue(object2, key) {
        return object2 == null ? void 0 : object2[key]
    }
    _getValue = getValue
    return _getValue
}
var _getNative
var hasRequired_getNative
function require_getNative() {
    if (hasRequired_getNative) return _getNative
    hasRequired_getNative = 1
    var baseIsNative = require_baseIsNative(),
        getValue = require_getValue()
    function getNative(object2, key) {
        var value = getValue(object2, key)
        return baseIsNative(value) ? value : void 0
    }
    _getNative = getNative
    return _getNative
}
var _nativeCreate
var hasRequired_nativeCreate
function require_nativeCreate() {
    if (hasRequired_nativeCreate) return _nativeCreate
    hasRequired_nativeCreate = 1
    var getNative = require_getNative()
    var nativeCreate = getNative(Object, 'create')
    _nativeCreate = nativeCreate
    return _nativeCreate
}
var _hashClear
var hasRequired_hashClear
function require_hashClear() {
    if (hasRequired_hashClear) return _hashClear
    hasRequired_hashClear = 1
    var nativeCreate = require_nativeCreate()
    function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {}
        this.size = 0
    }
    _hashClear = hashClear
    return _hashClear
}
var _hashDelete
var hasRequired_hashDelete
function require_hashDelete() {
    if (hasRequired_hashDelete) return _hashDelete
    hasRequired_hashDelete = 1
    function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key]
        this.size -= result ? 1 : 0
        return result
    }
    _hashDelete = hashDelete
    return _hashDelete
}
var _hashGet
var hasRequired_hashGet
function require_hashGet() {
    if (hasRequired_hashGet) return _hashGet
    hasRequired_hashGet = 1
    var nativeCreate = require_nativeCreate()
    var HASH_UNDEFINED = '__lodash_hash_undefined__'
    var objectProto = Object.prototype
    var hasOwnProperty2 = objectProto.hasOwnProperty
    function hashGet(key) {
        var data = this.__data__
        if (nativeCreate) {
            var result = data[key]
            return result === HASH_UNDEFINED ? void 0 : result
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0
    }
    _hashGet = hashGet
    return _hashGet
}
var _hashHas
var hasRequired_hashHas
function require_hashHas() {
    if (hasRequired_hashHas) return _hashHas
    hasRequired_hashHas = 1
    var nativeCreate = require_nativeCreate()
    var objectProto = Object.prototype
    var hasOwnProperty2 = objectProto.hasOwnProperty
    function hashHas(key) {
        var data = this.__data__
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key)
    }
    _hashHas = hashHas
    return _hashHas
}
var _hashSet
var hasRequired_hashSet
function require_hashSet() {
    if (hasRequired_hashSet) return _hashSet
    hasRequired_hashSet = 1
    var nativeCreate = require_nativeCreate()
    var HASH_UNDEFINED = '__lodash_hash_undefined__'
    function hashSet(key, value) {
        var data = this.__data__
        this.size += this.has(key) ? 0 : 1
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value
        return this
    }
    _hashSet = hashSet
    return _hashSet
}
var _Hash
var hasRequired_Hash
function require_Hash() {
    if (hasRequired_Hash) return _Hash
    hasRequired_Hash = 1
    var hashClear = require_hashClear(),
        hashDelete = require_hashDelete(),
        hashGet = require_hashGet(),
        hashHas = require_hashHas(),
        hashSet = require_hashSet()
    function Hash(entries) {
        var index2 = -1,
            length2 = entries == null ? 0 : entries.length
        this.clear()
        while (++index2 < length2) {
            var entry = entries[index2]
            this.set(entry[0], entry[1])
        }
    }
    Hash.prototype.clear = hashClear
    Hash.prototype['delete'] = hashDelete
    Hash.prototype.get = hashGet
    Hash.prototype.has = hashHas
    Hash.prototype.set = hashSet
    _Hash = Hash
    return _Hash
}
var _listCacheClear
var hasRequired_listCacheClear
function require_listCacheClear() {
    if (hasRequired_listCacheClear) return _listCacheClear
    hasRequired_listCacheClear = 1
    function listCacheClear() {
        this.__data__ = []
        this.size = 0
    }
    _listCacheClear = listCacheClear
    return _listCacheClear
}
var eq_1
var hasRequiredEq
function requireEq() {
    if (hasRequiredEq) return eq_1
    hasRequiredEq = 1
    function eq(value, other) {
        return value === other || (value !== value && other !== other)
    }
    eq_1 = eq
    return eq_1
}
var _assocIndexOf
var hasRequired_assocIndexOf
function require_assocIndexOf() {
    if (hasRequired_assocIndexOf) return _assocIndexOf
    hasRequired_assocIndexOf = 1
    var eq = requireEq()
    function assocIndexOf(array2, key) {
        var length2 = array2.length
        while (length2--) {
            if (eq(array2[length2][0], key)) {
                return length2
            }
        }
        return -1
    }
    _assocIndexOf = assocIndexOf
    return _assocIndexOf
}
var _listCacheDelete
var hasRequired_listCacheDelete
function require_listCacheDelete() {
    if (hasRequired_listCacheDelete) return _listCacheDelete
    hasRequired_listCacheDelete = 1
    var assocIndexOf = require_assocIndexOf()
    var arrayProto = Array.prototype
    var splice = arrayProto.splice
    function listCacheDelete(key) {
        var data = this.__data__,
            index2 = assocIndexOf(data, key)
        if (index2 < 0) {
            return false
        }
        var lastIndex = data.length - 1
        if (index2 == lastIndex) {
            data.pop()
        } else {
            splice.call(data, index2, 1)
        }
        --this.size
        return true
    }
    _listCacheDelete = listCacheDelete
    return _listCacheDelete
}
var _listCacheGet
var hasRequired_listCacheGet
function require_listCacheGet() {
    if (hasRequired_listCacheGet) return _listCacheGet
    hasRequired_listCacheGet = 1
    var assocIndexOf = require_assocIndexOf()
    function listCacheGet(key) {
        var data = this.__data__,
            index2 = assocIndexOf(data, key)
        return index2 < 0 ? void 0 : data[index2][1]
    }
    _listCacheGet = listCacheGet
    return _listCacheGet
}
var _listCacheHas
var hasRequired_listCacheHas
function require_listCacheHas() {
    if (hasRequired_listCacheHas) return _listCacheHas
    hasRequired_listCacheHas = 1
    var assocIndexOf = require_assocIndexOf()
    function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1
    }
    _listCacheHas = listCacheHas
    return _listCacheHas
}
var _listCacheSet
var hasRequired_listCacheSet
function require_listCacheSet() {
    if (hasRequired_listCacheSet) return _listCacheSet
    hasRequired_listCacheSet = 1
    var assocIndexOf = require_assocIndexOf()
    function listCacheSet(key, value) {
        var data = this.__data__,
            index2 = assocIndexOf(data, key)
        if (index2 < 0) {
            ++this.size
            data.push([key, value])
        } else {
            data[index2][1] = value
        }
        return this
    }
    _listCacheSet = listCacheSet
    return _listCacheSet
}
var _ListCache
var hasRequired_ListCache
function require_ListCache() {
    if (hasRequired_ListCache) return _ListCache
    hasRequired_ListCache = 1
    var listCacheClear = require_listCacheClear(),
        listCacheDelete = require_listCacheDelete(),
        listCacheGet = require_listCacheGet(),
        listCacheHas = require_listCacheHas(),
        listCacheSet = require_listCacheSet()
    function ListCache(entries) {
        var index2 = -1,
            length2 = entries == null ? 0 : entries.length
        this.clear()
        while (++index2 < length2) {
            var entry = entries[index2]
            this.set(entry[0], entry[1])
        }
    }
    ListCache.prototype.clear = listCacheClear
    ListCache.prototype['delete'] = listCacheDelete
    ListCache.prototype.get = listCacheGet
    ListCache.prototype.has = listCacheHas
    ListCache.prototype.set = listCacheSet
    _ListCache = ListCache
    return _ListCache
}
var _Map
var hasRequired_Map
function require_Map() {
    if (hasRequired_Map) return _Map
    hasRequired_Map = 1
    var getNative = require_getNative(),
        root = require_root()
    var Map2 = getNative(root, 'Map')
    _Map = Map2
    return _Map
}
var _mapCacheClear
var hasRequired_mapCacheClear
function require_mapCacheClear() {
    if (hasRequired_mapCacheClear) return _mapCacheClear
    hasRequired_mapCacheClear = 1
    var Hash = require_Hash(),
        ListCache = require_ListCache(),
        Map2 = require_Map()
    function mapCacheClear() {
        this.size = 0
        this.__data__ = {
            hash: new Hash(),
            map: new (Map2 || ListCache)(),
            string: new Hash()
        }
    }
    _mapCacheClear = mapCacheClear
    return _mapCacheClear
}
var _isKeyable
var hasRequired_isKeyable
function require_isKeyable() {
    if (hasRequired_isKeyable) return _isKeyable
    hasRequired_isKeyable = 1
    function isKeyable(value) {
        var type = typeof value
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean'
            ? value !== '__proto__'
            : value === null
    }
    _isKeyable = isKeyable
    return _isKeyable
}
var _getMapData
var hasRequired_getMapData
function require_getMapData() {
    if (hasRequired_getMapData) return _getMapData
    hasRequired_getMapData = 1
    var isKeyable = require_isKeyable()
    function getMapData(map2, key) {
        var data = map2.__data__
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map
    }
    _getMapData = getMapData
    return _getMapData
}
var _mapCacheDelete
var hasRequired_mapCacheDelete
function require_mapCacheDelete() {
    if (hasRequired_mapCacheDelete) return _mapCacheDelete
    hasRequired_mapCacheDelete = 1
    var getMapData = require_getMapData()
    function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key)
        this.size -= result ? 1 : 0
        return result
    }
    _mapCacheDelete = mapCacheDelete
    return _mapCacheDelete
}
var _mapCacheGet
var hasRequired_mapCacheGet
function require_mapCacheGet() {
    if (hasRequired_mapCacheGet) return _mapCacheGet
    hasRequired_mapCacheGet = 1
    var getMapData = require_getMapData()
    function mapCacheGet(key) {
        return getMapData(this, key).get(key)
    }
    _mapCacheGet = mapCacheGet
    return _mapCacheGet
}
var _mapCacheHas
var hasRequired_mapCacheHas
function require_mapCacheHas() {
    if (hasRequired_mapCacheHas) return _mapCacheHas
    hasRequired_mapCacheHas = 1
    var getMapData = require_getMapData()
    function mapCacheHas(key) {
        return getMapData(this, key).has(key)
    }
    _mapCacheHas = mapCacheHas
    return _mapCacheHas
}
var _mapCacheSet
var hasRequired_mapCacheSet
function require_mapCacheSet() {
    if (hasRequired_mapCacheSet) return _mapCacheSet
    hasRequired_mapCacheSet = 1
    var getMapData = require_getMapData()
    function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size
        data.set(key, value)
        this.size += data.size == size ? 0 : 1
        return this
    }
    _mapCacheSet = mapCacheSet
    return _mapCacheSet
}
var _MapCache
var hasRequired_MapCache
function require_MapCache() {
    if (hasRequired_MapCache) return _MapCache
    hasRequired_MapCache = 1
    var mapCacheClear = require_mapCacheClear(),
        mapCacheDelete = require_mapCacheDelete(),
        mapCacheGet = require_mapCacheGet(),
        mapCacheHas = require_mapCacheHas(),
        mapCacheSet = require_mapCacheSet()
    function MapCache(entries) {
        var index2 = -1,
            length2 = entries == null ? 0 : entries.length
        this.clear()
        while (++index2 < length2) {
            var entry = entries[index2]
            this.set(entry[0], entry[1])
        }
    }
    MapCache.prototype.clear = mapCacheClear
    MapCache.prototype['delete'] = mapCacheDelete
    MapCache.prototype.get = mapCacheGet
    MapCache.prototype.has = mapCacheHas
    MapCache.prototype.set = mapCacheSet
    _MapCache = MapCache
    return _MapCache
}
var memoize_1
var hasRequiredMemoize
function requireMemoize() {
    if (hasRequiredMemoize) return memoize_1
    hasRequiredMemoize = 1
    var MapCache = require_MapCache()
    var FUNC_ERROR_TEXT = 'Expected a function'
    function memoize3(func, resolver) {
        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
            throw new TypeError(FUNC_ERROR_TEXT)
        }
        var memoized = function () {
            var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache
            if (cache.has(key)) {
                return cache.get(key)
            }
            var result = func.apply(this, args)
            memoized.cache = cache.set(key, result) || cache
            return result
        }
        memoized.cache = new (memoize3.Cache || MapCache)()
        return memoized
    }
    memoize3.Cache = MapCache
    memoize_1 = memoize3
    return memoize_1
}
var _memoizeCapped
var hasRequired_memoizeCapped
function require_memoizeCapped() {
    if (hasRequired_memoizeCapped) return _memoizeCapped
    hasRequired_memoizeCapped = 1
    var memoize3 = requireMemoize()
    var MAX_MEMOIZE_SIZE = 500
    function memoizeCapped(func) {
        var result = memoize3(func, function (key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear()
            }
            return key
        })
        var cache = result.cache
        return result
    }
    _memoizeCapped = memoizeCapped
    return _memoizeCapped
}
var _stringToPath
var hasRequired_stringToPath
function require_stringToPath() {
    if (hasRequired_stringToPath) return _stringToPath
    hasRequired_stringToPath = 1
    var memoizeCapped = require_memoizeCapped()
    var rePropName =
        /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g
    var reEscapeChar = /\\(\\)?/g
    var stringToPath = memoizeCapped(function (string2) {
        var result = []
        if (string2.charCodeAt(0) === 46) {
            result.push('')
        }
        string2.replace(rePropName, function (match2, number2, quote, subString) {
            result.push(quote ? subString.replace(reEscapeChar, '$1') : number2 || match2)
        })
        return result
    })
    _stringToPath = stringToPath
    return _stringToPath
}
var _arrayMap
var hasRequired_arrayMap
function require_arrayMap() {
    if (hasRequired_arrayMap) return _arrayMap
    hasRequired_arrayMap = 1
    function arrayMap(array2, iteratee) {
        var index2 = -1,
            length2 = array2 == null ? 0 : array2.length,
            result = Array(length2)
        while (++index2 < length2) {
            result[index2] = iteratee(array2[index2], index2, array2)
        }
        return result
    }
    _arrayMap = arrayMap
    return _arrayMap
}
var _baseToString
var hasRequired_baseToString
function require_baseToString() {
    if (hasRequired_baseToString) return _baseToString
    hasRequired_baseToString = 1
    var Symbol2 = require_Symbol(),
        arrayMap = require_arrayMap(),
        isArray2 = requireIsArray(),
        isSymbol = requireIsSymbol()
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0,
        symbolToString = symbolProto ? symbolProto.toString : void 0
    function baseToString(value) {
        if (typeof value == 'string') {
            return value
        }
        if (isArray2(value)) {
            return arrayMap(value, baseToString) + ''
        }
        if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : ''
        }
        var result = value + ''
        return result == '0' && 1 / value == -Infinity ? '-0' : result
    }
    _baseToString = baseToString
    return _baseToString
}
var toString_1
var hasRequiredToString
function requireToString() {
    if (hasRequiredToString) return toString_1
    hasRequiredToString = 1
    var baseToString = require_baseToString()
    function toString3(value) {
        return value == null ? '' : baseToString(value)
    }
    toString_1 = toString3
    return toString_1
}
var _castPath
var hasRequired_castPath
function require_castPath() {
    if (hasRequired_castPath) return _castPath
    hasRequired_castPath = 1
    var isArray2 = requireIsArray(),
        isKey = require_isKey(),
        stringToPath = require_stringToPath(),
        toString3 = requireToString()
    function castPath(value, object2) {
        if (isArray2(value)) {
            return value
        }
        return isKey(value, object2) ? [value] : stringToPath(toString3(value))
    }
    _castPath = castPath
    return _castPath
}
var _toKey
var hasRequired_toKey
function require_toKey() {
    if (hasRequired_toKey) return _toKey
    hasRequired_toKey = 1
    var isSymbol = requireIsSymbol()
    function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
            return value
        }
        var result = value + ''
        return result == '0' && 1 / value == -Infinity ? '-0' : result
    }
    _toKey = toKey
    return _toKey
}
var _baseGet
var hasRequired_baseGet
function require_baseGet() {
    if (hasRequired_baseGet) return _baseGet
    hasRequired_baseGet = 1
    var castPath = require_castPath(),
        toKey = require_toKey()
    function baseGet(object2, path) {
        path = castPath(path, object2)
        var index2 = 0,
            length2 = path.length
        while (object2 != null && index2 < length2) {
            object2 = object2[toKey(path[index2++])]
        }
        return index2 && index2 == length2 ? object2 : void 0
    }
    _baseGet = baseGet
    return _baseGet
}
var get_1
var hasRequiredGet
function requireGet() {
    if (hasRequiredGet) return get_1
    hasRequiredGet = 1
    var baseGet = require_baseGet()
    function get2(object2, path, defaultValue) {
        var result = object2 == null ? void 0 : baseGet(object2, path)
        return result === void 0 ? defaultValue : result
    }
    get_1 = get2
    return get_1
}
var getExports = requireGet()
const get = /* @__PURE__ */ getDefaultExportFromCjs(getExports)
var isNil_1
var hasRequiredIsNil
function requireIsNil() {
    if (hasRequiredIsNil) return isNil_1
    hasRequiredIsNil = 1
    function isNil2(value) {
        return value == null
    }
    isNil_1 = isNil2
    return isNil_1
}
var isNilExports = requireIsNil()
const isNil = /* @__PURE__ */ getDefaultExportFromCjs(isNilExports)
var isString_1
var hasRequiredIsString
function requireIsString() {
    if (hasRequiredIsString) return isString_1
    hasRequiredIsString = 1
    var baseGetTag = require_baseGetTag(),
        isArray2 = requireIsArray(),
        isObjectLike = requireIsObjectLike()
    var stringTag = '[object String]'
    function isString2(value) {
        return (
            typeof value == 'string' ||
            (!isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag)
        )
    }
    isString_1 = isString2
    return isString_1
}
var isStringExports = requireIsString()
const isString = /* @__PURE__ */ getDefaultExportFromCjs(isStringExports)
var isFunctionExports = requireIsFunction()
const isFunction = /* @__PURE__ */ getDefaultExportFromCjs(isFunctionExports)
var isObjectExports = requireIsObject()
const isObject = /* @__PURE__ */ getDefaultExportFromCjs(isObjectExports)
var reactIs$1 = { exports: {} }
var reactIs_production_min$1 = {}
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production_min$1
function requireReactIs_production_min$1() {
    if (hasRequiredReactIs_production_min$1) return reactIs_production_min$1
    hasRequiredReactIs_production_min$1 = 1
    var b = Symbol.for('react.element'),
        c2 = Symbol.for('react.portal'),
        d = Symbol.for('react.fragment'),
        e = Symbol.for('react.strict_mode'),
        f = Symbol.for('react.profiler'),
        g = Symbol.for('react.provider'),
        h = Symbol.for('react.context'),
        k2 = Symbol.for('react.server_context'),
        l = Symbol.for('react.forward_ref'),
        m = Symbol.for('react.suspense'),
        n = Symbol.for('react.suspense_list'),
        p = Symbol.for('react.memo'),
        q = Symbol.for('react.lazy'),
        t = Symbol.for('react.offscreen'),
        u
    u = Symbol.for('react.module.reference')
    function v(a2) {
        if ('object' === typeof a2 && null !== a2) {
            var r2 = a2.$$typeof
            switch (r2) {
                case b:
                    switch (((a2 = a2.type), a2)) {
                        case d:
                        case f:
                        case e:
                        case m:
                        case n:
                            return a2
                        default:
                            switch (((a2 = a2 && a2.$$typeof), a2)) {
                                case k2:
                                case h:
                                case l:
                                case q:
                                case p:
                                case g:
                                    return a2
                                default:
                                    return r2
                            }
                    }
                case c2:
                    return r2
            }
        }
    }
    reactIs_production_min$1.ContextConsumer = h
    reactIs_production_min$1.ContextProvider = g
    reactIs_production_min$1.Element = b
    reactIs_production_min$1.ForwardRef = l
    reactIs_production_min$1.Fragment = d
    reactIs_production_min$1.Lazy = q
    reactIs_production_min$1.Memo = p
    reactIs_production_min$1.Portal = c2
    reactIs_production_min$1.Profiler = f
    reactIs_production_min$1.StrictMode = e
    reactIs_production_min$1.Suspense = m
    reactIs_production_min$1.SuspenseList = n
    reactIs_production_min$1.isAsyncMode = function () {
        return false
    }
    reactIs_production_min$1.isConcurrentMode = function () {
        return false
    }
    reactIs_production_min$1.isContextConsumer = function (a2) {
        return v(a2) === h
    }
    reactIs_production_min$1.isContextProvider = function (a2) {
        return v(a2) === g
    }
    reactIs_production_min$1.isElement = function (a2) {
        return 'object' === typeof a2 && null !== a2 && a2.$$typeof === b
    }
    reactIs_production_min$1.isForwardRef = function (a2) {
        return v(a2) === l
    }
    reactIs_production_min$1.isFragment = function (a2) {
        return v(a2) === d
    }
    reactIs_production_min$1.isLazy = function (a2) {
        return v(a2) === q
    }
    reactIs_production_min$1.isMemo = function (a2) {
        return v(a2) === p
    }
    reactIs_production_min$1.isPortal = function (a2) {
        return v(a2) === c2
    }
    reactIs_production_min$1.isProfiler = function (a2) {
        return v(a2) === f
    }
    reactIs_production_min$1.isStrictMode = function (a2) {
        return v(a2) === e
    }
    reactIs_production_min$1.isSuspense = function (a2) {
        return v(a2) === m
    }
    reactIs_production_min$1.isSuspenseList = function (a2) {
        return v(a2) === n
    }
    reactIs_production_min$1.isValidElementType = function (a2) {
        return 'string' === typeof a2 ||
            'function' === typeof a2 ||
            a2 === d ||
            a2 === f ||
            a2 === e ||
            a2 === m ||
            a2 === n ||
            a2 === t ||
            ('object' === typeof a2 &&
                null !== a2 &&
                (a2.$$typeof === q ||
                    a2.$$typeof === p ||
                    a2.$$typeof === g ||
                    a2.$$typeof === h ||
                    a2.$$typeof === l ||
                    a2.$$typeof === u ||
                    void 0 !== a2.getModuleId))
            ? true
            : false
    }
    reactIs_production_min$1.typeOf = v
    return reactIs_production_min$1
}
var hasRequiredReactIs$1
function requireReactIs$1() {
    if (hasRequiredReactIs$1) return reactIs$1.exports
    hasRequiredReactIs$1 = 1
    {
        reactIs$1.exports = requireReactIs_production_min$1()
    }
    return reactIs$1.exports
}
var reactIsExports = requireReactIs$1()
var isNumber_1
var hasRequiredIsNumber
function requireIsNumber() {
    if (hasRequiredIsNumber) return isNumber_1
    hasRequiredIsNumber = 1
    var baseGetTag = require_baseGetTag(),
        isObjectLike = requireIsObjectLike()
    var numberTag = '[object Number]'
    function isNumber3(value) {
        return typeof value == 'number' || (isObjectLike(value) && baseGetTag(value) == numberTag)
    }
    isNumber_1 = isNumber3
    return isNumber_1
}
var _isNaN
var hasRequired_isNaN
function require_isNaN() {
    if (hasRequired_isNaN) return _isNaN
    hasRequired_isNaN = 1
    var isNumber3 = requireIsNumber()
    function isNaN2(value) {
        return isNumber3(value) && value != +value
    }
    _isNaN = isNaN2
    return _isNaN
}
var _isNaNExports = require_isNaN()
const isNan = /* @__PURE__ */ getDefaultExportFromCjs(_isNaNExports)
var isNumberExports = requireIsNumber()
const isNumber$1 = /* @__PURE__ */ getDefaultExportFromCjs(isNumberExports)
var mathSign = function mathSign2(value) {
    if (value === 0) {
        return 0
    }
    if (value > 0) {
        return 1
    }
    return -1
}
var isPercent = function isPercent2(value) {
    return isString(value) && value.indexOf('%') === value.length - 1
}
var isNumber = function isNumber2(value) {
    return isNumber$1(value) && !isNan(value)
}
var isNumOrStr = function isNumOrStr2(value) {
    return isNumber(value) || isString(value)
}
var idCounter = 0
var uniqueId = function uniqueId2(prefix2) {
    var id = ++idCounter
    return ''.concat(prefix2 || '').concat(id)
}
var getPercentValue = function getPercentValue2(percent, totalValue) {
    var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0
    var validate = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false
    if (!isNumber(percent) && !isString(percent)) {
        return defaultValue
    }
    var value
    if (isPercent(percent)) {
        var index2 = percent.indexOf('%')
        value = (totalValue * parseFloat(percent.slice(0, index2))) / 100
    } else {
        value = +percent
    }
    if (isNan(value)) {
        value = defaultValue
    }
    if (validate && value > totalValue) {
        value = totalValue
    }
    return value
}
var getAnyElementOfObject = function getAnyElementOfObject2(obj) {
    if (!obj) {
        return null
    }
    var keys2 = Object.keys(obj)
    if (keys2 && keys2.length) {
        return obj[keys2[0]]
    }
    return null
}
var hasDuplicate = function hasDuplicate2(ary) {
    if (!Array.isArray(ary)) {
        return false
    }
    var len = ary.length
    var cache = {}
    for (var i = 0; i < len; i++) {
        if (!cache[ary[i]]) {
            cache[ary[i]] = true
        } else {
            return true
        }
    }
    return false
}
var interpolateNumber$2 = function interpolateNumber(numberA, numberB) {
    if (isNumber(numberA) && isNumber(numberB)) {
        return function (t) {
            return numberA + t * (numberB - numberA)
        }
    }
    return function () {
        return numberB
    }
}
function findEntryInArray(ary, specifiedKey, specifiedValue) {
    if (!ary || !ary.length) {
        return null
    }
    return ary.find(function (entry) {
        return (
            entry &&
            (typeof specifiedKey === 'function'
                ? specifiedKey(entry)
                : get(entry, specifiedKey)) === specifiedValue
        )
    })
}
var compareValues = function compareValues2(a2, b) {
    if (isNumber(a2) && isNumber(b)) {
        return a2 - b
    }
    if (isString(a2) && isString(b)) {
        return a2.localeCompare(b)
    }
    if (a2 instanceof Date && b instanceof Date) {
        return a2.getTime() - b.getTime()
    }
    return String(a2).localeCompare(String(b))
}
function shallowEqual(a2, b) {
    for (var key in a2) {
        if (
            {}.hasOwnProperty.call(a2, key) &&
            (!{}.hasOwnProperty.call(b, key) || a2[key] !== b[key])
        ) {
            return false
        }
    }
    for (var _key in b) {
        if ({}.hasOwnProperty.call(b, _key) && !{}.hasOwnProperty.call(a2, _key)) {
            return false
        }
    }
    return true
}
function _typeof$P(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$P =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$P(o)
    )
}
var SVGContainerPropKeys = ['viewBox', 'children']
var SVGElementPropKeys = [
    'aria-activedescendant',
    'aria-atomic',
    'aria-autocomplete',
    'aria-busy',
    'aria-checked',
    'aria-colcount',
    'aria-colindex',
    'aria-colspan',
    'aria-controls',
    'aria-current',
    'aria-describedby',
    'aria-details',
    'aria-disabled',
    'aria-errormessage',
    'aria-expanded',
    'aria-flowto',
    'aria-haspopup',
    'aria-hidden',
    'aria-invalid',
    'aria-keyshortcuts',
    'aria-label',
    'aria-labelledby',
    'aria-level',
    'aria-live',
    'aria-modal',
    'aria-multiline',
    'aria-multiselectable',
    'aria-orientation',
    'aria-owns',
    'aria-placeholder',
    'aria-posinset',
    'aria-pressed',
    'aria-readonly',
    'aria-relevant',
    'aria-required',
    'aria-roledescription',
    'aria-rowcount',
    'aria-rowindex',
    'aria-rowspan',
    'aria-selected',
    'aria-setsize',
    'aria-sort',
    'aria-valuemax',
    'aria-valuemin',
    'aria-valuenow',
    'aria-valuetext',
    'className',
    'color',
    'height',
    'id',
    'lang',
    'max',
    'media',
    'method',
    'min',
    'name',
    'style',
    /*
     * removed 'type' SVGElementPropKey because we do not currently use any SVG elements
     * that can use it and it conflicts with the recharts prop 'type'
     * https://github.com/recharts/recharts/pull/3327
     * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/type
     */
    // 'type',
    'target',
    'width',
    'role',
    'tabIndex',
    'accentHeight',
    'accumulate',
    'additive',
    'alignmentBaseline',
    'allowReorder',
    'alphabetic',
    'amplitude',
    'arabicForm',
    'ascent',
    'attributeName',
    'attributeType',
    'autoReverse',
    'azimuth',
    'baseFrequency',
    'baselineShift',
    'baseProfile',
    'bbox',
    'begin',
    'bias',
    'by',
    'calcMode',
    'capHeight',
    'clip',
    'clipPath',
    'clipPathUnits',
    'clipRule',
    'colorInterpolation',
    'colorInterpolationFilters',
    'colorProfile',
    'colorRendering',
    'contentScriptType',
    'contentStyleType',
    'cursor',
    'cx',
    'cy',
    'd',
    'decelerate',
    'descent',
    'diffuseConstant',
    'direction',
    'display',
    'divisor',
    'dominantBaseline',
    'dur',
    'dx',
    'dy',
    'edgeMode',
    'elevation',
    'enableBackground',
    'end',
    'exponent',
    'externalResourcesRequired',
    'fill',
    'fillOpacity',
    'fillRule',
    'filter',
    'filterRes',
    'filterUnits',
    'floodColor',
    'floodOpacity',
    'focusable',
    'fontFamily',
    'fontSize',
    'fontSizeAdjust',
    'fontStretch',
    'fontStyle',
    'fontVariant',
    'fontWeight',
    'format',
    'from',
    'fx',
    'fy',
    'g1',
    'g2',
    'glyphName',
    'glyphOrientationHorizontal',
    'glyphOrientationVertical',
    'glyphRef',
    'gradientTransform',
    'gradientUnits',
    'hanging',
    'horizAdvX',
    'horizOriginX',
    'href',
    'ideographic',
    'imageRendering',
    'in2',
    'in',
    'intercept',
    'k1',
    'k2',
    'k3',
    'k4',
    'k',
    'kernelMatrix',
    'kernelUnitLength',
    'kerning',
    'keyPoints',
    'keySplines',
    'keyTimes',
    'lengthAdjust',
    'letterSpacing',
    'lightingColor',
    'limitingConeAngle',
    'local',
    'markerEnd',
    'markerHeight',
    'markerMid',
    'markerStart',
    'markerUnits',
    'markerWidth',
    'mask',
    'maskContentUnits',
    'maskUnits',
    'mathematical',
    'mode',
    'numOctaves',
    'offset',
    'opacity',
    'operator',
    'order',
    'orient',
    'orientation',
    'origin',
    'overflow',
    'overlinePosition',
    'overlineThickness',
    'paintOrder',
    'panose1',
    'pathLength',
    'patternContentUnits',
    'patternTransform',
    'patternUnits',
    'pointerEvents',
    'pointsAtX',
    'pointsAtY',
    'pointsAtZ',
    'preserveAlpha',
    'preserveAspectRatio',
    'primitiveUnits',
    'r',
    'radius',
    'refX',
    'refY',
    'renderingIntent',
    'repeatCount',
    'repeatDur',
    'requiredExtensions',
    'requiredFeatures',
    'restart',
    'result',
    'rotate',
    'rx',
    'ry',
    'seed',
    'shapeRendering',
    'slope',
    'spacing',
    'specularConstant',
    'specularExponent',
    'speed',
    'spreadMethod',
    'startOffset',
    'stdDeviation',
    'stemh',
    'stemv',
    'stitchTiles',
    'stopColor',
    'stopOpacity',
    'strikethroughPosition',
    'strikethroughThickness',
    'string',
    'stroke',
    'strokeDasharray',
    'strokeDashoffset',
    'strokeLinecap',
    'strokeLinejoin',
    'strokeMiterlimit',
    'strokeOpacity',
    'strokeWidth',
    'surfaceScale',
    'systemLanguage',
    'tableValues',
    'targetX',
    'targetY',
    'textAnchor',
    'textDecoration',
    'textLength',
    'textRendering',
    'to',
    'transform',
    'u1',
    'u2',
    'underlinePosition',
    'underlineThickness',
    'unicode',
    'unicodeBidi',
    'unicodeRange',
    'unitsPerEm',
    'vAlphabetic',
    'values',
    'vectorEffect',
    'version',
    'vertAdvY',
    'vertOriginX',
    'vertOriginY',
    'vHanging',
    'vIdeographic',
    'viewTarget',
    'visibility',
    'vMathematical',
    'widths',
    'wordSpacing',
    'writingMode',
    'x1',
    'x2',
    'x',
    'xChannelSelector',
    'xHeight',
    'xlinkActuate',
    'xlinkArcrole',
    'xlinkHref',
    'xlinkRole',
    'xlinkShow',
    'xlinkTitle',
    'xlinkType',
    'xmlBase',
    'xmlLang',
    'xmlns',
    'xmlnsXlink',
    'xmlSpace',
    'y1',
    'y2',
    'y',
    'yChannelSelector',
    'z',
    'zoomAndPan',
    'ref',
    'key',
    'angle'
]
var PolyElementKeys = ['points', 'pathLength']
var FilteredElementKeyMap = {
    svg: SVGContainerPropKeys,
    polygon: PolyElementKeys,
    polyline: PolyElementKeys
}
var EventKeys = [
    'dangerouslySetInnerHTML',
    'onCopy',
    'onCopyCapture',
    'onCut',
    'onCutCapture',
    'onPaste',
    'onPasteCapture',
    'onCompositionEnd',
    'onCompositionEndCapture',
    'onCompositionStart',
    'onCompositionStartCapture',
    'onCompositionUpdate',
    'onCompositionUpdateCapture',
    'onFocus',
    'onFocusCapture',
    'onBlur',
    'onBlurCapture',
    'onChange',
    'onChangeCapture',
    'onBeforeInput',
    'onBeforeInputCapture',
    'onInput',
    'onInputCapture',
    'onReset',
    'onResetCapture',
    'onSubmit',
    'onSubmitCapture',
    'onInvalid',
    'onInvalidCapture',
    'onLoad',
    'onLoadCapture',
    'onError',
    'onErrorCapture',
    'onKeyDown',
    'onKeyDownCapture',
    'onKeyPress',
    'onKeyPressCapture',
    'onKeyUp',
    'onKeyUpCapture',
    'onAbort',
    'onAbortCapture',
    'onCanPlay',
    'onCanPlayCapture',
    'onCanPlayThrough',
    'onCanPlayThroughCapture',
    'onDurationChange',
    'onDurationChangeCapture',
    'onEmptied',
    'onEmptiedCapture',
    'onEncrypted',
    'onEncryptedCapture',
    'onEnded',
    'onEndedCapture',
    'onLoadedData',
    'onLoadedDataCapture',
    'onLoadedMetadata',
    'onLoadedMetadataCapture',
    'onLoadStart',
    'onLoadStartCapture',
    'onPause',
    'onPauseCapture',
    'onPlay',
    'onPlayCapture',
    'onPlaying',
    'onPlayingCapture',
    'onProgress',
    'onProgressCapture',
    'onRateChange',
    'onRateChangeCapture',
    'onSeeked',
    'onSeekedCapture',
    'onSeeking',
    'onSeekingCapture',
    'onStalled',
    'onStalledCapture',
    'onSuspend',
    'onSuspendCapture',
    'onTimeUpdate',
    'onTimeUpdateCapture',
    'onVolumeChange',
    'onVolumeChangeCapture',
    'onWaiting',
    'onWaitingCapture',
    'onAuxClick',
    'onAuxClickCapture',
    'onClick',
    'onClickCapture',
    'onContextMenu',
    'onContextMenuCapture',
    'onDoubleClick',
    'onDoubleClickCapture',
    'onDrag',
    'onDragCapture',
    'onDragEnd',
    'onDragEndCapture',
    'onDragEnter',
    'onDragEnterCapture',
    'onDragExit',
    'onDragExitCapture',
    'onDragLeave',
    'onDragLeaveCapture',
    'onDragOver',
    'onDragOverCapture',
    'onDragStart',
    'onDragStartCapture',
    'onDrop',
    'onDropCapture',
    'onMouseDown',
    'onMouseDownCapture',
    'onMouseEnter',
    'onMouseLeave',
    'onMouseMove',
    'onMouseMoveCapture',
    'onMouseOut',
    'onMouseOutCapture',
    'onMouseOver',
    'onMouseOverCapture',
    'onMouseUp',
    'onMouseUpCapture',
    'onSelect',
    'onSelectCapture',
    'onTouchCancel',
    'onTouchCancelCapture',
    'onTouchEnd',
    'onTouchEndCapture',
    'onTouchMove',
    'onTouchMoveCapture',
    'onTouchStart',
    'onTouchStartCapture',
    'onPointerDown',
    'onPointerDownCapture',
    'onPointerMove',
    'onPointerMoveCapture',
    'onPointerUp',
    'onPointerUpCapture',
    'onPointerCancel',
    'onPointerCancelCapture',
    'onPointerEnter',
    'onPointerEnterCapture',
    'onPointerLeave',
    'onPointerLeaveCapture',
    'onPointerOver',
    'onPointerOverCapture',
    'onPointerOut',
    'onPointerOutCapture',
    'onGotPointerCapture',
    'onGotPointerCaptureCapture',
    'onLostPointerCapture',
    'onLostPointerCaptureCapture',
    'onScroll',
    'onScrollCapture',
    'onWheel',
    'onWheelCapture',
    'onAnimationStart',
    'onAnimationStartCapture',
    'onAnimationEnd',
    'onAnimationEndCapture',
    'onAnimationIteration',
    'onAnimationIterationCapture',
    'onTransitionEnd',
    'onTransitionEndCapture'
]
var adaptEventHandlers = function adaptEventHandlers2(props, newHandler) {
    if (!props || typeof props === 'function' || typeof props === 'boolean') {
        return null
    }
    var inputProps = props
    if (/* @__PURE__ */ reactExports.isValidElement(props)) {
        inputProps = props.props
    }
    if (!isObject(inputProps)) {
        return null
    }
    var out = {}
    Object.keys(inputProps).forEach(function (key) {
        if (EventKeys.includes(key)) {
            out[key] =
                newHandler ||
                function (e) {
                    return inputProps[key](inputProps, e)
                }
        }
    })
    return out
}
var getEventHandlerOfChild = function getEventHandlerOfChild2(originalHandler, data, index2) {
    return function (e) {
        originalHandler(data, index2, e)
        return null
    }
}
var adaptEventsOfChild = function adaptEventsOfChild2(props, data, index2) {
    if (!isObject(props) || _typeof$P(props) !== 'object') {
        return null
    }
    var out = null
    Object.keys(props).forEach(function (key) {
        var item = props[key]
        if (EventKeys.includes(key) && typeof item === 'function') {
            if (!out) out = {}
            out[key] = getEventHandlerOfChild(item, data, index2)
        }
    })
    return out
}
var _excluded$t = ['children'],
    _excluded2$a = ['children']
function _objectWithoutProperties$n(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$n(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$n(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _typeof$O(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$O =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$O(o)
    )
}
var REACT_BROWSER_EVENT_MAP = {
    click: 'onClick',
    mousedown: 'onMouseDown',
    mouseup: 'onMouseUp',
    mouseover: 'onMouseOver',
    mousemove: 'onMouseMove',
    mouseout: 'onMouseOut',
    mouseenter: 'onMouseEnter',
    mouseleave: 'onMouseLeave',
    touchcancel: 'onTouchCancel',
    touchend: 'onTouchEnd',
    touchmove: 'onTouchMove',
    touchstart: 'onTouchStart',
    contextmenu: 'onContextMenu',
    dblclick: 'onDoubleClick'
}
var getDisplayName = function getDisplayName2(Comp) {
    if (typeof Comp === 'string') {
        return Comp
    }
    if (!Comp) {
        return ''
    }
    return Comp.displayName || Comp.name || 'Component'
}
var lastChildren = null
var lastResult = null
var toArray = function toArray2(children) {
    if (children === lastChildren && Array.isArray(lastResult)) {
        return lastResult
    }
    var result = []
    reactExports.Children.forEach(children, function (child) {
        if (isNil(child)) return
        if (reactIsExports.isFragment(child)) {
            result = result.concat(toArray2(child.props.children))
        } else {
            result.push(child)
        }
    })
    lastResult = result
    lastChildren = children
    return result
}
function findAllByType(children, type) {
    var result = []
    var types = []
    if (Array.isArray(type)) {
        types = type.map(function (t) {
            return getDisplayName(t)
        })
    } else {
        types = [getDisplayName(type)]
    }
    toArray(children).forEach(function (child) {
        var childType = get(child, 'type.displayName') || get(child, 'type.name')
        if (types.indexOf(childType) !== -1) {
            result.push(child)
        }
    })
    return result
}
function findChildByType(children, type) {
    var result = findAllByType(children, type)
    return result && result[0]
}
var validateWidthHeight = function validateWidthHeight2(el) {
    if (!el || !el.props) {
        return false
    }
    var _el$props = el.props,
        width = _el$props.width,
        height = _el$props.height
    if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0) {
        return false
    }
    return true
}
var SVG_TAGS = [
    'a',
    'altGlyph',
    'altGlyphDef',
    'altGlyphItem',
    'animate',
    'animateColor',
    'animateMotion',
    'animateTransform',
    'circle',
    'clipPath',
    'color-profile',
    'cursor',
    'defs',
    'desc',
    'ellipse',
    'feBlend',
    'feColormatrix',
    'feComponentTransfer',
    'feComposite',
    'feConvolveMatrix',
    'feDiffuseLighting',
    'feDisplacementMap',
    'feDistantLight',
    'feFlood',
    'feFuncA',
    'feFuncB',
    'feFuncG',
    'feFuncR',
    'feGaussianBlur',
    'feImage',
    'feMerge',
    'feMergeNode',
    'feMorphology',
    'feOffset',
    'fePointLight',
    'feSpecularLighting',
    'feSpotLight',
    'feTile',
    'feTurbulence',
    'filter',
    'font',
    'font-face',
    'font-face-format',
    'font-face-name',
    'font-face-url',
    'foreignObject',
    'g',
    'glyph',
    'glyphRef',
    'hkern',
    'image',
    'line',
    'lineGradient',
    'marker',
    'mask',
    'metadata',
    'missing-glyph',
    'mpath',
    'path',
    'pattern',
    'polygon',
    'polyline',
    'radialGradient',
    'rect',
    'script',
    'set',
    'stop',
    'style',
    'svg',
    'switch',
    'symbol',
    'text',
    'textPath',
    'title',
    'tref',
    'tspan',
    'use',
    'view',
    'vkern'
]
var isSvgElement = function isSvgElement2(child) {
    return child && child.type && isString(child.type) && SVG_TAGS.indexOf(child.type) >= 0
}
var hasClipDot = function hasClipDot2(dot) {
    return dot && _typeof$O(dot) === 'object' && 'clipDot' in dot
}
var isValidSpreadableProp = function isValidSpreadableProp2(
    property,
    key,
    includeEvents,
    svgElementType
) {
    var _FilteredElementKeyMa
    var matchingElementTypeKeys =
        (_FilteredElementKeyMa =
            FilteredElementKeyMap === null || FilteredElementKeyMap === void 0
                ? void 0
                : FilteredElementKeyMap[svgElementType]) !== null &&
        _FilteredElementKeyMa !== void 0
            ? _FilteredElementKeyMa
            : []
    return (
        key.startsWith('data-') ||
        (!isFunction(property) &&
            ((svgElementType && matchingElementTypeKeys.includes(key)) ||
                SVGElementPropKeys.includes(key))) ||
        (includeEvents && EventKeys.includes(key))
    )
}
var filterProps = function filterProps2(props, includeEvents, svgElementType) {
    if (!props || typeof props === 'function' || typeof props === 'boolean') {
        return null
    }
    var inputProps = props
    if (/* @__PURE__ */ reactExports.isValidElement(props)) {
        inputProps = props.props
    }
    if (!isObject(inputProps)) {
        return null
    }
    var out = {}
    Object.keys(inputProps).forEach(function (key) {
        var _inputProps
        if (
            isValidSpreadableProp(
                (_inputProps = inputProps) === null || _inputProps === void 0
                    ? void 0
                    : _inputProps[key],
                key,
                includeEvents,
                svgElementType
            )
        ) {
            out[key] = inputProps[key]
        }
    })
    return out
}
var isChildrenEqual = function isChildrenEqual2(nextChildren, prevChildren) {
    if (nextChildren === prevChildren) {
        return true
    }
    var count2 = reactExports.Children.count(nextChildren)
    if (count2 !== reactExports.Children.count(prevChildren)) {
        return false
    }
    if (count2 === 0) {
        return true
    }
    if (count2 === 1) {
        return isSingleChildEqual(
            Array.isArray(nextChildren) ? nextChildren[0] : nextChildren,
            Array.isArray(prevChildren) ? prevChildren[0] : prevChildren
        )
    }
    for (var i = 0; i < count2; i++) {
        var nextChild = nextChildren[i]
        var prevChild = prevChildren[i]
        if (Array.isArray(nextChild) || Array.isArray(prevChild)) {
            if (!isChildrenEqual2(nextChild, prevChild)) {
                return false
            }
        } else if (!isSingleChildEqual(nextChild, prevChild)) {
            return false
        }
    }
    return true
}
var isSingleChildEqual = function isSingleChildEqual2(nextChild, prevChild) {
    if (isNil(nextChild) && isNil(prevChild)) {
        return true
    }
    if (!isNil(nextChild) && !isNil(prevChild)) {
        var _ref3 = nextChild.props || {},
            nextChildren = _ref3.children,
            nextProps = _objectWithoutProperties$n(_ref3, _excluded$t)
        var _ref22 = prevChild.props || {},
            prevChildren = _ref22.children,
            prevProps = _objectWithoutProperties$n(_ref22, _excluded2$a)
        if (nextChildren && prevChildren) {
            return shallowEqual(nextProps, prevProps) && isChildrenEqual(nextChildren, prevChildren)
        }
        if (!nextChildren && !prevChildren) {
            return shallowEqual(nextProps, prevProps)
        }
        return false
    }
    return false
}
var renderByOrder = function renderByOrder2(children, renderMap) {
    var elements = []
    var record = {}
    toArray(children).forEach(function (child, index2) {
        if (isSvgElement(child)) {
            elements.push(child)
        } else if (child) {
            var displayName = getDisplayName(child.type)
            var _ref3 = renderMap[displayName] || {},
                handler = _ref3.handler,
                once = _ref3.once
            if (handler && (!once || !record[displayName])) {
                var results = handler(child, displayName, index2)
                elements.push(results)
                record[displayName] = true
            }
        }
    })
    return elements
}
var getReactEventByType = function getReactEventByType2(e) {
    var type = e && e.type
    if (type && REACT_BROWSER_EVENT_MAP[type]) {
        return REACT_BROWSER_EVENT_MAP[type]
    }
    return null
}
var parseChildIndex = function parseChildIndex2(child, children) {
    return toArray(children).indexOf(child)
}
var _excluded$s = ['children', 'width', 'height', 'viewBox', 'className', 'style', 'title', 'desc']
function _extends$y() {
    _extends$y = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$y.apply(this, arguments)
}
function _objectWithoutProperties$m(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$m(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$m(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function Surface(props) {
    var children = props.children,
        width = props.width,
        height = props.height,
        viewBox = props.viewBox,
        className = props.className,
        style = props.style,
        title = props.title,
        desc = props.desc,
        others = _objectWithoutProperties$m(props, _excluded$s)
    var svgView = viewBox || {
        width,
        height,
        x: 0,
        y: 0
    }
    var layerClass = clsx('recharts-surface', className)
    return /* @__PURE__ */ React.createElement(
        'svg',
        _extends$y({}, filterProps(others, true, 'svg'), {
            className: layerClass,
            width,
            height,
            style,
            viewBox: ''
                .concat(svgView.x, ' ')
                .concat(svgView.y, ' ')
                .concat(svgView.width, ' ')
                .concat(svgView.height)
        }),
        /* @__PURE__ */ React.createElement('title', null, title),
        /* @__PURE__ */ React.createElement('desc', null, desc),
        children
    )
}
var _excluded$r = ['children', 'className']
function _extends$x() {
    _extends$x = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$x.apply(this, arguments)
}
function _objectWithoutProperties$l(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$l(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$l(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
var Layer = /* @__PURE__ */ React.forwardRef(function (props, ref) {
    var children = props.children,
        className = props.className,
        others = _objectWithoutProperties$l(props, _excluded$r)
    var layerClass = clsx('recharts-layer', className)
    return /* @__PURE__ */ React.createElement(
        'g',
        _extends$x(
            {
                className: layerClass
            },
            filterProps(others, true),
            {
                ref
            }
        ),
        children
    )
})
var warn = function warn2(condition, format2) {
    for (
        var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2;
        _key < _len;
        _key++
    ) {
        args[_key - 2] = arguments[_key]
    }
}
var _baseSlice
var hasRequired_baseSlice
function require_baseSlice() {
    if (hasRequired_baseSlice) return _baseSlice
    hasRequired_baseSlice = 1
    function baseSlice(array2, start, end) {
        var index2 = -1,
            length2 = array2.length
        if (start < 0) {
            start = -start > length2 ? 0 : length2 + start
        }
        end = end > length2 ? length2 : end
        if (end < 0) {
            end += length2
        }
        length2 = start > end ? 0 : (end - start) >>> 0
        start >>>= 0
        var result = Array(length2)
        while (++index2 < length2) {
            result[index2] = array2[index2 + start]
        }
        return result
    }
    _baseSlice = baseSlice
    return _baseSlice
}
var _castSlice
var hasRequired_castSlice
function require_castSlice() {
    if (hasRequired_castSlice) return _castSlice
    hasRequired_castSlice = 1
    var baseSlice = require_baseSlice()
    function castSlice(array2, start, end) {
        var length2 = array2.length
        end = end === void 0 ? length2 : end
        return !start && end >= length2 ? array2 : baseSlice(array2, start, end)
    }
    _castSlice = castSlice
    return _castSlice
}
var _hasUnicode
var hasRequired_hasUnicode
function require_hasUnicode() {
    if (hasRequired_hasUnicode) return _hasUnicode
    hasRequired_hasUnicode = 1
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsVarRange = '\\ufe0e\\ufe0f'
    var rsZWJ = '\\u200d'
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']')
    function hasUnicode(string2) {
        return reHasUnicode.test(string2)
    }
    _hasUnicode = hasUnicode
    return _hasUnicode
}
var _asciiToArray
var hasRequired_asciiToArray
function require_asciiToArray() {
    if (hasRequired_asciiToArray) return _asciiToArray
    hasRequired_asciiToArray = 1
    function asciiToArray(string2) {
        return string2.split('')
    }
    _asciiToArray = asciiToArray
    return _asciiToArray
}
var _unicodeToArray
var hasRequired_unicodeToArray
function require_unicodeToArray() {
    if (hasRequired_unicodeToArray) return _unicodeToArray
    hasRequired_unicodeToArray = 1
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsVarRange = '\\ufe0e\\ufe0f'
    var rsAstral = '[' + rsAstralRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsZWJ = '\\u200d'
    var reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin =
            '(?:' +
            rsZWJ +
            '(?:' +
            [rsNonAstral, rsRegional, rsSurrPair].join('|') +
            ')' +
            rsOptVar +
            reOptMod +
            ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsSymbol =
            '(?:' +
            [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') +
            ')'
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g')
    function unicodeToArray(string2) {
        return string2.match(reUnicode) || []
    }
    _unicodeToArray = unicodeToArray
    return _unicodeToArray
}
var _stringToArray
var hasRequired_stringToArray
function require_stringToArray() {
    if (hasRequired_stringToArray) return _stringToArray
    hasRequired_stringToArray = 1
    var asciiToArray = require_asciiToArray(),
        hasUnicode = require_hasUnicode(),
        unicodeToArray = require_unicodeToArray()
    function stringToArray(string2) {
        return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2)
    }
    _stringToArray = stringToArray
    return _stringToArray
}
var _createCaseFirst
var hasRequired_createCaseFirst
function require_createCaseFirst() {
    if (hasRequired_createCaseFirst) return _createCaseFirst
    hasRequired_createCaseFirst = 1
    var castSlice = require_castSlice(),
        hasUnicode = require_hasUnicode(),
        stringToArray = require_stringToArray(),
        toString3 = requireToString()
    function createCaseFirst(methodName) {
        return function (string2) {
            string2 = toString3(string2)
            var strSymbols = hasUnicode(string2) ? stringToArray(string2) : void 0
            var chr = strSymbols ? strSymbols[0] : string2.charAt(0)
            var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string2.slice(1)
            return chr[methodName]() + trailing
        }
    }
    _createCaseFirst = createCaseFirst
    return _createCaseFirst
}
var upperFirst_1
var hasRequiredUpperFirst
function requireUpperFirst() {
    if (hasRequiredUpperFirst) return upperFirst_1
    hasRequiredUpperFirst = 1
    var createCaseFirst = require_createCaseFirst()
    var upperFirst2 = createCaseFirst('toUpperCase')
    upperFirst_1 = upperFirst2
    return upperFirst_1
}
var upperFirstExports = requireUpperFirst()
const upperFirst = /* @__PURE__ */ getDefaultExportFromCjs(upperFirstExports)
function constant$1(x2) {
    return function constant2() {
        return x2
    }
}
const cos = Math.cos
const sin = Math.sin
const sqrt$1 = Math.sqrt
const pi$1 = Math.PI
const tau$1 = 2 * pi$1
const pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon
function append$1(strings) {
    this._ += strings[0]
    for (let i = 1, n = strings.length; i < n; ++i) {
        this._ += arguments[i] + strings[i]
    }
}
function appendRound(digits) {
    let d = Math.floor(digits)
    if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`)
    if (d > 15) return append$1
    const k2 = 10 ** d
    return function (strings) {
        this._ += strings[0]
        for (let i = 1, n = strings.length; i < n; ++i) {
            this._ += Math.round(arguments[i] * k2) / k2 + strings[i]
        }
    }
}
class Path {
    constructor(digits) {
        this._x0 =
            this._y0 = // start of current subpath
            this._x1 =
            this._y1 =
                null
        this._ = ''
        this._append = digits == null ? append$1 : appendRound(digits)
    }
    moveTo(x2, y2) {
        this._append`M${(this._x0 = this._x1 = +x2)},${(this._y0 = this._y1 = +y2)}`
    }
    closePath() {
        if (this._x1 !== null) {
            ;(this._x1 = this._x0), (this._y1 = this._y0)
            this._append`Z`
        }
    }
    lineTo(x2, y2) {
        this._append`L${(this._x1 = +x2)},${(this._y1 = +y2)}`
    }
    quadraticCurveTo(x1, y1, x2, y2) {
        this._append`Q${+x1},${+y1},${(this._x1 = +x2)},${(this._y1 = +y2)}`
    }
    bezierCurveTo(x1, y1, x2, y2, x3, y3) {
        this._append`C${+x1},${+y1},${+x2},${+y2},${(this._x1 = +x3)},${(this._y1 = +y3)}`
    }
    arcTo(x1, y1, x2, y2, r2) {
        ;(x1 = +x1), (y1 = +y1), (x2 = +x2), (y2 = +y2), (r2 = +r2)
        if (r2 < 0) throw new Error(`negative radius: ${r2}`)
        let x0 = this._x1,
            y0 = this._y1,
            x21 = x2 - x1,
            y21 = y2 - y1,
            x01 = x0 - x1,
            y01 = y0 - y1,
            l01_2 = x01 * x01 + y01 * y01
        if (this._x1 === null) {
            this._append`M${(this._x1 = x1)},${(this._y1 = y1)}`
        } else if (!(l01_2 > epsilon));
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r2) {
            this._append`L${(this._x1 = x1)},${(this._y1 = y1)}`
        } else {
            let x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r2 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21
            if (Math.abs(t01 - 1) > epsilon) {
                this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`
            }
            this
                ._append`A${r2},${r2},0,0,${+(y01 * x20 > x01 * y20)},${(this._x1 = x1 + t21 * x21)},${(this._y1 = y1 + t21 * y21)}`
        }
    }
    arc(x2, y2, r2, a0, a1, ccw) {
        ;(x2 = +x2), (y2 = +y2), (r2 = +r2), (ccw = !!ccw)
        if (r2 < 0) throw new Error(`negative radius: ${r2}`)
        let dx = r2 * Math.cos(a0),
            dy = r2 * Math.sin(a0),
            x0 = x2 + dx,
            y0 = y2 + dy,
            cw = 1 ^ ccw,
            da = ccw ? a0 - a1 : a1 - a0
        if (this._x1 === null) {
            this._append`M${x0},${y0}`
        } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
            this._append`L${x0},${y0}`
        }
        if (!r2) return
        if (da < 0) da = (da % tau) + tau
        if (da > tauEpsilon) {
            this
                ._append`A${r2},${r2},0,1,${cw},${x2 - dx},${y2 - dy}A${r2},${r2},0,1,${cw},${(this._x1 = x0)},${(this._y1 = y0)}`
        } else if (da > epsilon) {
            this
                ._append`A${r2},${r2},0,${+(da >= pi)},${cw},${(this._x1 = x2 + r2 * Math.cos(a1))},${(this._y1 = y2 + r2 * Math.sin(a1))}`
        }
    }
    rect(x2, y2, w2, h) {
        this
            ._append`M${(this._x0 = this._x1 = +x2)},${(this._y0 = this._y1 = +y2)}h${(w2 = +w2)}v${+h}h${-w2}Z`
    }
    toString() {
        return this._
    }
}
function withPath(shape) {
    let digits = 3
    shape.digits = function (_) {
        if (!arguments.length) return digits
        if (_ == null) {
            digits = null
        } else {
            const d = Math.floor(_)
            if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`)
            digits = d
        }
        return shape
    }
    return () => new Path(digits)
}
function array(x2) {
    return typeof x2 === 'object' && 'length' in x2 ? x2 : Array.from(x2)
}
function Linear(context) {
    this._context = context
}
Linear.prototype = {
    areaStart: function () {
        this._line = 0
    },
    areaEnd: function () {
        this._line = NaN
    },
    lineStart: function () {
        this._point = 0
    },
    lineEnd: function () {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
        this._line = 1 - this._line
    },
    point: function (x2, y2) {
        ;(x2 = +x2), (y2 = +y2)
        switch (this._point) {
            case 0:
                this._point = 1
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2)
                break
            case 1:
                this._point = 2
            // falls through
            default:
                this._context.lineTo(x2, y2)
                break
        }
    }
}
function curveLinear(context) {
    return new Linear(context)
}
function x(p) {
    return p[0]
}
function y(p) {
    return p[1]
}
function shapeLine(x$1, y$1) {
    var defined3 = constant$1(true),
        context = null,
        curve = curveLinear,
        output = null,
        path = withPath(line2)
    x$1 = typeof x$1 === 'function' ? x$1 : x$1 === void 0 ? x : constant$1(x$1)
    y$1 = typeof y$1 === 'function' ? y$1 : y$1 === void 0 ? y : constant$1(y$1)
    function line2(data) {
        var i,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer
        if (context == null) output = curve((buffer = path()))
        for (i = 0; i <= n; ++i) {
            if (!(i < n && defined3((d = data[i]), i, data)) === defined0) {
                if ((defined0 = !defined0)) output.lineStart()
                else output.lineEnd()
            }
            if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data))
        }
        if (buffer) return (output = null), buffer + '' || null
    }
    line2.x = function (_) {
        return arguments.length
            ? ((x$1 = typeof _ === 'function' ? _ : constant$1(+_)), line2)
            : x$1
    }
    line2.y = function (_) {
        return arguments.length
            ? ((y$1 = typeof _ === 'function' ? _ : constant$1(+_)), line2)
            : y$1
    }
    line2.defined = function (_) {
        return arguments.length
            ? ((defined3 = typeof _ === 'function' ? _ : constant$1(!!_)), line2)
            : defined3
    }
    line2.curve = function (_) {
        return arguments.length
            ? ((curve = _), context != null && (output = curve(context)), line2)
            : curve
    }
    line2.context = function (_) {
        return arguments.length
            ? (_ == null ? (context = output = null) : (output = curve((context = _))), line2)
            : context
    }
    return line2
}
function shapeArea(x0, y0, y1) {
    var x1 = null,
        defined3 = constant$1(true),
        context = null,
        curve = curveLinear,
        output = null,
        path = withPath(area)
    x0 = typeof x0 === 'function' ? x0 : x0 === void 0 ? x : constant$1(+x0)
    y0 = typeof y0 === 'function' ? y0 : y0 === void 0 ? constant$1(0) : constant$1(+y0)
    y1 = typeof y1 === 'function' ? y1 : y1 === void 0 ? y : constant$1(+y1)
    function area(data) {
        var i,
            j,
            k2,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer,
            x0z = new Array(n),
            y0z = new Array(n)
        if (context == null) output = curve((buffer = path()))
        for (i = 0; i <= n; ++i) {
            if (!(i < n && defined3((d = data[i]), i, data)) === defined0) {
                if ((defined0 = !defined0)) {
                    j = i
                    output.areaStart()
                    output.lineStart()
                } else {
                    output.lineEnd()
                    output.lineStart()
                    for (k2 = i - 1; k2 >= j; --k2) {
                        output.point(x0z[k2], y0z[k2])
                    }
                    output.lineEnd()
                    output.areaEnd()
                }
            }
            if (defined0) {
                ;(x0z[i] = +x0(d, i, data)), (y0z[i] = +y0(d, i, data))
                output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i])
            }
        }
        if (buffer) return (output = null), buffer + '' || null
    }
    function arealine() {
        return shapeLine().defined(defined3).curve(curve).context(context)
    }
    area.x = function (_) {
        return arguments.length
            ? ((x0 = typeof _ === 'function' ? _ : constant$1(+_)), (x1 = null), area)
            : x0
    }
    area.x0 = function (_) {
        return arguments.length ? ((x0 = typeof _ === 'function' ? _ : constant$1(+_)), area) : x0
    }
    area.x1 = function (_) {
        return arguments.length
            ? ((x1 = _ == null ? null : typeof _ === 'function' ? _ : constant$1(+_)), area)
            : x1
    }
    area.y = function (_) {
        return arguments.length
            ? ((y0 = typeof _ === 'function' ? _ : constant$1(+_)), (y1 = null), area)
            : y0
    }
    area.y0 = function (_) {
        return arguments.length ? ((y0 = typeof _ === 'function' ? _ : constant$1(+_)), area) : y0
    }
    area.y1 = function (_) {
        return arguments.length
            ? ((y1 = _ == null ? null : typeof _ === 'function' ? _ : constant$1(+_)), area)
            : y1
    }
    area.lineX0 = area.lineY0 = function () {
        return arealine().x(x0).y(y0)
    }
    area.lineY1 = function () {
        return arealine().x(x0).y(y1)
    }
    area.lineX1 = function () {
        return arealine().x(x1).y(y0)
    }
    area.defined = function (_) {
        return arguments.length
            ? ((defined3 = typeof _ === 'function' ? _ : constant$1(!!_)), area)
            : defined3
    }
    area.curve = function (_) {
        return arguments.length
            ? ((curve = _), context != null && (output = curve(context)), area)
            : curve
    }
    area.context = function (_) {
        return arguments.length
            ? (_ == null ? (context = output = null) : (output = curve((context = _))), area)
            : context
    }
    return area
}
class Bump {
    constructor(context, x2) {
        this._context = context
        this._x = x2
    }
    areaStart() {
        this._line = 0
    }
    areaEnd() {
        this._line = NaN
    }
    lineStart() {
        this._point = 0
    }
    lineEnd() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
        this._line = 1 - this._line
    }
    point(x2, y2) {
        ;(x2 = +x2), (y2 = +y2)
        switch (this._point) {
            case 0: {
                this._point = 1
                if (this._line) this._context.lineTo(x2, y2)
                else this._context.moveTo(x2, y2)
                break
            }
            case 1:
                this._point = 2
            // falls through
            default: {
                if (this._x)
                    this._context.bezierCurveTo(
                        (this._x0 = (this._x0 + x2) / 2),
                        this._y0,
                        this._x0,
                        y2,
                        x2,
                        y2
                    )
                else
                    this._context.bezierCurveTo(
                        this._x0,
                        (this._y0 = (this._y0 + y2) / 2),
                        x2,
                        this._y0,
                        x2,
                        y2
                    )
                break
            }
        }
        ;(this._x0 = x2), (this._y0 = y2)
    }
}
function bumpX(context) {
    return new Bump(context, true)
}
function bumpY(context) {
    return new Bump(context, false)
}
const symbolCircle = {
    draw(context, size) {
        const r2 = sqrt$1(size / pi$1)
        context.moveTo(r2, 0)
        context.arc(0, 0, r2, 0, tau$1)
    }
}
const symbolCross = {
    draw(context, size) {
        const r2 = sqrt$1(size / 5) / 2
        context.moveTo(-3 * r2, -r2)
        context.lineTo(-r2, -r2)
        context.lineTo(-r2, -3 * r2)
        context.lineTo(r2, -3 * r2)
        context.lineTo(r2, -r2)
        context.lineTo(3 * r2, -r2)
        context.lineTo(3 * r2, r2)
        context.lineTo(r2, r2)
        context.lineTo(r2, 3 * r2)
        context.lineTo(-r2, 3 * r2)
        context.lineTo(-r2, r2)
        context.lineTo(-3 * r2, r2)
        context.closePath()
    }
}
const tan30 = sqrt$1(1 / 3)
const tan30_2 = tan30 * 2
const symbolDiamond = {
    draw(context, size) {
        const y2 = sqrt$1(size / tan30_2)
        const x2 = y2 * tan30
        context.moveTo(0, -y2)
        context.lineTo(x2, 0)
        context.lineTo(0, y2)
        context.lineTo(-x2, 0)
        context.closePath()
    }
}
const symbolSquare = {
    draw(context, size) {
        const w2 = sqrt$1(size)
        const x2 = -w2 / 2
        context.rect(x2, x2, w2, w2)
    }
}
const ka = 0.8908130915292852
const kr = sin(pi$1 / 10) / sin((7 * pi$1) / 10)
const kx = sin(tau$1 / 10) * kr
const ky = -cos(tau$1 / 10) * kr
const symbolStar = {
    draw(context, size) {
        const r2 = sqrt$1(size * ka)
        const x2 = kx * r2
        const y2 = ky * r2
        context.moveTo(0, -r2)
        context.lineTo(x2, y2)
        for (let i = 1; i < 5; ++i) {
            const a2 = (tau$1 * i) / 5
            const c2 = cos(a2)
            const s2 = sin(a2)
            context.lineTo(s2 * r2, -c2 * r2)
            context.lineTo(c2 * x2 - s2 * y2, s2 * x2 + c2 * y2)
        }
        context.closePath()
    }
}
const sqrt3 = sqrt$1(3)
const symbolTriangle = {
    draw(context, size) {
        const y2 = -sqrt$1(size / (sqrt3 * 3))
        context.moveTo(0, y2 * 2)
        context.lineTo(-sqrt3 * y2, -y2)
        context.lineTo(sqrt3 * y2, -y2)
        context.closePath()
    }
}
const c = -0.5
const s = sqrt$1(3) / 2
const k = 1 / sqrt$1(12)
const a = (k / 2 + 1) * 3
const symbolWye = {
    draw(context, size) {
        const r2 = sqrt$1(size / a)
        const x0 = r2 / 2,
            y0 = r2 * k
        const x1 = x0,
            y1 = r2 * k + r2
        const x2 = -x1,
            y2 = y1
        context.moveTo(x0, y0)
        context.lineTo(x1, y1)
        context.lineTo(x2, y2)
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0)
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1)
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2)
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0)
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1)
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2)
        context.closePath()
    }
}
function Symbol$1(type, size) {
    let context = null,
        path = withPath(symbol)
    type = typeof type === 'function' ? type : constant$1(type || symbolCircle)
    size = typeof size === 'function' ? size : constant$1(size === void 0 ? 64 : +size)
    function symbol() {
        let buffer
        if (!context) context = buffer = path()
        type.apply(this, arguments).draw(context, +size.apply(this, arguments))
        if (buffer) return (context = null), buffer + '' || null
    }
    symbol.type = function (_) {
        return arguments.length
            ? ((type = typeof _ === 'function' ? _ : constant$1(_)), symbol)
            : type
    }
    symbol.size = function (_) {
        return arguments.length
            ? ((size = typeof _ === 'function' ? _ : constant$1(+_)), symbol)
            : size
    }
    symbol.context = function (_) {
        return arguments.length ? ((context = _ == null ? null : _), symbol) : context
    }
    return symbol
}
function noop$1() {}
function point$2(that, x2, y2) {
    that._context.bezierCurveTo(
        (2 * that._x0 + that._x1) / 3,
        (2 * that._y0 + that._y1) / 3,
        (that._x0 + 2 * that._x1) / 3,
        (that._y0 + 2 * that._y1) / 3,
        (that._x0 + 4 * that._x1 + x2) / 6,
        (that._y0 + 4 * that._y1 + y2) / 6
    )
}
function Basis(context) {
    this._context = context
}
Basis.prototype = {
    areaStart: function () {
        this._line = 0
    },
    areaEnd: function () {
        this._line = NaN
    },
    lineStart: function () {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN
        this._point = 0
    },
    lineEnd: function () {
        switch (this._point) {
            case 3:
                point$2(this, this._x1, this._y1)
            // falls through
            case 2:
                this._context.lineTo(this._x1, this._y1)
                break
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
        this._line = 1 - this._line
    },
    point: function (x2, y2) {
        ;(x2 = +x2), (y2 = +y2)
        switch (this._point) {
            case 0:
                this._point = 1
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2)
                break
            case 1:
                this._point = 2
                break
            case 2:
                this._point = 3
                this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6)
            // falls through
            default:
                point$2(this, x2, y2)
                break
        }
        ;(this._x0 = this._x1), (this._x1 = x2)
        ;(this._y0 = this._y1), (this._y1 = y2)
    }
}
function curveBasis(context) {
    return new Basis(context)
}
function BasisClosed(context) {
    this._context = context
}
BasisClosed.prototype = {
    areaStart: noop$1,
    areaEnd: noop$1,
    lineStart: function () {
        this._x0 =
            this._x1 =
            this._x2 =
            this._x3 =
            this._x4 =
            this._y0 =
            this._y1 =
            this._y2 =
            this._y3 =
            this._y4 =
                NaN
        this._point = 0
    },
    lineEnd: function () {
        switch (this._point) {
            case 1: {
                this._context.moveTo(this._x2, this._y2)
                this._context.closePath()
                break
            }
            case 2: {
                this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3)
                this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3)
                this._context.closePath()
                break
            }
            case 3: {
                this.point(this._x2, this._y2)
                this.point(this._x3, this._y3)
                this.point(this._x4, this._y4)
                break
            }
        }
    },
    point: function (x2, y2) {
        ;(x2 = +x2), (y2 = +y2)
        switch (this._point) {
            case 0:
                this._point = 1
                ;(this._x2 = x2), (this._y2 = y2)
                break
            case 1:
                this._point = 2
                ;(this._x3 = x2), (this._y3 = y2)
                break
            case 2:
                this._point = 3
                ;(this._x4 = x2), (this._y4 = y2)
                this._context.moveTo(
                    (this._x0 + 4 * this._x1 + x2) / 6,
                    (this._y0 + 4 * this._y1 + y2) / 6
                )
                break
            default:
                point$2(this, x2, y2)
                break
        }
        ;(this._x0 = this._x1), (this._x1 = x2)
        ;(this._y0 = this._y1), (this._y1 = y2)
    }
}
function curveBasisClosed(context) {
    return new BasisClosed(context)
}
function BasisOpen(context) {
    this._context = context
}
BasisOpen.prototype = {
    areaStart: function () {
        this._line = 0
    },
    areaEnd: function () {
        this._line = NaN
    },
    lineStart: function () {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN
        this._point = 0
    },
    lineEnd: function () {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath()
        this._line = 1 - this._line
    },
    point: function (x2, y2) {
        ;(x2 = +x2), (y2 = +y2)
        switch (this._point) {
            case 0:
                this._point = 1
                break
            case 1:
                this._point = 2
                break
            case 2:
                this._point = 3
                var x0 = (this._x0 + 4 * this._x1 + x2) / 6,
                    y0 = (this._y0 + 4 * this._y1 + y2) / 6
                this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0)
                break
            case 3:
                this._point = 4
            // falls through
            default:
                point$2(this, x2, y2)
                break
        }
        ;(this._x0 = this._x1), (this._x1 = x2)
        ;(this._y0 = this._y1), (this._y1 = y2)
    }
}
function curveBasisOpen(context) {
    return new BasisOpen(context)
}
function LinearClosed(context) {
    this._context = context
}
LinearClosed.prototype = {
    areaStart: noop$1,
    areaEnd: noop$1,
    lineStart: function () {
        this._point = 0
    },
    lineEnd: function () {
        if (this._point) this._context.closePath()
    },
    point: function (x2, y2) {
        ;(x2 = +x2), (y2 = +y2)
        if (this._point) this._context.lineTo(x2, y2)
        else (this._point = 1), this._context.moveTo(x2, y2)
    }
}
function curveLinearClosed(context) {
    return new LinearClosed(context)
}
function sign(x2) {
    return x2 < 0 ? -1 : 1
}
function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0,
        h1 = x2 - that._x1,
        s0 = (that._y1 - that._y0) / (h0 || (h1 < 0 && -0)),
        s1 = (y2 - that._y1) / (h1 || (h0 < 0 && -0)),
        p = (s0 * h1 + s1 * h0) / (h0 + h1)
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0
}
function slope2(that, t) {
    var h = that._x1 - that._x0
    return h ? ((3 * (that._y1 - that._y0)) / h - t) / 2 : t
}
function point$1(that, t02, t12) {
    var x0 = that._x0,
        y0 = that._y0,
        x1 = that._x1,
        y1 = that._y1,
        dx = (x1 - x0) / 3
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1)
}
function MonotoneX(context) {
    this._context = context
}
MonotoneX.prototype = {
    areaStart: function () {
        this._line = 0
    },
    areaEnd: function () {
        this._line = NaN
    },
    lineStart: function () {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN
        this._point = 0
    },
    lineEnd: function () {
        switch (this._point) {
            case 2:
                this._context.lineTo(this._x1, this._y1)
                break
            case 3:
                point$1(this, this._t0, slope2(this, this._t0))
                break
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
        this._line = 1 - this._line
    },
    point: function (x2, y2) {
        var t12 = NaN
        ;(x2 = +x2), (y2 = +y2)
        if (x2 === this._x1 && y2 === this._y1) return
        switch (this._point) {
            case 0:
                this._point = 1
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2)
                break
            case 1:
                this._point = 2
                break
            case 2:
                this._point = 3
                point$1(this, slope2(this, (t12 = slope3(this, x2, y2))), t12)
                break
            default:
                point$1(this, this._t0, (t12 = slope3(this, x2, y2)))
                break
        }
        ;(this._x0 = this._x1), (this._x1 = x2)
        ;(this._y0 = this._y1), (this._y1 = y2)
        this._t0 = t12
    }
}
function MonotoneY(context) {
    this._context = new ReflectContext(context)
}
;(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x2, y2) {
    MonotoneX.prototype.point.call(this, y2, x2)
}
function ReflectContext(context) {
    this._context = context
}
ReflectContext.prototype = {
    moveTo: function (x2, y2) {
        this._context.moveTo(y2, x2)
    },
    closePath: function () {
        this._context.closePath()
    },
    lineTo: function (x2, y2) {
        this._context.lineTo(y2, x2)
    },
    bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3)
    }
}
function monotoneX(context) {
    return new MonotoneX(context)
}
function monotoneY(context) {
    return new MonotoneY(context)
}
function Natural(context) {
    this._context = context
}
Natural.prototype = {
    areaStart: function () {
        this._line = 0
    },
    areaEnd: function () {
        this._line = NaN
    },
    lineStart: function () {
        this._x = []
        this._y = []
    },
    lineEnd: function () {
        var x2 = this._x,
            y2 = this._y,
            n = x2.length
        if (n) {
            this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0])
            if (n === 2) {
                this._context.lineTo(x2[1], y2[1])
            } else {
                var px = controlPoints(x2),
                    py = controlPoints(y2)
                for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
                    this._context.bezierCurveTo(
                        px[0][i0],
                        py[0][i0],
                        px[1][i0],
                        py[1][i0],
                        x2[i1],
                        y2[i1]
                    )
                }
            }
        }
        if (this._line || (this._line !== 0 && n === 1)) this._context.closePath()
        this._line = 1 - this._line
        this._x = this._y = null
    },
    point: function (x2, y2) {
        this._x.push(+x2)
        this._y.push(+y2)
    }
}
function controlPoints(x2) {
    var i,
        n = x2.length - 1,
        m,
        a2 = new Array(n),
        b = new Array(n),
        r2 = new Array(n)
    ;(a2[0] = 0), (b[0] = 2), (r2[0] = x2[0] + 2 * x2[1])
    for (i = 1; i < n - 1; ++i) (a2[i] = 1), (b[i] = 4), (r2[i] = 4 * x2[i] + 2 * x2[i + 1])
    ;(a2[n - 1] = 2), (b[n - 1] = 7), (r2[n - 1] = 8 * x2[n - 1] + x2[n])
    for (i = 1; i < n; ++i) (m = a2[i] / b[i - 1]), (b[i] -= m), (r2[i] -= m * r2[i - 1])
    a2[n - 1] = r2[n - 1] / b[n - 1]
    for (i = n - 2; i >= 0; --i) a2[i] = (r2[i] - a2[i + 1]) / b[i]
    b[n - 1] = (x2[n] + a2[n - 1]) / 2
    for (i = 0; i < n - 1; ++i) b[i] = 2 * x2[i + 1] - a2[i + 1]
    return [a2, b]
}
function curveNatural(context) {
    return new Natural(context)
}
function Step(context, t) {
    this._context = context
    this._t = t
}
Step.prototype = {
    areaStart: function () {
        this._line = 0
    },
    areaEnd: function () {
        this._line = NaN
    },
    lineStart: function () {
        this._x = this._y = NaN
        this._point = 0
    },
    lineEnd: function () {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y)
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
        if (this._line >= 0) (this._t = 1 - this._t), (this._line = 1 - this._line)
    },
    point: function (x2, y2) {
        ;(x2 = +x2), (y2 = +y2)
        switch (this._point) {
            case 0:
                this._point = 1
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2)
                break
            case 1:
                this._point = 2
            // falls through
            default: {
                if (this._t <= 0) {
                    this._context.lineTo(this._x, y2)
                    this._context.lineTo(x2, y2)
                } else {
                    var x1 = this._x * (1 - this._t) + x2 * this._t
                    this._context.lineTo(x1, this._y)
                    this._context.lineTo(x1, y2)
                }
                break
            }
        }
        ;(this._x = x2), (this._y = y2)
    }
}
function curveStep(context) {
    return new Step(context, 0.5)
}
function stepBefore(context) {
    return new Step(context, 0)
}
function stepAfter(context) {
    return new Step(context, 1)
}
function stackOffsetNone(series, order) {
    if (!((n = series.length) > 1)) return
    for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
        ;(s0 = s1), (s1 = series[order[i]])
        for (j = 0; j < m; ++j) {
            s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1]
        }
    }
}
function stackOrderNone(series) {
    var n = series.length,
        o = new Array(n)
    while (--n >= 0) o[n] = n
    return o
}
function stackValue(d, key) {
    return d[key]
}
function stackSeries(key) {
    const series = []
    series.key = key
    return series
}
function shapeStack() {
    var keys2 = constant$1([]),
        order = stackOrderNone,
        offset = stackOffsetNone,
        value = stackValue
    function stack(data) {
        var sz = Array.from(keys2.apply(this, arguments), stackSeries),
            i,
            n = sz.length,
            j = -1,
            oz
        for (const d of data) {
            for (i = 0, ++j; i < n; ++i) {
                ;(sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d
            }
        }
        for (i = 0, oz = array(order(sz)); i < n; ++i) {
            sz[oz[i]].index = i
        }
        offset(sz, oz)
        return sz
    }
    stack.keys = function (_) {
        return arguments.length
            ? ((keys2 = typeof _ === 'function' ? _ : constant$1(Array.from(_))), stack)
            : keys2
    }
    stack.value = function (_) {
        return arguments.length
            ? ((value = typeof _ === 'function' ? _ : constant$1(+_)), stack)
            : value
    }
    stack.order = function (_) {
        return arguments.length
            ? ((order =
                  _ == null
                      ? stackOrderNone
                      : typeof _ === 'function'
                        ? _
                        : constant$1(Array.from(_))),
              stack)
            : order
    }
    stack.offset = function (_) {
        return arguments.length ? ((offset = _ == null ? stackOffsetNone : _), stack) : offset
    }
    return stack
}
function stackOffsetExpand(series, order) {
    if (!((n = series.length) > 0)) return
    for (var i, n, j = 0, m = series[0].length, y2; j < m; ++j) {
        for (y2 = i = 0; i < n; ++i) y2 += series[i][j][1] || 0
        if (y2) for (i = 0; i < n; ++i) series[i][j][1] /= y2
    }
    stackOffsetNone(series, order)
}
function stackOffsetSilhouette(series, order) {
    if (!((n = series.length) > 0)) return
    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
        for (var i = 0, y2 = 0; i < n; ++i) y2 += series[i][j][1] || 0
        s0[j][1] += s0[j][0] = -y2 / 2
    }
    stackOffsetNone(series, order)
}
function stackOffsetWiggle(series, order) {
    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return
    for (var y2 = 0, j = 1, s0, m, n; j < m; ++j) {
        for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
            var si = series[order[i]],
                sij0 = si[j][1] || 0,
                sij1 = si[j - 1][1] || 0,
                s3 = (sij0 - sij1) / 2
            for (var k2 = 0; k2 < i; ++k2) {
                var sk = series[order[k2]],
                    skj0 = sk[j][1] || 0,
                    skj1 = sk[j - 1][1] || 0
                s3 += skj0 - skj1
            }
            ;(s1 += sij0), (s2 += s3 * sij0)
        }
        s0[j - 1][1] += s0[j - 1][0] = y2
        if (s1) y2 -= s2 / s1
    }
    s0[j - 1][1] += s0[j - 1][0] = y2
    stackOffsetNone(series, order)
}
function _typeof$N(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$N =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$N(o)
    )
}
var _excluded$q = ['type', 'size', 'sizeType']
function _extends$w() {
    _extends$w = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$w.apply(this, arguments)
}
function ownKeys$G(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$F(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$G(Object(t), true).forEach(function (r3) {
                  _defineProperty$M(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$G(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$M(obj, key, value) {
    key = _toPropertyKey$L(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$L(t) {
    var i = _toPrimitive$L(t, 'string')
    return 'symbol' == _typeof$N(i) ? i : i + ''
}
function _toPrimitive$L(t, r2) {
    if ('object' != _typeof$N(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$N(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function _objectWithoutProperties$k(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$k(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$k(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
var symbolFactories = {
    symbolCircle,
    symbolCross,
    symbolDiamond,
    symbolSquare,
    symbolStar,
    symbolTriangle,
    symbolWye
}
var RADIAN$3 = Math.PI / 180
var getSymbolFactory = function getSymbolFactory2(type) {
    var name = 'symbol'.concat(upperFirst(type))
    return symbolFactories[name] || symbolCircle
}
var calculateAreaSize = function calculateAreaSize2(size, sizeType, type) {
    if (sizeType === 'area') {
        return size
    }
    switch (type) {
        case 'cross':
            return (5 * size * size) / 9
        case 'diamond':
            return (0.5 * size * size) / Math.sqrt(3)
        case 'square':
            return size * size
        case 'star': {
            var angle = 18 * RADIAN$3
            return (
                1.25 *
                size *
                size *
                (Math.tan(angle) - Math.tan(angle * 2) * Math.pow(Math.tan(angle), 2))
            )
        }
        case 'triangle':
            return (Math.sqrt(3) * size * size) / 4
        case 'wye':
            return ((21 - 10 * Math.sqrt(3)) * size * size) / 8
        default:
            return (Math.PI * size * size) / 4
    }
}
var registerSymbol = function registerSymbol2(key, factory) {
    symbolFactories['symbol'.concat(upperFirst(key))] = factory
}
var Symbols = function Symbols2(_ref3) {
    var _ref$type = _ref3.type,
        type = _ref$type === void 0 ? 'circle' : _ref$type,
        _ref$size = _ref3.size,
        size = _ref$size === void 0 ? 64 : _ref$size,
        _ref$sizeType = _ref3.sizeType,
        sizeType = _ref$sizeType === void 0 ? 'area' : _ref$sizeType,
        rest = _objectWithoutProperties$k(_ref3, _excluded$q)
    var props = _objectSpread$F(
        _objectSpread$F({}, rest),
        {},
        {
            type,
            size,
            sizeType
        }
    )
    var getPath4 = function getPath5() {
        var symbolFactory = getSymbolFactory(type)
        var symbol = Symbol$1()
            .type(symbolFactory)
            .size(calculateAreaSize(size, sizeType, type))
        return symbol()
    }
    var className = props.className,
        cx = props.cx,
        cy = props.cy
    var filteredProps = filterProps(props, true)
    if (cx === +cx && cy === +cy && size === +size) {
        return /* @__PURE__ */ React.createElement(
            'path',
            _extends$w({}, filteredProps, {
                className: clsx('recharts-symbols', className),
                transform: 'translate('.concat(cx, ', ').concat(cy, ')'),
                d: getPath4()
            })
        )
    }
    return null
}
Symbols.registerSymbol = registerSymbol
function _typeof$M(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$M =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$M(o)
    )
}
function _extends$v() {
    _extends$v = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$v.apply(this, arguments)
}
function ownKeys$F(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$E(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$F(Object(t), true).forEach(function (r3) {
                  _defineProperty$L(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$F(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$o(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$o(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$K(descriptor.key), descriptor)
    }
}
function _createClass$o(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$o(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$j(t, o, e) {
    return (
        (o = _getPrototypeOf$l(o)),
        _possibleConstructorReturn$l(
            t,
            _isNativeReflectConstruct$l()
                ? Reflect.construct(o, e || [], _getPrototypeOf$l(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$l(self2, call) {
    if (call && (_typeof$M(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$l(self2)
}
function _assertThisInitialized$l(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$l() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$l = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$l(o) {
    _getPrototypeOf$l = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$l(o)
}
function _inherits$l(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$l(subClass, superClass)
}
function _setPrototypeOf$l(o, p) {
    _setPrototypeOf$l = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$l(o, p)
}
function _defineProperty$L(obj, key, value) {
    key = _toPropertyKey$K(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$K(t) {
    var i = _toPrimitive$K(t, 'string')
    return 'symbol' == _typeof$M(i) ? i : i + ''
}
function _toPrimitive$K(t, r2) {
    if ('object' != _typeof$M(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$M(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var SIZE = 32
var DefaultLegendContent = /* @__PURE__ */ (function (_PureComponent) {
    function DefaultLegendContent2() {
        _classCallCheck$o(this, DefaultLegendContent2)
        return _callSuper$j(this, DefaultLegendContent2, arguments)
    }
    _inherits$l(DefaultLegendContent2, _PureComponent)
    return _createClass$o(DefaultLegendContent2, [
        {
            key: 'renderIcon',
            value:
                /**
                 * Render the path of icon
                 * @param {Object} data Data of each legend item
                 * @return {String} Path element
                 */
                function renderIcon(data) {
                    var inactiveColor = this.props.inactiveColor
                    var halfSize = SIZE / 2
                    var sixthSize = SIZE / 6
                    var thirdSize = SIZE / 3
                    var color2 = data.inactive ? inactiveColor : data.color
                    if (data.type === 'plainline') {
                        return /* @__PURE__ */ React.createElement('line', {
                            strokeWidth: 4,
                            fill: 'none',
                            stroke: color2,
                            strokeDasharray: data.payload.strokeDasharray,
                            x1: 0,
                            y1: halfSize,
                            x2: SIZE,
                            y2: halfSize,
                            className: 'recharts-legend-icon'
                        })
                    }
                    if (data.type === 'line') {
                        return /* @__PURE__ */ React.createElement('path', {
                            strokeWidth: 4,
                            fill: 'none',
                            stroke: color2,
                            d: 'M0,'
                                .concat(halfSize, 'h')
                                .concat(thirdSize, '\n            A')
                                .concat(sixthSize, ',')
                                .concat(sixthSize, ',0,1,1,')
                                .concat(2 * thirdSize, ',')
                                .concat(halfSize, '\n            H')
                                .concat(SIZE, 'M')
                                .concat(2 * thirdSize, ',')
                                .concat(halfSize, '\n            A')
                                .concat(sixthSize, ',')
                                .concat(sixthSize, ',0,1,1,')
                                .concat(thirdSize, ',')
                                .concat(halfSize),
                            className: 'recharts-legend-icon'
                        })
                    }
                    if (data.type === 'rect') {
                        return /* @__PURE__ */ React.createElement('path', {
                            stroke: 'none',
                            fill: color2,
                            d: 'M0,'
                                .concat(SIZE / 8, 'h')
                                .concat(SIZE, 'v')
                                .concat((SIZE * 3) / 4, 'h')
                                .concat(-32, 'z'),
                            className: 'recharts-legend-icon'
                        })
                    }
                    if (/* @__PURE__ */ React.isValidElement(data.legendIcon)) {
                        var iconProps = _objectSpread$E({}, data)
                        delete iconProps.legendIcon
                        return /* @__PURE__ */ React.cloneElement(data.legendIcon, iconProps)
                    }
                    return /* @__PURE__ */ React.createElement(Symbols, {
                        fill: color2,
                        cx: halfSize,
                        cy: halfSize,
                        size: SIZE,
                        sizeType: 'diameter',
                        type: data.type
                    })
                }
            /**
             * Draw items of legend
             * @return {ReactElement} Items
             */
        },
        {
            key: 'renderItems',
            value: function renderItems() {
                var _this = this
                var _this$props = this.props,
                    payload = _this$props.payload,
                    iconSize = _this$props.iconSize,
                    layout = _this$props.layout,
                    formatter = _this$props.formatter,
                    inactiveColor = _this$props.inactiveColor
                var viewBox = {
                    x: 0,
                    y: 0,
                    width: SIZE,
                    height: SIZE
                }
                var itemStyle = {
                    display: layout === 'horizontal' ? 'inline-block' : 'block',
                    marginRight: 10
                }
                var svgStyle = {
                    display: 'inline-block',
                    verticalAlign: 'middle',
                    marginRight: 4
                }
                return payload.map(function (entry, i) {
                    var finalFormatter = entry.formatter || formatter
                    var className = clsx(
                        _defineProperty$L(
                            _defineProperty$L(
                                {
                                    'recharts-legend-item': true
                                },
                                'legend-item-'.concat(i),
                                true
                            ),
                            'inactive',
                            entry.inactive
                        )
                    )
                    if (entry.type === 'none') {
                        return null
                    }
                    var entryValue = !isFunction(entry.value) ? entry.value : null
                    warn(
                        !isFunction(entry.value),
                        `The name property is also required when using a function for the dataKey of a chart's cartesian components. Ex: <Bar name="Name of my Data"/>`
                        // eslint-disable-line max-len
                    )
                    var color2 = entry.inactive ? inactiveColor : entry.color
                    return /* @__PURE__ */ React.createElement(
                        'li',
                        _extends$v(
                            {
                                className,
                                style: itemStyle,
                                key: 'legend-item-'.concat(i)
                            },
                            adaptEventsOfChild(_this.props, entry, i)
                        ),
                        /* @__PURE__ */ React.createElement(
                            Surface,
                            {
                                width: iconSize,
                                height: iconSize,
                                viewBox,
                                style: svgStyle
                            },
                            _this.renderIcon(entry)
                        ),
                        /* @__PURE__ */ React.createElement(
                            'span',
                            {
                                className: 'recharts-legend-item-text',
                                style: {
                                    color: color2
                                }
                            },
                            finalFormatter ? finalFormatter(entryValue, entry, i) : entryValue
                        )
                    )
                })
            }
        },
        {
            key: 'render',
            value: function render() {
                var _this$props2 = this.props,
                    payload = _this$props2.payload,
                    layout = _this$props2.layout,
                    align = _this$props2.align
                if (!payload || !payload.length) {
                    return null
                }
                var finalStyle = {
                    padding: 0,
                    margin: 0,
                    textAlign: layout === 'horizontal' ? align : 'left'
                }
                return /* @__PURE__ */ React.createElement(
                    'ul',
                    {
                        className: 'recharts-default-legend',
                        style: finalStyle
                    },
                    this.renderItems()
                )
            }
        }
    ])
})(reactExports.PureComponent)
_defineProperty$L(DefaultLegendContent, 'displayName', 'Legend')
_defineProperty$L(DefaultLegendContent, 'defaultProps', {
    iconSize: 14,
    layout: 'horizontal',
    align: 'center',
    verticalAlign: 'middle',
    inactiveColor: '#ccc'
})
var _stackClear
var hasRequired_stackClear
function require_stackClear() {
    if (hasRequired_stackClear) return _stackClear
    hasRequired_stackClear = 1
    var ListCache = require_ListCache()
    function stackClear() {
        this.__data__ = new ListCache()
        this.size = 0
    }
    _stackClear = stackClear
    return _stackClear
}
var _stackDelete
var hasRequired_stackDelete
function require_stackDelete() {
    if (hasRequired_stackDelete) return _stackDelete
    hasRequired_stackDelete = 1
    function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key)
        this.size = data.size
        return result
    }
    _stackDelete = stackDelete
    return _stackDelete
}
var _stackGet
var hasRequired_stackGet
function require_stackGet() {
    if (hasRequired_stackGet) return _stackGet
    hasRequired_stackGet = 1
    function stackGet(key) {
        return this.__data__.get(key)
    }
    _stackGet = stackGet
    return _stackGet
}
var _stackHas
var hasRequired_stackHas
function require_stackHas() {
    if (hasRequired_stackHas) return _stackHas
    hasRequired_stackHas = 1
    function stackHas(key) {
        return this.__data__.has(key)
    }
    _stackHas = stackHas
    return _stackHas
}
var _stackSet
var hasRequired_stackSet
function require_stackSet() {
    if (hasRequired_stackSet) return _stackSet
    hasRequired_stackSet = 1
    var ListCache = require_ListCache(),
        Map2 = require_Map(),
        MapCache = require_MapCache()
    var LARGE_ARRAY_SIZE = 200
    function stackSet(key, value) {
        var data = this.__data__
        if (data instanceof ListCache) {
            var pairs = data.__data__
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value])
                this.size = ++data.size
                return this
            }
            data = this.__data__ = new MapCache(pairs)
        }
        data.set(key, value)
        this.size = data.size
        return this
    }
    _stackSet = stackSet
    return _stackSet
}
var _Stack
var hasRequired_Stack
function require_Stack() {
    if (hasRequired_Stack) return _Stack
    hasRequired_Stack = 1
    var ListCache = require_ListCache(),
        stackClear = require_stackClear(),
        stackDelete = require_stackDelete(),
        stackGet = require_stackGet(),
        stackHas = require_stackHas(),
        stackSet = require_stackSet()
    function Stack(entries) {
        var data = (this.__data__ = new ListCache(entries))
        this.size = data.size
    }
    Stack.prototype.clear = stackClear
    Stack.prototype['delete'] = stackDelete
    Stack.prototype.get = stackGet
    Stack.prototype.has = stackHas
    Stack.prototype.set = stackSet
    _Stack = Stack
    return _Stack
}
var _setCacheAdd
var hasRequired_setCacheAdd
function require_setCacheAdd() {
    if (hasRequired_setCacheAdd) return _setCacheAdd
    hasRequired_setCacheAdd = 1
    var HASH_UNDEFINED = '__lodash_hash_undefined__'
    function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED)
        return this
    }
    _setCacheAdd = setCacheAdd
    return _setCacheAdd
}
var _setCacheHas
var hasRequired_setCacheHas
function require_setCacheHas() {
    if (hasRequired_setCacheHas) return _setCacheHas
    hasRequired_setCacheHas = 1
    function setCacheHas(value) {
        return this.__data__.has(value)
    }
    _setCacheHas = setCacheHas
    return _setCacheHas
}
var _SetCache
var hasRequired_SetCache
function require_SetCache() {
    if (hasRequired_SetCache) return _SetCache
    hasRequired_SetCache = 1
    var MapCache = require_MapCache(),
        setCacheAdd = require_setCacheAdd(),
        setCacheHas = require_setCacheHas()
    function SetCache(values) {
        var index2 = -1,
            length2 = values == null ? 0 : values.length
        this.__data__ = new MapCache()
        while (++index2 < length2) {
            this.add(values[index2])
        }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd
    SetCache.prototype.has = setCacheHas
    _SetCache = SetCache
    return _SetCache
}
var _arraySome
var hasRequired_arraySome
function require_arraySome() {
    if (hasRequired_arraySome) return _arraySome
    hasRequired_arraySome = 1
    function arraySome(array2, predicate) {
        var index2 = -1,
            length2 = array2 == null ? 0 : array2.length
        while (++index2 < length2) {
            if (predicate(array2[index2], index2, array2)) {
                return true
            }
        }
        return false
    }
    _arraySome = arraySome
    return _arraySome
}
var _cacheHas
var hasRequired_cacheHas
function require_cacheHas() {
    if (hasRequired_cacheHas) return _cacheHas
    hasRequired_cacheHas = 1
    function cacheHas(cache, key) {
        return cache.has(key)
    }
    _cacheHas = cacheHas
    return _cacheHas
}
var _equalArrays
var hasRequired_equalArrays
function require_equalArrays() {
    if (hasRequired_equalArrays) return _equalArrays
    hasRequired_equalArrays = 1
    var SetCache = require_SetCache(),
        arraySome = require_arraySome(),
        cacheHas = require_cacheHas()
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2
    function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array2.length,
            othLength = other.length
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false
        }
        var arrStacked = stack.get(array2)
        var othStacked = stack.get(other)
        if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array2
        }
        var index2 = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0
        stack.set(array2, other)
        stack.set(other, array2)
        while (++index2 < arrLength) {
            var arrValue = array2[index2],
                othValue = other[index2]
            if (customizer) {
                var compared = isPartial
                    ? customizer(othValue, arrValue, index2, other, array2, stack)
                    : customizer(arrValue, othValue, index2, array2, other, stack)
            }
            if (compared !== void 0) {
                if (compared) {
                    continue
                }
                result = false
                break
            }
            if (seen) {
                if (
                    !arraySome(other, function (othValue2, othIndex) {
                        if (
                            !cacheHas(seen, othIndex) &&
                            (arrValue === othValue2 ||
                                equalFunc(arrValue, othValue2, bitmask, customizer, stack))
                        ) {
                            return seen.push(othIndex)
                        }
                    })
                ) {
                    result = false
                    break
                }
            } else if (
                !(
                    arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )
            ) {
                result = false
                break
            }
        }
        stack['delete'](array2)
        stack['delete'](other)
        return result
    }
    _equalArrays = equalArrays
    return _equalArrays
}
var _Uint8Array
var hasRequired_Uint8Array
function require_Uint8Array() {
    if (hasRequired_Uint8Array) return _Uint8Array
    hasRequired_Uint8Array = 1
    var root = require_root()
    var Uint8Array2 = root.Uint8Array
    _Uint8Array = Uint8Array2
    return _Uint8Array
}
var _mapToArray
var hasRequired_mapToArray
function require_mapToArray() {
    if (hasRequired_mapToArray) return _mapToArray
    hasRequired_mapToArray = 1
    function mapToArray(map2) {
        var index2 = -1,
            result = Array(map2.size)
        map2.forEach(function (value, key) {
            result[++index2] = [key, value]
        })
        return result
    }
    _mapToArray = mapToArray
    return _mapToArray
}
var _setToArray
var hasRequired_setToArray
function require_setToArray() {
    if (hasRequired_setToArray) return _setToArray
    hasRequired_setToArray = 1
    function setToArray(set) {
        var index2 = -1,
            result = Array(set.size)
        set.forEach(function (value) {
            result[++index2] = value
        })
        return result
    }
    _setToArray = setToArray
    return _setToArray
}
var _equalByTag
var hasRequired_equalByTag
function require_equalByTag() {
    if (hasRequired_equalByTag) return _equalByTag
    hasRequired_equalByTag = 1
    var Symbol2 = require_Symbol(),
        Uint8Array2 = require_Uint8Array(),
        eq = requireEq(),
        equalArrays = require_equalArrays(),
        mapToArray = require_mapToArray(),
        setToArray = require_setToArray()
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2
    var boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]'
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]'
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0,
        symbolValueOf = symbolProto ? symbolProto.valueOf : void 0
    function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
            case dataViewTag:
                if (
                    object2.byteLength != other.byteLength ||
                    object2.byteOffset != other.byteOffset
                ) {
                    return false
                }
                object2 = object2.buffer
                other = other.buffer
            case arrayBufferTag:
                if (
                    object2.byteLength != other.byteLength ||
                    !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))
                ) {
                    return false
                }
                return true
            case boolTag:
            case dateTag:
            case numberTag:
                return eq(+object2, +other)
            case errorTag:
                return object2.name == other.name && object2.message == other.message
            case regexpTag:
            case stringTag:
                return object2 == other + ''
            case mapTag:
                var convert = mapToArray
            case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG
                convert || (convert = setToArray)
                if (object2.size != other.size && !isPartial) {
                    return false
                }
                var stacked = stack.get(object2)
                if (stacked) {
                    return stacked == other
                }
                bitmask |= COMPARE_UNORDERED_FLAG
                stack.set(object2, other)
                var result = equalArrays(
                    convert(object2),
                    convert(other),
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                )
                stack['delete'](object2)
                return result
            case symbolTag:
                if (symbolValueOf) {
                    return symbolValueOf.call(object2) == symbolValueOf.call(other)
                }
        }
        return false
    }
    _equalByTag = equalByTag
    return _equalByTag
}
var _arrayPush
var hasRequired_arrayPush
function require_arrayPush() {
    if (hasRequired_arrayPush) return _arrayPush
    hasRequired_arrayPush = 1
    function arrayPush(array2, values) {
        var index2 = -1,
            length2 = values.length,
            offset = array2.length
        while (++index2 < length2) {
            array2[offset + index2] = values[index2]
        }
        return array2
    }
    _arrayPush = arrayPush
    return _arrayPush
}
var _baseGetAllKeys
var hasRequired_baseGetAllKeys
function require_baseGetAllKeys() {
    if (hasRequired_baseGetAllKeys) return _baseGetAllKeys
    hasRequired_baseGetAllKeys = 1
    var arrayPush = require_arrayPush(),
        isArray2 = requireIsArray()
    function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
        var result = keysFunc(object2)
        return isArray2(object2) ? result : arrayPush(result, symbolsFunc(object2))
    }
    _baseGetAllKeys = baseGetAllKeys
    return _baseGetAllKeys
}
var _arrayFilter
var hasRequired_arrayFilter
function require_arrayFilter() {
    if (hasRequired_arrayFilter) return _arrayFilter
    hasRequired_arrayFilter = 1
    function arrayFilter(array2, predicate) {
        var index2 = -1,
            length2 = array2 == null ? 0 : array2.length,
            resIndex = 0,
            result = []
        while (++index2 < length2) {
            var value = array2[index2]
            if (predicate(value, index2, array2)) {
                result[resIndex++] = value
            }
        }
        return result
    }
    _arrayFilter = arrayFilter
    return _arrayFilter
}
var stubArray_1
var hasRequiredStubArray
function requireStubArray() {
    if (hasRequiredStubArray) return stubArray_1
    hasRequiredStubArray = 1
    function stubArray() {
        return []
    }
    stubArray_1 = stubArray
    return stubArray_1
}
var _getSymbols
var hasRequired_getSymbols
function require_getSymbols() {
    if (hasRequired_getSymbols) return _getSymbols
    hasRequired_getSymbols = 1
    var arrayFilter = require_arrayFilter(),
        stubArray = requireStubArray()
    var objectProto = Object.prototype
    var propertyIsEnumerable = objectProto.propertyIsEnumerable
    var nativeGetSymbols = Object.getOwnPropertySymbols
    var getSymbols = !nativeGetSymbols
        ? stubArray
        : function (object2) {
              if (object2 == null) {
                  return []
              }
              object2 = Object(object2)
              return arrayFilter(nativeGetSymbols(object2), function (symbol) {
                  return propertyIsEnumerable.call(object2, symbol)
              })
          }
    _getSymbols = getSymbols
    return _getSymbols
}
var _baseTimes
var hasRequired_baseTimes
function require_baseTimes() {
    if (hasRequired_baseTimes) return _baseTimes
    hasRequired_baseTimes = 1
    function baseTimes(n, iteratee) {
        var index2 = -1,
            result = Array(n)
        while (++index2 < n) {
            result[index2] = iteratee(index2)
        }
        return result
    }
    _baseTimes = baseTimes
    return _baseTimes
}
var _baseIsArguments
var hasRequired_baseIsArguments
function require_baseIsArguments() {
    if (hasRequired_baseIsArguments) return _baseIsArguments
    hasRequired_baseIsArguments = 1
    var baseGetTag = require_baseGetTag(),
        isObjectLike = requireIsObjectLike()
    var argsTag = '[object Arguments]'
    function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag
    }
    _baseIsArguments = baseIsArguments
    return _baseIsArguments
}
var isArguments_1
var hasRequiredIsArguments
function requireIsArguments() {
    if (hasRequiredIsArguments) return isArguments_1
    hasRequiredIsArguments = 1
    var baseIsArguments = require_baseIsArguments(),
        isObjectLike = requireIsObjectLike()
    var objectProto = Object.prototype
    var hasOwnProperty2 = objectProto.hasOwnProperty
    var propertyIsEnumerable = objectProto.propertyIsEnumerable
    var isArguments = baseIsArguments(
        /* @__PURE__ */ (function () {
            return arguments
        })()
    )
        ? baseIsArguments
        : function (value) {
              return (
                  isObjectLike(value) &&
                  hasOwnProperty2.call(value, 'callee') &&
                  !propertyIsEnumerable.call(value, 'callee')
              )
          }
    isArguments_1 = isArguments
    return isArguments_1
}
var isBuffer = { exports: {} }
var stubFalse_1
var hasRequiredStubFalse
function requireStubFalse() {
    if (hasRequiredStubFalse) return stubFalse_1
    hasRequiredStubFalse = 1
    function stubFalse() {
        return false
    }
    stubFalse_1 = stubFalse
    return stubFalse_1
}
isBuffer.exports
var hasRequiredIsBuffer
function requireIsBuffer() {
    if (hasRequiredIsBuffer) return isBuffer.exports
    hasRequiredIsBuffer = 1
    ;(function (module, exports) {
        var root = require_root(),
            stubFalse = requireStubFalse()
        var freeExports = exports && !exports.nodeType && exports
        var freeModule = freeExports && true && module && !module.nodeType && module
        var moduleExports = freeModule && freeModule.exports === freeExports
        var Buffer2 = moduleExports ? root.Buffer : void 0
        var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0
        var isBuffer2 = nativeIsBuffer || stubFalse
        module.exports = isBuffer2
    })(isBuffer, isBuffer.exports)
    return isBuffer.exports
}
var _isIndex
var hasRequired_isIndex
function require_isIndex() {
    if (hasRequired_isIndex) return _isIndex
    hasRequired_isIndex = 1
    var MAX_SAFE_INTEGER2 = 9007199254740991
    var reIsUint = /^(?:0|[1-9]\d*)$/
    function isIndex(value, length2) {
        var type = typeof value
        length2 = length2 == null ? MAX_SAFE_INTEGER2 : length2
        return (
            !!length2 &&
            (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
            value > -1 &&
            value % 1 == 0 &&
            value < length2
        )
    }
    _isIndex = isIndex
    return _isIndex
}
var isLength_1
var hasRequiredIsLength
function requireIsLength() {
    if (hasRequiredIsLength) return isLength_1
    hasRequiredIsLength = 1
    var MAX_SAFE_INTEGER2 = 9007199254740991
    function isLength(value) {
        return (
            typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2
        )
    }
    isLength_1 = isLength
    return isLength_1
}
var _baseIsTypedArray
var hasRequired_baseIsTypedArray
function require_baseIsTypedArray() {
    if (hasRequired_baseIsTypedArray) return _baseIsTypedArray
    hasRequired_baseIsTypedArray = 1
    var baseGetTag = require_baseGetTag(),
        isLength = requireIsLength(),
        isObjectLike = requireIsObjectLike()
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]'
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]'
    var typedArrayTags = {}
    typedArrayTags[float32Tag] =
        typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] =
        typedArrayTags[int16Tag] =
        typedArrayTags[int32Tag] =
        typedArrayTags[uint8Tag] =
        typedArrayTags[uint8ClampedTag] =
        typedArrayTags[uint16Tag] =
        typedArrayTags[uint32Tag] =
            true
    typedArrayTags[argsTag] =
        typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] =
        typedArrayTags[boolTag] =
        typedArrayTags[dataViewTag] =
        typedArrayTags[dateTag] =
        typedArrayTags[errorTag] =
        typedArrayTags[funcTag] =
        typedArrayTags[mapTag] =
        typedArrayTags[numberTag] =
        typedArrayTags[objectTag] =
        typedArrayTags[regexpTag] =
        typedArrayTags[setTag] =
        typedArrayTags[stringTag] =
        typedArrayTags[weakMapTag] =
            false
    function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)]
    }
    _baseIsTypedArray = baseIsTypedArray
    return _baseIsTypedArray
}
var _baseUnary
var hasRequired_baseUnary
function require_baseUnary() {
    if (hasRequired_baseUnary) return _baseUnary
    hasRequired_baseUnary = 1
    function baseUnary(func) {
        return function (value) {
            return func(value)
        }
    }
    _baseUnary = baseUnary
    return _baseUnary
}
var _nodeUtil = { exports: {} }
_nodeUtil.exports
var hasRequired_nodeUtil
function require_nodeUtil() {
    if (hasRequired_nodeUtil) return _nodeUtil.exports
    hasRequired_nodeUtil = 1
    ;(function (module, exports) {
        var freeGlobal = require_freeGlobal()
        var freeExports = exports && !exports.nodeType && exports
        var freeModule = freeExports && true && module && !module.nodeType && module
        var moduleExports = freeModule && freeModule.exports === freeExports
        var freeProcess = moduleExports && freeGlobal.process
        var nodeUtil = (function () {
            try {
                var types = freeModule && freeModule.require && freeModule.require('util').types
                if (types) {
                    return types
                }
                return freeProcess && freeProcess.binding && freeProcess.binding('util')
            } catch (e) {}
        })()
        module.exports = nodeUtil
    })(_nodeUtil, _nodeUtil.exports)
    return _nodeUtil.exports
}
var isTypedArray_1
var hasRequiredIsTypedArray
function requireIsTypedArray() {
    if (hasRequiredIsTypedArray) return isTypedArray_1
    hasRequiredIsTypedArray = 1
    var baseIsTypedArray = require_baseIsTypedArray(),
        baseUnary = require_baseUnary(),
        nodeUtil = require_nodeUtil()
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray
    var isTypedArray2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray
    isTypedArray_1 = isTypedArray2
    return isTypedArray_1
}
var _arrayLikeKeys
var hasRequired_arrayLikeKeys
function require_arrayLikeKeys() {
    if (hasRequired_arrayLikeKeys) return _arrayLikeKeys
    hasRequired_arrayLikeKeys = 1
    var baseTimes = require_baseTimes(),
        isArguments = requireIsArguments(),
        isArray2 = requireIsArray(),
        isBuffer2 = requireIsBuffer(),
        isIndex = require_isIndex(),
        isTypedArray2 = requireIsTypedArray()
    var objectProto = Object.prototype
    var hasOwnProperty2 = objectProto.hasOwnProperty
    function arrayLikeKeys(value, inherited) {
        var isArr = isArray2(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer2(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray2(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length2 = result.length
        for (var key in value) {
            if (
                (inherited || hasOwnProperty2.call(value, key)) &&
                !(
                    skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
                    (key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
                        (isBuff && (key == 'offset' || key == 'parent')) || // PhantomJS 2 has enumerable non-index properties on typed arrays.
                        (isType &&
                            (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) || // Skip index properties.
                        isIndex(key, length2))
                )
            ) {
                result.push(key)
            }
        }
        return result
    }
    _arrayLikeKeys = arrayLikeKeys
    return _arrayLikeKeys
}
var _isPrototype
var hasRequired_isPrototype
function require_isPrototype() {
    if (hasRequired_isPrototype) return _isPrototype
    hasRequired_isPrototype = 1
    var objectProto = Object.prototype
    function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto
        return value === proto
    }
    _isPrototype = isPrototype
    return _isPrototype
}
var _overArg
var hasRequired_overArg
function require_overArg() {
    if (hasRequired_overArg) return _overArg
    hasRequired_overArg = 1
    function overArg(func, transform) {
        return function (arg) {
            return func(transform(arg))
        }
    }
    _overArg = overArg
    return _overArg
}
var _nativeKeys
var hasRequired_nativeKeys
function require_nativeKeys() {
    if (hasRequired_nativeKeys) return _nativeKeys
    hasRequired_nativeKeys = 1
    var overArg = require_overArg()
    var nativeKeys = overArg(Object.keys, Object)
    _nativeKeys = nativeKeys
    return _nativeKeys
}
var _baseKeys
var hasRequired_baseKeys
function require_baseKeys() {
    if (hasRequired_baseKeys) return _baseKeys
    hasRequired_baseKeys = 1
    var isPrototype = require_isPrototype(),
        nativeKeys = require_nativeKeys()
    var objectProto = Object.prototype
    var hasOwnProperty2 = objectProto.hasOwnProperty
    function baseKeys(object2) {
        if (!isPrototype(object2)) {
            return nativeKeys(object2)
        }
        var result = []
        for (var key in Object(object2)) {
            if (hasOwnProperty2.call(object2, key) && key != 'constructor') {
                result.push(key)
            }
        }
        return result
    }
    _baseKeys = baseKeys
    return _baseKeys
}
var isArrayLike_1
var hasRequiredIsArrayLike
function requireIsArrayLike() {
    if (hasRequiredIsArrayLike) return isArrayLike_1
    hasRequiredIsArrayLike = 1
    var isFunction2 = requireIsFunction(),
        isLength = requireIsLength()
    function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction2(value)
    }
    isArrayLike_1 = isArrayLike
    return isArrayLike_1
}
var keys_1
var hasRequiredKeys
function requireKeys() {
    if (hasRequiredKeys) return keys_1
    hasRequiredKeys = 1
    var arrayLikeKeys = require_arrayLikeKeys(),
        baseKeys = require_baseKeys(),
        isArrayLike = requireIsArrayLike()
    function keys2(object2) {
        return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2)
    }
    keys_1 = keys2
    return keys_1
}
var _getAllKeys
var hasRequired_getAllKeys
function require_getAllKeys() {
    if (hasRequired_getAllKeys) return _getAllKeys
    hasRequired_getAllKeys = 1
    var baseGetAllKeys = require_baseGetAllKeys(),
        getSymbols = require_getSymbols(),
        keys2 = requireKeys()
    function getAllKeys(object2) {
        return baseGetAllKeys(object2, keys2, getSymbols)
    }
    _getAllKeys = getAllKeys
    return _getAllKeys
}
var _equalObjects
var hasRequired_equalObjects
function require_equalObjects() {
    if (hasRequired_equalObjects) return _equalObjects
    hasRequired_equalObjects = 1
    var getAllKeys = require_getAllKeys()
    var COMPARE_PARTIAL_FLAG = 1
    var objectProto = Object.prototype
    var hasOwnProperty2 = objectProto.hasOwnProperty
    function equalObjects(object2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object2),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length
        if (objLength != othLength && !isPartial) {
            return false
        }
        var index2 = objLength
        while (index2--) {
            var key = objProps[index2]
            if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
                return false
            }
        }
        var objStacked = stack.get(object2)
        var othStacked = stack.get(other)
        if (objStacked && othStacked) {
            return objStacked == other && othStacked == object2
        }
        var result = true
        stack.set(object2, other)
        stack.set(other, object2)
        var skipCtor = isPartial
        while (++index2 < objLength) {
            key = objProps[index2]
            var objValue = object2[key],
                othValue = other[key]
            if (customizer) {
                var compared = isPartial
                    ? customizer(othValue, objValue, key, other, object2, stack)
                    : customizer(objValue, othValue, key, object2, other, stack)
            }
            if (
                !(compared === void 0
                    ? objValue === othValue ||
                      equalFunc(objValue, othValue, bitmask, customizer, stack)
                    : compared)
            ) {
                result = false
                break
            }
            skipCtor || (skipCtor = key == 'constructor')
        }
        if (result && !skipCtor) {
            var objCtor = object2.constructor,
                othCtor = other.constructor
            if (
                objCtor != othCtor &&
                'constructor' in object2 &&
                'constructor' in other &&
                !(
                    typeof objCtor == 'function' &&
                    objCtor instanceof objCtor &&
                    typeof othCtor == 'function' &&
                    othCtor instanceof othCtor
                )
            ) {
                result = false
            }
        }
        stack['delete'](object2)
        stack['delete'](other)
        return result
    }
    _equalObjects = equalObjects
    return _equalObjects
}
var _DataView
var hasRequired_DataView
function require_DataView() {
    if (hasRequired_DataView) return _DataView
    hasRequired_DataView = 1
    var getNative = require_getNative(),
        root = require_root()
    var DataView2 = getNative(root, 'DataView')
    _DataView = DataView2
    return _DataView
}
var _Promise
var hasRequired_Promise
function require_Promise() {
    if (hasRequired_Promise) return _Promise
    hasRequired_Promise = 1
    var getNative = require_getNative(),
        root = require_root()
    var Promise2 = getNative(root, 'Promise')
    _Promise = Promise2
    return _Promise
}
var _Set
var hasRequired_Set
function require_Set() {
    if (hasRequired_Set) return _Set
    hasRequired_Set = 1
    var getNative = require_getNative(),
        root = require_root()
    var Set2 = getNative(root, 'Set')
    _Set = Set2
    return _Set
}
var _WeakMap
var hasRequired_WeakMap
function require_WeakMap() {
    if (hasRequired_WeakMap) return _WeakMap
    hasRequired_WeakMap = 1
    var getNative = require_getNative(),
        root = require_root()
    var WeakMap2 = getNative(root, 'WeakMap')
    _WeakMap = WeakMap2
    return _WeakMap
}
var _getTag
var hasRequired_getTag
function require_getTag() {
    if (hasRequired_getTag) return _getTag
    hasRequired_getTag = 1
    var DataView2 = require_DataView(),
        Map2 = require_Map(),
        Promise2 = require_Promise(),
        Set2 = require_Set(),
        WeakMap2 = require_WeakMap(),
        baseGetTag = require_baseGetTag(),
        toSource = require_toSource()
    var mapTag = '[object Map]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        setTag = '[object Set]',
        weakMapTag = '[object WeakMap]'
    var dataViewTag = '[object DataView]'
    var dataViewCtorString = toSource(DataView2),
        mapCtorString = toSource(Map2),
        promiseCtorString = toSource(Promise2),
        setCtorString = toSource(Set2),
        weakMapCtorString = toSource(WeakMap2)
    var getTag2 = baseGetTag
    if (
        (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag) ||
        (Map2 && getTag2(new Map2()) != mapTag) ||
        (Promise2 && getTag2(Promise2.resolve()) != promiseTag) ||
        (Set2 && getTag2(new Set2()) != setTag) ||
        (WeakMap2 && getTag2(new WeakMap2()) != weakMapTag)
    ) {
        getTag2 = function (value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : void 0,
                ctorString = Ctor ? toSource(Ctor) : ''
            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag
                    case mapCtorString:
                        return mapTag
                    case promiseCtorString:
                        return promiseTag
                    case setCtorString:
                        return setTag
                    case weakMapCtorString:
                        return weakMapTag
                }
            }
            return result
        }
    }
    _getTag = getTag2
    return _getTag
}
var _baseIsEqualDeep
var hasRequired_baseIsEqualDeep
function require_baseIsEqualDeep() {
    if (hasRequired_baseIsEqualDeep) return _baseIsEqualDeep
    hasRequired_baseIsEqualDeep = 1
    var Stack = require_Stack(),
        equalArrays = require_equalArrays(),
        equalByTag = require_equalByTag(),
        equalObjects = require_equalObjects(),
        getTag2 = require_getTag(),
        isArray2 = requireIsArray(),
        isBuffer2 = requireIsBuffer(),
        isTypedArray2 = requireIsTypedArray()
    var COMPARE_PARTIAL_FLAG = 1
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        objectTag = '[object Object]'
    var objectProto = Object.prototype
    var hasOwnProperty2 = objectProto.hasOwnProperty
    function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object2),
            othIsArr = isArray2(other),
            objTag = objIsArr ? arrayTag : getTag2(object2),
            othTag = othIsArr ? arrayTag : getTag2(other)
        objTag = objTag == argsTag ? objectTag : objTag
        othTag = othTag == argsTag ? objectTag : othTag
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag
        if (isSameTag && isBuffer2(object2)) {
            if (!isBuffer2(other)) {
                return false
            }
            objIsArr = true
            objIsObj = false
        }
        if (isSameTag && !objIsObj) {
            stack || (stack = new Stack())
            return objIsArr || isTypedArray2(object2)
                ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack)
                : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack)
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty2.call(object2, '__wrapped__'),
                othIsWrapped = othIsObj && hasOwnProperty2.call(other, '__wrapped__')
            if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object2.value() : object2,
                    othUnwrapped = othIsWrapped ? other.value() : other
                stack || (stack = new Stack())
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack)
            }
        }
        if (!isSameTag) {
            return false
        }
        stack || (stack = new Stack())
        return equalObjects(object2, other, bitmask, customizer, equalFunc, stack)
    }
    _baseIsEqualDeep = baseIsEqualDeep
    return _baseIsEqualDeep
}
var _baseIsEqual
var hasRequired_baseIsEqual
function require_baseIsEqual() {
    if (hasRequired_baseIsEqual) return _baseIsEqual
    hasRequired_baseIsEqual = 1
    var baseIsEqualDeep = require_baseIsEqualDeep(),
        isObjectLike = requireIsObjectLike()
    function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
            return true
        }
        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
            return value !== value && other !== other
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack)
    }
    _baseIsEqual = baseIsEqual
    return _baseIsEqual
}
var _baseIsMatch
var hasRequired_baseIsMatch
function require_baseIsMatch() {
    if (hasRequired_baseIsMatch) return _baseIsMatch
    hasRequired_baseIsMatch = 1
    var Stack = require_Stack(),
        baseIsEqual = require_baseIsEqual()
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2
    function baseIsMatch(object2, source, matchData, customizer) {
        var index2 = matchData.length,
            length2 = index2,
            noCustomizer = !customizer
        if (object2 == null) {
            return !length2
        }
        object2 = Object(object2)
        while (index2--) {
            var data = matchData[index2]
            if (noCustomizer && data[2] ? data[1] !== object2[data[0]] : !(data[0] in object2)) {
                return false
            }
        }
        while (++index2 < length2) {
            data = matchData[index2]
            var key = data[0],
                objValue = object2[key],
                srcValue = data[1]
            if (noCustomizer && data[2]) {
                if (objValue === void 0 && !(key in object2)) {
                    return false
                }
            } else {
                var stack = new Stack()
                if (customizer) {
                    var result = customizer(objValue, srcValue, key, object2, source, stack)
                }
                if (
                    !(result === void 0
                        ? baseIsEqual(
                              srcValue,
                              objValue,
                              COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                              customizer,
                              stack
                          )
                        : result)
                ) {
                    return false
                }
            }
        }
        return true
    }
    _baseIsMatch = baseIsMatch
    return _baseIsMatch
}
var _isStrictComparable
var hasRequired_isStrictComparable
function require_isStrictComparable() {
    if (hasRequired_isStrictComparable) return _isStrictComparable
    hasRequired_isStrictComparable = 1
    var isObject2 = requireIsObject()
    function isStrictComparable(value) {
        return value === value && !isObject2(value)
    }
    _isStrictComparable = isStrictComparable
    return _isStrictComparable
}
var _getMatchData
var hasRequired_getMatchData
function require_getMatchData() {
    if (hasRequired_getMatchData) return _getMatchData
    hasRequired_getMatchData = 1
    var isStrictComparable = require_isStrictComparable(),
        keys2 = requireKeys()
    function getMatchData(object2) {
        var result = keys2(object2),
            length2 = result.length
        while (length2--) {
            var key = result[length2],
                value = object2[key]
            result[length2] = [key, value, isStrictComparable(value)]
        }
        return result
    }
    _getMatchData = getMatchData
    return _getMatchData
}
var _matchesStrictComparable
var hasRequired_matchesStrictComparable
function require_matchesStrictComparable() {
    if (hasRequired_matchesStrictComparable) return _matchesStrictComparable
    hasRequired_matchesStrictComparable = 1
    function matchesStrictComparable(key, srcValue) {
        return function (object2) {
            if (object2 == null) {
                return false
            }
            return object2[key] === srcValue && (srcValue !== void 0 || key in Object(object2))
        }
    }
    _matchesStrictComparable = matchesStrictComparable
    return _matchesStrictComparable
}
var _baseMatches
var hasRequired_baseMatches
function require_baseMatches() {
    if (hasRequired_baseMatches) return _baseMatches
    hasRequired_baseMatches = 1
    var baseIsMatch = require_baseIsMatch(),
        getMatchData = require_getMatchData(),
        matchesStrictComparable = require_matchesStrictComparable()
    function baseMatches(source) {
        var matchData = getMatchData(source)
        if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1])
        }
        return function (object2) {
            return object2 === source || baseIsMatch(object2, source, matchData)
        }
    }
    _baseMatches = baseMatches
    return _baseMatches
}
var _baseHasIn
var hasRequired_baseHasIn
function require_baseHasIn() {
    if (hasRequired_baseHasIn) return _baseHasIn
    hasRequired_baseHasIn = 1
    function baseHasIn(object2, key) {
        return object2 != null && key in Object(object2)
    }
    _baseHasIn = baseHasIn
    return _baseHasIn
}
var _hasPath
var hasRequired_hasPath
function require_hasPath() {
    if (hasRequired_hasPath) return _hasPath
    hasRequired_hasPath = 1
    var castPath = require_castPath(),
        isArguments = requireIsArguments(),
        isArray2 = requireIsArray(),
        isIndex = require_isIndex(),
        isLength = requireIsLength(),
        toKey = require_toKey()
    function hasPath(object2, path, hasFunc) {
        path = castPath(path, object2)
        var index2 = -1,
            length2 = path.length,
            result = false
        while (++index2 < length2) {
            var key = toKey(path[index2])
            if (!(result = object2 != null && hasFunc(object2, key))) {
                break
            }
            object2 = object2[key]
        }
        if (result || ++index2 != length2) {
            return result
        }
        length2 = object2 == null ? 0 : object2.length
        return (
            !!length2 &&
            isLength(length2) &&
            isIndex(key, length2) &&
            (isArray2(object2) || isArguments(object2))
        )
    }
    _hasPath = hasPath
    return _hasPath
}
var hasIn_1
var hasRequiredHasIn
function requireHasIn() {
    if (hasRequiredHasIn) return hasIn_1
    hasRequiredHasIn = 1
    var baseHasIn = require_baseHasIn(),
        hasPath = require_hasPath()
    function hasIn(object2, path) {
        return object2 != null && hasPath(object2, path, baseHasIn)
    }
    hasIn_1 = hasIn
    return hasIn_1
}
var _baseMatchesProperty
var hasRequired_baseMatchesProperty
function require_baseMatchesProperty() {
    if (hasRequired_baseMatchesProperty) return _baseMatchesProperty
    hasRequired_baseMatchesProperty = 1
    var baseIsEqual = require_baseIsEqual(),
        get2 = requireGet(),
        hasIn = requireHasIn(),
        isKey = require_isKey(),
        isStrictComparable = require_isStrictComparable(),
        matchesStrictComparable = require_matchesStrictComparable(),
        toKey = require_toKey()
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2
    function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue)
        }
        return function (object2) {
            var objValue = get2(object2, path)
            return objValue === void 0 && objValue === srcValue
                ? hasIn(object2, path)
                : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG)
        }
    }
    _baseMatchesProperty = baseMatchesProperty
    return _baseMatchesProperty
}
var identity_1
var hasRequiredIdentity
function requireIdentity() {
    if (hasRequiredIdentity) return identity_1
    hasRequiredIdentity = 1
    function identity3(value) {
        return value
    }
    identity_1 = identity3
    return identity_1
}
var _baseProperty
var hasRequired_baseProperty
function require_baseProperty() {
    if (hasRequired_baseProperty) return _baseProperty
    hasRequired_baseProperty = 1
    function baseProperty(key) {
        return function (object2) {
            return object2 == null ? void 0 : object2[key]
        }
    }
    _baseProperty = baseProperty
    return _baseProperty
}
var _basePropertyDeep
var hasRequired_basePropertyDeep
function require_basePropertyDeep() {
    if (hasRequired_basePropertyDeep) return _basePropertyDeep
    hasRequired_basePropertyDeep = 1
    var baseGet = require_baseGet()
    function basePropertyDeep(path) {
        return function (object2) {
            return baseGet(object2, path)
        }
    }
    _basePropertyDeep = basePropertyDeep
    return _basePropertyDeep
}
var property_1
var hasRequiredProperty
function requireProperty() {
    if (hasRequiredProperty) return property_1
    hasRequiredProperty = 1
    var baseProperty = require_baseProperty(),
        basePropertyDeep = require_basePropertyDeep(),
        isKey = require_isKey(),
        toKey = require_toKey()
    function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path)
    }
    property_1 = property
    return property_1
}
var _baseIteratee
var hasRequired_baseIteratee
function require_baseIteratee() {
    if (hasRequired_baseIteratee) return _baseIteratee
    hasRequired_baseIteratee = 1
    var baseMatches = require_baseMatches(),
        baseMatchesProperty = require_baseMatchesProperty(),
        identity3 = requireIdentity(),
        isArray2 = requireIsArray(),
        property = requireProperty()
    function baseIteratee(value) {
        if (typeof value == 'function') {
            return value
        }
        if (value == null) {
            return identity3
        }
        if (typeof value == 'object') {
            return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value)
        }
        return property(value)
    }
    _baseIteratee = baseIteratee
    return _baseIteratee
}
var _baseFindIndex
var hasRequired_baseFindIndex
function require_baseFindIndex() {
    if (hasRequired_baseFindIndex) return _baseFindIndex
    hasRequired_baseFindIndex = 1
    function baseFindIndex(array2, predicate, fromIndex, fromRight) {
        var length2 = array2.length,
            index2 = fromIndex + (fromRight ? 1 : -1)
        while (fromRight ? index2-- : ++index2 < length2) {
            if (predicate(array2[index2], index2, array2)) {
                return index2
            }
        }
        return -1
    }
    _baseFindIndex = baseFindIndex
    return _baseFindIndex
}
var _baseIsNaN
var hasRequired_baseIsNaN
function require_baseIsNaN() {
    if (hasRequired_baseIsNaN) return _baseIsNaN
    hasRequired_baseIsNaN = 1
    function baseIsNaN(value) {
        return value !== value
    }
    _baseIsNaN = baseIsNaN
    return _baseIsNaN
}
var _strictIndexOf
var hasRequired_strictIndexOf
function require_strictIndexOf() {
    if (hasRequired_strictIndexOf) return _strictIndexOf
    hasRequired_strictIndexOf = 1
    function strictIndexOf(array2, value, fromIndex) {
        var index2 = fromIndex - 1,
            length2 = array2.length
        while (++index2 < length2) {
            if (array2[index2] === value) {
                return index2
            }
        }
        return -1
    }
    _strictIndexOf = strictIndexOf
    return _strictIndexOf
}
var _baseIndexOf
var hasRequired_baseIndexOf
function require_baseIndexOf() {
    if (hasRequired_baseIndexOf) return _baseIndexOf
    hasRequired_baseIndexOf = 1
    var baseFindIndex = require_baseFindIndex(),
        baseIsNaN = require_baseIsNaN(),
        strictIndexOf = require_strictIndexOf()
    function baseIndexOf(array2, value, fromIndex) {
        return value === value
            ? strictIndexOf(array2, value, fromIndex)
            : baseFindIndex(array2, baseIsNaN, fromIndex)
    }
    _baseIndexOf = baseIndexOf
    return _baseIndexOf
}
var _arrayIncludes
var hasRequired_arrayIncludes
function require_arrayIncludes() {
    if (hasRequired_arrayIncludes) return _arrayIncludes
    hasRequired_arrayIncludes = 1
    var baseIndexOf = require_baseIndexOf()
    function arrayIncludes(array2, value) {
        var length2 = array2 == null ? 0 : array2.length
        return !!length2 && baseIndexOf(array2, value, 0) > -1
    }
    _arrayIncludes = arrayIncludes
    return _arrayIncludes
}
var _arrayIncludesWith
var hasRequired_arrayIncludesWith
function require_arrayIncludesWith() {
    if (hasRequired_arrayIncludesWith) return _arrayIncludesWith
    hasRequired_arrayIncludesWith = 1
    function arrayIncludesWith(array2, value, comparator) {
        var index2 = -1,
            length2 = array2 == null ? 0 : array2.length
        while (++index2 < length2) {
            if (comparator(value, array2[index2])) {
                return true
            }
        }
        return false
    }
    _arrayIncludesWith = arrayIncludesWith
    return _arrayIncludesWith
}
var noop_1
var hasRequiredNoop
function requireNoop() {
    if (hasRequiredNoop) return noop_1
    hasRequiredNoop = 1
    function noop3() {}
    noop_1 = noop3
    return noop_1
}
var _createSet
var hasRequired_createSet
function require_createSet() {
    if (hasRequired_createSet) return _createSet
    hasRequired_createSet = 1
    var Set2 = require_Set(),
        noop3 = requireNoop(),
        setToArray = require_setToArray()
    var INFINITY = 1 / 0
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY)
        ? noop3
        : function (values) {
              return new Set2(values)
          }
    _createSet = createSet
    return _createSet
}
var _baseUniq
var hasRequired_baseUniq
function require_baseUniq() {
    if (hasRequired_baseUniq) return _baseUniq
    hasRequired_baseUniq = 1
    var SetCache = require_SetCache(),
        arrayIncludes = require_arrayIncludes(),
        arrayIncludesWith = require_arrayIncludesWith(),
        cacheHas = require_cacheHas(),
        createSet = require_createSet(),
        setToArray = require_setToArray()
    var LARGE_ARRAY_SIZE = 200
    function baseUniq(array2, iteratee, comparator) {
        var index2 = -1,
            includes = arrayIncludes,
            length2 = array2.length,
            isCommon = true,
            result = [],
            seen = result
        if (comparator) {
            isCommon = false
            includes = arrayIncludesWith
        } else if (length2 >= LARGE_ARRAY_SIZE) {
            var set = iteratee ? null : createSet(array2)
            if (set) {
                return setToArray(set)
            }
            isCommon = false
            includes = cacheHas
            seen = new SetCache()
        } else {
            seen = iteratee ? [] : result
        }
        outer: while (++index2 < length2) {
            var value = array2[index2],
                computed = iteratee ? iteratee(value) : value
            value = comparator || value !== 0 ? value : 0
            if (isCommon && computed === computed) {
                var seenIndex = seen.length
                while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                        continue outer
                    }
                }
                if (iteratee) {
                    seen.push(computed)
                }
                result.push(value)
            } else if (!includes(seen, computed, comparator)) {
                if (seen !== result) {
                    seen.push(computed)
                }
                result.push(value)
            }
        }
        return result
    }
    _baseUniq = baseUniq
    return _baseUniq
}
var uniqBy_1
var hasRequiredUniqBy
function requireUniqBy() {
    if (hasRequiredUniqBy) return uniqBy_1
    hasRequiredUniqBy = 1
    var baseIteratee = require_baseIteratee(),
        baseUniq = require_baseUniq()
    function uniqBy2(array2, iteratee) {
        return array2 && array2.length ? baseUniq(array2, baseIteratee(iteratee, 2)) : []
    }
    uniqBy_1 = uniqBy2
    return uniqBy_1
}
var uniqByExports = requireUniqBy()
const uniqBy = /* @__PURE__ */ getDefaultExportFromCjs(uniqByExports)
function getUniqPayload(payload, option, defaultUniqBy2) {
    if (option === true) {
        return uniqBy(payload, defaultUniqBy2)
    }
    if (isFunction(option)) {
        return uniqBy(payload, option)
    }
    return payload
}
function _typeof$L(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$L =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$L(o)
    )
}
var _excluded$p = ['ref']
function ownKeys$E(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$D(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$E(Object(t), true).forEach(function (r3) {
                  _defineProperty$K(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$E(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$n(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$n(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$J(descriptor.key), descriptor)
    }
}
function _createClass$n(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$n(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$n(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$i(t, o, e) {
    return (
        (o = _getPrototypeOf$k(o)),
        _possibleConstructorReturn$k(
            t,
            _isNativeReflectConstruct$k()
                ? Reflect.construct(o, e || [], _getPrototypeOf$k(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$k(self2, call) {
    if (call && (_typeof$L(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$k(self2)
}
function _assertThisInitialized$k(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$k() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$k = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$k(o) {
    _getPrototypeOf$k = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$k(o)
}
function _inherits$k(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$k(subClass, superClass)
}
function _setPrototypeOf$k(o, p) {
    _setPrototypeOf$k = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$k(o, p)
}
function _defineProperty$K(obj, key, value) {
    key = _toPropertyKey$J(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$J(t) {
    var i = _toPrimitive$J(t, 'string')
    return 'symbol' == _typeof$L(i) ? i : i + ''
}
function _toPrimitive$J(t, r2) {
    if ('object' != _typeof$L(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$L(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
function _objectWithoutProperties$j(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$j(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$j(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function defaultUniqBy$1(entry) {
    return entry.value
}
function renderContent$1(content, props) {
    if (/* @__PURE__ */ React.isValidElement(content)) {
        return /* @__PURE__ */ React.cloneElement(content, props)
    }
    if (typeof content === 'function') {
        return /* @__PURE__ */ React.createElement(content, props)
    }
    props.ref
    var otherProps = _objectWithoutProperties$j(props, _excluded$p)
    return /* @__PURE__ */ React.createElement(DefaultLegendContent, otherProps)
}
var EPS$1 = 1
var Legend = /* @__PURE__ */ (function (_PureComponent) {
    function Legend2() {
        var _this
        _classCallCheck$n(this, Legend2)
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key]
        }
        _this = _callSuper$i(this, Legend2, [].concat(args))
        _defineProperty$K(_this, 'lastBoundingBox', {
            width: -1,
            height: -1
        })
        return _this
    }
    _inherits$k(Legend2, _PureComponent)
    return _createClass$n(
        Legend2,
        [
            {
                key: 'componentDidMount',
                value: function componentDidMount() {
                    this.updateBBox()
                }
            },
            {
                key: 'componentDidUpdate',
                value: function componentDidUpdate() {
                    this.updateBBox()
                }
            },
            {
                key: 'getBBox',
                value: function getBBox() {
                    if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
                        var box = this.wrapperNode.getBoundingClientRect()
                        box.height = this.wrapperNode.offsetHeight
                        box.width = this.wrapperNode.offsetWidth
                        return box
                    }
                    return null
                }
            },
            {
                key: 'updateBBox',
                value: function updateBBox() {
                    var onBBoxUpdate = this.props.onBBoxUpdate
                    var box = this.getBBox()
                    if (box) {
                        if (
                            Math.abs(box.width - this.lastBoundingBox.width) > EPS$1 ||
                            Math.abs(box.height - this.lastBoundingBox.height) > EPS$1
                        ) {
                            this.lastBoundingBox.width = box.width
                            this.lastBoundingBox.height = box.height
                            if (onBBoxUpdate) {
                                onBBoxUpdate(box)
                            }
                        }
                    } else if (
                        this.lastBoundingBox.width !== -1 ||
                        this.lastBoundingBox.height !== -1
                    ) {
                        this.lastBoundingBox.width = -1
                        this.lastBoundingBox.height = -1
                        if (onBBoxUpdate) {
                            onBBoxUpdate(null)
                        }
                    }
                }
            },
            {
                key: 'getBBoxSnapshot',
                value: function getBBoxSnapshot() {
                    if (this.lastBoundingBox.width >= 0 && this.lastBoundingBox.height >= 0) {
                        return _objectSpread$D({}, this.lastBoundingBox)
                    }
                    return {
                        width: 0,
                        height: 0
                    }
                }
            },
            {
                key: 'getDefaultPosition',
                value: function getDefaultPosition(style) {
                    var _this$props = this.props,
                        layout = _this$props.layout,
                        align = _this$props.align,
                        verticalAlign = _this$props.verticalAlign,
                        margin = _this$props.margin,
                        chartWidth = _this$props.chartWidth,
                        chartHeight = _this$props.chartHeight
                    var hPos, vPos
                    if (
                        !style ||
                        ((style.left === void 0 || style.left === null) &&
                            (style.right === void 0 || style.right === null))
                    ) {
                        if (align === 'center' && layout === 'vertical') {
                            var box = this.getBBoxSnapshot()
                            hPos = {
                                left: ((chartWidth || 0) - box.width) / 2
                            }
                        } else {
                            hPos =
                                align === 'right'
                                    ? {
                                          right: (margin && margin.right) || 0
                                      }
                                    : {
                                          left: (margin && margin.left) || 0
                                      }
                        }
                    }
                    if (
                        !style ||
                        ((style.top === void 0 || style.top === null) &&
                            (style.bottom === void 0 || style.bottom === null))
                    ) {
                        if (verticalAlign === 'middle') {
                            var _box = this.getBBoxSnapshot()
                            vPos = {
                                top: ((chartHeight || 0) - _box.height) / 2
                            }
                        } else {
                            vPos =
                                verticalAlign === 'bottom'
                                    ? {
                                          bottom: (margin && margin.bottom) || 0
                                      }
                                    : {
                                          top: (margin && margin.top) || 0
                                      }
                        }
                    }
                    return _objectSpread$D(_objectSpread$D({}, hPos), vPos)
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _this2 = this
                    var _this$props2 = this.props,
                        content = _this$props2.content,
                        width = _this$props2.width,
                        height = _this$props2.height,
                        wrapperStyle = _this$props2.wrapperStyle,
                        payloadUniqBy = _this$props2.payloadUniqBy,
                        payload = _this$props2.payload
                    var outerStyle = _objectSpread$D(
                        _objectSpread$D(
                            {
                                position: 'absolute',
                                width: width || 'auto',
                                height: height || 'auto'
                            },
                            this.getDefaultPosition(wrapperStyle)
                        ),
                        wrapperStyle
                    )
                    return /* @__PURE__ */ React.createElement(
                        'div',
                        {
                            className: 'recharts-legend-wrapper',
                            style: outerStyle,
                            ref: function ref(node2) {
                                _this2.wrapperNode = node2
                            }
                        },
                        renderContent$1(
                            content,
                            _objectSpread$D(
                                _objectSpread$D({}, this.props),
                                {},
                                {
                                    payload: getUniqPayload(payload, payloadUniqBy, defaultUniqBy$1)
                                }
                            )
                        )
                    )
                }
            }
        ],
        [
            {
                key: 'getWithHeight',
                value: function getWithHeight(item, chartWidth) {
                    var _this$defaultProps$it = _objectSpread$D(
                            _objectSpread$D({}, this.defaultProps),
                            item.props
                        ),
                        layout = _this$defaultProps$it.layout
                    if (layout === 'vertical' && isNumber(item.props.height)) {
                        return {
                            height: item.props.height
                        }
                    }
                    if (layout === 'horizontal') {
                        return {
                            width: item.props.width || chartWidth
                        }
                    }
                    return null
                }
            }
        ]
    )
})(reactExports.PureComponent)
_defineProperty$K(Legend, 'displayName', 'Legend')
_defineProperty$K(Legend, 'defaultProps', {
    iconSize: 14,
    layout: 'horizontal',
    align: 'center',
    verticalAlign: 'bottom'
})
var _isFlattenable
var hasRequired_isFlattenable
function require_isFlattenable() {
    if (hasRequired_isFlattenable) return _isFlattenable
    hasRequired_isFlattenable = 1
    var Symbol2 = require_Symbol(),
        isArguments = requireIsArguments(),
        isArray2 = requireIsArray()
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0
    function isFlattenable(value) {
        return (
            isArray2(value) ||
            isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol])
        )
    }
    _isFlattenable = isFlattenable
    return _isFlattenable
}
var _baseFlatten
var hasRequired_baseFlatten
function require_baseFlatten() {
    if (hasRequired_baseFlatten) return _baseFlatten
    hasRequired_baseFlatten = 1
    var arrayPush = require_arrayPush(),
        isFlattenable = require_isFlattenable()
    function baseFlatten(array2, depth, predicate, isStrict, result) {
        var index2 = -1,
            length2 = array2.length
        predicate || (predicate = isFlattenable)
        result || (result = [])
        while (++index2 < length2) {
            var value = array2[index2]
            if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                    baseFlatten(value, depth - 1, predicate, isStrict, result)
                } else {
                    arrayPush(result, value)
                }
            } else if (!isStrict) {
                result[result.length] = value
            }
        }
        return result
    }
    _baseFlatten = baseFlatten
    return _baseFlatten
}
var _createBaseFor
var hasRequired_createBaseFor
function require_createBaseFor() {
    if (hasRequired_createBaseFor) return _createBaseFor
    hasRequired_createBaseFor = 1
    function createBaseFor(fromRight) {
        return function (object2, iteratee, keysFunc) {
            var index2 = -1,
                iterable = Object(object2),
                props = keysFunc(object2),
                length2 = props.length
            while (length2--) {
                var key = props[fromRight ? length2 : ++index2]
                if (iteratee(iterable[key], key, iterable) === false) {
                    break
                }
            }
            return object2
        }
    }
    _createBaseFor = createBaseFor
    return _createBaseFor
}
var _baseFor
var hasRequired_baseFor
function require_baseFor() {
    if (hasRequired_baseFor) return _baseFor
    hasRequired_baseFor = 1
    var createBaseFor = require_createBaseFor()
    var baseFor = createBaseFor()
    _baseFor = baseFor
    return _baseFor
}
var _baseForOwn
var hasRequired_baseForOwn
function require_baseForOwn() {
    if (hasRequired_baseForOwn) return _baseForOwn
    hasRequired_baseForOwn = 1
    var baseFor = require_baseFor(),
        keys2 = requireKeys()
    function baseForOwn(object2, iteratee) {
        return object2 && baseFor(object2, iteratee, keys2)
    }
    _baseForOwn = baseForOwn
    return _baseForOwn
}
var _createBaseEach
var hasRequired_createBaseEach
function require_createBaseEach() {
    if (hasRequired_createBaseEach) return _createBaseEach
    hasRequired_createBaseEach = 1
    var isArrayLike = requireIsArrayLike()
    function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
            if (collection == null) {
                return collection
            }
            if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee)
            }
            var length2 = collection.length,
                index2 = fromRight ? length2 : -1,
                iterable = Object(collection)
            while (fromRight ? index2-- : ++index2 < length2) {
                if (iteratee(iterable[index2], index2, iterable) === false) {
                    break
                }
            }
            return collection
        }
    }
    _createBaseEach = createBaseEach
    return _createBaseEach
}
var _baseEach
var hasRequired_baseEach
function require_baseEach() {
    if (hasRequired_baseEach) return _baseEach
    hasRequired_baseEach = 1
    var baseForOwn = require_baseForOwn(),
        createBaseEach = require_createBaseEach()
    var baseEach = createBaseEach(baseForOwn)
    _baseEach = baseEach
    return _baseEach
}
var _baseMap
var hasRequired_baseMap
function require_baseMap() {
    if (hasRequired_baseMap) return _baseMap
    hasRequired_baseMap = 1
    var baseEach = require_baseEach(),
        isArrayLike = requireIsArrayLike()
    function baseMap(collection, iteratee) {
        var index2 = -1,
            result = isArrayLike(collection) ? Array(collection.length) : []
        baseEach(collection, function (value, key, collection2) {
            result[++index2] = iteratee(value, key, collection2)
        })
        return result
    }
    _baseMap = baseMap
    return _baseMap
}
var _baseSortBy
var hasRequired_baseSortBy
function require_baseSortBy() {
    if (hasRequired_baseSortBy) return _baseSortBy
    hasRequired_baseSortBy = 1
    function baseSortBy(array2, comparer) {
        var length2 = array2.length
        array2.sort(comparer)
        while (length2--) {
            array2[length2] = array2[length2].value
        }
        return array2
    }
    _baseSortBy = baseSortBy
    return _baseSortBy
}
var _compareAscending
var hasRequired_compareAscending
function require_compareAscending() {
    if (hasRequired_compareAscending) return _compareAscending
    hasRequired_compareAscending = 1
    var isSymbol = requireIsSymbol()
    function compareAscending(value, other) {
        if (value !== other) {
            var valIsDefined = value !== void 0,
                valIsNull = value === null,
                valIsReflexive = value === value,
                valIsSymbol = isSymbol(value)
            var othIsDefined = other !== void 0,
                othIsNull = other === null,
                othIsReflexive = other === other,
                othIsSymbol = isSymbol(other)
            if (
                (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                (valIsNull && othIsDefined && othIsReflexive) ||
                (!valIsDefined && othIsReflexive) ||
                !valIsReflexive
            ) {
                return 1
            }
            if (
                (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                (othIsNull && valIsDefined && valIsReflexive) ||
                (!othIsDefined && valIsReflexive) ||
                !othIsReflexive
            ) {
                return -1
            }
        }
        return 0
    }
    _compareAscending = compareAscending
    return _compareAscending
}
var _compareMultiple
var hasRequired_compareMultiple
function require_compareMultiple() {
    if (hasRequired_compareMultiple) return _compareMultiple
    hasRequired_compareMultiple = 1
    var compareAscending = require_compareAscending()
    function compareMultiple(object2, other, orders) {
        var index2 = -1,
            objCriteria = object2.criteria,
            othCriteria = other.criteria,
            length2 = objCriteria.length,
            ordersLength = orders.length
        while (++index2 < length2) {
            var result = compareAscending(objCriteria[index2], othCriteria[index2])
            if (result) {
                if (index2 >= ordersLength) {
                    return result
                }
                var order = orders[index2]
                return result * (order == 'desc' ? -1 : 1)
            }
        }
        return object2.index - other.index
    }
    _compareMultiple = compareMultiple
    return _compareMultiple
}
var _baseOrderBy
var hasRequired_baseOrderBy
function require_baseOrderBy() {
    if (hasRequired_baseOrderBy) return _baseOrderBy
    hasRequired_baseOrderBy = 1
    var arrayMap = require_arrayMap(),
        baseGet = require_baseGet(),
        baseIteratee = require_baseIteratee(),
        baseMap = require_baseMap(),
        baseSortBy = require_baseSortBy(),
        baseUnary = require_baseUnary(),
        compareMultiple = require_compareMultiple(),
        identity3 = requireIdentity(),
        isArray2 = requireIsArray()
    function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
            iteratees = arrayMap(iteratees, function (iteratee) {
                if (isArray2(iteratee)) {
                    return function (value) {
                        return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee)
                    }
                }
                return iteratee
            })
        } else {
            iteratees = [identity3]
        }
        var index2 = -1
        iteratees = arrayMap(iteratees, baseUnary(baseIteratee))
        var result = baseMap(collection, function (value, key, collection2) {
            var criteria = arrayMap(iteratees, function (iteratee) {
                return iteratee(value)
            })
            return { criteria: criteria, index: ++index2, value: value }
        })
        return baseSortBy(result, function (object2, other) {
            return compareMultiple(object2, other, orders)
        })
    }
    _baseOrderBy = baseOrderBy
    return _baseOrderBy
}
var _apply
var hasRequired_apply
function require_apply() {
    if (hasRequired_apply) return _apply
    hasRequired_apply = 1
    function apply(func, thisArg, args) {
        switch (args.length) {
            case 0:
                return func.call(thisArg)
            case 1:
                return func.call(thisArg, args[0])
            case 2:
                return func.call(thisArg, args[0], args[1])
            case 3:
                return func.call(thisArg, args[0], args[1], args[2])
        }
        return func.apply(thisArg, args)
    }
    _apply = apply
    return _apply
}
var _overRest
var hasRequired_overRest
function require_overRest() {
    if (hasRequired_overRest) return _overRest
    hasRequired_overRest = 1
    var apply = require_apply()
    var nativeMax = Math.max
    function overRest(func, start, transform) {
        start = nativeMax(start === void 0 ? func.length - 1 : start, 0)
        return function () {
            var args = arguments,
                index2 = -1,
                length2 = nativeMax(args.length - start, 0),
                array2 = Array(length2)
            while (++index2 < length2) {
                array2[index2] = args[start + index2]
            }
            index2 = -1
            var otherArgs = Array(start + 1)
            while (++index2 < start) {
                otherArgs[index2] = args[index2]
            }
            otherArgs[start] = transform(array2)
            return apply(func, this, otherArgs)
        }
    }
    _overRest = overRest
    return _overRest
}
var constant_1
var hasRequiredConstant
function requireConstant() {
    if (hasRequiredConstant) return constant_1
    hasRequiredConstant = 1
    function constant2(value) {
        return function () {
            return value
        }
    }
    constant_1 = constant2
    return constant_1
}
var _defineProperty$J
var hasRequired_defineProperty
function require_defineProperty() {
    if (hasRequired_defineProperty) return _defineProperty$J
    hasRequired_defineProperty = 1
    var getNative = require_getNative()
    var defineProperty = (function () {
        try {
            var func = getNative(Object, 'defineProperty')
            func({}, '', {})
            return func
        } catch (e) {}
    })()
    _defineProperty$J = defineProperty
    return _defineProperty$J
}
var _baseSetToString
var hasRequired_baseSetToString
function require_baseSetToString() {
    if (hasRequired_baseSetToString) return _baseSetToString
    hasRequired_baseSetToString = 1
    var constant2 = requireConstant(),
        defineProperty = require_defineProperty(),
        identity3 = requireIdentity()
    var baseSetToString = !defineProperty
        ? identity3
        : function (func, string2) {
              return defineProperty(func, 'toString', {
                  configurable: true,
                  enumerable: false,
                  value: constant2(string2),
                  writable: true
              })
          }
    _baseSetToString = baseSetToString
    return _baseSetToString
}
var _shortOut
var hasRequired_shortOut
function require_shortOut() {
    if (hasRequired_shortOut) return _shortOut
    hasRequired_shortOut = 1
    var HOT_COUNT = 800,
        HOT_SPAN = 16
    var nativeNow = Date.now
    function shortOut(func) {
        var count2 = 0,
            lastCalled = 0
        return function () {
            var stamp = nativeNow(),
                remaining = HOT_SPAN - (stamp - lastCalled)
            lastCalled = stamp
            if (remaining > 0) {
                if (++count2 >= HOT_COUNT) {
                    return arguments[0]
                }
            } else {
                count2 = 0
            }
            return func.apply(void 0, arguments)
        }
    }
    _shortOut = shortOut
    return _shortOut
}
var _setToString
var hasRequired_setToString
function require_setToString() {
    if (hasRequired_setToString) return _setToString
    hasRequired_setToString = 1
    var baseSetToString = require_baseSetToString(),
        shortOut = require_shortOut()
    var setToString = shortOut(baseSetToString)
    _setToString = setToString
    return _setToString
}
var _baseRest
var hasRequired_baseRest
function require_baseRest() {
    if (hasRequired_baseRest) return _baseRest
    hasRequired_baseRest = 1
    var identity3 = requireIdentity(),
        overRest = require_overRest(),
        setToString = require_setToString()
    function baseRest(func, start) {
        return setToString(overRest(func, start, identity3), func + '')
    }
    _baseRest = baseRest
    return _baseRest
}
var _isIterateeCall
var hasRequired_isIterateeCall
function require_isIterateeCall() {
    if (hasRequired_isIterateeCall) return _isIterateeCall
    hasRequired_isIterateeCall = 1
    var eq = requireEq(),
        isArrayLike = requireIsArrayLike(),
        isIndex = require_isIndex(),
        isObject2 = requireIsObject()
    function isIterateeCall(value, index2, object2) {
        if (!isObject2(object2)) {
            return false
        }
        var type = typeof index2
        if (
            type == 'number'
                ? isArrayLike(object2) && isIndex(index2, object2.length)
                : type == 'string' && index2 in object2
        ) {
            return eq(object2[index2], value)
        }
        return false
    }
    _isIterateeCall = isIterateeCall
    return _isIterateeCall
}
var sortBy_1
var hasRequiredSortBy
function requireSortBy() {
    if (hasRequiredSortBy) return sortBy_1
    hasRequiredSortBy = 1
    var baseFlatten = require_baseFlatten(),
        baseOrderBy = require_baseOrderBy(),
        baseRest = require_baseRest(),
        isIterateeCall = require_isIterateeCall()
    var sortBy2 = baseRest(function (collection, iteratees) {
        if (collection == null) {
            return []
        }
        var length2 = iteratees.length
        if (length2 > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = []
        } else if (length2 > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]]
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), [])
    })
    sortBy_1 = sortBy2
    return sortBy_1
}
var sortByExports = requireSortBy()
const sortBy = /* @__PURE__ */ getDefaultExportFromCjs(sortByExports)
function _typeof$K(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$K =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$K(o)
    )
}
function _extends$u() {
    _extends$u = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$u.apply(this, arguments)
}
function _slicedToArray$d(arr, i) {
    return (
        _arrayWithHoles$e(arr) ||
        _iterableToArrayLimit$d(arr, i) ||
        _unsupportedIterableToArray$m(arr, i) ||
        _nonIterableRest$e()
    )
}
function _nonIterableRest$e() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$m(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$m(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$m(o, minLen)
}
function _arrayLikeToArray$m(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$d(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$e(arr) {
    if (Array.isArray(arr)) return arr
}
function ownKeys$D(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$C(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$D(Object(t), true).forEach(function (r3) {
                  _defineProperty$I(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$D(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$I(obj, key, value) {
    key = _toPropertyKey$I(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$I(t) {
    var i = _toPrimitive$I(t, 'string')
    return 'symbol' == _typeof$K(i) ? i : i + ''
}
function _toPrimitive$I(t, r2) {
    if ('object' != _typeof$K(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$K(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function defaultFormatter(value) {
    return Array.isArray(value) && isNumOrStr(value[0]) && isNumOrStr(value[1])
        ? value.join(' ~ ')
        : value
}
var DefaultTooltipContent = function DefaultTooltipContent2(props) {
    var _props$separator = props.separator,
        separator = _props$separator === void 0 ? ' : ' : _props$separator,
        _props$contentStyle = props.contentStyle,
        contentStyle = _props$contentStyle === void 0 ? {} : _props$contentStyle,
        _props$itemStyle = props.itemStyle,
        itemStyle = _props$itemStyle === void 0 ? {} : _props$itemStyle,
        _props$labelStyle = props.labelStyle,
        labelStyle = _props$labelStyle === void 0 ? {} : _props$labelStyle,
        payload = props.payload,
        formatter = props.formatter,
        itemSorter = props.itemSorter,
        wrapperClassName = props.wrapperClassName,
        labelClassName = props.labelClassName,
        label = props.label,
        labelFormatter = props.labelFormatter,
        _props$accessibilityL = props.accessibilityLayer,
        accessibilityLayer = _props$accessibilityL === void 0 ? false : _props$accessibilityL
    var renderContent2 = function renderContent3() {
        if (payload && payload.length) {
            var listStyle = {
                padding: 0,
                margin: 0
            }
            var items = (itemSorter ? sortBy(payload, itemSorter) : payload).map(
                function (entry, i) {
                    if (entry.type === 'none') {
                        return null
                    }
                    var finalItemStyle = _objectSpread$C(
                        {
                            display: 'block',
                            paddingTop: 4,
                            paddingBottom: 4,
                            color: entry.color || '#000'
                        },
                        itemStyle
                    )
                    var finalFormatter = entry.formatter || formatter || defaultFormatter
                    var value = entry.value,
                        name = entry.name
                    var finalValue = value
                    var finalName = name
                    if (finalFormatter && finalValue != null && finalName != null) {
                        var formatted = finalFormatter(value, name, entry, i, payload)
                        if (Array.isArray(formatted)) {
                            var _formatted = _slicedToArray$d(formatted, 2)
                            finalValue = _formatted[0]
                            finalName = _formatted[1]
                        } else {
                            finalValue = formatted
                        }
                    }
                    return (
                        // eslint-disable-next-line react/no-array-index-key
                        /* @__PURE__ */ React.createElement(
                            'li',
                            {
                                className: 'recharts-tooltip-item',
                                key: 'tooltip-item-'.concat(i),
                                style: finalItemStyle
                            },
                            isNumOrStr(finalName)
                                ? /* @__PURE__ */ React.createElement(
                                      'span',
                                      {
                                          className: 'recharts-tooltip-item-name'
                                      },
                                      finalName
                                  )
                                : null,
                            isNumOrStr(finalName)
                                ? /* @__PURE__ */ React.createElement(
                                      'span',
                                      {
                                          className: 'recharts-tooltip-item-separator'
                                      },
                                      separator
                                  )
                                : null,
                            /* @__PURE__ */ React.createElement(
                                'span',
                                {
                                    className: 'recharts-tooltip-item-value'
                                },
                                finalValue
                            ),
                            /* @__PURE__ */ React.createElement(
                                'span',
                                {
                                    className: 'recharts-tooltip-item-unit'
                                },
                                entry.unit || ''
                            )
                        )
                    )
                }
            )
            return /* @__PURE__ */ React.createElement(
                'ul',
                {
                    className: 'recharts-tooltip-item-list',
                    style: listStyle
                },
                items
            )
        }
        return null
    }
    var finalStyle = _objectSpread$C(
        {
            margin: 0,
            padding: 10,
            backgroundColor: '#fff',
            border: '1px solid #ccc',
            whiteSpace: 'nowrap'
        },
        contentStyle
    )
    var finalLabelStyle = _objectSpread$C(
        {
            margin: 0
        },
        labelStyle
    )
    var hasLabel = !isNil(label)
    var finalLabel = hasLabel ? label : ''
    var wrapperCN = clsx('recharts-default-tooltip', wrapperClassName)
    var labelCN = clsx('recharts-tooltip-label', labelClassName)
    if (hasLabel && labelFormatter && payload !== void 0 && payload !== null) {
        finalLabel = labelFormatter(label, payload)
    }
    var accessibilityAttributes = accessibilityLayer
        ? {
              role: 'status',
              'aria-live': 'assertive'
          }
        : {}
    return /* @__PURE__ */ React.createElement(
        'div',
        _extends$u(
            {
                className: wrapperCN,
                style: finalStyle
            },
            accessibilityAttributes
        ),
        /* @__PURE__ */ React.createElement(
            'p',
            {
                className: labelCN,
                style: finalLabelStyle
            },
            /* @__PURE__ */ React.isValidElement(finalLabel) ? finalLabel : ''.concat(finalLabel)
        ),
        renderContent2()
    )
}
function _typeof$J(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$J =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$J(o)
    )
}
function _defineProperty$H(obj, key, value) {
    key = _toPropertyKey$H(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$H(t) {
    var i = _toPrimitive$H(t, 'string')
    return 'symbol' == _typeof$J(i) ? i : i + ''
}
function _toPrimitive$H(t, r2) {
    if ('object' != _typeof$J(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$J(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var CSS_CLASS_PREFIX = 'recharts-tooltip-wrapper'
var TOOLTIP_HIDDEN = {
    visibility: 'hidden'
}
function getTooltipCSSClassName(_ref3) {
    var coordinate = _ref3.coordinate,
        translateX = _ref3.translateX,
        translateY = _ref3.translateY
    return clsx(
        CSS_CLASS_PREFIX,
        _defineProperty$H(
            _defineProperty$H(
                _defineProperty$H(
                    _defineProperty$H(
                        {},
                        ''.concat(CSS_CLASS_PREFIX, '-right'),
                        isNumber(translateX) &&
                            coordinate &&
                            isNumber(coordinate.x) &&
                            translateX >= coordinate.x
                    ),
                    ''.concat(CSS_CLASS_PREFIX, '-left'),
                    isNumber(translateX) &&
                        coordinate &&
                        isNumber(coordinate.x) &&
                        translateX < coordinate.x
                ),
                ''.concat(CSS_CLASS_PREFIX, '-bottom'),
                isNumber(translateY) &&
                    coordinate &&
                    isNumber(coordinate.y) &&
                    translateY >= coordinate.y
            ),
            ''.concat(CSS_CLASS_PREFIX, '-top'),
            isNumber(translateY) &&
                coordinate &&
                isNumber(coordinate.y) &&
                translateY < coordinate.y
        )
    )
}
function getTooltipTranslateXY(_ref22) {
    var allowEscapeViewBox = _ref22.allowEscapeViewBox,
        coordinate = _ref22.coordinate,
        key = _ref22.key,
        offsetTopLeft = _ref22.offsetTopLeft,
        position2 = _ref22.position,
        reverseDirection = _ref22.reverseDirection,
        tooltipDimension = _ref22.tooltipDimension,
        viewBox = _ref22.viewBox,
        viewBoxDimension = _ref22.viewBoxDimension
    if (position2 && isNumber(position2[key])) {
        return position2[key]
    }
    var negative = coordinate[key] - tooltipDimension - offsetTopLeft
    var positive = coordinate[key] + offsetTopLeft
    if (allowEscapeViewBox[key]) {
        return reverseDirection[key] ? negative : positive
    }
    if (reverseDirection[key]) {
        var _tooltipBoundary = negative
        var _viewBoxBoundary = viewBox[key]
        if (_tooltipBoundary < _viewBoxBoundary) {
            return Math.max(positive, viewBox[key])
        }
        return Math.max(negative, viewBox[key])
    }
    var tooltipBoundary = positive + tooltipDimension
    var viewBoxBoundary = viewBox[key] + viewBoxDimension
    if (tooltipBoundary > viewBoxBoundary) {
        return Math.max(negative, viewBox[key])
    }
    return Math.max(positive, viewBox[key])
}
function getTransformStyle(_ref3) {
    var translateX = _ref3.translateX,
        translateY = _ref3.translateY,
        useTranslate3d = _ref3.useTranslate3d
    return {
        transform: useTranslate3d
            ? 'translate3d('.concat(translateX, 'px, ').concat(translateY, 'px, 0)')
            : 'translate('.concat(translateX, 'px, ').concat(translateY, 'px)')
    }
}
function getTooltipTranslate(_ref4) {
    var allowEscapeViewBox = _ref4.allowEscapeViewBox,
        coordinate = _ref4.coordinate,
        offsetTopLeft = _ref4.offsetTopLeft,
        position2 = _ref4.position,
        reverseDirection = _ref4.reverseDirection,
        tooltipBox = _ref4.tooltipBox,
        useTranslate3d = _ref4.useTranslate3d,
        viewBox = _ref4.viewBox
    var cssProperties, translateX, translateY
    if (tooltipBox.height > 0 && tooltipBox.width > 0 && coordinate) {
        translateX = getTooltipTranslateXY({
            allowEscapeViewBox,
            coordinate,
            key: 'x',
            offsetTopLeft,
            position: position2,
            reverseDirection,
            tooltipDimension: tooltipBox.width,
            viewBox,
            viewBoxDimension: viewBox.width
        })
        translateY = getTooltipTranslateXY({
            allowEscapeViewBox,
            coordinate,
            key: 'y',
            offsetTopLeft,
            position: position2,
            reverseDirection,
            tooltipDimension: tooltipBox.height,
            viewBox,
            viewBoxDimension: viewBox.height
        })
        cssProperties = getTransformStyle({
            translateX,
            translateY,
            useTranslate3d
        })
    } else {
        cssProperties = TOOLTIP_HIDDEN
    }
    return {
        cssProperties,
        cssClasses: getTooltipCSSClassName({
            translateX,
            translateY,
            coordinate
        })
    }
}
function _typeof$I(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$I =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$I(o)
    )
}
function ownKeys$C(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$B(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$C(Object(t), true).forEach(function (r3) {
                  _defineProperty$G(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$C(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$m(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$m(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$G(descriptor.key), descriptor)
    }
}
function _createClass$m(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$m(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$h(t, o, e) {
    return (
        (o = _getPrototypeOf$j(o)),
        _possibleConstructorReturn$j(
            t,
            _isNativeReflectConstruct$j()
                ? Reflect.construct(o, e || [], _getPrototypeOf$j(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$j(self2, call) {
    if (call && (_typeof$I(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$j(self2)
}
function _assertThisInitialized$j(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$j() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$j = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$j(o) {
    _getPrototypeOf$j = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$j(o)
}
function _inherits$j(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$j(subClass, superClass)
}
function _setPrototypeOf$j(o, p) {
    _setPrototypeOf$j = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$j(o, p)
}
function _defineProperty$G(obj, key, value) {
    key = _toPropertyKey$G(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$G(t) {
    var i = _toPrimitive$G(t, 'string')
    return 'symbol' == _typeof$I(i) ? i : i + ''
}
function _toPrimitive$G(t, r2) {
    if ('object' != _typeof$I(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$I(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var EPSILON = 1
var TooltipBoundingBox = /* @__PURE__ */ (function (_PureComponent) {
    function TooltipBoundingBox2() {
        var _this
        _classCallCheck$m(this, TooltipBoundingBox2)
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key]
        }
        _this = _callSuper$h(this, TooltipBoundingBox2, [].concat(args))
        _defineProperty$G(_this, 'state', {
            dismissed: false,
            dismissedAtCoordinate: {
                x: 0,
                y: 0
            },
            lastBoundingBox: {
                width: -1,
                height: -1
            }
        })
        _defineProperty$G(_this, 'handleKeyDown', function (event) {
            if (event.key === 'Escape') {
                var _this$props$coordinat,
                    _this$props$coordinat2,
                    _this$props$coordinat3,
                    _this$props$coordinat4
                _this.setState({
                    dismissed: true,
                    dismissedAtCoordinate: {
                        x:
                            (_this$props$coordinat =
                                (_this$props$coordinat2 = _this.props.coordinate) === null ||
                                _this$props$coordinat2 === void 0
                                    ? void 0
                                    : _this$props$coordinat2.x) !== null &&
                            _this$props$coordinat !== void 0
                                ? _this$props$coordinat
                                : 0,
                        y:
                            (_this$props$coordinat3 =
                                (_this$props$coordinat4 = _this.props.coordinate) === null ||
                                _this$props$coordinat4 === void 0
                                    ? void 0
                                    : _this$props$coordinat4.y) !== null &&
                            _this$props$coordinat3 !== void 0
                                ? _this$props$coordinat3
                                : 0
                    }
                })
            }
        })
        return _this
    }
    _inherits$j(TooltipBoundingBox2, _PureComponent)
    return _createClass$m(TooltipBoundingBox2, [
        {
            key: 'updateBBox',
            value: function updateBBox() {
                if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
                    var box = this.wrapperNode.getBoundingClientRect()
                    if (
                        Math.abs(box.width - this.state.lastBoundingBox.width) > EPSILON ||
                        Math.abs(box.height - this.state.lastBoundingBox.height) > EPSILON
                    ) {
                        this.setState({
                            lastBoundingBox: {
                                width: box.width,
                                height: box.height
                            }
                        })
                    }
                } else if (
                    this.state.lastBoundingBox.width !== -1 ||
                    this.state.lastBoundingBox.height !== -1
                ) {
                    this.setState({
                        lastBoundingBox: {
                            width: -1,
                            height: -1
                        }
                    })
                }
            }
        },
        {
            key: 'componentDidMount',
            value: function componentDidMount() {
                document.addEventListener('keydown', this.handleKeyDown)
                this.updateBBox()
            }
        },
        {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
                document.removeEventListener('keydown', this.handleKeyDown)
            }
        },
        {
            key: 'componentDidUpdate',
            value: function componentDidUpdate() {
                var _this$props$coordinat5, _this$props$coordinat6
                if (this.props.active) {
                    this.updateBBox()
                }
                if (!this.state.dismissed) {
                    return
                }
                if (
                    ((_this$props$coordinat5 = this.props.coordinate) === null ||
                    _this$props$coordinat5 === void 0
                        ? void 0
                        : _this$props$coordinat5.x) !== this.state.dismissedAtCoordinate.x ||
                    ((_this$props$coordinat6 = this.props.coordinate) === null ||
                    _this$props$coordinat6 === void 0
                        ? void 0
                        : _this$props$coordinat6.y) !== this.state.dismissedAtCoordinate.y
                ) {
                    this.state.dismissed = false
                }
            }
        },
        {
            key: 'render',
            value: function render() {
                var _this2 = this
                var _this$props = this.props,
                    active = _this$props.active,
                    allowEscapeViewBox = _this$props.allowEscapeViewBox,
                    animationDuration = _this$props.animationDuration,
                    animationEasing = _this$props.animationEasing,
                    children = _this$props.children,
                    coordinate = _this$props.coordinate,
                    hasPayload = _this$props.hasPayload,
                    isAnimationActive = _this$props.isAnimationActive,
                    offset = _this$props.offset,
                    position2 = _this$props.position,
                    reverseDirection = _this$props.reverseDirection,
                    useTranslate3d = _this$props.useTranslate3d,
                    viewBox = _this$props.viewBox,
                    wrapperStyle = _this$props.wrapperStyle
                var _getTooltipTranslate = getTooltipTranslate({
                        allowEscapeViewBox,
                        coordinate,
                        offsetTopLeft: offset,
                        position: position2,
                        reverseDirection,
                        tooltipBox: this.state.lastBoundingBox,
                        useTranslate3d,
                        viewBox
                    }),
                    cssClasses = _getTooltipTranslate.cssClasses,
                    cssProperties = _getTooltipTranslate.cssProperties
                var outerStyle = _objectSpread$B(
                    _objectSpread$B(
                        {
                            transition:
                                isAnimationActive && active
                                    ? 'transform '
                                          .concat(animationDuration, 'ms ')
                                          .concat(animationEasing)
                                    : void 0
                        },
                        cssProperties
                    ),
                    {},
                    {
                        pointerEvents: 'none',
                        visibility:
                            !this.state.dismissed && active && hasPayload ? 'visible' : 'hidden',
                        position: 'absolute',
                        top: 0,
                        left: 0
                    },
                    wrapperStyle
                )
                return (
                    // This element allow listening to the `Escape` key.
                    // See https://github.com/recharts/recharts/pull/2925
                    /* @__PURE__ */ React.createElement(
                        'div',
                        {
                            tabIndex: -1,
                            className: cssClasses,
                            style: outerStyle,
                            ref: function ref(node2) {
                                _this2.wrapperNode = node2
                            }
                        },
                        children
                    )
                )
            }
        }
    ])
})(reactExports.PureComponent)
var parseIsSsrByDefault = function parseIsSsrByDefault2() {
    return !(
        typeof window !== 'undefined' &&
        window.document &&
        window.document.createElement &&
        window.setTimeout
    )
}
var Global = {
    isSsr: parseIsSsrByDefault()
}
function _typeof$H(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$H =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$H(o)
    )
}
function ownKeys$B(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$A(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$B(Object(t), true).forEach(function (r3) {
                  _defineProperty$F(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$B(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$l(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$l(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$F(descriptor.key), descriptor)
    }
}
function _createClass$l(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$l(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$g(t, o, e) {
    return (
        (o = _getPrototypeOf$i(o)),
        _possibleConstructorReturn$i(
            t,
            _isNativeReflectConstruct$i()
                ? Reflect.construct(o, e || [], _getPrototypeOf$i(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$i(self2, call) {
    if (call && (_typeof$H(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$i(self2)
}
function _assertThisInitialized$i(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$i() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$i = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$i(o) {
    _getPrototypeOf$i = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$i(o)
}
function _inherits$i(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$i(subClass, superClass)
}
function _setPrototypeOf$i(o, p) {
    _setPrototypeOf$i = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$i(o, p)
}
function _defineProperty$F(obj, key, value) {
    key = _toPropertyKey$F(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$F(t) {
    var i = _toPrimitive$F(t, 'string')
    return 'symbol' == _typeof$H(i) ? i : i + ''
}
function _toPrimitive$F(t, r2) {
    if ('object' != _typeof$H(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$H(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
function defaultUniqBy(entry) {
    return entry.dataKey
}
function renderContent(content, props) {
    if (/* @__PURE__ */ React.isValidElement(content)) {
        return /* @__PURE__ */ React.cloneElement(content, props)
    }
    if (typeof content === 'function') {
        return /* @__PURE__ */ React.createElement(content, props)
    }
    return /* @__PURE__ */ React.createElement(DefaultTooltipContent, props)
}
var Tooltip = /* @__PURE__ */ (function (_PureComponent) {
    function Tooltip2() {
        _classCallCheck$l(this, Tooltip2)
        return _callSuper$g(this, Tooltip2, arguments)
    }
    _inherits$i(Tooltip2, _PureComponent)
    return _createClass$l(Tooltip2, [
        {
            key: 'render',
            value: function render() {
                var _this = this
                var _this$props = this.props,
                    active = _this$props.active,
                    allowEscapeViewBox = _this$props.allowEscapeViewBox,
                    animationDuration = _this$props.animationDuration,
                    animationEasing = _this$props.animationEasing,
                    content = _this$props.content,
                    coordinate = _this$props.coordinate,
                    filterNull = _this$props.filterNull,
                    isAnimationActive = _this$props.isAnimationActive,
                    offset = _this$props.offset,
                    payload = _this$props.payload,
                    payloadUniqBy = _this$props.payloadUniqBy,
                    position2 = _this$props.position,
                    reverseDirection = _this$props.reverseDirection,
                    useTranslate3d = _this$props.useTranslate3d,
                    viewBox = _this$props.viewBox,
                    wrapperStyle = _this$props.wrapperStyle
                var finalPayload = payload !== null && payload !== void 0 ? payload : []
                if (filterNull && finalPayload.length) {
                    finalPayload = getUniqPayload(
                        payload.filter(function (entry) {
                            return (
                                entry.value != null &&
                                (entry.hide !== true || _this.props.includeHidden)
                            )
                        }),
                        payloadUniqBy,
                        defaultUniqBy
                    )
                }
                var hasPayload = finalPayload.length > 0
                return /* @__PURE__ */ React.createElement(
                    TooltipBoundingBox,
                    {
                        allowEscapeViewBox,
                        animationDuration,
                        animationEasing,
                        isAnimationActive,
                        active,
                        coordinate,
                        hasPayload,
                        offset,
                        position: position2,
                        reverseDirection,
                        useTranslate3d,
                        viewBox,
                        wrapperStyle
                    },
                    renderContent(
                        content,
                        _objectSpread$A(
                            _objectSpread$A({}, this.props),
                            {},
                            {
                                payload: finalPayload
                            }
                        )
                    )
                )
            }
        }
    ])
})(reactExports.PureComponent)
_defineProperty$F(Tooltip, 'displayName', 'Tooltip')
_defineProperty$F(Tooltip, 'defaultProps', {
    accessibilityLayer: false,
    allowEscapeViewBox: {
        x: false,
        y: false
    },
    animationDuration: 400,
    animationEasing: 'ease',
    contentStyle: {},
    coordinate: {
        x: 0,
        y: 0
    },
    cursor: true,
    cursorStyle: {},
    filterNull: true,
    isAnimationActive: !Global.isSsr,
    itemStyle: {},
    labelStyle: {},
    offset: 10,
    reverseDirection: {
        x: false,
        y: false
    },
    separator: ' : ',
    trigger: 'hover',
    useTranslate3d: false,
    viewBox: {
        x: 0,
        y: 0,
        height: 0,
        width: 0
    },
    wrapperStyle: {}
})
var now_1
var hasRequiredNow
function requireNow() {
    if (hasRequiredNow) return now_1
    hasRequiredNow = 1
    var root = require_root()
    var now = function () {
        return root.Date.now()
    }
    now_1 = now
    return now_1
}
var _trimmedEndIndex
var hasRequired_trimmedEndIndex
function require_trimmedEndIndex() {
    if (hasRequired_trimmedEndIndex) return _trimmedEndIndex
    hasRequired_trimmedEndIndex = 1
    var reWhitespace = /\s/
    function trimmedEndIndex(string2) {
        var index2 = string2.length
        while (index2-- && reWhitespace.test(string2.charAt(index2))) {}
        return index2
    }
    _trimmedEndIndex = trimmedEndIndex
    return _trimmedEndIndex
}
var _baseTrim
var hasRequired_baseTrim
function require_baseTrim() {
    if (hasRequired_baseTrim) return _baseTrim
    hasRequired_baseTrim = 1
    var trimmedEndIndex = require_trimmedEndIndex()
    var reTrimStart = /^\s+/
    function baseTrim(string2) {
        return string2
            ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, '')
            : string2
    }
    _baseTrim = baseTrim
    return _baseTrim
}
var toNumber_1
var hasRequiredToNumber
function requireToNumber() {
    if (hasRequiredToNumber) return toNumber_1
    hasRequiredToNumber = 1
    var baseTrim = require_baseTrim(),
        isObject2 = requireIsObject(),
        isSymbol = requireIsSymbol()
    var NAN = 0 / 0
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i
    var reIsBinary = /^0b[01]+$/i
    var reIsOctal = /^0o[0-7]+$/i
    var freeParseInt = parseInt
    function toNumber(value) {
        if (typeof value == 'number') {
            return value
        }
        if (isSymbol(value)) {
            return NAN
        }
        if (isObject2(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value
            value = isObject2(other) ? other + '' : other
        }
        if (typeof value != 'string') {
            return value === 0 ? value : +value
        }
        value = baseTrim(value)
        var isBinary = reIsBinary.test(value)
        return isBinary || reIsOctal.test(value)
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : reIsBadHex.test(value)
              ? NAN
              : +value
    }
    toNumber_1 = toNumber
    return toNumber_1
}
var debounce_1
var hasRequiredDebounce
function requireDebounce() {
    if (hasRequiredDebounce) return debounce_1
    hasRequiredDebounce = 1
    var isObject2 = requireIsObject(),
        now = requireNow(),
        toNumber = requireToNumber()
    var FUNC_ERROR_TEXT = 'Expected a function'
    var nativeMax = Math.max,
        nativeMin = Math.min
    function debounce(func, wait, options2) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT)
        }
        wait = toNumber(wait) || 0
        if (isObject2(options2)) {
            leading = !!options2.leading
            maxing = 'maxWait' in options2
            maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait
            trailing = 'trailing' in options2 ? !!options2.trailing : trailing
        }
        function invokeFunc(time2) {
            var args = lastArgs,
                thisArg = lastThis
            lastArgs = lastThis = void 0
            lastInvokeTime = time2
            result = func.apply(thisArg, args)
            return result
        }
        function leadingEdge(time2) {
            lastInvokeTime = time2
            timerId = setTimeout(timerExpired, wait)
            return leading ? invokeFunc(time2) : result
        }
        function remainingWait(time2) {
            var timeSinceLastCall = time2 - lastCallTime,
                timeSinceLastInvoke = time2 - lastInvokeTime,
                timeWaiting = wait - timeSinceLastCall
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting
        }
        function shouldInvoke(time2) {
            var timeSinceLastCall = time2 - lastCallTime,
                timeSinceLastInvoke = time2 - lastInvokeTime
            return (
                lastCallTime === void 0 ||
                timeSinceLastCall >= wait ||
                timeSinceLastCall < 0 ||
                (maxing && timeSinceLastInvoke >= maxWait)
            )
        }
        function timerExpired() {
            var time2 = now()
            if (shouldInvoke(time2)) {
                return trailingEdge(time2)
            }
            timerId = setTimeout(timerExpired, remainingWait(time2))
        }
        function trailingEdge(time2) {
            timerId = void 0
            if (trailing && lastArgs) {
                return invokeFunc(time2)
            }
            lastArgs = lastThis = void 0
            return result
        }
        function cancel() {
            if (timerId !== void 0) {
                clearTimeout(timerId)
            }
            lastInvokeTime = 0
            lastArgs = lastCallTime = lastThis = timerId = void 0
        }
        function flush() {
            return timerId === void 0 ? result : trailingEdge(now())
        }
        function debounced() {
            var time2 = now(),
                isInvoking = shouldInvoke(time2)
            lastArgs = arguments
            lastThis = this
            lastCallTime = time2
            if (isInvoking) {
                if (timerId === void 0) {
                    return leadingEdge(lastCallTime)
                }
                if (maxing) {
                    clearTimeout(timerId)
                    timerId = setTimeout(timerExpired, wait)
                    return invokeFunc(lastCallTime)
                }
            }
            if (timerId === void 0) {
                timerId = setTimeout(timerExpired, wait)
            }
            return result
        }
        debounced.cancel = cancel
        debounced.flush = flush
        return debounced
    }
    debounce_1 = debounce
    return debounce_1
}
var throttle_1
var hasRequiredThrottle
function requireThrottle() {
    if (hasRequiredThrottle) return throttle_1
    hasRequiredThrottle = 1
    var debounce = requireDebounce(),
        isObject2 = requireIsObject()
    var FUNC_ERROR_TEXT = 'Expected a function'
    function throttle2(func, wait, options2) {
        var leading = true,
            trailing = true
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT)
        }
        if (isObject2(options2)) {
            leading = 'leading' in options2 ? !!options2.leading : leading
            trailing = 'trailing' in options2 ? !!options2.trailing : trailing
        }
        return debounce(func, wait, {
            leading: leading,
            maxWait: wait,
            trailing: trailing
        })
    }
    throttle_1 = throttle2
    return throttle_1
}
var throttleExports = requireThrottle()
const throttle = /* @__PURE__ */ getDefaultExportFromCjs(throttleExports)
function _typeof$G(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$G =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$G(o)
    )
}
function ownKeys$A(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$z(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$A(Object(t), true).forEach(function (r3) {
                  _defineProperty$E(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$A(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$E(obj, key, value) {
    key = _toPropertyKey$E(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$E(t) {
    var i = _toPrimitive$E(t, 'string')
    return 'symbol' == _typeof$G(i) ? i : i + ''
}
function _toPrimitive$E(t, r2) {
    if ('object' != _typeof$G(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$G(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function _slicedToArray$c(arr, i) {
    return (
        _arrayWithHoles$d(arr) ||
        _iterableToArrayLimit$c(arr, i) ||
        _unsupportedIterableToArray$l(arr, i) ||
        _nonIterableRest$d()
    )
}
function _nonIterableRest$d() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$l(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$l(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$l(o, minLen)
}
function _arrayLikeToArray$l(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$c(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$d(arr) {
    if (Array.isArray(arr)) return arr
}
var ResponsiveContainer = /* @__PURE__ */ reactExports.forwardRef(function (_ref3, ref) {
    var aspect = _ref3.aspect,
        _ref$initialDimension = _ref3.initialDimension,
        initialDimension =
            _ref$initialDimension === void 0
                ? {
                      width: -1,
                      height: -1
                  }
                : _ref$initialDimension,
        _ref$width = _ref3.width,
        width = _ref$width === void 0 ? '100%' : _ref$width,
        _ref$height = _ref3.height,
        height = _ref$height === void 0 ? '100%' : _ref$height,
        _ref$minWidth = _ref3.minWidth,
        minWidth = _ref$minWidth === void 0 ? 0 : _ref$minWidth,
        minHeight = _ref3.minHeight,
        maxHeight = _ref3.maxHeight,
        children = _ref3.children,
        _ref$debounce = _ref3.debounce,
        debounce = _ref$debounce === void 0 ? 0 : _ref$debounce,
        id = _ref3.id,
        className = _ref3.className,
        onResize = _ref3.onResize,
        _ref$style = _ref3.style,
        style = _ref$style === void 0 ? {} : _ref$style
    var containerRef = reactExports.useRef(null)
    var onResizeRef = reactExports.useRef()
    onResizeRef.current = onResize
    reactExports.useImperativeHandle(ref, function () {
        return Object.defineProperty(containerRef.current, 'current', {
            get: function get2() {
                console.warn(
                    'The usage of ref.current.current is deprecated and will no longer be supported.'
                )
                return containerRef.current
            },
            configurable: true
        })
    })
    var _useState = reactExports.useState({
            containerWidth: initialDimension.width,
            containerHeight: initialDimension.height
        }),
        _useState2 = _slicedToArray$c(_useState, 2),
        sizes = _useState2[0],
        setSizes = _useState2[1]
    var setContainerSize = reactExports.useCallback(function (newWidth, newHeight) {
        setSizes(function (prevState) {
            var roundedWidth = Math.round(newWidth)
            var roundedHeight = Math.round(newHeight)
            if (
                prevState.containerWidth === roundedWidth &&
                prevState.containerHeight === roundedHeight
            ) {
                return prevState
            }
            return {
                containerWidth: roundedWidth,
                containerHeight: roundedHeight
            }
        })
    }, [])
    reactExports.useEffect(
        function () {
            var callback = function callback2(entries) {
                var _onResizeRef$current
                var _entries$0$contentRec = entries[0].contentRect,
                    containerWidth2 = _entries$0$contentRec.width,
                    containerHeight2 = _entries$0$contentRec.height
                setContainerSize(containerWidth2, containerHeight2)
                ;(_onResizeRef$current = onResizeRef.current) === null ||
                    _onResizeRef$current === void 0 ||
                    _onResizeRef$current.call(onResizeRef, containerWidth2, containerHeight2)
            }
            if (debounce > 0) {
                callback = throttle(callback, debounce, {
                    trailing: true,
                    leading: false
                })
            }
            var observer = new ResizeObserver(callback)
            var _containerRef$current = containerRef.current.getBoundingClientRect(),
                containerWidth = _containerRef$current.width,
                containerHeight = _containerRef$current.height
            setContainerSize(containerWidth, containerHeight)
            observer.observe(containerRef.current)
            return function () {
                observer.disconnect()
            }
        },
        [setContainerSize, debounce]
    )
    var chartContent = reactExports.useMemo(
        function () {
            var containerWidth = sizes.containerWidth,
                containerHeight = sizes.containerHeight
            if (containerWidth < 0 || containerHeight < 0) {
                return null
            }
            warn(
                isPercent(width) || isPercent(height),
                "The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.",
                width,
                height
            )
            warn(!aspect || aspect > 0, 'The aspect(%s) must be greater than zero.', aspect)
            var calculatedWidth = isPercent(width) ? containerWidth : width
            var calculatedHeight = isPercent(height) ? containerHeight : height
            if (aspect && aspect > 0) {
                if (calculatedWidth) {
                    calculatedHeight = calculatedWidth / aspect
                } else if (calculatedHeight) {
                    calculatedWidth = calculatedHeight * aspect
                }
                if (maxHeight && calculatedHeight > maxHeight) {
                    calculatedHeight = maxHeight
                }
            }
            warn(
                calculatedWidth > 0 || calculatedHeight > 0,
                'The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.',
                calculatedWidth,
                calculatedHeight,
                width,
                height,
                minWidth,
                minHeight,
                aspect
            )
            var isCharts =
                !Array.isArray(children) && getDisplayName(children.type).endsWith('Chart')
            return React.Children.map(children, function (child) {
                if (/* @__PURE__ */ React.isValidElement(child)) {
                    return /* @__PURE__ */ reactExports.cloneElement(
                        child,
                        _objectSpread$z(
                            {
                                width: calculatedWidth,
                                height: calculatedHeight
                            },
                            isCharts
                                ? {
                                      style: _objectSpread$z(
                                          {
                                              height: '100%',
                                              width: '100%',
                                              maxHeight: calculatedHeight,
                                              maxWidth: calculatedWidth
                                          },
                                          child.props.style
                                      )
                                  }
                                : {}
                        )
                    )
                }
                return child
            })
        },
        [aspect, children, height, maxHeight, minHeight, minWidth, sizes, width]
    )
    return /* @__PURE__ */ React.createElement(
        'div',
        {
            id: id ? ''.concat(id) : void 0,
            className: clsx('recharts-responsive-container', className),
            style: _objectSpread$z(
                _objectSpread$z({}, style),
                {},
                {
                    width,
                    height,
                    minWidth,
                    minHeight,
                    maxHeight
                }
            ),
            ref: containerRef
        },
        chartContent
    )
})
var Cell = function Cell2(_props) {
    return null
}
Cell.displayName = 'Cell'
function _typeof$F(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$F =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$F(o)
    )
}
function ownKeys$z(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$y(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$z(Object(t), true).forEach(function (r3) {
                  _defineProperty$D(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$z(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$D(obj, key, value) {
    key = _toPropertyKey$D(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$D(t) {
    var i = _toPrimitive$D(t, 'string')
    return 'symbol' == _typeof$F(i) ? i : i + ''
}
function _toPrimitive$D(t, r2) {
    if ('object' != _typeof$F(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$F(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var stringCache = {
    widthCache: {},
    cacheCount: 0
}
var MAX_CACHE_NUM = 2e3
var SPAN_STYLE = {
    position: 'absolute',
    top: '-20000px',
    left: 0,
    padding: 0,
    margin: 0,
    border: 'none',
    whiteSpace: 'pre'
}
var MEASUREMENT_SPAN_ID = 'recharts_measurement_span'
function removeInvalidKeys(obj) {
    var copyObj = _objectSpread$y({}, obj)
    Object.keys(copyObj).forEach(function (key) {
        if (!copyObj[key]) {
            delete copyObj[key]
        }
    })
    return copyObj
}
var getStringSize = function getStringSize2(text2) {
    var style = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}
    if (text2 === void 0 || text2 === null || Global.isSsr) {
        return {
            width: 0,
            height: 0
        }
    }
    var copyStyle = removeInvalidKeys(style)
    var cacheKey = JSON.stringify({
        text: text2,
        copyStyle
    })
    if (stringCache.widthCache[cacheKey]) {
        return stringCache.widthCache[cacheKey]
    }
    try {
        var measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID)
        if (!measurementSpan) {
            measurementSpan = document.createElement('span')
            measurementSpan.setAttribute('id', MEASUREMENT_SPAN_ID)
            measurementSpan.setAttribute('aria-hidden', 'true')
            document.body.appendChild(measurementSpan)
        }
        var measurementSpanStyle = _objectSpread$y(_objectSpread$y({}, SPAN_STYLE), copyStyle)
        Object.assign(measurementSpan.style, measurementSpanStyle)
        measurementSpan.textContent = ''.concat(text2)
        var rect = measurementSpan.getBoundingClientRect()
        var result = {
            width: rect.width,
            height: rect.height
        }
        stringCache.widthCache[cacheKey] = result
        if (++stringCache.cacheCount > MAX_CACHE_NUM) {
            stringCache.cacheCount = 0
            stringCache.widthCache = {}
        }
        return result
    } catch (e) {
        return {
            width: 0,
            height: 0
        }
    }
}
var getOffset = function getOffset2(rect) {
    return {
        top: rect.top + window.scrollY - document.documentElement.clientTop,
        left: rect.left + window.scrollX - document.documentElement.clientLeft
    }
}
function _typeof$E(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$E =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$E(o)
    )
}
function _slicedToArray$b(arr, i) {
    return (
        _arrayWithHoles$c(arr) ||
        _iterableToArrayLimit$b(arr, i) ||
        _unsupportedIterableToArray$k(arr, i) ||
        _nonIterableRest$c()
    )
}
function _nonIterableRest$c() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$k(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$k(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$k(o, minLen)
}
function _arrayLikeToArray$k(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$b(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l)) {
                if (Object(t) !== t) return
                f = false
            } else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$c(arr) {
    if (Array.isArray(arr)) return arr
}
function _classCallCheck$k(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$k(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$C(descriptor.key), descriptor)
    }
}
function _createClass$k(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$k(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$k(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _toPropertyKey$C(t) {
    var i = _toPrimitive$C(t, 'string')
    return 'symbol' == _typeof$E(i) ? i : i + ''
}
function _toPrimitive$C(t, r2) {
    if ('object' != _typeof$E(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$E(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var MULTIPLY_OR_DIVIDE_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([*/])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/
var ADD_OR_SUBTRACT_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([+-])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/
var CSS_LENGTH_UNIT_REGEX = /^px|cm|vh|vw|em|rem|%|mm|in|pt|pc|ex|ch|vmin|vmax|Q$/
var NUM_SPLIT_REGEX = /(-?\d+(?:\.\d+)?)([a-zA-Z%]+)?/
var CONVERSION_RATES = {
    cm: 96 / 2.54,
    mm: 96 / 25.4,
    pt: 96 / 72,
    pc: 96 / 6,
    in: 96,
    Q: 96 / (2.54 * 40),
    px: 1
}
var FIXED_CSS_LENGTH_UNITS = Object.keys(CONVERSION_RATES)
var STR_NAN = 'NaN'
function convertToPx(value, unit2) {
    return value * CONVERSION_RATES[unit2]
}
var DecimalCSS = /* @__PURE__ */ (function () {
    function DecimalCSS2(num, unit2) {
        _classCallCheck$k(this, DecimalCSS2)
        this.num = num
        this.unit = unit2
        this.num = num
        this.unit = unit2
        if (Number.isNaN(num)) {
            this.unit = ''
        }
        if (unit2 !== '' && !CSS_LENGTH_UNIT_REGEX.test(unit2)) {
            this.num = NaN
            this.unit = ''
        }
        if (FIXED_CSS_LENGTH_UNITS.includes(unit2)) {
            this.num = convertToPx(num, unit2)
            this.unit = 'px'
        }
    }
    return _createClass$k(
        DecimalCSS2,
        [
            {
                key: 'add',
                value: function add2(other) {
                    if (this.unit !== other.unit) {
                        return new DecimalCSS2(NaN, '')
                    }
                    return new DecimalCSS2(this.num + other.num, this.unit)
                }
            },
            {
                key: 'subtract',
                value: function subtract2(other) {
                    if (this.unit !== other.unit) {
                        return new DecimalCSS2(NaN, '')
                    }
                    return new DecimalCSS2(this.num - other.num, this.unit)
                }
            },
            {
                key: 'multiply',
                value: function multiply(other) {
                    if (this.unit !== '' && other.unit !== '' && this.unit !== other.unit) {
                        return new DecimalCSS2(NaN, '')
                    }
                    return new DecimalCSS2(this.num * other.num, this.unit || other.unit)
                }
            },
            {
                key: 'divide',
                value: function divide2(other) {
                    if (this.unit !== '' && other.unit !== '' && this.unit !== other.unit) {
                        return new DecimalCSS2(NaN, '')
                    }
                    return new DecimalCSS2(this.num / other.num, this.unit || other.unit)
                }
            },
            {
                key: 'toString',
                value: function toString3() {
                    return ''.concat(this.num).concat(this.unit)
                }
            },
            {
                key: 'isNaN',
                value: function isNaN2() {
                    return Number.isNaN(this.num)
                }
            }
        ],
        [
            {
                key: 'parse',
                value: function parse2(str) {
                    var _NUM_SPLIT_REGEX$exec
                    var _ref3 =
                            (_NUM_SPLIT_REGEX$exec = NUM_SPLIT_REGEX.exec(str)) !== null &&
                            _NUM_SPLIT_REGEX$exec !== void 0
                                ? _NUM_SPLIT_REGEX$exec
                                : [],
                        _ref22 = _slicedToArray$b(_ref3, 3),
                        numStr = _ref22[1],
                        unit2 = _ref22[2]
                    return new DecimalCSS2(
                        parseFloat(numStr),
                        unit2 !== null && unit2 !== void 0 ? unit2 : ''
                    )
                }
            }
        ]
    )
})()
function calculateArithmetic(expr) {
    if (expr.includes(STR_NAN)) {
        return STR_NAN
    }
    var newExpr = expr
    while (newExpr.includes('*') || newExpr.includes('/')) {
        var _MULTIPLY_OR_DIVIDE_R
        var _ref3 =
                (_MULTIPLY_OR_DIVIDE_R = MULTIPLY_OR_DIVIDE_REGEX.exec(newExpr)) !== null &&
                _MULTIPLY_OR_DIVIDE_R !== void 0
                    ? _MULTIPLY_OR_DIVIDE_R
                    : [],
            _ref4 = _slicedToArray$b(_ref3, 4),
            leftOperand = _ref4[1],
            operator = _ref4[2],
            rightOperand = _ref4[3]
        var lTs = DecimalCSS.parse(
            leftOperand !== null && leftOperand !== void 0 ? leftOperand : ''
        )
        var rTs = DecimalCSS.parse(
            rightOperand !== null && rightOperand !== void 0 ? rightOperand : ''
        )
        var result = operator === '*' ? lTs.multiply(rTs) : lTs.divide(rTs)
        if (result.isNaN()) {
            return STR_NAN
        }
        newExpr = newExpr.replace(MULTIPLY_OR_DIVIDE_REGEX, result.toString())
    }
    while (newExpr.includes('+') || /.-\d+(?:\.\d+)?/.test(newExpr)) {
        var _ADD_OR_SUBTRACT_REGE
        var _ref5 =
                (_ADD_OR_SUBTRACT_REGE = ADD_OR_SUBTRACT_REGEX.exec(newExpr)) !== null &&
                _ADD_OR_SUBTRACT_REGE !== void 0
                    ? _ADD_OR_SUBTRACT_REGE
                    : [],
            _ref6 = _slicedToArray$b(_ref5, 4),
            _leftOperand = _ref6[1],
            _operator = _ref6[2],
            _rightOperand = _ref6[3]
        var _lTs = DecimalCSS.parse(
            _leftOperand !== null && _leftOperand !== void 0 ? _leftOperand : ''
        )
        var _rTs = DecimalCSS.parse(
            _rightOperand !== null && _rightOperand !== void 0 ? _rightOperand : ''
        )
        var _result = _operator === '+' ? _lTs.add(_rTs) : _lTs.subtract(_rTs)
        if (_result.isNaN()) {
            return STR_NAN
        }
        newExpr = newExpr.replace(ADD_OR_SUBTRACT_REGEX, _result.toString())
    }
    return newExpr
}
var PARENTHESES_REGEX = /\(([^()]*)\)/
function calculateParentheses(expr) {
    var newExpr = expr
    while (newExpr.includes('(')) {
        var _PARENTHESES_REGEX$ex = PARENTHESES_REGEX.exec(newExpr),
            _PARENTHESES_REGEX$ex2 = _slicedToArray$b(_PARENTHESES_REGEX$ex, 2),
            parentheticalExpression = _PARENTHESES_REGEX$ex2[1]
        newExpr = newExpr.replace(PARENTHESES_REGEX, calculateArithmetic(parentheticalExpression))
    }
    return newExpr
}
function evaluateExpression(expression) {
    var newExpr = expression.replace(/\s+/g, '')
    newExpr = calculateParentheses(newExpr)
    newExpr = calculateArithmetic(newExpr)
    return newExpr
}
function safeEvaluateExpression(expression) {
    try {
        return evaluateExpression(expression)
    } catch (e) {
        return STR_NAN
    }
}
function reduceCSSCalc(expression) {
    var result = safeEvaluateExpression(expression.slice(5, -1))
    if (result === STR_NAN) {
        return ''
    }
    return result
}
var _excluded$o = [
        'x',
        'y',
        'lineHeight',
        'capHeight',
        'scaleToFit',
        'textAnchor',
        'verticalAnchor',
        'fill'
    ],
    _excluded2$9 = ['dx', 'dy', 'angle', 'className', 'breakAll']
function _extends$t() {
    _extends$t = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$t.apply(this, arguments)
}
function _objectWithoutProperties$i(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$i(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$i(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _slicedToArray$a(arr, i) {
    return (
        _arrayWithHoles$b(arr) ||
        _iterableToArrayLimit$a(arr, i) ||
        _unsupportedIterableToArray$j(arr, i) ||
        _nonIterableRest$b()
    )
}
function _nonIterableRest$b() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$j(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$j(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$j(o, minLen)
}
function _arrayLikeToArray$j(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$a(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l)) {
                if (Object(t) !== t) return
                f = false
            } else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$b(arr) {
    if (Array.isArray(arr)) return arr
}
var BREAKING_SPACES = /[ \f\n\r\t\v\u2028\u2029]+/
var calculateWordWidths = function calculateWordWidths2(_ref3) {
    var children = _ref3.children,
        breakAll = _ref3.breakAll,
        style = _ref3.style
    try {
        var words = []
        if (!isNil(children)) {
            if (breakAll) {
                words = children.toString().split('')
            } else {
                words = children.toString().split(BREAKING_SPACES)
            }
        }
        var wordsWithComputedWidth = words.map(function (word) {
            return {
                word,
                width: getStringSize(word, style).width
            }
        })
        var spaceWidth = breakAll ? 0 : getStringSize(' ', style).width
        return {
            wordsWithComputedWidth,
            spaceWidth
        }
    } catch (e) {
        return null
    }
}
var calculateWordsByLines = function calculateWordsByLines2(
    _ref22,
    initialWordsWithComputedWith,
    spaceWidth,
    lineWidth,
    scaleToFit
) {
    var maxLines = _ref22.maxLines,
        children = _ref22.children,
        style = _ref22.style,
        breakAll = _ref22.breakAll
    var shouldLimitLines = isNumber(maxLines)
    var text2 = children
    var calculate = function calculate2() {
        var words = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : []
        return words.reduce(function (result2, _ref3) {
            var word = _ref3.word,
                width = _ref3.width
            var currentLine = result2[result2.length - 1]
            if (
                currentLine &&
                (lineWidth == null ||
                    scaleToFit ||
                    currentLine.width + width + spaceWidth < Number(lineWidth))
            ) {
                currentLine.words.push(word)
                currentLine.width += width + spaceWidth
            } else {
                var newLine = {
                    words: [word],
                    width
                }
                result2.push(newLine)
            }
            return result2
        }, [])
    }
    var originalResult = calculate(initialWordsWithComputedWith)
    var findLongestLine = function findLongestLine2(words) {
        return words.reduce(function (a2, b) {
            return a2.width > b.width ? a2 : b
        })
    }
    if (!shouldLimitLines) {
        return originalResult
    }
    var suffix = '…'
    var checkOverflow = function checkOverflow2(index2) {
        var tempText = text2.slice(0, index2)
        var words = calculateWordWidths({
            breakAll,
            style,
            children: tempText + suffix
        }).wordsWithComputedWidth
        var result2 = calculate(words)
        var doesOverflow =
            result2.length > maxLines || findLongestLine(result2).width > Number(lineWidth)
        return [doesOverflow, result2]
    }
    var start = 0
    var end = text2.length - 1
    var iterations = 0
    var trimmedResult
    while (start <= end && iterations <= text2.length - 1) {
        var middle = Math.floor((start + end) / 2)
        var prev2 = middle - 1
        var _checkOverflow = checkOverflow(prev2),
            _checkOverflow2 = _slicedToArray$a(_checkOverflow, 2),
            doesPrevOverflow = _checkOverflow2[0],
            result = _checkOverflow2[1]
        var _checkOverflow3 = checkOverflow(middle),
            _checkOverflow4 = _slicedToArray$a(_checkOverflow3, 1),
            doesMiddleOverflow = _checkOverflow4[0]
        if (!doesPrevOverflow && !doesMiddleOverflow) {
            start = middle + 1
        }
        if (doesPrevOverflow && doesMiddleOverflow) {
            end = middle - 1
        }
        if (!doesPrevOverflow && doesMiddleOverflow) {
            trimmedResult = result
            break
        }
        iterations++
    }
    return trimmedResult || originalResult
}
var getWordsWithoutCalculate = function getWordsWithoutCalculate2(children) {
    var words = !isNil(children) ? children.toString().split(BREAKING_SPACES) : []
    return [
        {
            words
        }
    ]
}
var getWordsByLines = function getWordsByLines2(_ref4) {
    var width = _ref4.width,
        scaleToFit = _ref4.scaleToFit,
        children = _ref4.children,
        style = _ref4.style,
        breakAll = _ref4.breakAll,
        maxLines = _ref4.maxLines
    if ((width || scaleToFit) && !Global.isSsr) {
        var wordsWithComputedWidth, spaceWidth
        var wordWidths = calculateWordWidths({
            breakAll,
            children,
            style
        })
        if (wordWidths) {
            var wcw = wordWidths.wordsWithComputedWidth,
                sw = wordWidths.spaceWidth
            wordsWithComputedWidth = wcw
            spaceWidth = sw
        } else {
            return getWordsWithoutCalculate(children)
        }
        return calculateWordsByLines(
            {
                breakAll,
                children,
                maxLines,
                style
            },
            wordsWithComputedWidth,
            spaceWidth,
            width,
            scaleToFit
        )
    }
    return getWordsWithoutCalculate(children)
}
var DEFAULT_FILL = '#808080'
var Text = function Text2(_ref5) {
    var _ref5$x = _ref5.x,
        propsX = _ref5$x === void 0 ? 0 : _ref5$x,
        _ref5$y = _ref5.y,
        propsY = _ref5$y === void 0 ? 0 : _ref5$y,
        _ref5$lineHeight = _ref5.lineHeight,
        lineHeight = _ref5$lineHeight === void 0 ? '1em' : _ref5$lineHeight,
        _ref5$capHeight = _ref5.capHeight,
        capHeight = _ref5$capHeight === void 0 ? '0.71em' : _ref5$capHeight,
        _ref5$scaleToFit = _ref5.scaleToFit,
        scaleToFit = _ref5$scaleToFit === void 0 ? false : _ref5$scaleToFit,
        _ref5$textAnchor = _ref5.textAnchor,
        textAnchor = _ref5$textAnchor === void 0 ? 'start' : _ref5$textAnchor,
        _ref5$verticalAnchor = _ref5.verticalAnchor,
        verticalAnchor = _ref5$verticalAnchor === void 0 ? 'end' : _ref5$verticalAnchor,
        _ref5$fill = _ref5.fill,
        fill = _ref5$fill === void 0 ? DEFAULT_FILL : _ref5$fill,
        props = _objectWithoutProperties$i(_ref5, _excluded$o)
    var wordsByLines = reactExports.useMemo(
        function () {
            return getWordsByLines({
                breakAll: props.breakAll,
                children: props.children,
                maxLines: props.maxLines,
                scaleToFit,
                style: props.style,
                width: props.width
            })
        },
        [props.breakAll, props.children, props.maxLines, scaleToFit, props.style, props.width]
    )
    var dx = props.dx,
        dy = props.dy,
        angle = props.angle,
        className = props.className,
        breakAll = props.breakAll,
        textProps = _objectWithoutProperties$i(props, _excluded2$9)
    if (!isNumOrStr(propsX) || !isNumOrStr(propsY)) {
        return null
    }
    var x2 = propsX + (isNumber(dx) ? dx : 0)
    var y2 = propsY + (isNumber(dy) ? dy : 0)
    var startDy
    switch (verticalAnchor) {
        case 'start':
            startDy = reduceCSSCalc('calc('.concat(capHeight, ')'))
            break
        case 'middle':
            startDy = reduceCSSCalc(
                'calc('
                    .concat((wordsByLines.length - 1) / 2, ' * -')
                    .concat(lineHeight, ' + (')
                    .concat(capHeight, ' / 2))')
            )
            break
        default:
            startDy = reduceCSSCalc(
                'calc('.concat(wordsByLines.length - 1, ' * -').concat(lineHeight, ')')
            )
            break
    }
    var transforms = []
    if (scaleToFit) {
        var lineWidth = wordsByLines[0].width
        var width = props.width
        transforms.push('scale('.concat((isNumber(width) ? width / lineWidth : 1) / lineWidth, ')'))
    }
    if (angle) {
        transforms.push('rotate('.concat(angle, ', ').concat(x2, ', ').concat(y2, ')'))
    }
    if (transforms.length) {
        textProps.transform = transforms.join(' ')
    }
    return /* @__PURE__ */ React.createElement(
        'text',
        _extends$t({}, filterProps(textProps, true), {
            x: x2,
            y: y2,
            className: clsx('recharts-text', className),
            textAnchor,
            fill: fill.includes('url') ? DEFAULT_FILL : fill
        }),
        wordsByLines.map(function (line2, index2) {
            var words = line2.words.join(breakAll ? '' : ' ')
            return (
                // duplicate words will cause duplicate keys
                // eslint-disable-next-line react/no-array-index-key
                /* @__PURE__ */ React.createElement(
                    'tspan',
                    {
                        x: x2,
                        dy: index2 === 0 ? startDy : lineHeight,
                        key: ''.concat(words, '-').concat(index2)
                    },
                    words
                )
            )
        })
    )
}
function ascending(a2, b) {
    return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN
}
function descending(a2, b) {
    return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN
}
function bisector(f) {
    let compare1, compare2, delta
    if (f.length !== 2) {
        compare1 = ascending
        compare2 = (d, x2) => ascending(f(d), x2)
        delta = (d, x2) => f(d) - x2
    } else {
        compare1 = f === ascending || f === descending ? f : zero$1
        compare2 = f
        delta = f
    }
    function left(a2, x2, lo = 0, hi = a2.length) {
        if (lo < hi) {
            if (compare1(x2, x2) !== 0) return hi
            do {
                const mid = (lo + hi) >>> 1
                if (compare2(a2[mid], x2) < 0) lo = mid + 1
                else hi = mid
            } while (lo < hi)
        }
        return lo
    }
    function right(a2, x2, lo = 0, hi = a2.length) {
        if (lo < hi) {
            if (compare1(x2, x2) !== 0) return hi
            do {
                const mid = (lo + hi) >>> 1
                if (compare2(a2[mid], x2) <= 0) lo = mid + 1
                else hi = mid
            } while (lo < hi)
        }
        return lo
    }
    function center(a2, x2, lo = 0, hi = a2.length) {
        const i = left(a2, x2, lo, hi - 1)
        return i > lo && delta(a2[i - 1], x2) > -delta(a2[i], x2) ? i - 1 : i
    }
    return { left, center, right }
}
function zero$1() {
    return 0
}
function number$2(x2) {
    return x2 === null ? NaN : +x2
}
function* numbers(values, valueof) {
    {
        for (let value of values) {
            if (value != null && (value = +value) >= value) {
                yield value
            }
        }
    }
}
const ascendingBisect = bisector(ascending)
const bisectRight = ascendingBisect.right
bisector(number$2).center
class InternMap extends Map {
    constructor(entries, key = keyof) {
        super()
        Object.defineProperties(this, {
            _intern: { value: /* @__PURE__ */ new Map() },
            _key: { value: key }
        })
        if (entries != null) for (const [key2, value] of entries) this.set(key2, value)
    }
    get(key) {
        return super.get(intern_get(this, key))
    }
    has(key) {
        return super.has(intern_get(this, key))
    }
    set(key, value) {
        return super.set(intern_set(this, key), value)
    }
    delete(key) {
        return super.delete(intern_delete(this, key))
    }
}
function intern_get({ _intern, _key }, value) {
    const key = _key(value)
    return _intern.has(key) ? _intern.get(key) : value
}
function intern_set({ _intern, _key }, value) {
    const key = _key(value)
    if (_intern.has(key)) return _intern.get(key)
    _intern.set(key, value)
    return value
}
function intern_delete({ _intern, _key }, value) {
    const key = _key(value)
    if (_intern.has(key)) {
        value = _intern.get(key)
        _intern.delete(key)
    }
    return value
}
function keyof(value) {
    return value !== null && typeof value === 'object' ? value.valueOf() : value
}
function compareDefined(compare = ascending) {
    if (compare === ascending) return ascendingDefined
    if (typeof compare !== 'function') throw new TypeError('compare is not a function')
    return (a2, b) => {
        const x2 = compare(a2, b)
        if (x2 || x2 === 0) return x2
        return (compare(b, b) === 0) - (compare(a2, a2) === 0)
    }
}
function ascendingDefined(a2, b) {
    return (a2 == null || !(a2 >= a2)) - (b == null || !(b >= b)) || (a2 < b ? -1 : a2 > b ? 1 : 0)
}
const e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2)
function tickSpec(start, stop, count2) {
    const step = (stop - start) / Math.max(0, count2),
        power = Math.floor(Math.log10(step)),
        error = step / Math.pow(10, power),
        factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1
    let i1, i2, inc
    if (power < 0) {
        inc = Math.pow(10, -power) / factor
        i1 = Math.round(start * inc)
        i2 = Math.round(stop * inc)
        if (i1 / inc < start) ++i1
        if (i2 / inc > stop) --i2
        inc = -inc
    } else {
        inc = Math.pow(10, power) * factor
        i1 = Math.round(start / inc)
        i2 = Math.round(stop / inc)
        if (i1 * inc < start) ++i1
        if (i2 * inc > stop) --i2
    }
    if (i2 < i1 && 0.5 <= count2 && count2 < 2) return tickSpec(start, stop, count2 * 2)
    return [i1, i2, inc]
}
function ticks(start, stop, count2) {
    ;(stop = +stop), (start = +start), (count2 = +count2)
    if (!(count2 > 0)) return []
    if (start === stop) return [start]
    const reverse3 = stop < start,
        [i1, i2, inc] = reverse3 ? tickSpec(stop, start, count2) : tickSpec(start, stop, count2)
    if (!(i2 >= i1)) return []
    const n = i2 - i1 + 1,
        ticks2 = new Array(n)
    if (reverse3) {
        if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) / -inc
        else for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) * inc
    } else {
        if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) / -inc
        else for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) * inc
    }
    return ticks2
}
function tickIncrement(start, stop, count2) {
    ;(stop = +stop), (start = +start), (count2 = +count2)
    return tickSpec(start, stop, count2)[2]
}
function tickStep(start, stop, count2) {
    ;(stop = +stop), (start = +start), (count2 = +count2)
    const reverse3 = stop < start,
        inc = reverse3 ? tickIncrement(stop, start, count2) : tickIncrement(start, stop, count2)
    return (reverse3 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc)
}
function max$2(values, valueof) {
    let max2
    {
        for (const value of values) {
            if (value != null && (max2 < value || (max2 === void 0 && value >= value))) {
                max2 = value
            }
        }
    }
    return max2
}
function min$2(values, valueof) {
    let min2
    {
        for (const value of values) {
            if (value != null && (min2 > value || (min2 === void 0 && value >= value))) {
                min2 = value
            }
        }
    }
    return min2
}
function quickselect(array2, k2, left = 0, right = Infinity, compare) {
    k2 = Math.floor(k2)
    left = Math.floor(Math.max(0, left))
    right = Math.floor(Math.min(array2.length - 1, right))
    if (!(left <= k2 && k2 <= right)) return array2
    compare = compare === void 0 ? ascendingDefined : compareDefined(compare)
    while (right > left) {
        if (right - left > 600) {
            const n = right - left + 1
            const m = k2 - left + 1
            const z = Math.log(n)
            const s2 = 0.5 * Math.exp((2 * z) / 3)
            const sd = 0.5 * Math.sqrt((z * s2 * (n - s2)) / n) * (m - n / 2 < 0 ? -1 : 1)
            const newLeft = Math.max(left, Math.floor(k2 - (m * s2) / n + sd))
            const newRight = Math.min(right, Math.floor(k2 + ((n - m) * s2) / n + sd))
            quickselect(array2, k2, newLeft, newRight, compare)
        }
        const t = array2[k2]
        let i = left
        let j = right
        swap(array2, left, k2)
        if (compare(array2[right], t) > 0) swap(array2, left, right)
        while (i < j) {
            swap(array2, i, j), ++i, --j
            while (compare(array2[i], t) < 0) ++i
            while (compare(array2[j], t) > 0) --j
        }
        if (compare(array2[left], t) === 0) swap(array2, left, j)
        else ++j, swap(array2, j, right)
        if (j <= k2) left = j + 1
        if (k2 <= j) right = j - 1
    }
    return array2
}
function swap(array2, i, j) {
    const t = array2[i]
    array2[i] = array2[j]
    array2[j] = t
}
function quantile$1(values, p, valueof) {
    values = Float64Array.from(numbers(values))
    if (!(n = values.length) || isNaN((p = +p))) return
    if (p <= 0 || n < 2) return min$2(values)
    if (p >= 1) return max$2(values)
    var n,
        i = (n - 1) * p,
        i0 = Math.floor(i),
        value0 = max$2(quickselect(values, i0).subarray(0, i0 + 1)),
        value1 = min$2(values.subarray(i0 + 1))
    return value0 + (value1 - value0) * (i - i0)
}
function quantileSorted(values, p, valueof = number$2) {
    if (!(n = values.length) || isNaN((p = +p))) return
    if (p <= 0 || n < 2) return +valueof(values[0], 0, values)
    if (p >= 1) return +valueof(values[n - 1], n - 1, values)
    var n,
        i = (n - 1) * p,
        i0 = Math.floor(i),
        value0 = +valueof(values[i0], i0, values),
        value1 = +valueof(values[i0 + 1], i0 + 1, values)
    return value0 + (value1 - value0) * (i - i0)
}
function range$2(start, stop, step) {
    ;(start = +start),
        (stop = +stop),
        (step = (n = arguments.length) < 2 ? ((stop = start), (start = 0), 1) : n < 3 ? 1 : +step)
    var i = -1,
        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
        range3 = new Array(n)
    while (++i < n) {
        range3[i] = start + i * step
    }
    return range3
}
function initRange(domain, range3) {
    switch (arguments.length) {
        case 0:
            break
        case 1:
            this.range(domain)
            break
        default:
            this.range(range3).domain(domain)
            break
    }
    return this
}
function initInterpolator(domain, interpolator) {
    switch (arguments.length) {
        case 0:
            break
        case 1: {
            if (typeof domain === 'function') this.interpolator(domain)
            else this.range(domain)
            break
        }
        default: {
            this.domain(domain)
            if (typeof interpolator === 'function') this.interpolator(interpolator)
            else this.range(interpolator)
            break
        }
    }
    return this
}
const implicit = Symbol('implicit')
function ordinal() {
    var index2 = new InternMap(),
        domain = [],
        range3 = [],
        unknown = implicit
    function scale(d) {
        let i = index2.get(d)
        if (i === void 0) {
            if (unknown !== implicit) return unknown
            index2.set(d, (i = domain.push(d) - 1))
        }
        return range3[i % range3.length]
    }
    scale.domain = function (_) {
        if (!arguments.length) return domain.slice()
        ;(domain = []), (index2 = new InternMap())
        for (const value of _) {
            if (index2.has(value)) continue
            index2.set(value, domain.push(value) - 1)
        }
        return scale
    }
    scale.range = function (_) {
        return arguments.length ? ((range3 = Array.from(_)), scale) : range3.slice()
    }
    scale.unknown = function (_) {
        return arguments.length ? ((unknown = _), scale) : unknown
    }
    scale.copy = function () {
        return ordinal(domain, range3).unknown(unknown)
    }
    initRange.apply(scale, arguments)
    return scale
}
function band() {
    var scale = ordinal().unknown(void 0),
        domain = scale.domain,
        ordinalRange = scale.range,
        r0 = 0,
        r1 = 1,
        step,
        bandwidth,
        round2 = false,
        paddingInner = 0,
        paddingOuter = 0,
        align = 0.5
    delete scale.unknown
    function rescale() {
        var n = domain().length,
            reverse3 = r1 < r0,
            start = reverse3 ? r1 : r0,
            stop = reverse3 ? r0 : r1
        step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2)
        if (round2) step = Math.floor(step)
        start += (stop - start - step * (n - paddingInner)) * align
        bandwidth = step * (1 - paddingInner)
        if (round2) (start = Math.round(start)), (bandwidth = Math.round(bandwidth))
        var values = range$2(n).map(function (i) {
            return start + step * i
        })
        return ordinalRange(reverse3 ? values.reverse() : values)
    }
    scale.domain = function (_) {
        return arguments.length ? (domain(_), rescale()) : domain()
    }
    scale.range = function (_) {
        return arguments.length ? (([r0, r1] = _), (r0 = +r0), (r1 = +r1), rescale()) : [r0, r1]
    }
    scale.rangeRound = function (_) {
        return ([r0, r1] = _), (r0 = +r0), (r1 = +r1), (round2 = true), rescale()
    }
    scale.bandwidth = function () {
        return bandwidth
    }
    scale.step = function () {
        return step
    }
    scale.round = function (_) {
        return arguments.length ? ((round2 = !!_), rescale()) : round2
    }
    scale.padding = function (_) {
        return arguments.length
            ? ((paddingInner = Math.min(1, (paddingOuter = +_))), rescale())
            : paddingInner
    }
    scale.paddingInner = function (_) {
        return arguments.length ? ((paddingInner = Math.min(1, _)), rescale()) : paddingInner
    }
    scale.paddingOuter = function (_) {
        return arguments.length ? ((paddingOuter = +_), rescale()) : paddingOuter
    }
    scale.align = function (_) {
        return arguments.length ? ((align = Math.max(0, Math.min(1, _))), rescale()) : align
    }
    scale.copy = function () {
        return band(domain(), [r0, r1])
            .round(round2)
            .paddingInner(paddingInner)
            .paddingOuter(paddingOuter)
            .align(align)
    }
    return initRange.apply(rescale(), arguments)
}
function pointish(scale) {
    var copy2 = scale.copy
    scale.padding = scale.paddingOuter
    delete scale.paddingInner
    delete scale.paddingOuter
    scale.copy = function () {
        return pointish(copy2())
    }
    return scale
}
function point() {
    return pointish(band.apply(null, arguments).paddingInner(1))
}
function define(constructor, factory, prototype2) {
    constructor.prototype = factory.prototype = prototype2
    prototype2.constructor = constructor
}
function extend(parent, definition) {
    var prototype2 = Object.create(parent.prototype)
    for (var key in definition) prototype2[key] = definition[key]
    return prototype2
}
function Color() {}
var darker = 0.7
var brighter = 1 / darker
var reI = '\\s*([+-]?\\d+)\\s*',
    reN = '\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*',
    reP = '\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*',
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`),
    reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`),
    reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`),
    reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`),
    reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`),
    reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`)
var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
}
define(Color, color, {
    copy(channels) {
        return Object.assign(new this.constructor(), this, channels)
    },
    displayable() {
        return this.rgb().displayable()
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
})
function color_formatHex() {
    return this.rgb().formatHex()
}
function color_formatHex8() {
    return this.rgb().formatHex8()
}
function color_formatHsl() {
    return hslConvert(this).formatHsl()
}
function color_formatRgb() {
    return this.rgb().formatRgb()
}
function color(format2) {
    var m, l
    format2 = (format2 + '').trim().toLowerCase()
    return (m = reHex.exec(format2))
        ? ((l = m[1].length),
          (m = parseInt(m[1], 16)),
          l === 6
              ? rgbn(m)
              : l === 3
                ? new Rgb(
                      ((m >> 8) & 15) | ((m >> 4) & 240),
                      ((m >> 4) & 15) | (m & 240),
                      ((m & 15) << 4) | (m & 15),
                      1
                  )
                : l === 8
                  ? rgba((m >> 24) & 255, (m >> 16) & 255, (m >> 8) & 255, (m & 255) / 255)
                  : l === 4
                    ? rgba(
                          ((m >> 12) & 15) | ((m >> 8) & 240),
                          ((m >> 8) & 15) | ((m >> 4) & 240),
                          ((m >> 4) & 15) | (m & 240),
                          (((m & 15) << 4) | (m & 15)) / 255
                      )
                    : null)
        : (m = reRgbInteger.exec(format2))
          ? new Rgb(m[1], m[2], m[3], 1)
          : (m = reRgbPercent.exec(format2))
            ? new Rgb((m[1] * 255) / 100, (m[2] * 255) / 100, (m[3] * 255) / 100, 1)
            : (m = reRgbaInteger.exec(format2))
              ? rgba(m[1], m[2], m[3], m[4])
              : (m = reRgbaPercent.exec(format2))
                ? rgba((m[1] * 255) / 100, (m[2] * 255) / 100, (m[3] * 255) / 100, m[4])
                : (m = reHslPercent.exec(format2))
                  ? hsla(m[1], m[2] / 100, m[3] / 100, 1)
                  : (m = reHslaPercent.exec(format2))
                    ? hsla(m[1], m[2] / 100, m[3] / 100, m[4])
                    : named.hasOwnProperty(format2)
                      ? rgbn(named[format2])
                      : format2 === 'transparent'
                        ? new Rgb(NaN, NaN, NaN, 0)
                        : null
}
function rgbn(n) {
    return new Rgb((n >> 16) & 255, (n >> 8) & 255, n & 255, 1)
}
function rgba(r2, g, b, a2) {
    if (a2 <= 0) r2 = g = b = NaN
    return new Rgb(r2, g, b, a2)
}
function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o)
    if (!o) return new Rgb()
    o = o.rgb()
    return new Rgb(o.r, o.g, o.b, o.opacity)
}
function rgb$1(r2, g, b, opacity) {
    return arguments.length === 1
        ? rgbConvert(r2)
        : new Rgb(r2, g, b, opacity == null ? 1 : opacity)
}
function Rgb(r2, g, b, opacity) {
    this.r = +r2
    this.g = +g
    this.b = +b
    this.opacity = +opacity
}
define(
    Rgb,
    rgb$1,
    extend(Color, {
        brighter(k2) {
            k2 = k2 == null ? brighter : Math.pow(brighter, k2)
            return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity)
        },
        darker(k2) {
            k2 = k2 == null ? darker : Math.pow(darker, k2)
            return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity)
        },
        rgb() {
            return this
        },
        clamp() {
            return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity))
        },
        displayable() {
            return (
                -0.5 <= this.r &&
                this.r < 255.5 &&
                -0.5 <= this.g &&
                this.g < 255.5 &&
                -0.5 <= this.b &&
                this.b < 255.5 &&
                0 <= this.opacity &&
                this.opacity <= 1
            )
        },
        hex: rgb_formatHex,
        // Deprecated! Use color.formatHex.
        formatHex: rgb_formatHex,
        formatHex8: rgb_formatHex8,
        formatRgb: rgb_formatRgb,
        toString: rgb_formatRgb
    })
)
function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`
}
function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`
}
function rgb_formatRgb() {
    const a2 = clampa(this.opacity)
    return `${a2 === 1 ? 'rgb(' : 'rgba('}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ')' : `, ${a2})`}`
}
function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity))
}
function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0))
}
function hex(value) {
    value = clampi(value)
    return (value < 16 ? '0' : '') + value.toString(16)
}
function hsla(h, s2, l, a2) {
    if (a2 <= 0) h = s2 = l = NaN
    else if (l <= 0 || l >= 1) h = s2 = NaN
    else if (s2 <= 0) h = NaN
    return new Hsl(h, s2, l, a2)
}
function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity)
    if (!(o instanceof Color)) o = color(o)
    if (!o) return new Hsl()
    if (o instanceof Hsl) return o
    o = o.rgb()
    var r2 = o.r / 255,
        g = o.g / 255,
        b = o.b / 255,
        min2 = Math.min(r2, g, b),
        max2 = Math.max(r2, g, b),
        h = NaN,
        s2 = max2 - min2,
        l = (max2 + min2) / 2
    if (s2) {
        if (r2 === max2) h = (g - b) / s2 + (g < b) * 6
        else if (g === max2) h = (b - r2) / s2 + 2
        else h = (r2 - g) / s2 + 4
        s2 /= l < 0.5 ? max2 + min2 : 2 - max2 - min2
        h *= 60
    } else {
        s2 = l > 0 && l < 1 ? 0 : h
    }
    return new Hsl(h, s2, l, o.opacity)
}
function hsl(h, s2, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity)
}
function Hsl(h, s2, l, opacity) {
    this.h = +h
    this.s = +s2
    this.l = +l
    this.opacity = +opacity
}
define(
    Hsl,
    hsl,
    extend(Color, {
        brighter(k2) {
            k2 = k2 == null ? brighter : Math.pow(brighter, k2)
            return new Hsl(this.h, this.s, this.l * k2, this.opacity)
        },
        darker(k2) {
            k2 = k2 == null ? darker : Math.pow(darker, k2)
            return new Hsl(this.h, this.s, this.l * k2, this.opacity)
        },
        rgb() {
            var h = (this.h % 360) + (this.h < 0) * 360,
                s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s,
                l = this.l,
                m2 = l + (l < 0.5 ? l : 1 - l) * s2,
                m1 = 2 * l - m2
            return new Rgb(
                hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
                hsl2rgb(h, m1, m2),
                hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
                this.opacity
            )
        },
        clamp() {
            return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity))
        },
        displayable() {
            return (
                ((0 <= this.s && this.s <= 1) || isNaN(this.s)) &&
                0 <= this.l &&
                this.l <= 1 &&
                0 <= this.opacity &&
                this.opacity <= 1
            )
        },
        formatHsl() {
            const a2 = clampa(this.opacity)
            return `${a2 === 1 ? 'hsl(' : 'hsla('}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ')' : `, ${a2})`}`
        }
    })
)
function clamph(value) {
    value = (value || 0) % 360
    return value < 0 ? value + 360 : value
}
function clampt(value) {
    return Math.max(0, Math.min(1, value || 0))
}
function hsl2rgb(h, m1, m2) {
    return (
        (h < 60
            ? m1 + ((m2 - m1) * h) / 60
            : h < 180
              ? m2
              : h < 240
                ? m1 + ((m2 - m1) * (240 - h)) / 60
                : m1) * 255
    )
}
const constant = (x2) => () => x2
function linear$1(a2, d) {
    return function (t) {
        return a2 + t * d
    }
}
function exponential(a2, b, y2) {
    return (
        (a2 = Math.pow(a2, y2)),
        (b = Math.pow(b, y2) - a2),
        (y2 = 1 / y2),
        function (t) {
            return Math.pow(a2 + t * b, y2)
        }
    )
}
function gamma(y2) {
    return (y2 = +y2) === 1
        ? nogamma
        : function (a2, b) {
              return b - a2 ? exponential(a2, b, y2) : constant(isNaN(a2) ? b : a2)
          }
}
function nogamma(a2, b) {
    var d = b - a2
    return d ? linear$1(a2, d) : constant(isNaN(a2) ? b : a2)
}
const rgb = (function rgbGamma(y2) {
    var color2 = gamma(y2)
    function rgb2(start, end) {
        var r2 = color2((start = rgb$1(start)).r, (end = rgb$1(end)).r),
            g = color2(start.g, end.g),
            b = color2(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity)
        return function (t) {
            start.r = r2(t)
            start.g = g(t)
            start.b = b(t)
            start.opacity = opacity(t)
            return start + ''
        }
    }
    rgb2.gamma = rgbGamma
    return rgb2
})(1)
function numberArray(a2, b) {
    if (!b) b = []
    var n = a2 ? Math.min(b.length, a2.length) : 0,
        c2 = b.slice(),
        i
    return function (t) {
        for (i = 0; i < n; ++i) c2[i] = a2[i] * (1 - t) + b[i] * t
        return c2
    }
}
function isNumberArray(x2) {
    return ArrayBuffer.isView(x2) && !(x2 instanceof DataView)
}
function genericArray(a2, b) {
    var nb = b ? b.length : 0,
        na = a2 ? Math.min(nb, a2.length) : 0,
        x2 = new Array(na),
        c2 = new Array(nb),
        i
    for (i = 0; i < na; ++i) x2[i] = interpolate(a2[i], b[i])
    for (; i < nb; ++i) c2[i] = b[i]
    return function (t) {
        for (i = 0; i < na; ++i) c2[i] = x2[i](t)
        return c2
    }
}
function date$1(a2, b) {
    var d = /* @__PURE__ */ new Date()
    return (
        (a2 = +a2),
        (b = +b),
        function (t) {
            return d.setTime(a2 * (1 - t) + b * t), d
        }
    )
}
function interpolateNumber$1(a2, b) {
    return (
        (a2 = +a2),
        (b = +b),
        function (t) {
            return a2 * (1 - t) + b * t
        }
    )
}
function object(a2, b) {
    var i = {},
        c2 = {},
        k2
    if (a2 === null || typeof a2 !== 'object') a2 = {}
    if (b === null || typeof b !== 'object') b = {}
    for (k2 in b) {
        if (k2 in a2) {
            i[k2] = interpolate(a2[k2], b[k2])
        } else {
            c2[k2] = b[k2]
        }
    }
    return function (t) {
        for (k2 in i) c2[k2] = i[k2](t)
        return c2
    }
}
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, 'g')
function zero(b) {
    return function () {
        return b
    }
}
function one(b) {
    return function (t) {
        return b(t) + ''
    }
}
function string(a2, b) {
    var bi = (reA.lastIndex = reB.lastIndex = 0),
        am,
        bm,
        bs,
        i = -1,
        s2 = [],
        q = []
    ;(a2 = a2 + ''), (b = b + '')
    while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) {
            bs = b.slice(bi, bs)
            if (s2[i]) s2[i] += bs
            else s2[++i] = bs
        }
        if ((am = am[0]) === (bm = bm[0])) {
            if (s2[i]) s2[i] += bm
            else s2[++i] = bm
        } else {
            s2[++i] = null
            q.push({ i, x: interpolateNumber$1(am, bm) })
        }
        bi = reB.lastIndex
    }
    if (bi < b.length) {
        bs = b.slice(bi)
        if (s2[i]) s2[i] += bs
        else s2[++i] = bs
    }
    return s2.length < 2
        ? q[0]
            ? one(q[0].x)
            : zero(b)
        : ((b = q.length),
          function (t) {
              for (var i2 = 0, o; i2 < b; ++i2) s2[(o = q[i2]).i] = o.x(t)
              return s2.join('')
          })
}
function interpolate(a2, b) {
    var t = typeof b,
        c2
    return b == null || t === 'boolean'
        ? constant(b)
        : (t === 'number'
              ? interpolateNumber$1
              : t === 'string'
                ? (c2 = color(b))
                    ? ((b = c2), rgb)
                    : string
                : b instanceof color
                  ? rgb
                  : b instanceof Date
                    ? date$1
                    : isNumberArray(b)
                      ? numberArray
                      : Array.isArray(b)
                        ? genericArray
                        : (typeof b.valueOf !== 'function' && typeof b.toString !== 'function') ||
                            isNaN(b)
                          ? object
                          : interpolateNumber$1)(a2, b)
}
function interpolateRound(a2, b) {
    return (
        (a2 = +a2),
        (b = +b),
        function (t) {
            return Math.round(a2 * (1 - t) + b * t)
        }
    )
}
function piecewise(interpolate$1, values) {
    if (values === void 0) (values = interpolate$1), (interpolate$1 = interpolate)
    var i = 0,
        n = values.length - 1,
        v = values[0],
        I = new Array(n < 0 ? 0 : n)
    while (i < n) I[i] = interpolate$1(v, (v = values[++i]))
    return function (t) {
        var i2 = Math.max(0, Math.min(n - 1, Math.floor((t *= n))))
        return I[i2](t - i2)
    }
}
function constants(x2) {
    return function () {
        return x2
    }
}
function number$1(x2) {
    return +x2
}
var unit = [0, 1]
function identity$4(x2) {
    return x2
}
function normalize(a2, b) {
    return (b -= a2 = +a2)
        ? function (x2) {
              return (x2 - a2) / b
          }
        : constants(isNaN(b) ? NaN : 0.5)
}
function clamper(a2, b) {
    var t
    if (a2 > b) (t = a2), (a2 = b), (b = t)
    return function (x2) {
        return Math.max(a2, Math.min(b, x2))
    }
}
function bimap(domain, range3, interpolate2) {
    var d0 = domain[0],
        d1 = domain[1],
        r0 = range3[0],
        r1 = range3[1]
    if (d1 < d0) (d0 = normalize(d1, d0)), (r0 = interpolate2(r1, r0))
    else (d0 = normalize(d0, d1)), (r0 = interpolate2(r0, r1))
    return function (x2) {
        return r0(d0(x2))
    }
}
function polymap(domain, range3, interpolate2) {
    var j = Math.min(domain.length, range3.length) - 1,
        d = new Array(j),
        r2 = new Array(j),
        i = -1
    if (domain[j] < domain[0]) {
        domain = domain.slice().reverse()
        range3 = range3.slice().reverse()
    }
    while (++i < j) {
        d[i] = normalize(domain[i], domain[i + 1])
        r2[i] = interpolate2(range3[i], range3[i + 1])
    }
    return function (x2) {
        var i2 = bisectRight(domain, x2, 1, j) - 1
        return r2[i2](d[i2](x2))
    }
}
function copy$2(source, target) {
    return target
        .domain(source.domain())
        .range(source.range())
        .interpolate(source.interpolate())
        .clamp(source.clamp())
        .unknown(source.unknown())
}
function transformer$2() {
    var domain = unit,
        range3 = unit,
        interpolate$1 = interpolate,
        transform,
        untransform,
        unknown,
        clamp = identity$4,
        piecewise2,
        output,
        input
    function rescale() {
        var n = Math.min(domain.length, range3.length)
        if (clamp !== identity$4) clamp = clamper(domain[0], domain[n - 1])
        piecewise2 = n > 2 ? polymap : bimap
        output = input = null
        return scale
    }
    function scale(x2) {
        return x2 == null || isNaN((x2 = +x2))
            ? unknown
            : (output || (output = piecewise2(domain.map(transform), range3, interpolate$1)))(
                  transform(clamp(x2))
              )
    }
    scale.invert = function (y2) {
        return clamp(
            untransform(
                (input || (input = piecewise2(range3, domain.map(transform), interpolateNumber$1)))(
                    y2
                )
            )
        )
    }
    scale.domain = function (_) {
        return arguments.length ? ((domain = Array.from(_, number$1)), rescale()) : domain.slice()
    }
    scale.range = function (_) {
        return arguments.length ? ((range3 = Array.from(_)), rescale()) : range3.slice()
    }
    scale.rangeRound = function (_) {
        return (range3 = Array.from(_)), (interpolate$1 = interpolateRound), rescale()
    }
    scale.clamp = function (_) {
        return arguments.length
            ? ((clamp = _ ? true : identity$4), rescale())
            : clamp !== identity$4
    }
    scale.interpolate = function (_) {
        return arguments.length ? ((interpolate$1 = _), rescale()) : interpolate$1
    }
    scale.unknown = function (_) {
        return arguments.length ? ((unknown = _), scale) : unknown
    }
    return function (t, u) {
        ;(transform = t), (untransform = u)
        return rescale()
    }
}
function continuous() {
    return transformer$2()(identity$4, identity$4)
}
function formatDecimal(x2) {
    return Math.abs((x2 = Math.round(x2))) >= 1e21
        ? x2.toLocaleString('en').replace(/,/g, '')
        : x2.toString(10)
}
function formatDecimalParts(x2, p) {
    if ((i = (x2 = p ? x2.toExponential(p - 1) : x2.toExponential()).indexOf('e')) < 0) return null
    var i,
        coefficient = x2.slice(0, i)
    return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x2.slice(i + 1)
    ]
}
function exponent(x2) {
    return (x2 = formatDecimalParts(Math.abs(x2))), x2 ? x2[1] : NaN
}
function formatGroup(grouping, thousands) {
    return function (value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length2 = 0
        while (i > 0 && g > 0) {
            if (length2 + g + 1 > width) g = Math.max(1, width - length2)
            t.push(value.substring((i -= g), i + g))
            if ((length2 += g + 1) > width) break
            g = grouping[(j = (j + 1) % grouping.length)]
        }
        return t.reverse().join(thousands)
    }
}
function formatNumerals(numerals) {
    return function (value) {
        return value.replace(/[0-9]/g, function (i) {
            return numerals[+i]
        })
    }
}
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i
function formatSpecifier(specifier) {
    if (!(match2 = re.exec(specifier))) throw new Error('invalid format: ' + specifier)
    var match2
    return new FormatSpecifier({
        fill: match2[1],
        align: match2[2],
        sign: match2[3],
        symbol: match2[4],
        zero: match2[5],
        width: match2[6],
        comma: match2[7],
        precision: match2[8] && match2[8].slice(1),
        trim: match2[9],
        type: match2[10]
    })
}
formatSpecifier.prototype = FormatSpecifier.prototype
function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? ' ' : specifier.fill + ''
    this.align = specifier.align === void 0 ? '>' : specifier.align + ''
    this.sign = specifier.sign === void 0 ? '-' : specifier.sign + ''
    this.symbol = specifier.symbol === void 0 ? '' : specifier.symbol + ''
    this.zero = !!specifier.zero
    this.width = specifier.width === void 0 ? void 0 : +specifier.width
    this.comma = !!specifier.comma
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision
    this.trim = !!specifier.trim
    this.type = specifier.type === void 0 ? '' : specifier.type + ''
}
FormatSpecifier.prototype.toString = function () {
    return (
        this.fill +
        this.align +
        this.sign +
        this.symbol +
        (this.zero ? '0' : '') +
        (this.width === void 0 ? '' : Math.max(1, this.width | 0)) +
        (this.comma ? ',' : '') +
        (this.precision === void 0 ? '' : '.' + Math.max(0, this.precision | 0)) +
        (this.trim ? '~' : '') +
        this.type
    )
}
function formatTrim(s2) {
    out: for (var n = s2.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s2[i]) {
            case '.':
                i0 = i1 = i
                break
            case '0':
                if (i0 === 0) i0 = i
                i1 = i
                break
            default:
                if (!+s2[i]) break out
                if (i0 > 0) i0 = 0
                break
        }
    }
    return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2
}
var prefixExponent
function formatPrefixAuto(x2, p) {
    var d = formatDecimalParts(x2, p)
    if (!d) return x2 + ''
    var coefficient = d[0],
        exponent2 = d[1],
        i =
            exponent2 -
            (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) +
            1,
        n = coefficient.length
    return i === n
        ? coefficient
        : i > n
          ? coefficient + new Array(i - n + 1).join('0')
          : i > 0
            ? coefficient.slice(0, i) + '.' + coefficient.slice(i)
            : '0.' + new Array(1 - i).join('0') + formatDecimalParts(x2, Math.max(0, p + i - 1))[0]
}
function formatRounded(x2, p) {
    var d = formatDecimalParts(x2, p)
    if (!d) return x2 + ''
    var coefficient = d[0],
        exponent2 = d[1]
    return exponent2 < 0
        ? '0.' + new Array(-exponent2).join('0') + coefficient
        : coefficient.length > exponent2 + 1
          ? coefficient.slice(0, exponent2 + 1) + '.' + coefficient.slice(exponent2 + 1)
          : coefficient + new Array(exponent2 - coefficient.length + 2).join('0')
}
const formatTypes = {
    '%': (x2, p) => (x2 * 100).toFixed(p),
    b: (x2) => Math.round(x2).toString(2),
    c: (x2) => x2 + '',
    d: formatDecimal,
    e: (x2, p) => x2.toExponential(p),
    f: (x2, p) => x2.toFixed(p),
    g: (x2, p) => x2.toPrecision(p),
    o: (x2) => Math.round(x2).toString(8),
    p: (x2, p) => formatRounded(x2 * 100, p),
    r: formatRounded,
    s: formatPrefixAuto,
    X: (x2) => Math.round(x2).toString(16).toUpperCase(),
    x: (x2) => Math.round(x2).toString(16)
}
function identity$3(x2) {
    return x2
}
var map$1 = Array.prototype.map,
    prefixes = ['y', 'z', 'a', 'f', 'p', 'n', 'µ', 'm', '', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']
function formatLocale$1(locale2) {
    var group =
            locale2.grouping === void 0 || locale2.thousands === void 0
                ? identity$3
                : formatGroup(map$1.call(locale2.grouping, Number), locale2.thousands + ''),
        currencyPrefix = locale2.currency === void 0 ? '' : locale2.currency[0] + '',
        currencySuffix = locale2.currency === void 0 ? '' : locale2.currency[1] + '',
        decimal = locale2.decimal === void 0 ? '.' : locale2.decimal + '',
        numerals =
            locale2.numerals === void 0
                ? identity$3
                : formatNumerals(map$1.call(locale2.numerals, String)),
        percent = locale2.percent === void 0 ? '%' : locale2.percent + '',
        minus = locale2.minus === void 0 ? '−' : locale2.minus + '',
        nan = locale2.nan === void 0 ? 'NaN' : locale2.nan + ''
    function newFormat(specifier) {
        specifier = formatSpecifier(specifier)
        var fill = specifier.fill,
            align = specifier.align,
            sign2 = specifier.sign,
            symbol = specifier.symbol,
            zero2 = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim2 = specifier.trim,
            type = specifier.type
        if (type === 'n') (comma = true), (type = 'g')
        else if (!formatTypes[type])
            precision === void 0 && (precision = 12), (trim2 = true), (type = 'g')
        if (zero2 || (fill === '0' && align === '=')) (zero2 = true), (fill = '0'), (align = '=')
        var prefix2 =
                symbol === '$'
                    ? currencyPrefix
                    : symbol === '#' && /[boxX]/.test(type)
                      ? '0' + type.toLowerCase()
                      : '',
            suffix = symbol === '$' ? currencySuffix : /[%p]/.test(type) ? percent : ''
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type)
        precision =
            precision === void 0
                ? 6
                : /[gprs]/.test(type)
                  ? Math.max(1, Math.min(21, precision))
                  : Math.max(0, Math.min(20, precision))
        function format2(value) {
            var valuePrefix = prefix2,
                valueSuffix = suffix,
                i,
                n,
                c2
            if (type === 'c') {
                valueSuffix = formatType(value) + valueSuffix
                value = ''
            } else {
                value = +value
                var valueNegative = value < 0 || 1 / value < 0
                value = isNaN(value) ? nan : formatType(Math.abs(value), precision)
                if (trim2) value = formatTrim(value)
                if (valueNegative && +value === 0 && sign2 !== '+') valueNegative = false
                valuePrefix =
                    (valueNegative
                        ? sign2 === '('
                            ? sign2
                            : minus
                        : sign2 === '-' || sign2 === '('
                          ? ''
                          : sign2) + valuePrefix
                valueSuffix =
                    (type === 's' ? prefixes[8 + prefixExponent / 3] : '') +
                    valueSuffix +
                    (valueNegative && sign2 === '(' ? ')' : '')
                if (maybeSuffix) {
                    ;(i = -1), (n = value.length)
                    while (++i < n) {
                        if (((c2 = value.charCodeAt(i)), 48 > c2 || c2 > 57)) {
                            valueSuffix =
                                (c2 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) +
                                valueSuffix
                            value = value.slice(0, i)
                            break
                        }
                    }
                }
            }
            if (comma && !zero2) value = group(value, Infinity)
            var length2 = valuePrefix.length + value.length + valueSuffix.length,
                padding = length2 < width ? new Array(width - length2 + 1).join(fill) : ''
            if (comma && zero2)
                (value = group(
                    padding + value,
                    padding.length ? width - valueSuffix.length : Infinity
                )),
                    (padding = '')
            switch (align) {
                case '<':
                    value = valuePrefix + value + valueSuffix + padding
                    break
                case '=':
                    value = valuePrefix + padding + value + valueSuffix
                    break
                case '^':
                    value =
                        padding.slice(0, (length2 = padding.length >> 1)) +
                        valuePrefix +
                        value +
                        valueSuffix +
                        padding.slice(length2)
                    break
                default:
                    value = padding + valuePrefix + value + valueSuffix
                    break
            }
            return numerals(value)
        }
        format2.toString = function () {
            return specifier + ''
        }
        return format2
    }
    function formatPrefix2(specifier, value) {
        var f = newFormat(
                ((specifier = formatSpecifier(specifier)), (specifier.type = 'f'), specifier)
            ),
            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
            k2 = Math.pow(10, -e),
            prefix2 = prefixes[8 + e / 3]
        return function (value2) {
            return f(k2 * value2) + prefix2
        }
    }
    return {
        format: newFormat,
        formatPrefix: formatPrefix2
    }
}
var locale$1
var format
var formatPrefix
defaultLocale$1({
    thousands: ',',
    grouping: [3],
    currency: ['$', '']
})
function defaultLocale$1(definition) {
    locale$1 = formatLocale$1(definition)
    format = locale$1.format
    formatPrefix = locale$1.formatPrefix
    return locale$1
}
function precisionFixed(step) {
    return Math.max(0, -exponent(Math.abs(step)))
}
function precisionPrefix(step, value) {
    return Math.max(
        0,
        Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step))
    )
}
function precisionRound(step, max2) {
    ;(step = Math.abs(step)), (max2 = Math.abs(max2) - step)
    return Math.max(0, exponent(max2) - exponent(step)) + 1
}
function tickFormat(start, stop, count2, specifier) {
    var step = tickStep(start, stop, count2),
        precision
    specifier = formatSpecifier(specifier == null ? ',f' : specifier)
    switch (specifier.type) {
        case 's': {
            var value = Math.max(Math.abs(start), Math.abs(stop))
            if (specifier.precision == null && !isNaN((precision = precisionPrefix(step, value))))
                specifier.precision = precision
            return formatPrefix(specifier, value)
        }
        case '':
        case 'e':
        case 'g':
        case 'p':
        case 'r': {
            if (
                specifier.precision == null &&
                !isNaN(
                    (precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))
                )
            )
                specifier.precision = precision - (specifier.type === 'e')
            break
        }
        case 'f':
        case '%': {
            if (specifier.precision == null && !isNaN((precision = precisionFixed(step))))
                specifier.precision = precision - (specifier.type === '%') * 2
            break
        }
    }
    return format(specifier)
}
function linearish(scale) {
    var domain = scale.domain
    scale.ticks = function (count2) {
        var d = domain()
        return ticks(d[0], d[d.length - 1], count2 == null ? 10 : count2)
    }
    scale.tickFormat = function (count2, specifier) {
        var d = domain()
        return tickFormat(d[0], d[d.length - 1], count2 == null ? 10 : count2, specifier)
    }
    scale.nice = function (count2) {
        if (count2 == null) count2 = 10
        var d = domain()
        var i0 = 0
        var i1 = d.length - 1
        var start = d[i0]
        var stop = d[i1]
        var prestep
        var step
        var maxIter = 10
        if (stop < start) {
            ;(step = start), (start = stop), (stop = step)
            ;(step = i0), (i0 = i1), (i1 = step)
        }
        while (maxIter-- > 0) {
            step = tickIncrement(start, stop, count2)
            if (step === prestep) {
                d[i0] = start
                d[i1] = stop
                return domain(d)
            } else if (step > 0) {
                start = Math.floor(start / step) * step
                stop = Math.ceil(stop / step) * step
            } else if (step < 0) {
                start = Math.ceil(start * step) / step
                stop = Math.floor(stop * step) / step
            } else {
                break
            }
            prestep = step
        }
        return scale
    }
    return scale
}
function linear() {
    var scale = continuous()
    scale.copy = function () {
        return copy$2(scale, linear())
    }
    initRange.apply(scale, arguments)
    return linearish(scale)
}
function identity$2(domain) {
    var unknown
    function scale(x2) {
        return x2 == null || isNaN((x2 = +x2)) ? unknown : x2
    }
    scale.invert = scale
    scale.domain = scale.range = function (_) {
        return arguments.length ? ((domain = Array.from(_, number$1)), scale) : domain.slice()
    }
    scale.unknown = function (_) {
        return arguments.length ? ((unknown = _), scale) : unknown
    }
    scale.copy = function () {
        return identity$2(domain).unknown(unknown)
    }
    domain = arguments.length ? Array.from(domain, number$1) : [0, 1]
    return linearish(scale)
}
function nice(domain, interval) {
    domain = domain.slice()
    var i0 = 0,
        i1 = domain.length - 1,
        x0 = domain[i0],
        x1 = domain[i1],
        t
    if (x1 < x0) {
        ;(t = i0), (i0 = i1), (i1 = t)
        ;(t = x0), (x0 = x1), (x1 = t)
    }
    domain[i0] = interval.floor(x0)
    domain[i1] = interval.ceil(x1)
    return domain
}
function transformLog(x2) {
    return Math.log(x2)
}
function transformExp(x2) {
    return Math.exp(x2)
}
function transformLogn(x2) {
    return -Math.log(-x2)
}
function transformExpn(x2) {
    return -Math.exp(-x2)
}
function pow10(x2) {
    return isFinite(x2) ? +('1e' + x2) : x2 < 0 ? 0 : x2
}
function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : (x2) => Math.pow(base, x2)
}
function logp(base) {
    return base === Math.E
        ? Math.log
        : (base === 10 && Math.log10) ||
              (base === 2 && Math.log2) ||
              ((base = Math.log(base)), (x2) => Math.log(x2) / base)
}
function reflect(f) {
    return (x2, k2) => -f(-x2, k2)
}
function loggish(transform) {
    const scale = transform(transformLog, transformExp)
    const domain = scale.domain
    let base = 10
    let logs
    let pows
    function rescale() {
        ;(logs = logp(base)), (pows = powp(base))
        if (domain()[0] < 0) {
            ;(logs = reflect(logs)), (pows = reflect(pows))
            transform(transformLogn, transformExpn)
        } else {
            transform(transformLog, transformExp)
        }
        return scale
    }
    scale.base = function (_) {
        return arguments.length ? ((base = +_), rescale()) : base
    }
    scale.domain = function (_) {
        return arguments.length ? (domain(_), rescale()) : domain()
    }
    scale.ticks = (count2) => {
        const d = domain()
        let u = d[0]
        let v = d[d.length - 1]
        const r2 = v < u
        if (r2) [u, v] = [v, u]
        let i = logs(u)
        let j = logs(v)
        let k2
        let t
        const n = count2 == null ? 10 : +count2
        let z = []
        if (!(base % 1) && j - i < n) {
            ;(i = Math.floor(i)), (j = Math.ceil(j))
            if (u > 0)
                for (; i <= j; ++i) {
                    for (k2 = 1; k2 < base; ++k2) {
                        t = i < 0 ? k2 / pows(-i) : k2 * pows(i)
                        if (t < u) continue
                        if (t > v) break
                        z.push(t)
                    }
                }
            else
                for (; i <= j; ++i) {
                    for (k2 = base - 1; k2 >= 1; --k2) {
                        t = i > 0 ? k2 / pows(-i) : k2 * pows(i)
                        if (t < u) continue
                        if (t > v) break
                        z.push(t)
                    }
                }
            if (z.length * 2 < n) z = ticks(u, v, n)
        } else {
            z = ticks(i, j, Math.min(j - i, n)).map(pows)
        }
        return r2 ? z.reverse() : z
    }
    scale.tickFormat = (count2, specifier) => {
        if (count2 == null) count2 = 10
        if (specifier == null) specifier = base === 10 ? 's' : ','
        if (typeof specifier !== 'function') {
            if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null)
                specifier.trim = true
            specifier = format(specifier)
        }
        if (count2 === Infinity) return specifier
        const k2 = Math.max(1, (base * count2) / scale.ticks().length)
        return (d) => {
            let i = d / pows(Math.round(logs(d)))
            if (i * base < base - 0.5) i *= base
            return i <= k2 ? specifier(d) : ''
        }
    }
    scale.nice = () => {
        return domain(
            nice(domain(), {
                floor: (x2) => pows(Math.floor(logs(x2))),
                ceil: (x2) => pows(Math.ceil(logs(x2)))
            })
        )
    }
    return scale
}
function log() {
    const scale = loggish(transformer$2()).domain([1, 10])
    scale.copy = () => copy$2(scale, log()).base(scale.base())
    initRange.apply(scale, arguments)
    return scale
}
function transformSymlog(c2) {
    return function (x2) {
        return Math.sign(x2) * Math.log1p(Math.abs(x2 / c2))
    }
}
function transformSymexp(c2) {
    return function (x2) {
        return Math.sign(x2) * Math.expm1(Math.abs(x2)) * c2
    }
}
function symlogish(transform) {
    var c2 = 1,
        scale = transform(transformSymlog(c2), transformSymexp(c2))
    scale.constant = function (_) {
        return arguments.length ? transform(transformSymlog((c2 = +_)), transformSymexp(c2)) : c2
    }
    return linearish(scale)
}
function symlog() {
    var scale = symlogish(transformer$2())
    scale.copy = function () {
        return copy$2(scale, symlog()).constant(scale.constant())
    }
    return initRange.apply(scale, arguments)
}
function transformPow(exponent2) {
    return function (x2) {
        return x2 < 0 ? -Math.pow(-x2, exponent2) : Math.pow(x2, exponent2)
    }
}
function transformSqrt(x2) {
    return x2 < 0 ? -Math.sqrt(-x2) : Math.sqrt(x2)
}
function transformSquare(x2) {
    return x2 < 0 ? -x2 * x2 : x2 * x2
}
function powish(transform) {
    var scale = transform(identity$4, identity$4),
        exponent2 = 1
    function rescale() {
        return exponent2 === 1
            ? transform(identity$4, identity$4)
            : exponent2 === 0.5
              ? transform(transformSqrt, transformSquare)
              : transform(transformPow(exponent2), transformPow(1 / exponent2))
    }
    scale.exponent = function (_) {
        return arguments.length ? ((exponent2 = +_), rescale()) : exponent2
    }
    return linearish(scale)
}
function pow() {
    var scale = powish(transformer$2())
    scale.copy = function () {
        return copy$2(scale, pow()).exponent(scale.exponent())
    }
    initRange.apply(scale, arguments)
    return scale
}
function sqrt() {
    return pow.apply(null, arguments).exponent(0.5)
}
function square(x2) {
    return Math.sign(x2) * x2 * x2
}
function unsquare(x2) {
    return Math.sign(x2) * Math.sqrt(Math.abs(x2))
}
function radial() {
    var squared = continuous(),
        range3 = [0, 1],
        round2 = false,
        unknown
    function scale(x2) {
        var y2 = unsquare(squared(x2))
        return isNaN(y2) ? unknown : round2 ? Math.round(y2) : y2
    }
    scale.invert = function (y2) {
        return squared.invert(square(y2))
    }
    scale.domain = function (_) {
        return arguments.length ? (squared.domain(_), scale) : squared.domain()
    }
    scale.range = function (_) {
        return arguments.length
            ? (squared.range((range3 = Array.from(_, number$1)).map(square)), scale)
            : range3.slice()
    }
    scale.rangeRound = function (_) {
        return scale.range(_).round(true)
    }
    scale.round = function (_) {
        return arguments.length ? ((round2 = !!_), scale) : round2
    }
    scale.clamp = function (_) {
        return arguments.length ? (squared.clamp(_), scale) : squared.clamp()
    }
    scale.unknown = function (_) {
        return arguments.length ? ((unknown = _), scale) : unknown
    }
    scale.copy = function () {
        return radial(squared.domain(), range3)
            .round(round2)
            .clamp(squared.clamp())
            .unknown(unknown)
    }
    initRange.apply(scale, arguments)
    return linearish(scale)
}
function quantile() {
    var domain = [],
        range3 = [],
        thresholds = [],
        unknown
    function rescale() {
        var i = 0,
            n = Math.max(1, range3.length)
        thresholds = new Array(n - 1)
        while (++i < n) thresholds[i - 1] = quantileSorted(domain, i / n)
        return scale
    }
    function scale(x2) {
        return x2 == null || isNaN((x2 = +x2)) ? unknown : range3[bisectRight(thresholds, x2)]
    }
    scale.invertExtent = function (y2) {
        var i = range3.indexOf(y2)
        return i < 0
            ? [NaN, NaN]
            : [
                  i > 0 ? thresholds[i - 1] : domain[0],
                  i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
              ]
    }
    scale.domain = function (_) {
        if (!arguments.length) return domain.slice()
        domain = []
        for (let d of _) if (d != null && !isNaN((d = +d))) domain.push(d)
        domain.sort(ascending)
        return rescale()
    }
    scale.range = function (_) {
        return arguments.length ? ((range3 = Array.from(_)), rescale()) : range3.slice()
    }
    scale.unknown = function (_) {
        return arguments.length ? ((unknown = _), scale) : unknown
    }
    scale.quantiles = function () {
        return thresholds.slice()
    }
    scale.copy = function () {
        return quantile().domain(domain).range(range3).unknown(unknown)
    }
    return initRange.apply(scale, arguments)
}
function quantize() {
    var x0 = 0,
        x1 = 1,
        n = 1,
        domain = [0.5],
        range3 = [0, 1],
        unknown
    function scale(x2) {
        return x2 != null && x2 <= x2 ? range3[bisectRight(domain, x2, 0, n)] : unknown
    }
    function rescale() {
        var i = -1
        domain = new Array(n)
        while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1)
        return scale
    }
    scale.domain = function (_) {
        return arguments.length ? (([x0, x1] = _), (x0 = +x0), (x1 = +x1), rescale()) : [x0, x1]
    }
    scale.range = function (_) {
        return arguments.length
            ? ((n = (range3 = Array.from(_)).length - 1), rescale())
            : range3.slice()
    }
    scale.invertExtent = function (y2) {
        var i = range3.indexOf(y2)
        return i < 0
            ? [NaN, NaN]
            : i < 1
              ? [x0, domain[0]]
              : i >= n
                ? [domain[n - 1], x1]
                : [domain[i - 1], domain[i]]
    }
    scale.unknown = function (_) {
        return arguments.length ? ((unknown = _), scale) : scale
    }
    scale.thresholds = function () {
        return domain.slice()
    }
    scale.copy = function () {
        return quantize().domain([x0, x1]).range(range3).unknown(unknown)
    }
    return initRange.apply(linearish(scale), arguments)
}
function threshold() {
    var domain = [0.5],
        range3 = [0, 1],
        unknown,
        n = 1
    function scale(x2) {
        return x2 != null && x2 <= x2 ? range3[bisectRight(domain, x2, 0, n)] : unknown
    }
    scale.domain = function (_) {
        return arguments.length
            ? ((domain = Array.from(_)), (n = Math.min(domain.length, range3.length - 1)), scale)
            : domain.slice()
    }
    scale.range = function (_) {
        return arguments.length
            ? ((range3 = Array.from(_)), (n = Math.min(domain.length, range3.length - 1)), scale)
            : range3.slice()
    }
    scale.invertExtent = function (y2) {
        var i = range3.indexOf(y2)
        return [domain[i - 1], domain[i]]
    }
    scale.unknown = function (_) {
        return arguments.length ? ((unknown = _), scale) : unknown
    }
    scale.copy = function () {
        return threshold().domain(domain).range(range3).unknown(unknown)
    }
    return initRange.apply(scale, arguments)
}
const t0 = /* @__PURE__ */ new Date(),
    t1 = /* @__PURE__ */ new Date()
function timeInterval(floori, offseti, count2, field) {
    function interval(date2) {
        return (
            floori(
                (date2 =
                    arguments.length === 0
                        ? /* @__PURE__ */ new Date()
                        : /* @__PURE__ */ new Date(+date2))
            ),
            date2
        )
    }
    interval.floor = (date2) => {
        return floori((date2 = /* @__PURE__ */ new Date(+date2))), date2
    }
    interval.ceil = (date2) => {
        return floori((date2 = new Date(date2 - 1))), offseti(date2, 1), floori(date2), date2
    }
    interval.round = (date2) => {
        const d0 = interval(date2),
            d1 = interval.ceil(date2)
        return date2 - d0 < d1 - date2 ? d0 : d1
    }
    interval.offset = (date2, step) => {
        return (
            offseti(
                (date2 = /* @__PURE__ */ new Date(+date2)),
                step == null ? 1 : Math.floor(step)
            ),
            date2
        )
    }
    interval.range = (start, stop, step) => {
        const range3 = []
        start = interval.ceil(start)
        step = step == null ? 1 : Math.floor(step)
        if (!(start < stop) || !(step > 0)) return range3
        let previous
        do
            range3.push((previous = /* @__PURE__ */ new Date(+start))),
                offseti(start, step),
                floori(start)
        while (previous < start && start < stop)
        return range3
    }
    interval.filter = (test2) => {
        return timeInterval(
            (date2) => {
                if (date2 >= date2) while ((floori(date2), !test2(date2))) date2.setTime(date2 - 1)
            },
            (date2, step) => {
                if (date2 >= date2) {
                    if (step < 0)
                        while (++step <= 0) {
                            while ((offseti(date2, -1), !test2(date2))) {}
                        }
                    else
                        while (--step >= 0) {
                            while ((offseti(date2, 1), !test2(date2))) {}
                        }
                }
            }
        )
    }
    if (count2) {
        interval.count = (start, end) => {
            t0.setTime(+start), t1.setTime(+end)
            floori(t0), floori(t1)
            return Math.floor(count2(t0, t1))
        }
        interval.every = (step) => {
            step = Math.floor(step)
            return !isFinite(step) || !(step > 0)
                ? null
                : !(step > 1)
                  ? interval
                  : interval.filter(
                        field
                            ? (d) => field(d) % step === 0
                            : (d) => interval.count(0, d) % step === 0
                    )
        }
    }
    return interval
}
const millisecond = timeInterval(
    () => {},
    (date2, step) => {
        date2.setTime(+date2 + step)
    },
    (start, end) => {
        return end - start
    }
)
millisecond.every = (k2) => {
    k2 = Math.floor(k2)
    if (!isFinite(k2) || !(k2 > 0)) return null
    if (!(k2 > 1)) return millisecond
    return timeInterval(
        (date2) => {
            date2.setTime(Math.floor(date2 / k2) * k2)
        },
        (date2, step) => {
            date2.setTime(+date2 + step * k2)
        },
        (start, end) => {
            return (end - start) / k2
        }
    )
}
millisecond.range
const durationSecond = 1e3
const durationMinute = durationSecond * 60
const durationHour = durationMinute * 60
const durationDay = durationHour * 24
const durationWeek = durationDay * 7
const durationMonth = durationDay * 30
const durationYear = durationDay * 365
const second = timeInterval(
    (date2) => {
        date2.setTime(date2 - date2.getMilliseconds())
    },
    (date2, step) => {
        date2.setTime(+date2 + step * durationSecond)
    },
    (start, end) => {
        return (end - start) / durationSecond
    },
    (date2) => {
        return date2.getUTCSeconds()
    }
)
second.range
const timeMinute = timeInterval(
    (date2) => {
        date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond)
    },
    (date2, step) => {
        date2.setTime(+date2 + step * durationMinute)
    },
    (start, end) => {
        return (end - start) / durationMinute
    },
    (date2) => {
        return date2.getMinutes()
    }
)
timeMinute.range
const utcMinute = timeInterval(
    (date2) => {
        date2.setUTCSeconds(0, 0)
    },
    (date2, step) => {
        date2.setTime(+date2 + step * durationMinute)
    },
    (start, end) => {
        return (end - start) / durationMinute
    },
    (date2) => {
        return date2.getUTCMinutes()
    }
)
utcMinute.range
const timeHour = timeInterval(
    (date2) => {
        date2.setTime(
            date2 -
                date2.getMilliseconds() -
                date2.getSeconds() * durationSecond -
                date2.getMinutes() * durationMinute
        )
    },
    (date2, step) => {
        date2.setTime(+date2 + step * durationHour)
    },
    (start, end) => {
        return (end - start) / durationHour
    },
    (date2) => {
        return date2.getHours()
    }
)
timeHour.range
const utcHour = timeInterval(
    (date2) => {
        date2.setUTCMinutes(0, 0, 0)
    },
    (date2, step) => {
        date2.setTime(+date2 + step * durationHour)
    },
    (start, end) => {
        return (end - start) / durationHour
    },
    (date2) => {
        return date2.getUTCHours()
    }
)
utcHour.range
const timeDay = timeInterval(
    (date2) => date2.setHours(0, 0, 0, 0),
    (date2, step) => date2.setDate(date2.getDate() + step),
    (start, end) =>
        (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) /
        durationDay,
    (date2) => date2.getDate() - 1
)
timeDay.range
const utcDay = timeInterval(
    (date2) => {
        date2.setUTCHours(0, 0, 0, 0)
    },
    (date2, step) => {
        date2.setUTCDate(date2.getUTCDate() + step)
    },
    (start, end) => {
        return (end - start) / durationDay
    },
    (date2) => {
        return date2.getUTCDate() - 1
    }
)
utcDay.range
const unixDay = timeInterval(
    (date2) => {
        date2.setUTCHours(0, 0, 0, 0)
    },
    (date2, step) => {
        date2.setUTCDate(date2.getUTCDate() + step)
    },
    (start, end) => {
        return (end - start) / durationDay
    },
    (date2) => {
        return Math.floor(date2 / durationDay)
    }
)
unixDay.range
function timeWeekday(i) {
    return timeInterval(
        (date2) => {
            date2.setDate(date2.getDate() - ((date2.getDay() + 7 - i) % 7))
            date2.setHours(0, 0, 0, 0)
        },
        (date2, step) => {
            date2.setDate(date2.getDate() + step * 7)
        },
        (start, end) => {
            return (
                (end -
                    start -
                    (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) /
                durationWeek
            )
        }
    )
}
const timeSunday = timeWeekday(0)
const timeMonday = timeWeekday(1)
const timeTuesday = timeWeekday(2)
const timeWednesday = timeWeekday(3)
const timeThursday = timeWeekday(4)
const timeFriday = timeWeekday(5)
const timeSaturday = timeWeekday(6)
timeSunday.range
timeMonday.range
timeTuesday.range
timeWednesday.range
timeThursday.range
timeFriday.range
timeSaturday.range
function utcWeekday(i) {
    return timeInterval(
        (date2) => {
            date2.setUTCDate(date2.getUTCDate() - ((date2.getUTCDay() + 7 - i) % 7))
            date2.setUTCHours(0, 0, 0, 0)
        },
        (date2, step) => {
            date2.setUTCDate(date2.getUTCDate() + step * 7)
        },
        (start, end) => {
            return (end - start) / durationWeek
        }
    )
}
const utcSunday = utcWeekday(0)
const utcMonday = utcWeekday(1)
const utcTuesday = utcWeekday(2)
const utcWednesday = utcWeekday(3)
const utcThursday = utcWeekday(4)
const utcFriday = utcWeekday(5)
const utcSaturday = utcWeekday(6)
utcSunday.range
utcMonday.range
utcTuesday.range
utcWednesday.range
utcThursday.range
utcFriday.range
utcSaturday.range
const timeMonth = timeInterval(
    (date2) => {
        date2.setDate(1)
        date2.setHours(0, 0, 0, 0)
    },
    (date2, step) => {
        date2.setMonth(date2.getMonth() + step)
    },
    (start, end) => {
        return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12
    },
    (date2) => {
        return date2.getMonth()
    }
)
timeMonth.range
const utcMonth = timeInterval(
    (date2) => {
        date2.setUTCDate(1)
        date2.setUTCHours(0, 0, 0, 0)
    },
    (date2, step) => {
        date2.setUTCMonth(date2.getUTCMonth() + step)
    },
    (start, end) => {
        return (
            end.getUTCMonth() -
            start.getUTCMonth() +
            (end.getUTCFullYear() - start.getUTCFullYear()) * 12
        )
    },
    (date2) => {
        return date2.getUTCMonth()
    }
)
utcMonth.range
const timeYear = timeInterval(
    (date2) => {
        date2.setMonth(0, 1)
        date2.setHours(0, 0, 0, 0)
    },
    (date2, step) => {
        date2.setFullYear(date2.getFullYear() + step)
    },
    (start, end) => {
        return end.getFullYear() - start.getFullYear()
    },
    (date2) => {
        return date2.getFullYear()
    }
)
timeYear.every = (k2) => {
    return !isFinite((k2 = Math.floor(k2))) || !(k2 > 0)
        ? null
        : timeInterval(
              (date2) => {
                  date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2)
                  date2.setMonth(0, 1)
                  date2.setHours(0, 0, 0, 0)
              },
              (date2, step) => {
                  date2.setFullYear(date2.getFullYear() + step * k2)
              }
          )
}
timeYear.range
const utcYear = timeInterval(
    (date2) => {
        date2.setUTCMonth(0, 1)
        date2.setUTCHours(0, 0, 0, 0)
    },
    (date2, step) => {
        date2.setUTCFullYear(date2.getUTCFullYear() + step)
    },
    (start, end) => {
        return end.getUTCFullYear() - start.getUTCFullYear()
    },
    (date2) => {
        return date2.getUTCFullYear()
    }
)
utcYear.every = (k2) => {
    return !isFinite((k2 = Math.floor(k2))) || !(k2 > 0)
        ? null
        : timeInterval(
              (date2) => {
                  date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2)
                  date2.setUTCMonth(0, 1)
                  date2.setUTCHours(0, 0, 0, 0)
              },
              (date2, step) => {
                  date2.setUTCFullYear(date2.getUTCFullYear() + step * k2)
              }
          )
}
utcYear.range
function ticker(year, month, week, day, hour, minute) {
    const tickIntervals = [
        [second, 1, durationSecond],
        [second, 5, 5 * durationSecond],
        [second, 15, 15 * durationSecond],
        [second, 30, 30 * durationSecond],
        [minute, 1, durationMinute],
        [minute, 5, 5 * durationMinute],
        [minute, 15, 15 * durationMinute],
        [minute, 30, 30 * durationMinute],
        [hour, 1, durationHour],
        [hour, 3, 3 * durationHour],
        [hour, 6, 6 * durationHour],
        [hour, 12, 12 * durationHour],
        [day, 1, durationDay],
        [day, 2, 2 * durationDay],
        [week, 1, durationWeek],
        [month, 1, durationMonth],
        [month, 3, 3 * durationMonth],
        [year, 1, durationYear]
    ]
    function ticks2(start, stop, count2) {
        const reverse3 = stop < start
        if (reverse3) [start, stop] = [stop, start]
        const interval =
            count2 && typeof count2.range === 'function'
                ? count2
                : tickInterval(start, stop, count2)
        const ticks3 = interval ? interval.range(start, +stop + 1) : []
        return reverse3 ? ticks3.reverse() : ticks3
    }
    function tickInterval(start, stop, count2) {
        const target = Math.abs(stop - start) / count2
        const i = bisector(([, , step2]) => step2).right(tickIntervals, target)
        if (i === tickIntervals.length)
            return year.every(tickStep(start / durationYear, stop / durationYear, count2))
        if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count2), 1))
        const [t, step] =
            tickIntervals[
                target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i
            ]
        return t.every(step)
    }
    return [ticks2, tickInterval]
}
const [utcTicks, utcTickInterval] = ticker(
    utcYear,
    utcMonth,
    utcSunday,
    unixDay,
    utcHour,
    utcMinute
)
const [timeTicks, timeTickInterval] = ticker(
    timeYear,
    timeMonth,
    timeSunday,
    timeDay,
    timeHour,
    timeMinute
)
function localDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L)
        date2.setFullYear(d.y)
        return date2
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L)
}
function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L))
        date2.setUTCFullYear(d.y)
        return date2
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L))
}
function newDate(y2, m, d) {
    return { y: y2, m, d, H: 0, M: 0, S: 0, L: 0 }
}
function formatLocale(locale2) {
    var locale_dateTime = locale2.dateTime,
        locale_date = locale2.date,
        locale_time = locale2.time,
        locale_periods = locale2.periods,
        locale_weekdays = locale2.days,
        locale_shortWeekdays = locale2.shortDays,
        locale_months = locale2.months,
        locale_shortMonths = locale2.shortMonths
    var periodRe = formatRe(locale_periods),
        periodLookup = formatLookup(locale_periods),
        weekdayRe = formatRe(locale_weekdays),
        weekdayLookup = formatLookup(locale_weekdays),
        shortWeekdayRe = formatRe(locale_shortWeekdays),
        shortWeekdayLookup = formatLookup(locale_shortWeekdays),
        monthRe = formatRe(locale_months),
        monthLookup = formatLookup(locale_months),
        shortMonthRe = formatRe(locale_shortMonths),
        shortMonthLookup = formatLookup(locale_shortMonths)
    var formats = {
        a: formatShortWeekday,
        A: formatWeekday,
        b: formatShortMonth,
        B: formatMonth,
        c: null,
        d: formatDayOfMonth,
        e: formatDayOfMonth,
        f: formatMicroseconds,
        g: formatYearISO,
        G: formatFullYearISO,
        H: formatHour24,
        I: formatHour12,
        j: formatDayOfYear,
        L: formatMilliseconds,
        m: formatMonthNumber,
        M: formatMinutes,
        p: formatPeriod,
        q: formatQuarter,
        Q: formatUnixTimestamp,
        s: formatUnixTimestampSeconds,
        S: formatSeconds,
        u: formatWeekdayNumberMonday,
        U: formatWeekNumberSunday,
        V: formatWeekNumberISO,
        w: formatWeekdayNumberSunday,
        W: formatWeekNumberMonday,
        x: null,
        X: null,
        y: formatYear,
        Y: formatFullYear,
        Z: formatZone,
        '%': formatLiteralPercent
    }
    var utcFormats = {
        a: formatUTCShortWeekday,
        A: formatUTCWeekday,
        b: formatUTCShortMonth,
        B: formatUTCMonth,
        c: null,
        d: formatUTCDayOfMonth,
        e: formatUTCDayOfMonth,
        f: formatUTCMicroseconds,
        g: formatUTCYearISO,
        G: formatUTCFullYearISO,
        H: formatUTCHour24,
        I: formatUTCHour12,
        j: formatUTCDayOfYear,
        L: formatUTCMilliseconds,
        m: formatUTCMonthNumber,
        M: formatUTCMinutes,
        p: formatUTCPeriod,
        q: formatUTCQuarter,
        Q: formatUnixTimestamp,
        s: formatUnixTimestampSeconds,
        S: formatUTCSeconds,
        u: formatUTCWeekdayNumberMonday,
        U: formatUTCWeekNumberSunday,
        V: formatUTCWeekNumberISO,
        w: formatUTCWeekdayNumberSunday,
        W: formatUTCWeekNumberMonday,
        x: null,
        X: null,
        y: formatUTCYear,
        Y: formatUTCFullYear,
        Z: formatUTCZone,
        '%': formatLiteralPercent
    }
    var parses = {
        a: parseShortWeekday,
        A: parseWeekday,
        b: parseShortMonth,
        B: parseMonth,
        c: parseLocaleDateTime,
        d: parseDayOfMonth,
        e: parseDayOfMonth,
        f: parseMicroseconds,
        g: parseYear,
        G: parseFullYear,
        H: parseHour24,
        I: parseHour24,
        j: parseDayOfYear,
        L: parseMilliseconds,
        m: parseMonthNumber,
        M: parseMinutes,
        p: parsePeriod,
        q: parseQuarter,
        Q: parseUnixTimestamp,
        s: parseUnixTimestampSeconds,
        S: parseSeconds,
        u: parseWeekdayNumberMonday,
        U: parseWeekNumberSunday,
        V: parseWeekNumberISO,
        w: parseWeekdayNumberSunday,
        W: parseWeekNumberMonday,
        x: parseLocaleDate,
        X: parseLocaleTime,
        y: parseYear,
        Y: parseFullYear,
        Z: parseZone,
        '%': parseLiteralPercent
    }
    formats.x = newFormat(locale_date, formats)
    formats.X = newFormat(locale_time, formats)
    formats.c = newFormat(locale_dateTime, formats)
    utcFormats.x = newFormat(locale_date, utcFormats)
    utcFormats.X = newFormat(locale_time, utcFormats)
    utcFormats.c = newFormat(locale_dateTime, utcFormats)
    function newFormat(specifier, formats2) {
        return function (date2) {
            var string2 = [],
                i = -1,
                j = 0,
                n = specifier.length,
                c2,
                pad2,
                format2
            if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2)
            while (++i < n) {
                if (specifier.charCodeAt(i) === 37) {
                    string2.push(specifier.slice(j, i))
                    if ((pad2 = pads[(c2 = specifier.charAt(++i))]) != null)
                        c2 = specifier.charAt(++i)
                    else pad2 = c2 === 'e' ? ' ' : '0'
                    if ((format2 = formats2[c2])) c2 = format2(date2, pad2)
                    string2.push(c2)
                    j = i + 1
                }
            }
            string2.push(specifier.slice(j, i))
            return string2.join('')
        }
    }
    function newParse(specifier, Z) {
        return function (string2) {
            var d = newDate(1900, void 0, 1),
                i = parseSpecifier(d, specifier, (string2 += ''), 0),
                week,
                day
            if (i != string2.length) return null
            if ('Q' in d) return new Date(d.Q)
            if ('s' in d) return new Date(d.s * 1e3 + ('L' in d ? d.L : 0))
            if (Z && !('Z' in d)) d.Z = 0
            if ('p' in d) d.H = (d.H % 12) + d.p * 12
            if (d.m === void 0) d.m = 'q' in d ? d.q : 0
            if ('V' in d) {
                if (d.V < 1 || d.V > 53) return null
                if (!('w' in d)) d.w = 1
                if ('Z' in d) {
                    ;(week = utcDate(newDate(d.y, 0, 1))), (day = week.getUTCDay())
                    week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week)
                    week = utcDay.offset(week, (d.V - 1) * 7)
                    d.y = week.getUTCFullYear()
                    d.m = week.getUTCMonth()
                    d.d = week.getUTCDate() + ((d.w + 6) % 7)
                } else {
                    ;(week = localDate(newDate(d.y, 0, 1))), (day = week.getDay())
                    week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week)
                    week = timeDay.offset(week, (d.V - 1) * 7)
                    d.y = week.getFullYear()
                    d.m = week.getMonth()
                    d.d = week.getDate() + ((d.w + 6) % 7)
                }
            } else if ('W' in d || 'U' in d) {
                if (!('w' in d)) d.w = 'u' in d ? d.u % 7 : 'W' in d ? 1 : 0
                day =
                    'Z' in d
                        ? utcDate(newDate(d.y, 0, 1)).getUTCDay()
                        : localDate(newDate(d.y, 0, 1)).getDay()
                d.m = 0
                d.d =
                    'W' in d
                        ? ((d.w + 6) % 7) + d.W * 7 - ((day + 5) % 7)
                        : d.w + d.U * 7 - ((day + 6) % 7)
            }
            if ('Z' in d) {
                d.H += (d.Z / 100) | 0
                d.M += d.Z % 100
                return utcDate(d)
            }
            return localDate(d)
        }
    }
    function parseSpecifier(d, specifier, string2, j) {
        var i = 0,
            n = specifier.length,
            m = string2.length,
            c2,
            parse2
        while (i < n) {
            if (j >= m) return -1
            c2 = specifier.charCodeAt(i++)
            if (c2 === 37) {
                c2 = specifier.charAt(i++)
                parse2 = parses[c2 in pads ? specifier.charAt(i++) : c2]
                if (!parse2 || (j = parse2(d, string2, j)) < 0) return -1
            } else if (c2 != string2.charCodeAt(j++)) {
                return -1
            }
        }
        return j
    }
    function parsePeriod(d, string2, i) {
        var n = periodRe.exec(string2.slice(i))
        return n ? ((d.p = periodLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }
    function parseShortWeekday(d, string2, i) {
        var n = shortWeekdayRe.exec(string2.slice(i))
        return n ? ((d.w = shortWeekdayLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }
    function parseWeekday(d, string2, i) {
        var n = weekdayRe.exec(string2.slice(i))
        return n ? ((d.w = weekdayLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }
    function parseShortMonth(d, string2, i) {
        var n = shortMonthRe.exec(string2.slice(i))
        return n ? ((d.m = shortMonthLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }
    function parseMonth(d, string2, i) {
        var n = monthRe.exec(string2.slice(i))
        return n ? ((d.m = monthLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }
    function parseLocaleDateTime(d, string2, i) {
        return parseSpecifier(d, locale_dateTime, string2, i)
    }
    function parseLocaleDate(d, string2, i) {
        return parseSpecifier(d, locale_date, string2, i)
    }
    function parseLocaleTime(d, string2, i) {
        return parseSpecifier(d, locale_time, string2, i)
    }
    function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()]
    }
    function formatWeekday(d) {
        return locale_weekdays[d.getDay()]
    }
    function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()]
    }
    function formatMonth(d) {
        return locale_months[d.getMonth()]
    }
    function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)]
    }
    function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3)
    }
    function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()]
    }
    function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()]
    }
    function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()]
    }
    function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()]
    }
    function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)]
    }
    function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3)
    }
    return {
        format: function (specifier) {
            var f = newFormat((specifier += ''), formats)
            f.toString = function () {
                return specifier
            }
            return f
        },
        parse: function (specifier) {
            var p = newParse((specifier += ''), false)
            p.toString = function () {
                return specifier
            }
            return p
        },
        utcFormat: function (specifier) {
            var f = newFormat((specifier += ''), utcFormats)
            f.toString = function () {
                return specifier
            }
            return f
        },
        utcParse: function (specifier) {
            var p = newParse((specifier += ''), true)
            p.toString = function () {
                return specifier
            }
            return p
        }
    }
}
var pads = { '-': '', _: ' ', 0: '0' },
    numberRe = /^\s*\d+/,
    percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g
function pad(value, fill, width) {
    var sign2 = value < 0 ? '-' : '',
        string2 = (sign2 ? -value : value) + '',
        length2 = string2.length
    return sign2 + (length2 < width ? new Array(width - length2 + 1).join(fill) + string2 : string2)
}
function requote(s2) {
    return s2.replace(requoteRe, '\\$&')
}
function formatRe(names) {
    return new RegExp('^(?:' + names.map(requote).join('|') + ')', 'i')
}
function formatLookup(names) {
    return new Map(names.map((name, i) => [name.toLowerCase(), i]))
}
function parseWeekdayNumberSunday(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 1))
    return n ? ((d.w = +n[0]), i + n[0].length) : -1
}
function parseWeekdayNumberMonday(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 1))
    return n ? ((d.u = +n[0]), i + n[0].length) : -1
}
function parseWeekNumberSunday(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2))
    return n ? ((d.U = +n[0]), i + n[0].length) : -1
}
function parseWeekNumberISO(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2))
    return n ? ((d.V = +n[0]), i + n[0].length) : -1
}
function parseWeekNumberMonday(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2))
    return n ? ((d.W = +n[0]), i + n[0].length) : -1
}
function parseFullYear(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 4))
    return n ? ((d.y = +n[0]), i + n[0].length) : -1
}
function parseYear(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2))
    return n ? ((d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3)), i + n[0].length) : -1
}
function parseZone(d, string2, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i, i + 6))
    return n ? ((d.Z = n[1] ? 0 : -(n[2] + (n[3] || '00'))), i + n[0].length) : -1
}
function parseQuarter(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 1))
    return n ? ((d.q = n[0] * 3 - 3), i + n[0].length) : -1
}
function parseMonthNumber(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2))
    return n ? ((d.m = n[0] - 1), i + n[0].length) : -1
}
function parseDayOfMonth(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2))
    return n ? ((d.d = +n[0]), i + n[0].length) : -1
}
function parseDayOfYear(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 3))
    return n ? ((d.m = 0), (d.d = +n[0]), i + n[0].length) : -1
}
function parseHour24(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2))
    return n ? ((d.H = +n[0]), i + n[0].length) : -1
}
function parseMinutes(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2))
    return n ? ((d.M = +n[0]), i + n[0].length) : -1
}
function parseSeconds(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 2))
    return n ? ((d.S = +n[0]), i + n[0].length) : -1
}
function parseMilliseconds(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 3))
    return n ? ((d.L = +n[0]), i + n[0].length) : -1
}
function parseMicroseconds(d, string2, i) {
    var n = numberRe.exec(string2.slice(i, i + 6))
    return n ? ((d.L = Math.floor(n[0] / 1e3)), i + n[0].length) : -1
}
function parseLiteralPercent(d, string2, i) {
    var n = percentRe.exec(string2.slice(i, i + 1))
    return n ? i + n[0].length : -1
}
function parseUnixTimestamp(d, string2, i) {
    var n = numberRe.exec(string2.slice(i))
    return n ? ((d.Q = +n[0]), i + n[0].length) : -1
}
function parseUnixTimestampSeconds(d, string2, i) {
    var n = numberRe.exec(string2.slice(i))
    return n ? ((d.s = +n[0]), i + n[0].length) : -1
}
function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2)
}
function formatHour24(d, p) {
    return pad(d.getHours(), p, 2)
}
function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2)
}
function formatDayOfYear(d, p) {
    return pad(1 + timeDay.count(timeYear(d), d), p, 3)
}
function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3)
}
function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + '000'
}
function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2)
}
function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2)
}
function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2)
}
function formatWeekdayNumberMonday(d) {
    var day = d.getDay()
    return day === 0 ? 7 : day
}
function formatWeekNumberSunday(d, p) {
    return pad(timeSunday.count(timeYear(d) - 1, d), p, 2)
}
function dISO(d) {
    var day = d.getDay()
    return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d)
}
function formatWeekNumberISO(d, p) {
    d = dISO(d)
    return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2)
}
function formatWeekdayNumberSunday(d) {
    return d.getDay()
}
function formatWeekNumberMonday(d, p) {
    return pad(timeMonday.count(timeYear(d) - 1, d), p, 2)
}
function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2)
}
function formatYearISO(d, p) {
    d = dISO(d)
    return pad(d.getFullYear() % 100, p, 2)
}
function formatFullYear(d, p) {
    return pad(d.getFullYear() % 1e4, p, 4)
}
function formatFullYearISO(d, p) {
    var day = d.getDay()
    d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d)
    return pad(d.getFullYear() % 1e4, p, 4)
}
function formatZone(d) {
    var z = d.getTimezoneOffset()
    return (z > 0 ? '-' : ((z *= -1), '+')) + pad((z / 60) | 0, '0', 2) + pad(z % 60, '0', 2)
}
function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2)
}
function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2)
}
function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2)
}
function formatUTCDayOfYear(d, p) {
    return pad(1 + utcDay.count(utcYear(d), d), p, 3)
}
function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3)
}
function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + '000'
}
function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2)
}
function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2)
}
function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2)
}
function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay()
    return dow === 0 ? 7 : dow
}
function formatUTCWeekNumberSunday(d, p) {
    return pad(utcSunday.count(utcYear(d) - 1, d), p, 2)
}
function UTCdISO(d) {
    var day = d.getUTCDay()
    return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d)
}
function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d)
    return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2)
}
function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay()
}
function formatUTCWeekNumberMonday(d, p) {
    return pad(utcMonday.count(utcYear(d) - 1, d), p, 2)
}
function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2)
}
function formatUTCYearISO(d, p) {
    d = UTCdISO(d)
    return pad(d.getUTCFullYear() % 100, p, 2)
}
function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 1e4, p, 4)
}
function formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay()
    d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d)
    return pad(d.getUTCFullYear() % 1e4, p, 4)
}
function formatUTCZone() {
    return '+0000'
}
function formatLiteralPercent() {
    return '%'
}
function formatUnixTimestamp(d) {
    return +d
}
function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1e3)
}
var locale
var timeFormat
var utcFormat
defaultLocale({
    dateTime: '%x, %X',
    date: '%-m/%-d/%Y',
    time: '%-I:%M:%S %p',
    periods: ['AM', 'PM'],
    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    months: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
    ],
    shortMonths: [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
    ]
})
function defaultLocale(definition) {
    locale = formatLocale(definition)
    timeFormat = locale.format
    locale.parse
    utcFormat = locale.utcFormat
    locale.utcParse
    return locale
}
function date(t) {
    return new Date(t)
}
function number(t) {
    return t instanceof Date ? +t : +(/* @__PURE__ */ new Date(+t))
}
function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2) {
    var scale = continuous(),
        invert = scale.invert,
        domain = scale.domain
    var formatMillisecond = format2('.%L'),
        formatSecond = format2(':%S'),
        formatMinute = format2('%I:%M'),
        formatHour = format2('%I %p'),
        formatDay = format2('%a %d'),
        formatWeek = format2('%b %d'),
        formatMonth = format2('%B'),
        formatYear2 = format2('%Y')
    function tickFormat2(date2) {
        return (
            second2(date2) < date2
                ? formatMillisecond
                : minute(date2) < date2
                  ? formatSecond
                  : hour(date2) < date2
                    ? formatMinute
                    : day(date2) < date2
                      ? formatHour
                      : month(date2) < date2
                        ? week(date2) < date2
                            ? formatDay
                            : formatWeek
                        : year(date2) < date2
                          ? formatMonth
                          : formatYear2
        )(date2)
    }
    scale.invert = function (y2) {
        return new Date(invert(y2))
    }
    scale.domain = function (_) {
        return arguments.length ? domain(Array.from(_, number)) : domain().map(date)
    }
    scale.ticks = function (interval) {
        var d = domain()
        return ticks2(d[0], d[d.length - 1], interval == null ? 10 : interval)
    }
    scale.tickFormat = function (count2, specifier) {
        return specifier == null ? tickFormat2 : format2(specifier)
    }
    scale.nice = function (interval) {
        var d = domain()
        if (!interval || typeof interval.range !== 'function')
            interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval)
        return interval ? domain(nice(d, interval)) : scale
    }
    scale.copy = function () {
        return copy$2(
            scale,
            calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2)
        )
    }
    return scale
}
function time() {
    return initRange.apply(
        calendar(
            timeTicks,
            timeTickInterval,
            timeYear,
            timeMonth,
            timeSunday,
            timeDay,
            timeHour,
            timeMinute,
            second,
            timeFormat
        ).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]),
        arguments
    )
}
function utcTime() {
    return initRange.apply(
        calendar(
            utcTicks,
            utcTickInterval,
            utcYear,
            utcMonth,
            utcSunday,
            utcDay,
            utcHour,
            utcMinute,
            second,
            utcFormat
        ).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]),
        arguments
    )
}
function transformer$1() {
    var x0 = 0,
        x1 = 1,
        t02,
        t12,
        k10,
        transform,
        interpolator = identity$4,
        clamp = false,
        unknown
    function scale(x2) {
        return x2 == null || isNaN((x2 = +x2))
            ? unknown
            : interpolator(
                  k10 === 0
                      ? 0.5
                      : ((x2 = (transform(x2) - t02) * k10),
                        clamp ? Math.max(0, Math.min(1, x2)) : x2)
              )
    }
    scale.domain = function (_) {
        return arguments.length
            ? (([x0, x1] = _),
              (t02 = transform((x0 = +x0))),
              (t12 = transform((x1 = +x1))),
              (k10 = t02 === t12 ? 0 : 1 / (t12 - t02)),
              scale)
            : [x0, x1]
    }
    scale.clamp = function (_) {
        return arguments.length ? ((clamp = !!_), scale) : clamp
    }
    scale.interpolator = function (_) {
        return arguments.length ? ((interpolator = _), scale) : interpolator
    }
    function range3(interpolate2) {
        return function (_) {
            var r0, r1
            return arguments.length
                ? (([r0, r1] = _), (interpolator = interpolate2(r0, r1)), scale)
                : [interpolator(0), interpolator(1)]
        }
    }
    scale.range = range3(interpolate)
    scale.rangeRound = range3(interpolateRound)
    scale.unknown = function (_) {
        return arguments.length ? ((unknown = _), scale) : unknown
    }
    return function (t) {
        ;(transform = t), (t02 = t(x0)), (t12 = t(x1)), (k10 = t02 === t12 ? 0 : 1 / (t12 - t02))
        return scale
    }
}
function copy$1(source, target) {
    return target
        .domain(source.domain())
        .interpolator(source.interpolator())
        .clamp(source.clamp())
        .unknown(source.unknown())
}
function sequential() {
    var scale = linearish(transformer$1()(identity$4))
    scale.copy = function () {
        return copy$1(scale, sequential())
    }
    return initInterpolator.apply(scale, arguments)
}
function sequentialLog() {
    var scale = loggish(transformer$1()).domain([1, 10])
    scale.copy = function () {
        return copy$1(scale, sequentialLog()).base(scale.base())
    }
    return initInterpolator.apply(scale, arguments)
}
function sequentialSymlog() {
    var scale = symlogish(transformer$1())
    scale.copy = function () {
        return copy$1(scale, sequentialSymlog()).constant(scale.constant())
    }
    return initInterpolator.apply(scale, arguments)
}
function sequentialPow() {
    var scale = powish(transformer$1())
    scale.copy = function () {
        return copy$1(scale, sequentialPow()).exponent(scale.exponent())
    }
    return initInterpolator.apply(scale, arguments)
}
function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5)
}
function sequentialQuantile() {
    var domain = [],
        interpolator = identity$4
    function scale(x2) {
        if (x2 != null && !isNaN((x2 = +x2)))
            return interpolator((bisectRight(domain, x2, 1) - 1) / (domain.length - 1))
    }
    scale.domain = function (_) {
        if (!arguments.length) return domain.slice()
        domain = []
        for (let d of _) if (d != null && !isNaN((d = +d))) domain.push(d)
        domain.sort(ascending)
        return scale
    }
    scale.interpolator = function (_) {
        return arguments.length ? ((interpolator = _), scale) : interpolator
    }
    scale.range = function () {
        return domain.map((d, i) => interpolator(i / (domain.length - 1)))
    }
    scale.quantiles = function (n) {
        return Array.from({ length: n + 1 }, (_, i) => quantile$1(domain, i / n))
    }
    scale.copy = function () {
        return sequentialQuantile(interpolator).domain(domain)
    }
    return initInterpolator.apply(scale, arguments)
}
function transformer() {
    var x0 = 0,
        x1 = 0.5,
        x2 = 1,
        s2 = 1,
        t02,
        t12,
        t2,
        k10,
        k21,
        interpolator = identity$4,
        transform,
        clamp = false,
        unknown
    function scale(x3) {
        return isNaN((x3 = +x3))
            ? unknown
            : ((x3 = 0.5 + ((x3 = +transform(x3)) - t12) * (s2 * x3 < s2 * t12 ? k10 : k21)),
              interpolator(clamp ? Math.max(0, Math.min(1, x3)) : x3))
    }
    scale.domain = function (_) {
        return arguments.length
            ? (([x0, x1, x2] = _),
              (t02 = transform((x0 = +x0))),
              (t12 = transform((x1 = +x1))),
              (t2 = transform((x2 = +x2))),
              (k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02)),
              (k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12)),
              (s2 = t12 < t02 ? -1 : 1),
              scale)
            : [x0, x1, x2]
    }
    scale.clamp = function (_) {
        return arguments.length ? ((clamp = !!_), scale) : clamp
    }
    scale.interpolator = function (_) {
        return arguments.length ? ((interpolator = _), scale) : interpolator
    }
    function range3(interpolate2) {
        return function (_) {
            var r0, r1, r2
            return arguments.length
                ? (([r0, r1, r2] = _),
                  (interpolator = piecewise(interpolate2, [r0, r1, r2])),
                  scale)
                : [interpolator(0), interpolator(0.5), interpolator(1)]
        }
    }
    scale.range = range3(interpolate)
    scale.rangeRound = range3(interpolateRound)
    scale.unknown = function (_) {
        return arguments.length ? ((unknown = _), scale) : unknown
    }
    return function (t) {
        ;(transform = t),
            (t02 = t(x0)),
            (t12 = t(x1)),
            (t2 = t(x2)),
            (k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02)),
            (k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12)),
            (s2 = t12 < t02 ? -1 : 1)
        return scale
    }
}
function diverging() {
    var scale = linearish(transformer()(identity$4))
    scale.copy = function () {
        return copy$1(scale, diverging())
    }
    return initInterpolator.apply(scale, arguments)
}
function divergingLog() {
    var scale = loggish(transformer()).domain([0.1, 1, 10])
    scale.copy = function () {
        return copy$1(scale, divergingLog()).base(scale.base())
    }
    return initInterpolator.apply(scale, arguments)
}
function divergingSymlog() {
    var scale = symlogish(transformer())
    scale.copy = function () {
        return copy$1(scale, divergingSymlog()).constant(scale.constant())
    }
    return initInterpolator.apply(scale, arguments)
}
function divergingPow() {
    var scale = powish(transformer())
    scale.copy = function () {
        return copy$1(scale, divergingPow()).exponent(scale.exponent())
    }
    return initInterpolator.apply(scale, arguments)
}
function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5)
}
const d3Scales = /* @__PURE__ */ Object.freeze(
    /* @__PURE__ */ Object.defineProperty(
        {
            __proto__: null,
            scaleBand: band,
            scaleDiverging: diverging,
            scaleDivergingLog: divergingLog,
            scaleDivergingPow: divergingPow,
            scaleDivergingSqrt: divergingSqrt,
            scaleDivergingSymlog: divergingSymlog,
            scaleIdentity: identity$2,
            scaleImplicit: implicit,
            scaleLinear: linear,
            scaleLog: log,
            scaleOrdinal: ordinal,
            scalePoint: point,
            scalePow: pow,
            scaleQuantile: quantile,
            scaleQuantize: quantize,
            scaleRadial: radial,
            scaleSequential: sequential,
            scaleSequentialLog: sequentialLog,
            scaleSequentialPow: sequentialPow,
            scaleSequentialQuantile: sequentialQuantile,
            scaleSequentialSqrt: sequentialSqrt,
            scaleSequentialSymlog: sequentialSymlog,
            scaleSqrt: sqrt,
            scaleSymlog: symlog,
            scaleThreshold: threshold,
            scaleTime: time,
            scaleUtc: utcTime,
            tickFormat
        },
        Symbol.toStringTag,
        { value: 'Module' }
    )
)
var _baseExtremum
var hasRequired_baseExtremum
function require_baseExtremum() {
    if (hasRequired_baseExtremum) return _baseExtremum
    hasRequired_baseExtremum = 1
    var isSymbol = requireIsSymbol()
    function baseExtremum(array2, iteratee, comparator) {
        var index2 = -1,
            length2 = array2.length
        while (++index2 < length2) {
            var value = array2[index2],
                current = iteratee(value)
            if (
                current != null &&
                (computed === void 0
                    ? current === current && !isSymbol(current)
                    : comparator(current, computed))
            ) {
                var computed = current,
                    result = value
            }
        }
        return result
    }
    _baseExtremum = baseExtremum
    return _baseExtremum
}
var _baseGt
var hasRequired_baseGt
function require_baseGt() {
    if (hasRequired_baseGt) return _baseGt
    hasRequired_baseGt = 1
    function baseGt(value, other) {
        return value > other
    }
    _baseGt = baseGt
    return _baseGt
}
var max_1
var hasRequiredMax
function requireMax() {
    if (hasRequiredMax) return max_1
    hasRequiredMax = 1
    var baseExtremum = require_baseExtremum(),
        baseGt = require_baseGt(),
        identity3 = requireIdentity()
    function max2(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity3, baseGt) : void 0
    }
    max_1 = max2
    return max_1
}
var maxExports = requireMax()
const max$1 = /* @__PURE__ */ getDefaultExportFromCjs(maxExports)
var _baseLt
var hasRequired_baseLt
function require_baseLt() {
    if (hasRequired_baseLt) return _baseLt
    hasRequired_baseLt = 1
    function baseLt(value, other) {
        return value < other
    }
    _baseLt = baseLt
    return _baseLt
}
var min_1
var hasRequiredMin
function requireMin() {
    if (hasRequiredMin) return min_1
    hasRequiredMin = 1
    var baseExtremum = require_baseExtremum(),
        baseLt = require_baseLt(),
        identity3 = requireIdentity()
    function min2(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity3, baseLt) : void 0
    }
    min_1 = min2
    return min_1
}
var minExports = requireMin()
const min$1 = /* @__PURE__ */ getDefaultExportFromCjs(minExports)
var map_1
var hasRequiredMap
function requireMap() {
    if (hasRequiredMap) return map_1
    hasRequiredMap = 1
    var arrayMap = require_arrayMap(),
        baseIteratee = require_baseIteratee(),
        baseMap = require_baseMap(),
        isArray2 = requireIsArray()
    function map2(collection, iteratee) {
        var func = isArray2(collection) ? arrayMap : baseMap
        return func(collection, baseIteratee(iteratee, 3))
    }
    map_1 = map2
    return map_1
}
var flatMap_1
var hasRequiredFlatMap
function requireFlatMap() {
    if (hasRequiredFlatMap) return flatMap_1
    hasRequiredFlatMap = 1
    var baseFlatten = require_baseFlatten(),
        map2 = requireMap()
    function flatMap2(collection, iteratee) {
        return baseFlatten(map2(collection, iteratee), 1)
    }
    flatMap_1 = flatMap2
    return flatMap_1
}
var flatMapExports = requireFlatMap()
const flatMap = /* @__PURE__ */ getDefaultExportFromCjs(flatMapExports)
var isEqual_1
var hasRequiredIsEqual
function requireIsEqual() {
    if (hasRequiredIsEqual) return isEqual_1
    hasRequiredIsEqual = 1
    var baseIsEqual = require_baseIsEqual()
    function isEqual2(value, other) {
        return baseIsEqual(value, other)
    }
    isEqual_1 = isEqual2
    return isEqual_1
}
var isEqualExports = requireIsEqual()
const isEqual$1 = /* @__PURE__ */ getDefaultExportFromCjs(isEqualExports)
var MAX_DIGITS = 1e9,
    defaults = {
        // These values must be integers within the stated ranges (inclusive).
        // Most of these values can be changed during run-time using `Decimal.config`.
        // The maximum number of significant digits of the result of a calculation or base conversion.
        // E.g. `Decimal.config({ precision: 20 });`
        precision: 20,
        // 1 to MAX_DIGITS
        // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,
        // `toFixed`, `toPrecision` and `toSignificantDigits`.
        //
        // ROUND_UP         0 Away from zero.
        // ROUND_DOWN       1 Towards zero.
        // ROUND_CEIL       2 Towards +Infinity.
        // ROUND_FLOOR      3 Towards -Infinity.
        // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        //
        // E.g.
        // `Decimal.rounding = 4;`
        // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
        rounding: 4,
        // 0 to 8
        // The exponent value at and beneath which `toString` returns exponential notation.
        // JavaScript numbers: -7
        toExpNeg: -7,
        // 0 to -MAX_E
        // The exponent value at and above which `toString` returns exponential notation.
        // JavaScript numbers: 21
        toExpPos: 21,
        // 0 to MAX_E
        // The natural logarithm of 10.
        // 115 digits
        LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'
    },
    Decimal,
    external = true,
    decimalError = '[DecimalError] ',
    invalidArgument = decimalError + 'Invalid argument: ',
    exponentOutOfRange = decimalError + 'Exponent out of range: ',
    mathfloor = Math.floor,
    mathpow = Math.pow,
    isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
    ONE,
    BASE = 1e7,
    LOG_BASE = 7,
    MAX_SAFE_INTEGER = 9007199254740991,
    MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),
    P = {}
P.absoluteValue = P.abs = function () {
    var x2 = new this.constructor(this)
    if (x2.s) x2.s = 1
    return x2
}
P.comparedTo = P.cmp = function (y2) {
    var i,
        j,
        xdL,
        ydL,
        x2 = this
    y2 = new x2.constructor(y2)
    if (x2.s !== y2.s) return x2.s || -y2.s
    if (x2.e !== y2.e) return (x2.e > y2.e) ^ (x2.s < 0) ? 1 : -1
    xdL = x2.d.length
    ydL = y2.d.length
    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
        if (x2.d[i] !== y2.d[i]) return (x2.d[i] > y2.d[i]) ^ (x2.s < 0) ? 1 : -1
    }
    return xdL === ydL ? 0 : (xdL > ydL) ^ (x2.s < 0) ? 1 : -1
}
P.decimalPlaces = P.dp = function () {
    var x2 = this,
        w2 = x2.d.length - 1,
        dp = (w2 - x2.e) * LOG_BASE
    w2 = x2.d[w2]
    if (w2) for (; w2 % 10 == 0; w2 /= 10) dp--
    return dp < 0 ? 0 : dp
}
P.dividedBy = P.div = function (y2) {
    return divide(this, new this.constructor(y2))
}
P.dividedToIntegerBy = P.idiv = function (y2) {
    var x2 = this,
        Ctor = x2.constructor
    return round$1(divide(x2, new Ctor(y2), 0, 1), Ctor.precision)
}
P.equals = P.eq = function (y2) {
    return !this.cmp(y2)
}
P.exponent = function () {
    return getBase10Exponent(this)
}
P.greaterThan = P.gt = function (y2) {
    return this.cmp(y2) > 0
}
P.greaterThanOrEqualTo = P.gte = function (y2) {
    return this.cmp(y2) >= 0
}
P.isInteger = P.isint = function () {
    return this.e > this.d.length - 2
}
P.isNegative = P.isneg = function () {
    return this.s < 0
}
P.isPositive = P.ispos = function () {
    return this.s > 0
}
P.isZero = function () {
    return this.s === 0
}
P.lessThan = P.lt = function (y2) {
    return this.cmp(y2) < 0
}
P.lessThanOrEqualTo = P.lte = function (y2) {
    return this.cmp(y2) < 1
}
P.logarithm = P.log = function (base) {
    var r2,
        x2 = this,
        Ctor = x2.constructor,
        pr = Ctor.precision,
        wpr = pr + 5
    if (base === void 0) {
        base = new Ctor(10)
    } else {
        base = new Ctor(base)
        if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN')
    }
    if (x2.s < 1) throw Error(decimalError + (x2.s ? 'NaN' : '-Infinity'))
    if (x2.eq(ONE)) return new Ctor(0)
    external = false
    r2 = divide(ln(x2, wpr), ln(base, wpr), wpr)
    external = true
    return round$1(r2, pr)
}
P.minus = P.sub = function (y2) {
    var x2 = this
    y2 = new x2.constructor(y2)
    return x2.s == y2.s ? subtract(x2, y2) : add(x2, ((y2.s = -y2.s), y2))
}
P.modulo = P.mod = function (y2) {
    var q,
        x2 = this,
        Ctor = x2.constructor,
        pr = Ctor.precision
    y2 = new Ctor(y2)
    if (!y2.s) throw Error(decimalError + 'NaN')
    if (!x2.s) return round$1(new Ctor(x2), pr)
    external = false
    q = divide(x2, y2, 0, 1).times(y2)
    external = true
    return x2.minus(q)
}
P.naturalExponential = P.exp = function () {
    return exp(this)
}
P.naturalLogarithm = P.ln = function () {
    return ln(this)
}
P.negated = P.neg = function () {
    var x2 = new this.constructor(this)
    x2.s = -x2.s || 0
    return x2
}
P.plus = P.add = function (y2) {
    var x2 = this
    y2 = new x2.constructor(y2)
    return x2.s == y2.s ? add(x2, y2) : subtract(x2, ((y2.s = -y2.s), y2))
}
P.precision = P.sd = function (z) {
    var e,
        sd,
        w2,
        x2 = this
    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z)
    e = getBase10Exponent(x2) + 1
    w2 = x2.d.length - 1
    sd = w2 * LOG_BASE + 1
    w2 = x2.d[w2]
    if (w2) {
        for (; w2 % 10 == 0; w2 /= 10) sd--
        for (w2 = x2.d[0]; w2 >= 10; w2 /= 10) sd++
    }
    return z && e > sd ? e : sd
}
P.squareRoot = P.sqrt = function () {
    var e,
        n,
        pr,
        r2,
        s2,
        t,
        wpr,
        x2 = this,
        Ctor = x2.constructor
    if (x2.s < 1) {
        if (!x2.s) return new Ctor(0)
        throw Error(decimalError + 'NaN')
    }
    e = getBase10Exponent(x2)
    external = false
    s2 = Math.sqrt(+x2)
    if (s2 == 0 || s2 == 1 / 0) {
        n = digitsToString(x2.d)
        if ((n.length + e) % 2 == 0) n += '0'
        s2 = Math.sqrt(n)
        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2)
        if (s2 == 1 / 0) {
            n = '5e' + e
        } else {
            n = s2.toExponential()
            n = n.slice(0, n.indexOf('e') + 1) + e
        }
        r2 = new Ctor(n)
    } else {
        r2 = new Ctor(s2.toString())
    }
    pr = Ctor.precision
    s2 = wpr = pr + 3
    for (;;) {
        t = r2
        r2 = t.plus(divide(x2, t, wpr + 2)).times(0.5)
        if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r2.d)).slice(0, wpr)) {
            n = n.slice(wpr - 3, wpr + 1)
            if (s2 == wpr && n == '4999') {
                round$1(t, pr + 1, 0)
                if (t.times(t).eq(x2)) {
                    r2 = t
                    break
                }
            } else if (n != '9999') {
                break
            }
            wpr += 4
        }
    }
    external = true
    return round$1(r2, pr)
}
P.times = P.mul = function (y2) {
    var carry,
        e,
        i,
        k2,
        r2,
        rL,
        t,
        xdL,
        ydL,
        x2 = this,
        Ctor = x2.constructor,
        xd = x2.d,
        yd = (y2 = new Ctor(y2)).d
    if (!x2.s || !y2.s) return new Ctor(0)
    y2.s *= x2.s
    e = x2.e + y2.e
    xdL = xd.length
    ydL = yd.length
    if (xdL < ydL) {
        r2 = xd
        xd = yd
        yd = r2
        rL = xdL
        xdL = ydL
        ydL = rL
    }
    r2 = []
    rL = xdL + ydL
    for (i = rL; i--; ) r2.push(0)
    for (i = ydL; --i >= 0; ) {
        carry = 0
        for (k2 = xdL + i; k2 > i; ) {
            t = r2[k2] + yd[i] * xd[k2 - i - 1] + carry
            r2[k2--] = t % BASE | 0
            carry = (t / BASE) | 0
        }
        r2[k2] = (r2[k2] + carry) % BASE | 0
    }
    for (; !r2[--rL]; ) r2.pop()
    if (carry) ++e
    else r2.shift()
    y2.d = r2
    y2.e = e
    return external ? round$1(y2, Ctor.precision) : y2
}
P.toDecimalPlaces = P.todp = function (dp, rm) {
    var x2 = this,
        Ctor = x2.constructor
    x2 = new Ctor(x2)
    if (dp === void 0) return x2
    checkInt32(dp, 0, MAX_DIGITS)
    if (rm === void 0) rm = Ctor.rounding
    else checkInt32(rm, 0, 8)
    return round$1(x2, dp + getBase10Exponent(x2) + 1, rm)
}
P.toExponential = function (dp, rm) {
    var str,
        x2 = this,
        Ctor = x2.constructor
    if (dp === void 0) {
        str = toString2(x2, true)
    } else {
        checkInt32(dp, 0, MAX_DIGITS)
        if (rm === void 0) rm = Ctor.rounding
        else checkInt32(rm, 0, 8)
        x2 = round$1(new Ctor(x2), dp + 1, rm)
        str = toString2(x2, true, dp + 1)
    }
    return str
}
P.toFixed = function (dp, rm) {
    var str,
        y2,
        x2 = this,
        Ctor = x2.constructor
    if (dp === void 0) return toString2(x2)
    checkInt32(dp, 0, MAX_DIGITS)
    if (rm === void 0) rm = Ctor.rounding
    else checkInt32(rm, 0, 8)
    y2 = round$1(new Ctor(x2), dp + getBase10Exponent(x2) + 1, rm)
    str = toString2(y2.abs(), false, dp + getBase10Exponent(y2) + 1)
    return x2.isneg() && !x2.isZero() ? '-' + str : str
}
P.toInteger = P.toint = function () {
    var x2 = this,
        Ctor = x2.constructor
    return round$1(new Ctor(x2), getBase10Exponent(x2) + 1, Ctor.rounding)
}
P.toNumber = function () {
    return +this
}
P.toPower = P.pow = function (y2) {
    var e,
        k2,
        pr,
        r2,
        sign2,
        yIsInt,
        x2 = this,
        Ctor = x2.constructor,
        guard = 12,
        yn = +(y2 = new Ctor(y2))
    if (!y2.s) return new Ctor(ONE)
    x2 = new Ctor(x2)
    if (!x2.s) {
        if (y2.s < 1) throw Error(decimalError + 'Infinity')
        return x2
    }
    if (x2.eq(ONE)) return x2
    pr = Ctor.precision
    if (y2.eq(ONE)) return round$1(x2, pr)
    e = y2.e
    k2 = y2.d.length - 1
    yIsInt = e >= k2
    sign2 = x2.s
    if (!yIsInt) {
        if (sign2 < 0) throw Error(decimalError + 'NaN')
    } else if ((k2 = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r2 = new Ctor(ONE)
        e = Math.ceil(pr / LOG_BASE + 4)
        external = false
        for (;;) {
            if (k2 % 2) {
                r2 = r2.times(x2)
                truncate(r2.d, e)
            }
            k2 = mathfloor(k2 / 2)
            if (k2 === 0) break
            x2 = x2.times(x2)
            truncate(x2.d, e)
        }
        external = true
        return y2.s < 0 ? new Ctor(ONE).div(r2) : round$1(r2, pr)
    }
    sign2 = sign2 < 0 && y2.d[Math.max(e, k2)] & 1 ? -1 : 1
    x2.s = 1
    external = false
    r2 = y2.times(ln(x2, pr + guard))
    external = true
    r2 = exp(r2)
    r2.s = sign2
    return r2
}
P.toPrecision = function (sd, rm) {
    var e,
        str,
        x2 = this,
        Ctor = x2.constructor
    if (sd === void 0) {
        e = getBase10Exponent(x2)
        str = toString2(x2, e <= Ctor.toExpNeg || e >= Ctor.toExpPos)
    } else {
        checkInt32(sd, 1, MAX_DIGITS)
        if (rm === void 0) rm = Ctor.rounding
        else checkInt32(rm, 0, 8)
        x2 = round$1(new Ctor(x2), sd, rm)
        e = getBase10Exponent(x2)
        str = toString2(x2, sd <= e || e <= Ctor.toExpNeg, sd)
    }
    return str
}
P.toSignificantDigits = P.tosd = function (sd, rm) {
    var x2 = this,
        Ctor = x2.constructor
    if (sd === void 0) {
        sd = Ctor.precision
        rm = Ctor.rounding
    } else {
        checkInt32(sd, 1, MAX_DIGITS)
        if (rm === void 0) rm = Ctor.rounding
        else checkInt32(rm, 0, 8)
    }
    return round$1(new Ctor(x2), sd, rm)
}
P.toString =
    P.valueOf =
    P.val =
    P.toJSON =
    P[Symbol.for('nodejs.util.inspect.custom')] =
        function () {
            var x2 = this,
                e = getBase10Exponent(x2),
                Ctor = x2.constructor
            return toString2(x2, e <= Ctor.toExpNeg || e >= Ctor.toExpPos)
        }
function add(x2, y2) {
    var carry,
        d,
        e,
        i,
        k2,
        len,
        xd,
        yd,
        Ctor = x2.constructor,
        pr = Ctor.precision
    if (!x2.s || !y2.s) {
        if (!y2.s) y2 = new Ctor(x2)
        return external ? round$1(y2, pr) : y2
    }
    xd = x2.d
    yd = y2.d
    k2 = x2.e
    e = y2.e
    xd = xd.slice()
    i = k2 - e
    if (i) {
        if (i < 0) {
            d = xd
            i = -i
            len = yd.length
        } else {
            d = yd
            e = k2
            len = xd.length
        }
        k2 = Math.ceil(pr / LOG_BASE)
        len = k2 > len ? k2 + 1 : len + 1
        if (i > len) {
            i = len
            d.length = 1
        }
        d.reverse()
        for (; i--; ) d.push(0)
        d.reverse()
    }
    len = xd.length
    i = yd.length
    if (len - i < 0) {
        i = len
        d = yd
        yd = xd
        xd = d
    }
    for (carry = 0; i; ) {
        carry = ((xd[--i] = xd[i] + yd[i] + carry) / BASE) | 0
        xd[i] %= BASE
    }
    if (carry) {
        xd.unshift(carry)
        ++e
    }
    for (len = xd.length; xd[--len] == 0; ) xd.pop()
    y2.d = xd
    y2.e = e
    return external ? round$1(y2, pr) : y2
}
function checkInt32(i, min2, max2) {
    if (i !== ~~i || i < min2 || i > max2) {
        throw Error(invalidArgument + i)
    }
}
function digitsToString(d) {
    var i,
        k2,
        ws,
        indexOfLastWord = d.length - 1,
        str = '',
        w2 = d[0]
    if (indexOfLastWord > 0) {
        str += w2
        for (i = 1; i < indexOfLastWord; i++) {
            ws = d[i] + ''
            k2 = LOG_BASE - ws.length
            if (k2) str += getZeroString(k2)
            str += ws
        }
        w2 = d[i]
        ws = w2 + ''
        k2 = LOG_BASE - ws.length
        if (k2) str += getZeroString(k2)
    } else if (w2 === 0) {
        return '0'
    }
    for (; w2 % 10 === 0; ) w2 /= 10
    return str + w2
}
var divide = /* @__PURE__ */ (function () {
    function multiplyInteger(x2, k2) {
        var temp,
            carry = 0,
            i = x2.length
        for (x2 = x2.slice(); i--; ) {
            temp = x2[i] * k2 + carry
            x2[i] = temp % BASE | 0
            carry = (temp / BASE) | 0
        }
        if (carry) x2.unshift(carry)
        return x2
    }
    function compare(a2, b, aL, bL) {
        var i, r2
        if (aL != bL) {
            r2 = aL > bL ? 1 : -1
        } else {
            for (i = r2 = 0; i < aL; i++) {
                if (a2[i] != b[i]) {
                    r2 = a2[i] > b[i] ? 1 : -1
                    break
                }
            }
        }
        return r2
    }
    function subtract2(a2, b, aL) {
        var i = 0
        for (; aL--; ) {
            a2[aL] -= i
            i = a2[aL] < b[aL] ? 1 : 0
            a2[aL] = i * BASE + a2[aL] - b[aL]
        }
        for (; !a2[0] && a2.length > 1; ) a2.shift()
    }
    return function (x2, y2, pr, dp) {
        var cmp,
            e,
            i,
            k2,
            prod,
            prodL,
            q,
            qd,
            rem,
            remL,
            rem0,
            sd,
            t,
            xi,
            xL,
            yd0,
            yL,
            yz,
            Ctor = x2.constructor,
            sign2 = x2.s == y2.s ? 1 : -1,
            xd = x2.d,
            yd = y2.d
        if (!x2.s) return new Ctor(x2)
        if (!y2.s) throw Error(decimalError + 'Division by zero')
        e = x2.e - y2.e
        yL = yd.length
        xL = xd.length
        q = new Ctor(sign2)
        qd = q.d = []
        for (i = 0; yd[i] == (xd[i] || 0); ) ++i
        if (yd[i] > (xd[i] || 0)) --e
        if (pr == null) {
            sd = pr = Ctor.precision
        } else if (dp) {
            sd = pr + (getBase10Exponent(x2) - getBase10Exponent(y2)) + 1
        } else {
            sd = pr
        }
        if (sd < 0) return new Ctor(0)
        sd = (sd / LOG_BASE + 2) | 0
        i = 0
        if (yL == 1) {
            k2 = 0
            yd = yd[0]
            sd++
            for (; (i < xL || k2) && sd--; i++) {
                t = k2 * BASE + (xd[i] || 0)
                qd[i] = (t / yd) | 0
                k2 = t % yd | 0
            }
        } else {
            k2 = (BASE / (yd[0] + 1)) | 0
            if (k2 > 1) {
                yd = multiplyInteger(yd, k2)
                xd = multiplyInteger(xd, k2)
                yL = yd.length
                xL = xd.length
            }
            xi = yL
            rem = xd.slice(0, yL)
            remL = rem.length
            for (; remL < yL; ) rem[remL++] = 0
            yz = yd.slice()
            yz.unshift(0)
            yd0 = yd[0]
            if (yd[1] >= BASE / 2) ++yd0
            do {
                k2 = 0
                cmp = compare(yd, rem, yL, remL)
                if (cmp < 0) {
                    rem0 = rem[0]
                    if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0)
                    k2 = (rem0 / yd0) | 0
                    if (k2 > 1) {
                        if (k2 >= BASE) k2 = BASE - 1
                        prod = multiplyInteger(yd, k2)
                        prodL = prod.length
                        remL = rem.length
                        cmp = compare(prod, rem, prodL, remL)
                        if (cmp == 1) {
                            k2--
                            subtract2(prod, yL < prodL ? yz : yd, prodL)
                        }
                    } else {
                        if (k2 == 0) cmp = k2 = 1
                        prod = yd.slice()
                    }
                    prodL = prod.length
                    if (prodL < remL) prod.unshift(0)
                    subtract2(rem, prod, remL)
                    if (cmp == -1) {
                        remL = rem.length
                        cmp = compare(yd, rem, yL, remL)
                        if (cmp < 1) {
                            k2++
                            subtract2(rem, yL < remL ? yz : yd, remL)
                        }
                    }
                    remL = rem.length
                } else if (cmp === 0) {
                    k2++
                    rem = [0]
                }
                qd[i++] = k2
                if (cmp && rem[0]) {
                    rem[remL++] = xd[xi] || 0
                } else {
                    rem = [xd[xi]]
                    remL = 1
                }
            } while ((xi++ < xL || rem[0] !== void 0) && sd--)
        }
        if (!qd[0]) qd.shift()
        q.e = e
        return round$1(q, dp ? pr + getBase10Exponent(q) + 1 : pr)
    }
})()
function exp(x2, sd) {
    var denominator,
        guard,
        pow2,
        sum2,
        t,
        wpr,
        i = 0,
        k2 = 0,
        Ctor = x2.constructor,
        pr = Ctor.precision
    if (getBase10Exponent(x2) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x2))
    if (!x2.s) return new Ctor(ONE)
    {
        external = false
        wpr = pr
    }
    t = new Ctor(0.03125)
    while (x2.abs().gte(0.1)) {
        x2 = x2.times(t)
        k2 += 5
    }
    guard = ((Math.log(mathpow(2, k2)) / Math.LN10) * 2 + 5) | 0
    wpr += guard
    denominator = pow2 = sum2 = new Ctor(ONE)
    Ctor.precision = wpr
    for (;;) {
        pow2 = round$1(pow2.times(x2), wpr)
        denominator = denominator.times(++i)
        t = sum2.plus(divide(pow2, denominator, wpr))
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
            while (k2--) sum2 = round$1(sum2.times(sum2), wpr)
            Ctor.precision = pr
            return sd == null ? ((external = true), round$1(sum2, pr)) : sum2
        }
        sum2 = t
    }
}
function getBase10Exponent(x2) {
    var e = x2.e * LOG_BASE,
        w2 = x2.d[0]
    for (; w2 >= 10; w2 /= 10) e++
    return e
}
function getLn10(Ctor, sd, pr) {
    if (sd > Ctor.LN10.sd()) {
        external = true
        if (pr) Ctor.precision = pr
        throw Error(decimalError + 'LN10 precision limit exceeded')
    }
    return round$1(new Ctor(Ctor.LN10), sd)
}
function getZeroString(k2) {
    var zs = ''
    for (; k2--; ) zs += '0'
    return zs
}
function ln(y2, sd) {
    var c2,
        c0,
        denominator,
        e,
        numerator,
        sum2,
        t,
        wpr,
        x2,
        n = 1,
        guard = 10,
        x3 = y2,
        xd = x3.d,
        Ctor = x3.constructor,
        pr = Ctor.precision
    if (x3.s < 1) throw Error(decimalError + (x3.s ? 'NaN' : '-Infinity'))
    if (x3.eq(ONE)) return new Ctor(0)
    if (sd == null) {
        external = false
        wpr = pr
    } else {
        wpr = sd
    }
    if (x3.eq(10)) {
        if (sd == null) external = true
        return getLn10(Ctor, wpr)
    }
    wpr += guard
    Ctor.precision = wpr
    c2 = digitsToString(xd)
    c0 = c2.charAt(0)
    e = getBase10Exponent(x3)
    if (Math.abs(e) < 15e14) {
        while ((c0 < 7 && c0 != 1) || (c0 == 1 && c2.charAt(1) > 3)) {
            x3 = x3.times(y2)
            c2 = digitsToString(x3.d)
            c0 = c2.charAt(0)
            n++
        }
        e = getBase10Exponent(x3)
        if (c0 > 1) {
            x3 = new Ctor('0.' + c2)
            e++
        } else {
            x3 = new Ctor(c0 + '.' + c2.slice(1))
        }
    } else {
        t = getLn10(Ctor, wpr + 2, pr).times(e + '')
        x3 = ln(new Ctor(c0 + '.' + c2.slice(1)), wpr - guard).plus(t)
        Ctor.precision = pr
        return sd == null ? ((external = true), round$1(x3, pr)) : x3
    }
    sum2 = numerator = x3 = divide(x3.minus(ONE), x3.plus(ONE), wpr)
    x2 = round$1(x3.times(x3), wpr)
    denominator = 3
    for (;;) {
        numerator = round$1(numerator.times(x2), wpr)
        t = sum2.plus(divide(numerator, new Ctor(denominator), wpr))
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
            sum2 = sum2.times(2)
            if (e !== 0) sum2 = sum2.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''))
            sum2 = divide(sum2, new Ctor(n), wpr)
            Ctor.precision = pr
            return sd == null ? ((external = true), round$1(sum2, pr)) : sum2
        }
        sum2 = t
        denominator += 2
    }
}
function parseDecimal(x2, str) {
    var e, i, len
    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '')
    if ((i = str.search(/e/i)) > 0) {
        if (e < 0) e = i
        e += +str.slice(i + 1)
        str = str.substring(0, i)
    } else if (e < 0) {
        e = str.length
    }
    for (i = 0; str.charCodeAt(i) === 48; ) ++i
    for (len = str.length; str.charCodeAt(len - 1) === 48; ) --len
    str = str.slice(i, len)
    if (str) {
        len -= i
        e = e - i - 1
        x2.e = mathfloor(e / LOG_BASE)
        x2.d = []
        i = (e + 1) % LOG_BASE
        if (e < 0) i += LOG_BASE
        if (i < len) {
            if (i) x2.d.push(+str.slice(0, i))
            for (len -= LOG_BASE; i < len; ) x2.d.push(+str.slice(i, (i += LOG_BASE)))
            str = str.slice(i)
            i = LOG_BASE - str.length
        } else {
            i -= len
        }
        for (; i--; ) str += '0'
        x2.d.push(+str)
        if (external && (x2.e > MAX_E || x2.e < -MAX_E)) throw Error(exponentOutOfRange + e)
    } else {
        x2.s = 0
        x2.e = 0
        x2.d = [0]
    }
    return x2
}
function round$1(x2, sd, rm) {
    var i,
        j,
        k2,
        n,
        rd,
        doRound,
        w2,
        xdi,
        xd = x2.d
    for (n = 1, k2 = xd[0]; k2 >= 10; k2 /= 10) n++
    i = sd - n
    if (i < 0) {
        i += LOG_BASE
        j = sd
        w2 = xd[(xdi = 0)]
    } else {
        xdi = Math.ceil((i + 1) / LOG_BASE)
        k2 = xd.length
        if (xdi >= k2) return x2
        w2 = k2 = xd[xdi]
        for (n = 1; k2 >= 10; k2 /= 10) n++
        i %= LOG_BASE
        j = i - LOG_BASE + n
    }
    if (rm !== void 0) {
        k2 = mathpow(10, n - j - 1)
        rd = (w2 / k2) % 10 | 0
        doRound = sd < 0 || xd[xdi + 1] !== void 0 || w2 % k2
        doRound =
            rm < 4
                ? (rd || doRound) && (rm == 0 || rm == (x2.s < 0 ? 3 : 2))
                : rd > 5 ||
                  (rd == 5 &&
                      (rm == 4 ||
                          doRound ||
                          (rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
                              (i > 0 ? (j > 0 ? w2 / mathpow(10, n - j) : 0) : xd[xdi - 1]) % 10 &
                                  1) ||
                          rm == (x2.s < 0 ? 8 : 7)))
    }
    if (sd < 1 || !xd[0]) {
        if (doRound) {
            k2 = getBase10Exponent(x2)
            xd.length = 1
            sd = sd - k2 - 1
            xd[0] = mathpow(10, (LOG_BASE - (sd % LOG_BASE)) % LOG_BASE)
            x2.e = mathfloor(-sd / LOG_BASE) || 0
        } else {
            xd.length = 1
            xd[0] = x2.e = x2.s = 0
        }
        return x2
    }
    if (i == 0) {
        xd.length = xdi
        k2 = 1
        xdi--
    } else {
        xd.length = xdi + 1
        k2 = mathpow(10, LOG_BASE - i)
        xd[xdi] = j > 0 ? ((w2 / mathpow(10, n - j)) % mathpow(10, j) | 0) * k2 : 0
    }
    if (doRound) {
        for (;;) {
            if (xdi == 0) {
                if ((xd[0] += k2) == BASE) {
                    xd[0] = 1
                    ++x2.e
                }
                break
            } else {
                xd[xdi] += k2
                if (xd[xdi] != BASE) break
                xd[xdi--] = 0
                k2 = 1
            }
        }
    }
    for (i = xd.length; xd[--i] === 0; ) xd.pop()
    if (external && (x2.e > MAX_E || x2.e < -MAX_E)) {
        throw Error(exponentOutOfRange + getBase10Exponent(x2))
    }
    return x2
}
function subtract(x2, y2) {
    var d,
        e,
        i,
        j,
        k2,
        len,
        xd,
        xe,
        xLTy,
        yd,
        Ctor = x2.constructor,
        pr = Ctor.precision
    if (!x2.s || !y2.s) {
        if (y2.s) y2.s = -y2.s
        else y2 = new Ctor(x2)
        return external ? round$1(y2, pr) : y2
    }
    xd = x2.d
    yd = y2.d
    e = y2.e
    xe = x2.e
    xd = xd.slice()
    k2 = xe - e
    if (k2) {
        xLTy = k2 < 0
        if (xLTy) {
            d = xd
            k2 = -k2
            len = yd.length
        } else {
            d = yd
            e = xe
            len = xd.length
        }
        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2
        if (k2 > i) {
            k2 = i
            d.length = 1
        }
        d.reverse()
        for (i = k2; i--; ) d.push(0)
        d.reverse()
    } else {
        i = xd.length
        len = yd.length
        xLTy = i < len
        if (xLTy) len = i
        for (i = 0; i < len; i++) {
            if (xd[i] != yd[i]) {
                xLTy = xd[i] < yd[i]
                break
            }
        }
        k2 = 0
    }
    if (xLTy) {
        d = xd
        xd = yd
        yd = d
        y2.s = -y2.s
    }
    len = xd.length
    for (i = yd.length - len; i > 0; --i) xd[len++] = 0
    for (i = yd.length; i > k2; ) {
        if (xd[--i] < yd[i]) {
            for (j = i; j && xd[--j] === 0; ) xd[j] = BASE - 1
            --xd[j]
            xd[i] += BASE
        }
        xd[i] -= yd[i]
    }
    for (; xd[--len] === 0; ) xd.pop()
    for (; xd[0] === 0; xd.shift()) --e
    if (!xd[0]) return new Ctor(0)
    y2.d = xd
    y2.e = e
    return external ? round$1(y2, pr) : y2
}
function toString2(x2, isExp, sd) {
    var k2,
        e = getBase10Exponent(x2),
        str = digitsToString(x2.d),
        len = str.length
    if (isExp) {
        if (sd && (k2 = sd - len) > 0) {
            str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k2)
        } else if (len > 1) {
            str = str.charAt(0) + '.' + str.slice(1)
        }
        str = str + (e < 0 ? 'e' : 'e+') + e
    } else if (e < 0) {
        str = '0.' + getZeroString(-e - 1) + str
        if (sd && (k2 = sd - len) > 0) str += getZeroString(k2)
    } else if (e >= len) {
        str += getZeroString(e + 1 - len)
        if (sd && (k2 = sd - e - 1) > 0) str = str + '.' + getZeroString(k2)
    } else {
        if ((k2 = e + 1) < len) str = str.slice(0, k2) + '.' + str.slice(k2)
        if (sd && (k2 = sd - len) > 0) {
            if (e + 1 === len) str += '.'
            str += getZeroString(k2)
        }
    }
    return x2.s < 0 ? '-' + str : str
}
function truncate(arr, len) {
    if (arr.length > len) {
        arr.length = len
        return true
    }
}
function clone(obj) {
    var i, p, ps
    function Decimal2(value) {
        var x2 = this
        if (!(x2 instanceof Decimal2)) return new Decimal2(value)
        x2.constructor = Decimal2
        if (value instanceof Decimal2) {
            x2.s = value.s
            x2.e = value.e
            x2.d = (value = value.d) ? value.slice() : value
            return
        }
        if (typeof value === 'number') {
            if (value * 0 !== 0) {
                throw Error(invalidArgument + value)
            }
            if (value > 0) {
                x2.s = 1
            } else if (value < 0) {
                value = -value
                x2.s = -1
            } else {
                x2.s = 0
                x2.e = 0
                x2.d = [0]
                return
            }
            if (value === ~~value && value < 1e7) {
                x2.e = 0
                x2.d = [value]
                return
            }
            return parseDecimal(x2, value.toString())
        } else if (typeof value !== 'string') {
            throw Error(invalidArgument + value)
        }
        if (value.charCodeAt(0) === 45) {
            value = value.slice(1)
            x2.s = -1
        } else {
            x2.s = 1
        }
        if (isDecimal.test(value)) parseDecimal(x2, value)
        else throw Error(invalidArgument + value)
    }
    Decimal2.prototype = P
    Decimal2.ROUND_UP = 0
    Decimal2.ROUND_DOWN = 1
    Decimal2.ROUND_CEIL = 2
    Decimal2.ROUND_FLOOR = 3
    Decimal2.ROUND_HALF_UP = 4
    Decimal2.ROUND_HALF_DOWN = 5
    Decimal2.ROUND_HALF_EVEN = 6
    Decimal2.ROUND_HALF_CEIL = 7
    Decimal2.ROUND_HALF_FLOOR = 8
    Decimal2.clone = clone
    Decimal2.config = Decimal2.set = config
    if (obj === void 0) obj = {}
    if (obj) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10']
        for (i = 0; i < ps.length; ) if (!obj.hasOwnProperty((p = ps[i++]))) obj[p] = this[p]
    }
    Decimal2.config(obj)
    return Decimal2
}
function config(obj) {
    if (!obj || typeof obj !== 'object') {
        throw Error(decimalError + 'Object expected')
    }
    var i,
        p,
        v,
        ps = [
            'precision',
            1,
            MAX_DIGITS,
            'rounding',
            0,
            8,
            'toExpNeg',
            -1 / 0,
            0,
            'toExpPos',
            0,
            1 / 0
        ]
    for (i = 0; i < ps.length; i += 3) {
        if ((v = obj[(p = ps[i])]) !== void 0) {
            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v
            else throw Error(invalidArgument + p + ': ' + v)
        }
    }
    if ((v = obj[(p = 'LN10')]) !== void 0) {
        if (v == Math.LN10) this[p] = new this(v)
        else throw Error(invalidArgument + p + ': ' + v)
    }
    return this
}
var Decimal = clone(defaults)
ONE = new Decimal(1)
const Decimal$1 = Decimal
function _toConsumableArray$c(arr) {
    return (
        _arrayWithoutHoles$c(arr) ||
        _iterableToArray$d(arr) ||
        _unsupportedIterableToArray$i(arr) ||
        _nonIterableSpread$c()
    )
}
function _nonIterableSpread$c() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$i(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$i(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$i(o, minLen)
}
function _iterableToArray$d(iter) {
    if (typeof Symbol !== 'undefined' && Symbol.iterator in Object(iter)) return Array.from(iter)
}
function _arrayWithoutHoles$c(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$i(arr)
}
function _arrayLikeToArray$i(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i]
    }
    return arr2
}
var identity$1 = function identity(i) {
    return i
}
var PLACE_HOLDER = {}
var isPlaceHolder = function isPlaceHolder2(val) {
    return val === PLACE_HOLDER
}
var curry0 = function curry02(fn) {
    return function _curried() {
        if (
            arguments.length === 0 ||
            (arguments.length === 1 && isPlaceHolder(arguments.length <= 0 ? void 0 : arguments[0]))
        ) {
            return _curried
        }
        return fn.apply(void 0, arguments)
    }
}
var curryN = function curryN2(n, fn) {
    if (n === 1) {
        return fn
    }
    return curry0(function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key]
        }
        var argsLength = args.filter(function (arg) {
            return arg !== PLACE_HOLDER
        }).length
        if (argsLength >= n) {
            return fn.apply(void 0, args)
        }
        return curryN2(
            n - argsLength,
            curry0(function () {
                for (
                    var _len2 = arguments.length, restArgs = new Array(_len2), _key2 = 0;
                    _key2 < _len2;
                    _key2++
                ) {
                    restArgs[_key2] = arguments[_key2]
                }
                var newArgs = args.map(function (arg) {
                    return isPlaceHolder(arg) ? restArgs.shift() : arg
                })
                return fn.apply(void 0, _toConsumableArray$c(newArgs).concat(restArgs))
            })
        )
    })
}
var curry = function curry2(fn) {
    return curryN(fn.length, fn)
}
var range$1 = function range(begin, end) {
    var arr = []
    for (var i = begin; i < end; ++i) {
        arr[i - begin] = i
    }
    return arr
}
var map = curry(function (fn, arr) {
    if (Array.isArray(arr)) {
        return arr.map(fn)
    }
    return Object.keys(arr)
        .map(function (key) {
            return arr[key]
        })
        .map(fn)
})
var compose = function compose2() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3]
    }
    if (!args.length) {
        return identity$1
    }
    var fns = args.reverse()
    var firstFn = fns[0]
    var tailsFn = fns.slice(1)
    return function () {
        return tailsFn.reduce(
            function (res, fn) {
                return fn(res)
            },
            firstFn.apply(void 0, arguments)
        )
    }
}
var reverse = function reverse2(arr) {
    if (Array.isArray(arr)) {
        return arr.reverse()
    }
    return arr.split('').reverse.join('')
}
var memoize$2 = function memoize(fn) {
    var lastArgs = null
    var lastResult2 = null
    return function () {
        for (
            var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
            _key4 < _len4;
            _key4++
        ) {
            args[_key4] = arguments[_key4]
        }
        if (
            lastArgs &&
            args.every(function (val, i) {
                return val === lastArgs[i]
            })
        ) {
            return lastResult2
        }
        lastArgs = args
        lastResult2 = fn.apply(void 0, args)
        return lastResult2
    }
}
function getDigitCount(value) {
    var result
    if (value === 0) {
        result = 1
    } else {
        result = Math.floor(new Decimal$1(value).abs().log(10).toNumber()) + 1
    }
    return result
}
function rangeStep(start, end, step) {
    var num = new Decimal$1(start)
    var i = 0
    var result = []
    while (num.lt(end) && i < 1e5) {
        result.push(num.toNumber())
        num = num.add(step)
        i++
    }
    return result
}
var interpolateNumber2 = curry(function (a2, b, t) {
    var newA = +a2
    var newB = +b
    return newA + t * (newB - newA)
})
var uninterpolateNumber = curry(function (a2, b, x2) {
    var diff = b - +a2
    diff = diff || Infinity
    return (x2 - a2) / diff
})
var uninterpolateTruncation = curry(function (a2, b, x2) {
    var diff = b - +a2
    diff = diff || Infinity
    return Math.max(0, Math.min(1, (x2 - a2) / diff))
})
const Arithmetic = {
    rangeStep,
    getDigitCount,
    interpolateNumber: interpolateNumber2,
    uninterpolateNumber,
    uninterpolateTruncation
}
function _toConsumableArray$b(arr) {
    return (
        _arrayWithoutHoles$b(arr) ||
        _iterableToArray$c(arr) ||
        _unsupportedIterableToArray$h(arr) ||
        _nonIterableSpread$b()
    )
}
function _nonIterableSpread$b() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _iterableToArray$c(iter) {
    if (typeof Symbol !== 'undefined' && Symbol.iterator in Object(iter)) return Array.from(iter)
}
function _arrayWithoutHoles$b(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$h(arr)
}
function _slicedToArray$9(arr, i) {
    return (
        _arrayWithHoles$a(arr) ||
        _iterableToArrayLimit$9(arr, i) ||
        _unsupportedIterableToArray$h(arr, i) ||
        _nonIterableRest$a()
    )
}
function _nonIterableRest$a() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$h(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$h(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$h(o, minLen)
}
function _arrayLikeToArray$h(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i]
    }
    return arr2
}
function _iterableToArrayLimit$9(arr, i) {
    if (typeof Symbol === 'undefined' || !(Symbol.iterator in Object(arr))) return
    var _arr = []
    var _n = true
    var _d = false
    var _e = void 0
    try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value)
            if (i && _arr.length === i) break
        }
    } catch (err) {
        _d = true
        _e = err
    } finally {
        try {
            if (!_n && _i['return'] != null) _i['return']()
        } finally {
            if (_d) throw _e
        }
    }
    return _arr
}
function _arrayWithHoles$a(arr) {
    if (Array.isArray(arr)) return arr
}
function getValidInterval(_ref3) {
    var _ref22 = _slicedToArray$9(_ref3, 2),
        min2 = _ref22[0],
        max2 = _ref22[1]
    var validMin = min2,
        validMax = max2
    if (min2 > max2) {
        validMin = max2
        validMax = min2
    }
    return [validMin, validMax]
}
function getFormatStep(roughStep, allowDecimals, correctionFactor) {
    if (roughStep.lte(0)) {
        return new Decimal$1(0)
    }
    var digitCount = Arithmetic.getDigitCount(roughStep.toNumber())
    var digitCountValue = new Decimal$1(10).pow(digitCount)
    var stepRatio = roughStep.div(digitCountValue)
    var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1
    var amendStepRatio = new Decimal$1(Math.ceil(stepRatio.div(stepRatioScale).toNumber()))
        .add(correctionFactor)
        .mul(stepRatioScale)
    var formatStep = amendStepRatio.mul(digitCountValue)
    return allowDecimals ? formatStep : new Decimal$1(Math.ceil(formatStep))
}
function getTickOfSingleValue(value, tickCount, allowDecimals) {
    var step = 1
    var middle = new Decimal$1(value)
    if (!middle.isint() && allowDecimals) {
        var absVal = Math.abs(value)
        if (absVal < 1) {
            step = new Decimal$1(10).pow(Arithmetic.getDigitCount(value) - 1)
            middle = new Decimal$1(Math.floor(middle.div(step).toNumber())).mul(step)
        } else if (absVal > 1) {
            middle = new Decimal$1(Math.floor(value))
        }
    } else if (value === 0) {
        middle = new Decimal$1(Math.floor((tickCount - 1) / 2))
    } else if (!allowDecimals) {
        middle = new Decimal$1(Math.floor(value))
    }
    var middleIndex = Math.floor((tickCount - 1) / 2)
    var fn = compose(
        map(function (n) {
            return middle.add(new Decimal$1(n - middleIndex).mul(step)).toNumber()
        }),
        range$1
    )
    return fn(0, tickCount)
}
function calculateStep(min2, max2, tickCount, allowDecimals) {
    var correctionFactor = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0
    if (!Number.isFinite((max2 - min2) / (tickCount - 1))) {
        return {
            step: new Decimal$1(0),
            tickMin: new Decimal$1(0),
            tickMax: new Decimal$1(0)
        }
    }
    var step = getFormatStep(
        new Decimal$1(max2).sub(min2).div(tickCount - 1),
        allowDecimals,
        correctionFactor
    )
    var middle
    if (min2 <= 0 && max2 >= 0) {
        middle = new Decimal$1(0)
    } else {
        middle = new Decimal$1(min2).add(max2).div(2)
        middle = middle.sub(new Decimal$1(middle).mod(step))
    }
    var belowCount = Math.ceil(middle.sub(min2).div(step).toNumber())
    var upCount = Math.ceil(new Decimal$1(max2).sub(middle).div(step).toNumber())
    var scaleCount = belowCount + upCount + 1
    if (scaleCount > tickCount) {
        return calculateStep(min2, max2, tickCount, allowDecimals, correctionFactor + 1)
    }
    if (scaleCount < tickCount) {
        upCount = max2 > 0 ? upCount + (tickCount - scaleCount) : upCount
        belowCount = max2 > 0 ? belowCount : belowCount + (tickCount - scaleCount)
    }
    return {
        step,
        tickMin: middle.sub(new Decimal$1(belowCount).mul(step)),
        tickMax: middle.add(new Decimal$1(upCount).mul(step))
    }
}
function getNiceTickValuesFn(_ref3) {
    var _ref4 = _slicedToArray$9(_ref3, 2),
        min2 = _ref4[0],
        max2 = _ref4[1]
    var tickCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6
    var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true
    var count2 = Math.max(tickCount, 2)
    var _getValidInterval = getValidInterval([min2, max2]),
        _getValidInterval2 = _slicedToArray$9(_getValidInterval, 2),
        cormin = _getValidInterval2[0],
        cormax = _getValidInterval2[1]
    if (cormin === -Infinity || cormax === Infinity) {
        var _values =
            cormax === Infinity
                ? [cormin].concat(
                      _toConsumableArray$b(
                          range$1(0, tickCount - 1).map(function () {
                              return Infinity
                          })
                      )
                  )
                : [].concat(
                      _toConsumableArray$b(
                          range$1(0, tickCount - 1).map(function () {
                              return -Infinity
                          })
                      ),
                      [cormax]
                  )
        return min2 > max2 ? reverse(_values) : _values
    }
    if (cormin === cormax) {
        return getTickOfSingleValue(cormin, tickCount, allowDecimals)
    }
    var _calculateStep = calculateStep(cormin, cormax, count2, allowDecimals),
        step = _calculateStep.step,
        tickMin = _calculateStep.tickMin,
        tickMax = _calculateStep.tickMax
    var values = Arithmetic.rangeStep(tickMin, tickMax.add(new Decimal$1(0.1).mul(step)), step)
    return min2 > max2 ? reverse(values) : values
}
function getTickValuesFixedDomainFn(_ref7, tickCount) {
    var _ref8 = _slicedToArray$9(_ref7, 2),
        min2 = _ref8[0],
        max2 = _ref8[1]
    var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true
    var _getValidInterval5 = getValidInterval([min2, max2]),
        _getValidInterval6 = _slicedToArray$9(_getValidInterval5, 2),
        cormin = _getValidInterval6[0],
        cormax = _getValidInterval6[1]
    if (cormin === -Infinity || cormax === Infinity) {
        return [min2, max2]
    }
    if (cormin === cormax) {
        return [cormin]
    }
    var count2 = Math.max(tickCount, 2)
    var step = getFormatStep(new Decimal$1(cormax).sub(cormin).div(count2 - 1), allowDecimals, 0)
    var values = [].concat(
        _toConsumableArray$b(
            Arithmetic.rangeStep(
                new Decimal$1(cormin),
                new Decimal$1(cormax).sub(new Decimal$1(0.99).mul(step)),
                step
            )
        ),
        [cormax]
    )
    return min2 > max2 ? reverse(values) : values
}
var getNiceTickValues = memoize$2(getNiceTickValuesFn)
var getTickValuesFixedDomain = memoize$2(getTickValuesFixedDomainFn)
var prefix$1 = 'Invariant failed'
function invariant(condition, message) {
    {
        throw new Error(prefix$1)
    }
}
var _excluded$n = [
    'offset',
    'layout',
    'width',
    'dataKey',
    'data',
    'dataPointFormatter',
    'xAxis',
    'yAxis'
]
function _typeof$D(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$D =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$D(o)
    )
}
function _extends$s() {
    _extends$s = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$s.apply(this, arguments)
}
function _slicedToArray$8(arr, i) {
    return (
        _arrayWithHoles$9(arr) ||
        _iterableToArrayLimit$8(arr, i) ||
        _unsupportedIterableToArray$g(arr, i) ||
        _nonIterableRest$9()
    )
}
function _nonIterableRest$9() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$g(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$g(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$g(o, minLen)
}
function _arrayLikeToArray$g(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$8(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r22) {
            ;(o = true), (n = r22)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$9(arr) {
    if (Array.isArray(arr)) return arr
}
function _objectWithoutProperties$h(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$h(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$h(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _classCallCheck$j(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$j(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$B(descriptor.key), descriptor)
    }
}
function _createClass$j(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$j(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$f(t, o, e) {
    return (
        (o = _getPrototypeOf$h(o)),
        _possibleConstructorReturn$h(
            t,
            _isNativeReflectConstruct$h()
                ? Reflect.construct(o, e || [], _getPrototypeOf$h(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$h(self2, call) {
    if (call && (_typeof$D(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$h(self2)
}
function _assertThisInitialized$h(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$h() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$h = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$h(o) {
    _getPrototypeOf$h = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$h(o)
}
function _inherits$h(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$h(subClass, superClass)
}
function _setPrototypeOf$h(o, p) {
    _setPrototypeOf$h = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$h(o, p)
}
function _defineProperty$C(obj, key, value) {
    key = _toPropertyKey$B(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$B(t) {
    var i = _toPrimitive$B(t, 'string')
    return 'symbol' == _typeof$D(i) ? i : i + ''
}
function _toPrimitive$B(t, r2) {
    if ('object' != _typeof$D(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$D(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var ErrorBar = /* @__PURE__ */ (function (_React$Component) {
    function ErrorBar2() {
        _classCallCheck$j(this, ErrorBar2)
        return _callSuper$f(this, ErrorBar2, arguments)
    }
    _inherits$h(ErrorBar2, _React$Component)
    return _createClass$j(ErrorBar2, [
        {
            key: 'render',
            value: function render() {
                var _this$props = this.props,
                    offset = _this$props.offset,
                    layout = _this$props.layout,
                    width = _this$props.width,
                    dataKey = _this$props.dataKey,
                    data = _this$props.data,
                    dataPointFormatter = _this$props.dataPointFormatter,
                    xAxis = _this$props.xAxis,
                    yAxis = _this$props.yAxis,
                    others = _objectWithoutProperties$h(_this$props, _excluded$n)
                var svgProps = filterProps(others, false)
                !!(this.props.direction === 'x' && xAxis.type !== 'number') ? invariant() : void 0
                var errorBars = data.map(function (entry) {
                    var _dataPointFormatter = dataPointFormatter(entry, dataKey),
                        x2 = _dataPointFormatter.x,
                        y2 = _dataPointFormatter.y,
                        value = _dataPointFormatter.value,
                        errorVal = _dataPointFormatter.errorVal
                    if (!errorVal) {
                        return null
                    }
                    var lineCoordinates = []
                    var lowBound, highBound
                    if (Array.isArray(errorVal)) {
                        var _errorVal = _slicedToArray$8(errorVal, 2)
                        lowBound = _errorVal[0]
                        highBound = _errorVal[1]
                    } else {
                        lowBound = highBound = errorVal
                    }
                    if (layout === 'vertical') {
                        var scale = xAxis.scale
                        var yMid = y2 + offset
                        var yMin = yMid + width
                        var yMax = yMid - width
                        var xMin = scale(value - lowBound)
                        var xMax = scale(value + highBound)
                        lineCoordinates.push({
                            x1: xMax,
                            y1: yMin,
                            x2: xMax,
                            y2: yMax
                        })
                        lineCoordinates.push({
                            x1: xMin,
                            y1: yMid,
                            x2: xMax,
                            y2: yMid
                        })
                        lineCoordinates.push({
                            x1: xMin,
                            y1: yMin,
                            x2: xMin,
                            y2: yMax
                        })
                    } else if (layout === 'horizontal') {
                        var _scale = yAxis.scale
                        var xMid = x2 + offset
                        var _xMin = xMid - width
                        var _xMax = xMid + width
                        var _yMin = _scale(value - lowBound)
                        var _yMax = _scale(value + highBound)
                        lineCoordinates.push({
                            x1: _xMin,
                            y1: _yMax,
                            x2: _xMax,
                            y2: _yMax
                        })
                        lineCoordinates.push({
                            x1: xMid,
                            y1: _yMin,
                            x2: xMid,
                            y2: _yMax
                        })
                        lineCoordinates.push({
                            x1: _xMin,
                            y1: _yMin,
                            x2: _xMax,
                            y2: _yMin
                        })
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        _extends$s(
                            {
                                className: 'recharts-errorBar',
                                key: 'bar-'.concat(
                                    lineCoordinates.map(function (c2) {
                                        return ''
                                            .concat(c2.x1, '-')
                                            .concat(c2.x2, '-')
                                            .concat(c2.y1, '-')
                                            .concat(c2.y2)
                                    })
                                )
                            },
                            svgProps
                        ),
                        lineCoordinates.map(function (coordinates) {
                            return /* @__PURE__ */ React.createElement(
                                'line',
                                _extends$s({}, coordinates, {
                                    key: 'line-'
                                        .concat(coordinates.x1, '-')
                                        .concat(coordinates.x2, '-')
                                        .concat(coordinates.y1, '-')
                                        .concat(coordinates.y2)
                                })
                            )
                        })
                    )
                })
                return /* @__PURE__ */ React.createElement(
                    Layer,
                    {
                        className: 'recharts-errorBars'
                    },
                    errorBars
                )
            }
        }
    ])
})(React.Component)
_defineProperty$C(ErrorBar, 'defaultProps', {
    stroke: 'black',
    strokeWidth: 1.5,
    width: 5,
    offset: 0,
    layout: 'horizontal'
})
_defineProperty$C(ErrorBar, 'displayName', 'ErrorBar')
function _typeof$C(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$C =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$C(o)
    )
}
function ownKeys$y(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$x(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$y(Object(t), true).forEach(function (r3) {
                  _defineProperty$B(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$y(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$B(obj, key, value) {
    key = _toPropertyKey$A(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$A(t) {
    var i = _toPrimitive$A(t, 'string')
    return 'symbol' == _typeof$C(i) ? i : i + ''
}
function _toPrimitive$A(t, r2) {
    if ('object' != _typeof$C(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$C(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var getLegendProps = function getLegendProps2(_ref3) {
    var children = _ref3.children,
        formattedGraphicalItems = _ref3.formattedGraphicalItems,
        legendWidth = _ref3.legendWidth,
        legendContent = _ref3.legendContent
    var legendItem = findChildByType(children, Legend)
    if (!legendItem) {
        return null
    }
    var legendDefaultProps = Legend.defaultProps
    var legendProps =
        legendDefaultProps !== void 0
            ? _objectSpread$x(_objectSpread$x({}, legendDefaultProps), legendItem.props)
            : {}
    var legendData
    if (legendItem.props && legendItem.props.payload) {
        legendData = legendItem.props && legendItem.props.payload
    } else if (legendContent === 'children') {
        legendData = (formattedGraphicalItems || []).reduce(function (result, _ref22) {
            var item = _ref22.item,
                props = _ref22.props
            var data = props.sectors || props.data || []
            return result.concat(
                data.map(function (entry) {
                    return {
                        type: legendItem.props.iconType || item.props.legendType,
                        value: entry.name,
                        color: entry.fill,
                        payload: entry
                    }
                })
            )
        }, [])
    } else {
        legendData = (formattedGraphicalItems || []).map(function (_ref32) {
            var item = _ref32.item
            var itemDefaultProps = item.type.defaultProps
            var itemProps =
                itemDefaultProps !== void 0
                    ? _objectSpread$x(_objectSpread$x({}, itemDefaultProps), item.props)
                    : {}
            var dataKey = itemProps.dataKey,
                name = itemProps.name,
                legendType = itemProps.legendType,
                hide = itemProps.hide
            return {
                inactive: hide,
                dataKey,
                type: legendProps.iconType || legendType || 'square',
                color: getMainColorOfGraphicItem(item),
                value: name || dataKey,
                // @ts-expect-error property strokeDasharray is required in Payload but optional in props
                payload: itemProps
            }
        })
    }
    return _objectSpread$x(
        _objectSpread$x(
            _objectSpread$x({}, legendProps),
            Legend.getWithHeight(legendItem, legendWidth)
        ),
        {},
        {
            payload: legendData,
            item: legendItem
        }
    )
}
function _typeof$B(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$B =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$B(o)
    )
}
function _toConsumableArray$a(arr) {
    return (
        _arrayWithoutHoles$a(arr) ||
        _iterableToArray$b(arr) ||
        _unsupportedIterableToArray$f(arr) ||
        _nonIterableSpread$a()
    )
}
function _nonIterableSpread$a() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$f(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$f(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$f(o, minLen)
}
function _iterableToArray$b(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$a(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$f(arr)
}
function _arrayLikeToArray$f(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function ownKeys$x(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$w(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$x(Object(t), true).forEach(function (r3) {
                  _defineProperty$A(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$x(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$A(obj, key, value) {
    key = _toPropertyKey$z(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$z(t) {
    var i = _toPrimitive$z(t, 'string')
    return 'symbol' == _typeof$B(i) ? i : i + ''
}
function _toPrimitive$z(t, r2) {
    if ('object' != _typeof$B(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$B(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function getValueByDataKey(obj, dataKey, defaultValue) {
    if (isNil(obj) || isNil(dataKey)) {
        return defaultValue
    }
    if (isNumOrStr(dataKey)) {
        return get(obj, dataKey, defaultValue)
    }
    if (isFunction(dataKey)) {
        return dataKey(obj)
    }
    return defaultValue
}
function getDomainOfDataByKey(data, key, type, filterNil) {
    var flattenData = flatMap(data, function (entry) {
        return getValueByDataKey(entry, key)
    })
    if (type === 'number') {
        var domain = flattenData.filter(function (entry) {
            return isNumber(entry) || parseFloat(entry)
        })
        return domain.length ? [min$1(domain), max$1(domain)] : [Infinity, -Infinity]
    }
    var validateData = filterNil
        ? flattenData.filter(function (entry) {
              return !isNil(entry)
          })
        : flattenData
    return validateData.map(function (entry) {
        return isNumOrStr(entry) || entry instanceof Date ? entry : ''
    })
}
var calculateActiveTickIndex = function calculateActiveTickIndex2(coordinate) {
    var _ticks$length
    var ticks2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : []
    var unsortedTicks = arguments.length > 2 ? arguments[2] : void 0
    var axis = arguments.length > 3 ? arguments[3] : void 0
    var index2 = -1
    var len =
        (_ticks$length = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2.length) !== null &&
        _ticks$length !== void 0
            ? _ticks$length
            : 0
    if (len <= 1) {
        return 0
    }
    if (
        axis &&
        axis.axisType === 'angleAxis' &&
        Math.abs(Math.abs(axis.range[1] - axis.range[0]) - 360) <= 1e-6
    ) {
        var range3 = axis.range
        for (var i = 0; i < len; i++) {
            var before = i > 0 ? unsortedTicks[i - 1].coordinate : unsortedTicks[len - 1].coordinate
            var cur = unsortedTicks[i].coordinate
            var after = i >= len - 1 ? unsortedTicks[0].coordinate : unsortedTicks[i + 1].coordinate
            var sameDirectionCoord = void 0
            if (mathSign(cur - before) !== mathSign(after - cur)) {
                var diffInterval = []
                if (mathSign(after - cur) === mathSign(range3[1] - range3[0])) {
                    sameDirectionCoord = after
                    var curInRange = cur + range3[1] - range3[0]
                    diffInterval[0] = Math.min(curInRange, (curInRange + before) / 2)
                    diffInterval[1] = Math.max(curInRange, (curInRange + before) / 2)
                } else {
                    sameDirectionCoord = before
                    var afterInRange = after + range3[1] - range3[0]
                    diffInterval[0] = Math.min(cur, (afterInRange + cur) / 2)
                    diffInterval[1] = Math.max(cur, (afterInRange + cur) / 2)
                }
                var sameInterval = [
                    Math.min(cur, (sameDirectionCoord + cur) / 2),
                    Math.max(cur, (sameDirectionCoord + cur) / 2)
                ]
                if (
                    (coordinate > sameInterval[0] && coordinate <= sameInterval[1]) ||
                    (coordinate >= diffInterval[0] && coordinate <= diffInterval[1])
                ) {
                    index2 = unsortedTicks[i].index
                    break
                }
            } else {
                var minValue = Math.min(before, after)
                var maxValue = Math.max(before, after)
                if (coordinate > (minValue + cur) / 2 && coordinate <= (maxValue + cur) / 2) {
                    index2 = unsortedTicks[i].index
                    break
                }
            }
        }
    } else {
        for (var _i = 0; _i < len; _i++) {
            if (
                (_i === 0 &&
                    coordinate <= (ticks2[_i].coordinate + ticks2[_i + 1].coordinate) / 2) ||
                (_i > 0 &&
                    _i < len - 1 &&
                    coordinate > (ticks2[_i].coordinate + ticks2[_i - 1].coordinate) / 2 &&
                    coordinate <= (ticks2[_i].coordinate + ticks2[_i + 1].coordinate) / 2) ||
                (_i === len - 1 &&
                    coordinate > (ticks2[_i].coordinate + ticks2[_i - 1].coordinate) / 2)
            ) {
                index2 = ticks2[_i].index
                break
            }
        }
    }
    return index2
}
var getMainColorOfGraphicItem = function getMainColorOfGraphicItem2(item) {
    var _item$type
    var _ref3 = item,
        displayName = _ref3.type.displayName
    var defaultedProps =
        (_item$type = item.type) !== null && _item$type !== void 0 && _item$type.defaultProps
            ? _objectSpread$w(_objectSpread$w({}, item.type.defaultProps), item.props)
            : item.props
    var stroke = defaultedProps.stroke,
        fill = defaultedProps.fill
    var result
    switch (displayName) {
        case 'Line':
            result = stroke
            break
        case 'Area':
        case 'Radar':
            result = stroke && stroke !== 'none' ? stroke : fill
            break
        default:
            result = fill
            break
    }
    return result
}
var getBarSizeList = function getBarSizeList2(_ref22) {
    var globalSize = _ref22.barSize,
        totalSize = _ref22.totalSize,
        _ref2$stackGroups = _ref22.stackGroups,
        stackGroups = _ref2$stackGroups === void 0 ? {} : _ref2$stackGroups
    if (!stackGroups) {
        return {}
    }
    var result = {}
    var numericAxisIds = Object.keys(stackGroups)
    for (var i = 0, len = numericAxisIds.length; i < len; i++) {
        var sgs = stackGroups[numericAxisIds[i]].stackGroups
        var stackIds = Object.keys(sgs)
        for (var j = 0, sLen = stackIds.length; j < sLen; j++) {
            var _sgs$stackIds$j = sgs[stackIds[j]],
                items = _sgs$stackIds$j.items,
                cateAxisId = _sgs$stackIds$j.cateAxisId
            var barItems = items.filter(function (item) {
                return getDisplayName(item.type).indexOf('Bar') >= 0
            })
            if (barItems && barItems.length) {
                var barItemDefaultProps = barItems[0].type.defaultProps
                var barItemProps =
                    barItemDefaultProps !== void 0
                        ? _objectSpread$w(
                              _objectSpread$w({}, barItemDefaultProps),
                              barItems[0].props
                          )
                        : barItems[0].props
                var selfSize = barItemProps.barSize
                var cateId = barItemProps[cateAxisId]
                if (!result[cateId]) {
                    result[cateId] = []
                }
                var barSize = isNil(selfSize) ? globalSize : selfSize
                result[cateId].push({
                    item: barItems[0],
                    stackList: barItems.slice(1),
                    barSize: isNil(barSize) ? void 0 : getPercentValue(barSize, totalSize, 0)
                })
            }
        }
    }
    return result
}
var getBarPosition = function getBarPosition2(_ref3) {
    var barGap = _ref3.barGap,
        barCategoryGap = _ref3.barCategoryGap,
        bandSize = _ref3.bandSize,
        _ref3$sizeList = _ref3.sizeList,
        sizeList = _ref3$sizeList === void 0 ? [] : _ref3$sizeList,
        maxBarSize = _ref3.maxBarSize
    var len = sizeList.length
    if (len < 1) return null
    var realBarGap = getPercentValue(barGap, bandSize, 0, true)
    var result
    var initialValue = []
    if (sizeList[0].barSize === +sizeList[0].barSize) {
        var useFull = false
        var fullBarSize = bandSize / len
        var sum2 = sizeList.reduce(function (res, entry) {
            return res + entry.barSize || 0
        }, 0)
        sum2 += (len - 1) * realBarGap
        if (sum2 >= bandSize) {
            sum2 -= (len - 1) * realBarGap
            realBarGap = 0
        }
        if (sum2 >= bandSize && fullBarSize > 0) {
            useFull = true
            fullBarSize *= 0.9
            sum2 = len * fullBarSize
        }
        var offset = ((bandSize - sum2) / 2) >> 0
        var prev2 = {
            offset: offset - realBarGap,
            size: 0
        }
        result = sizeList.reduce(function (res, entry) {
            var newPosition = {
                item: entry.item,
                position: {
                    offset: prev2.offset + prev2.size + realBarGap,
                    // @ts-expect-error the type check above does not check for type number explicitly
                    size: useFull ? fullBarSize : entry.barSize
                }
            }
            var newRes = [].concat(_toConsumableArray$a(res), [newPosition])
            prev2 = newRes[newRes.length - 1].position
            if (entry.stackList && entry.stackList.length) {
                entry.stackList.forEach(function (item) {
                    newRes.push({
                        item,
                        position: prev2
                    })
                })
            }
            return newRes
        }, initialValue)
    } else {
        var _offset = getPercentValue(barCategoryGap, bandSize, 0, true)
        if (bandSize - 2 * _offset - (len - 1) * realBarGap <= 0) {
            realBarGap = 0
        }
        var originalSize = (bandSize - 2 * _offset - (len - 1) * realBarGap) / len
        if (originalSize > 1) {
            originalSize >>= 0
        }
        var size = maxBarSize === +maxBarSize ? Math.min(originalSize, maxBarSize) : originalSize
        result = sizeList.reduce(function (res, entry, i) {
            var newRes = [].concat(_toConsumableArray$a(res), [
                {
                    item: entry.item,
                    position: {
                        offset:
                            _offset + (originalSize + realBarGap) * i + (originalSize - size) / 2,
                        size
                    }
                }
            ])
            if (entry.stackList && entry.stackList.length) {
                entry.stackList.forEach(function (item) {
                    newRes.push({
                        item,
                        position: newRes[newRes.length - 1].position
                    })
                })
            }
            return newRes
        }, initialValue)
    }
    return result
}
var appendOffsetOfLegend = function appendOffsetOfLegend2(offset, _unused, props, legendBox) {
    var children = props.children,
        width = props.width,
        margin = props.margin
    var legendWidth = width - (margin.left || 0) - (margin.right || 0)
    var legendProps = getLegendProps({
        children,
        legendWidth
    })
    if (legendProps) {
        var _ref4 = legendBox || {},
            boxWidth = _ref4.width,
            boxHeight = _ref4.height
        var align = legendProps.align,
            verticalAlign = legendProps.verticalAlign,
            layout = legendProps.layout
        if (
            (layout === 'vertical' || (layout === 'horizontal' && verticalAlign === 'middle')) &&
            align !== 'center' &&
            isNumber(offset[align])
        ) {
            return _objectSpread$w(
                _objectSpread$w({}, offset),
                {},
                _defineProperty$A({}, align, offset[align] + (boxWidth || 0))
            )
        }
        if (
            (layout === 'horizontal' || (layout === 'vertical' && align === 'center')) &&
            verticalAlign !== 'middle' &&
            isNumber(offset[verticalAlign])
        ) {
            return _objectSpread$w(
                _objectSpread$w({}, offset),
                {},
                _defineProperty$A({}, verticalAlign, offset[verticalAlign] + (boxHeight || 0))
            )
        }
    }
    return offset
}
var isErrorBarRelevantForAxis = function isErrorBarRelevantForAxis2(layout, axisType, direction) {
    if (isNil(axisType)) {
        return true
    }
    if (layout === 'horizontal') {
        return axisType === 'yAxis'
    }
    if (layout === 'vertical') {
        return axisType === 'xAxis'
    }
    if (direction === 'x') {
        return axisType === 'xAxis'
    }
    if (direction === 'y') {
        return axisType === 'yAxis'
    }
    return true
}
var getDomainOfErrorBars = function getDomainOfErrorBars2(data, item, dataKey, layout, axisType) {
    var children = item.props.children
    var errorBars = findAllByType(children, ErrorBar).filter(function (errorBarChild) {
        return isErrorBarRelevantForAxis(layout, axisType, errorBarChild.props.direction)
    })
    if (errorBars && errorBars.length) {
        var keys2 = errorBars.map(function (errorBarChild) {
            return errorBarChild.props.dataKey
        })
        return data.reduce(
            function (result, entry) {
                var entryValue = getValueByDataKey(entry, dataKey)
                if (isNil(entryValue)) return result
                var mainValue = Array.isArray(entryValue)
                    ? [min$1(entryValue), max$1(entryValue)]
                    : [entryValue, entryValue]
                var errorDomain = keys2.reduce(
                    function (prevErrorArr, k2) {
                        var errorValue = getValueByDataKey(entry, k2, 0)
                        var lowerValue =
                            mainValue[0] -
                            Math.abs(Array.isArray(errorValue) ? errorValue[0] : errorValue)
                        var upperValue =
                            mainValue[1] +
                            Math.abs(Array.isArray(errorValue) ? errorValue[1] : errorValue)
                        return [
                            Math.min(lowerValue, prevErrorArr[0]),
                            Math.max(upperValue, prevErrorArr[1])
                        ]
                    },
                    [Infinity, -Infinity]
                )
                return [Math.min(errorDomain[0], result[0]), Math.max(errorDomain[1], result[1])]
            },
            [Infinity, -Infinity]
        )
    }
    return null
}
var parseErrorBarsOfAxis = function parseErrorBarsOfAxis2(data, items, dataKey, axisType, layout) {
    var domains = items
        .map(function (item) {
            return getDomainOfErrorBars(data, item, dataKey, layout, axisType)
        })
        .filter(function (entry) {
            return !isNil(entry)
        })
    if (domains && domains.length) {
        return domains.reduce(
            function (result, entry) {
                return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])]
            },
            [Infinity, -Infinity]
        )
    }
    return null
}
var getDomainOfItemsWithSameAxis = function getDomainOfItemsWithSameAxis2(
    data,
    items,
    type,
    layout,
    filterNil
) {
    var domains = items.map(function (item) {
        var dataKey = item.props.dataKey
        if (type === 'number' && dataKey) {
            return (
                getDomainOfErrorBars(data, item, dataKey, layout) ||
                getDomainOfDataByKey(data, dataKey, type, filterNil)
            )
        }
        return getDomainOfDataByKey(data, dataKey, type, filterNil)
    })
    if (type === 'number') {
        return domains.reduce(
            // @ts-expect-error if (type === number) means that the domain is numerical type
            // - but this link is missing in the type definition
            function (result, entry) {
                return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])]
            },
            [Infinity, -Infinity]
        )
    }
    var tag = {}
    return domains.reduce(function (result, entry) {
        for (var i = 0, len = entry.length; i < len; i++) {
            if (!tag[entry[i]]) {
                tag[entry[i]] = true
                result.push(entry[i])
            }
        }
        return result
    }, [])
}
var isCategoricalAxis = function isCategoricalAxis2(layout, axisType) {
    return (
        (layout === 'horizontal' && axisType === 'xAxis') ||
        (layout === 'vertical' && axisType === 'yAxis') ||
        (layout === 'centric' && axisType === 'angleAxis') ||
        (layout === 'radial' && axisType === 'radiusAxis')
    )
}
var getCoordinatesOfGrid = function getCoordinatesOfGrid2(
    ticks2,
    minValue,
    maxValue,
    syncWithTicks
) {
    if (syncWithTicks) {
        return ticks2.map(function (entry) {
            return entry.coordinate
        })
    }
    var hasMin, hasMax
    var values = ticks2.map(function (entry) {
        if (entry.coordinate === minValue) {
            hasMin = true
        }
        if (entry.coordinate === maxValue) {
            hasMax = true
        }
        return entry.coordinate
    })
    if (!hasMin) {
        values.push(minValue)
    }
    if (!hasMax) {
        values.push(maxValue)
    }
    return values
}
var getTicksOfAxis = function getTicksOfAxis2(axis, isGrid, isAll) {
    if (!axis) return null
    var scale = axis.scale
    var duplicateDomain = axis.duplicateDomain,
        type = axis.type,
        range3 = axis.range
    var offsetForBand = axis.realScaleType === 'scaleBand' ? scale.bandwidth() / 2 : 2
    var offset =
        (isGrid || isAll) && type === 'category' && scale.bandwidth
            ? scale.bandwidth() / offsetForBand
            : 0
    offset =
        axis.axisType === 'angleAxis' &&
        (range3 === null || range3 === void 0 ? void 0 : range3.length) >= 2
            ? mathSign(range3[0] - range3[1]) * 2 * offset
            : offset
    if (isGrid && (axis.ticks || axis.niceTicks)) {
        var result = (axis.ticks || axis.niceTicks).map(function (entry) {
            var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry
            return {
                // If the scaleContent is not a number, the coordinate will be NaN.
                // That could be the case for example with a PointScale and a string as domain.
                coordinate: scale(scaleContent) + offset,
                value: entry,
                offset
            }
        })
        return result.filter(function (row) {
            return !isNan(row.coordinate)
        })
    }
    if (axis.isCategorical && axis.categoricalDomain) {
        return axis.categoricalDomain.map(function (entry, index2) {
            return {
                coordinate: scale(entry) + offset,
                value: entry,
                index: index2,
                offset
            }
        })
    }
    if (scale.ticks && !isAll) {
        return scale.ticks(axis.tickCount).map(function (entry) {
            return {
                coordinate: scale(entry) + offset,
                value: entry,
                offset
            }
        })
    }
    return scale.domain().map(function (entry, index2) {
        return {
            coordinate: scale(entry) + offset,
            value: duplicateDomain ? duplicateDomain[entry] : entry,
            index: index2,
            offset
        }
    })
}
var handlerWeakMap = /* @__PURE__ */ new WeakMap()
var combineEventHandlers = function combineEventHandlers2(defaultHandler, childHandler) {
    if (typeof childHandler !== 'function') {
        return defaultHandler
    }
    if (!handlerWeakMap.has(defaultHandler)) {
        handlerWeakMap.set(defaultHandler, /* @__PURE__ */ new WeakMap())
    }
    var childWeakMap = handlerWeakMap.get(defaultHandler)
    if (childWeakMap.has(childHandler)) {
        return childWeakMap.get(childHandler)
    }
    var combineHandler = function combineHandler2() {
        defaultHandler.apply(void 0, arguments)
        childHandler.apply(void 0, arguments)
    }
    childWeakMap.set(childHandler, combineHandler)
    return combineHandler
}
var parseScale = function parseScale2(axis, chartType, hasBar) {
    var scale = axis.scale,
        type = axis.type,
        layout = axis.layout,
        axisType = axis.axisType
    if (scale === 'auto') {
        if (layout === 'radial' && axisType === 'radiusAxis') {
            return {
                scale: band(),
                realScaleType: 'band'
            }
        }
        if (layout === 'radial' && axisType === 'angleAxis') {
            return {
                scale: linear(),
                realScaleType: 'linear'
            }
        }
        if (
            type === 'category' &&
            chartType &&
            (chartType.indexOf('LineChart') >= 0 ||
                chartType.indexOf('AreaChart') >= 0 ||
                (chartType.indexOf('ComposedChart') >= 0 && !hasBar))
        ) {
            return {
                scale: point(),
                realScaleType: 'point'
            }
        }
        if (type === 'category') {
            return {
                scale: band(),
                realScaleType: 'band'
            }
        }
        return {
            scale: linear(),
            realScaleType: 'linear'
        }
    }
    if (isString(scale)) {
        var name = 'scale'.concat(upperFirst(scale))
        return {
            scale: (d3Scales[name] || point)(),
            realScaleType: d3Scales[name] ? name : 'point'
        }
    }
    return isFunction(scale)
        ? {
              scale
          }
        : {
              scale: point(),
              realScaleType: 'point'
          }
}
var EPS = 1e-4
var checkDomainOfScale = function checkDomainOfScale2(scale) {
    var domain = scale.domain()
    if (!domain || domain.length <= 2) {
        return
    }
    var len = domain.length
    var range3 = scale.range()
    var minValue = Math.min(range3[0], range3[1]) - EPS
    var maxValue = Math.max(range3[0], range3[1]) + EPS
    var first2 = scale(domain[0])
    var last2 = scale(domain[len - 1])
    if (first2 < minValue || first2 > maxValue || last2 < minValue || last2 > maxValue) {
        scale.domain([domain[0], domain[len - 1]])
    }
}
var findPositionOfBar = function findPositionOfBar2(barPosition, child) {
    if (!barPosition) {
        return null
    }
    for (var i = 0, len = barPosition.length; i < len; i++) {
        if (barPosition[i].item === child) {
            return barPosition[i].position
        }
    }
    return null
}
var truncateByDomain = function truncateByDomain2(value, domain) {
    if (!domain || domain.length !== 2 || !isNumber(domain[0]) || !isNumber(domain[1])) {
        return value
    }
    var minValue = Math.min(domain[0], domain[1])
    var maxValue = Math.max(domain[0], domain[1])
    var result = [value[0], value[1]]
    if (!isNumber(value[0]) || value[0] < minValue) {
        result[0] = minValue
    }
    if (!isNumber(value[1]) || value[1] > maxValue) {
        result[1] = maxValue
    }
    if (result[0] > maxValue) {
        result[0] = maxValue
    }
    if (result[1] < minValue) {
        result[1] = minValue
    }
    return result
}
var offsetSign = function offsetSign2(series) {
    var n = series.length
    if (n <= 0) {
        return
    }
    for (var j = 0, m = series[0].length; j < m; ++j) {
        var positive = 0
        var negative = 0
        for (var i = 0; i < n; ++i) {
            var value = isNan(series[i][j][1]) ? series[i][j][0] : series[i][j][1]
            if (value >= 0) {
                series[i][j][0] = positive
                series[i][j][1] = positive + value
                positive = series[i][j][1]
            } else {
                series[i][j][0] = negative
                series[i][j][1] = negative + value
                negative = series[i][j][1]
            }
        }
    }
}
var offsetPositive = function offsetPositive2(series) {
    var n = series.length
    if (n <= 0) {
        return
    }
    for (var j = 0, m = series[0].length; j < m; ++j) {
        var positive = 0
        for (var i = 0; i < n; ++i) {
            var value = isNan(series[i][j][1]) ? series[i][j][0] : series[i][j][1]
            if (value >= 0) {
                series[i][j][0] = positive
                series[i][j][1] = positive + value
                positive = series[i][j][1]
            } else {
                series[i][j][0] = 0
                series[i][j][1] = 0
            }
        }
    }
}
var STACK_OFFSET_MAP = {
    sign: offsetSign,
    // @ts-expect-error definitelytyped types are incorrect
    expand: stackOffsetExpand,
    // @ts-expect-error definitelytyped types are incorrect
    none: stackOffsetNone,
    // @ts-expect-error definitelytyped types are incorrect
    silhouette: stackOffsetSilhouette,
    // @ts-expect-error definitelytyped types are incorrect
    wiggle: stackOffsetWiggle,
    positive: offsetPositive
}
var getStackedData = function getStackedData2(data, stackItems, offsetType) {
    var dataKeys = stackItems.map(function (item) {
        return item.props.dataKey
    })
    var offsetAccessor = STACK_OFFSET_MAP[offsetType]
    var stack = shapeStack()
        .keys(dataKeys)
        .value(function (d, key) {
            return +getValueByDataKey(d, key, 0)
        })
        .order(stackOrderNone)
        .offset(offsetAccessor)
    return stack(data)
}
var getStackGroupsByAxisId = function getStackGroupsByAxisId2(
    data,
    _items,
    numericAxisId,
    cateAxisId,
    offsetType,
    reverseStackOrder
) {
    if (!data) {
        return null
    }
    var items = reverseStackOrder ? _items.reverse() : _items
    var parentStackGroupsInitialValue = {}
    var stackGroups = items.reduce(function (result, item) {
        var _item$type2
        var defaultedProps =
            (_item$type2 = item.type) !== null && _item$type2 !== void 0 && _item$type2.defaultProps
                ? _objectSpread$w(_objectSpread$w({}, item.type.defaultProps), item.props)
                : item.props
        var stackId = defaultedProps.stackId,
            hide = defaultedProps.hide
        if (hide) {
            return result
        }
        var axisId = defaultedProps[numericAxisId]
        var parentGroup = result[axisId] || {
            hasStack: false,
            stackGroups: {}
        }
        if (isNumOrStr(stackId)) {
            var childGroup = parentGroup.stackGroups[stackId] || {
                numericAxisId,
                cateAxisId,
                items: []
            }
            childGroup.items.push(item)
            parentGroup.hasStack = true
            parentGroup.stackGroups[stackId] = childGroup
        } else {
            parentGroup.stackGroups[uniqueId('_stackId_')] = {
                numericAxisId,
                cateAxisId,
                items: [item]
            }
        }
        return _objectSpread$w(
            _objectSpread$w({}, result),
            {},
            _defineProperty$A({}, axisId, parentGroup)
        )
    }, parentStackGroupsInitialValue)
    var axisStackGroupsInitialValue = {}
    return Object.keys(stackGroups).reduce(function (result, axisId) {
        var group = stackGroups[axisId]
        if (group.hasStack) {
            var stackGroupsInitialValue = {}
            group.stackGroups = Object.keys(group.stackGroups).reduce(function (res, stackId) {
                var g = group.stackGroups[stackId]
                return _objectSpread$w(
                    _objectSpread$w({}, res),
                    {},
                    _defineProperty$A({}, stackId, {
                        numericAxisId,
                        cateAxisId,
                        items: g.items,
                        stackedData: getStackedData(data, g.items, offsetType)
                    })
                )
            }, stackGroupsInitialValue)
        }
        return _objectSpread$w(
            _objectSpread$w({}, result),
            {},
            _defineProperty$A({}, axisId, group)
        )
    }, axisStackGroupsInitialValue)
}
var getTicksOfScale = function getTicksOfScale2(scale, opts) {
    var realScaleType = opts.realScaleType,
        type = opts.type,
        tickCount = opts.tickCount,
        originalDomain = opts.originalDomain,
        allowDecimals = opts.allowDecimals
    var scaleType = realScaleType || opts.scale
    if (scaleType !== 'auto' && scaleType !== 'linear') {
        return null
    }
    if (
        tickCount &&
        type === 'number' &&
        originalDomain &&
        (originalDomain[0] === 'auto' || originalDomain[1] === 'auto')
    ) {
        var domain = scale.domain()
        if (!domain.length) {
            return null
        }
        var tickValues = getNiceTickValues(domain, tickCount, allowDecimals)
        scale.domain([min$1(tickValues), max$1(tickValues)])
        return {
            niceTicks: tickValues
        }
    }
    if (tickCount && type === 'number') {
        var _domain = scale.domain()
        var _tickValues = getTickValuesFixedDomain(_domain, tickCount, allowDecimals)
        return {
            niceTicks: _tickValues
        }
    }
    return null
}
function getCateCoordinateOfLine(_ref5) {
    var axis = _ref5.axis,
        ticks2 = _ref5.ticks,
        bandSize = _ref5.bandSize,
        entry = _ref5.entry,
        index2 = _ref5.index,
        dataKey = _ref5.dataKey
    if (axis.type === 'category') {
        if (!axis.allowDuplicatedCategory && axis.dataKey && !isNil(entry[axis.dataKey])) {
            var matchedTick = findEntryInArray(ticks2, 'value', entry[axis.dataKey])
            if (matchedTick) {
                return matchedTick.coordinate + bandSize / 2
            }
        }
        return ticks2[index2] ? ticks2[index2].coordinate + bandSize / 2 : null
    }
    var value = getValueByDataKey(entry, !isNil(dataKey) ? dataKey : axis.dataKey)
    return !isNil(value) ? axis.scale(value) : null
}
var getCateCoordinateOfBar = function getCateCoordinateOfBar2(_ref6) {
    var axis = _ref6.axis,
        ticks2 = _ref6.ticks,
        offset = _ref6.offset,
        bandSize = _ref6.bandSize,
        entry = _ref6.entry,
        index2 = _ref6.index
    if (axis.type === 'category') {
        return ticks2[index2] ? ticks2[index2].coordinate + offset : null
    }
    var value = getValueByDataKey(entry, axis.dataKey, axis.domain[index2])
    return !isNil(value) ? axis.scale(value) - bandSize / 2 + offset : null
}
var getBaseValueOfBar = function getBaseValueOfBar2(_ref7) {
    var numericAxis = _ref7.numericAxis
    var domain = numericAxis.scale.domain()
    if (numericAxis.type === 'number') {
        var minValue = Math.min(domain[0], domain[1])
        var maxValue = Math.max(domain[0], domain[1])
        if (minValue <= 0 && maxValue >= 0) {
            return 0
        }
        if (maxValue < 0) {
            return maxValue
        }
        return minValue
    }
    return domain[0]
}
var getStackedDataOfItem = function getStackedDataOfItem2(item, stackGroups) {
    var _item$type3
    var defaultedProps =
        (_item$type3 = item.type) !== null && _item$type3 !== void 0 && _item$type3.defaultProps
            ? _objectSpread$w(_objectSpread$w({}, item.type.defaultProps), item.props)
            : item.props
    var stackId = defaultedProps.stackId
    if (isNumOrStr(stackId)) {
        var group = stackGroups[stackId]
        if (group) {
            var itemIndex = group.items.indexOf(item)
            return itemIndex >= 0 ? group.stackedData[itemIndex] : null
        }
    }
    return null
}
var getDomainOfSingle = function getDomainOfSingle2(data) {
    return data.reduce(
        function (result, entry) {
            return [
                min$1(entry.concat([result[0]]).filter(isNumber)),
                max$1(entry.concat([result[1]]).filter(isNumber))
            ]
        },
        [Infinity, -Infinity]
    )
}
var getDomainOfStackGroups = function getDomainOfStackGroups2(stackGroups, startIndex, endIndex) {
    return Object.keys(stackGroups)
        .reduce(
            function (result, stackId) {
                var group = stackGroups[stackId]
                var stackedData = group.stackedData
                var domain = stackedData.reduce(
                    function (res, entry) {
                        var s2 = getDomainOfSingle(entry.slice(startIndex, endIndex + 1))
                        return [Math.min(res[0], s2[0]), Math.max(res[1], s2[1])]
                    },
                    [Infinity, -Infinity]
                )
                return [Math.min(domain[0], result[0]), Math.max(domain[1], result[1])]
            },
            [Infinity, -Infinity]
        )
        .map(function (result) {
            return result === Infinity || result === -Infinity ? 0 : result
        })
}
var MIN_VALUE_REG = /^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/
var MAX_VALUE_REG = /^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/
var parseSpecifiedDomain = function parseSpecifiedDomain2(
    specifiedDomain,
    dataDomain,
    allowDataOverflow
) {
    if (isFunction(specifiedDomain)) {
        return specifiedDomain(dataDomain, allowDataOverflow)
    }
    if (!Array.isArray(specifiedDomain)) {
        return dataDomain
    }
    var domain = []
    if (isNumber(specifiedDomain[0])) {
        domain[0] = allowDataOverflow
            ? specifiedDomain[0]
            : Math.min(specifiedDomain[0], dataDomain[0])
    } else if (MIN_VALUE_REG.test(specifiedDomain[0])) {
        var value = +MIN_VALUE_REG.exec(specifiedDomain[0])[1]
        domain[0] = dataDomain[0] - value
    } else if (isFunction(specifiedDomain[0])) {
        domain[0] = specifiedDomain[0](dataDomain[0])
    } else {
        domain[0] = dataDomain[0]
    }
    if (isNumber(specifiedDomain[1])) {
        domain[1] = allowDataOverflow
            ? specifiedDomain[1]
            : Math.max(specifiedDomain[1], dataDomain[1])
    } else if (MAX_VALUE_REG.test(specifiedDomain[1])) {
        var _value = +MAX_VALUE_REG.exec(specifiedDomain[1])[1]
        domain[1] = dataDomain[1] + _value
    } else if (isFunction(specifiedDomain[1])) {
        domain[1] = specifiedDomain[1](dataDomain[1])
    } else {
        domain[1] = dataDomain[1]
    }
    return domain
}
var getBandSizeOfAxis = function getBandSizeOfAxis2(axis, ticks2, isBar) {
    if (axis && axis.scale && axis.scale.bandwidth) {
        var bandWidth = axis.scale.bandwidth()
        if (!isBar || bandWidth > 0) {
            return bandWidth
        }
    }
    if (axis && ticks2 && ticks2.length >= 2) {
        var orderedTicks = sortBy(ticks2, function (o) {
            return o.coordinate
        })
        var bandSize = Infinity
        for (var i = 1, len = orderedTicks.length; i < len; i++) {
            var cur = orderedTicks[i]
            var prev2 = orderedTicks[i - 1]
            bandSize = Math.min((cur.coordinate || 0) - (prev2.coordinate || 0), bandSize)
        }
        return bandSize === Infinity ? 0 : bandSize
    }
    return isBar ? void 0 : 0
}
var parseDomainOfCategoryAxis = function parseDomainOfCategoryAxis2(
    specifiedDomain,
    calculatedDomain,
    axisChild
) {
    if (!specifiedDomain || !specifiedDomain.length) {
        return calculatedDomain
    }
    if (isEqual$1(specifiedDomain, get(axisChild, 'type.defaultProps.domain'))) {
        return calculatedDomain
    }
    return specifiedDomain
}
var getTooltipItem = function getTooltipItem2(graphicalItem, payload) {
    var defaultedProps = graphicalItem.type.defaultProps
        ? _objectSpread$w(_objectSpread$w({}, graphicalItem.type.defaultProps), graphicalItem.props)
        : graphicalItem.props
    var dataKey = defaultedProps.dataKey,
        name = defaultedProps.name,
        unit2 = defaultedProps.unit,
        formatter = defaultedProps.formatter,
        tooltipType = defaultedProps.tooltipType,
        chartType = defaultedProps.chartType,
        hide = defaultedProps.hide
    return _objectSpread$w(
        _objectSpread$w({}, filterProps(graphicalItem, false)),
        {},
        {
            dataKey,
            unit: unit2,
            formatter,
            name: name || dataKey,
            color: getMainColorOfGraphicItem(graphicalItem),
            value: getValueByDataKey(payload, dataKey),
            type: tooltipType,
            payload,
            chartType,
            hide
        }
    )
}
function _typeof$A(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$A =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$A(o)
    )
}
function ownKeys$w(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$v(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$w(Object(t), true).forEach(function (r3) {
                  _defineProperty$z(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$w(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$z(obj, key, value) {
    key = _toPropertyKey$y(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$y(t) {
    var i = _toPrimitive$y(t, 'string')
    return 'symbol' == _typeof$A(i) ? i : i + ''
}
function _toPrimitive$y(t, r2) {
    if ('object' != _typeof$A(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$A(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function _slicedToArray$7(arr, i) {
    return (
        _arrayWithHoles$8(arr) ||
        _iterableToArrayLimit$7(arr, i) ||
        _unsupportedIterableToArray$e(arr, i) ||
        _nonIterableRest$8()
    )
}
function _nonIterableRest$8() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$e(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$e(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$e(o, minLen)
}
function _arrayLikeToArray$e(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$7(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$8(arr) {
    if (Array.isArray(arr)) return arr
}
var RADIAN$2 = Math.PI / 180
var radianToDegree = function radianToDegree2(angleInRadian) {
    return (angleInRadian * 180) / Math.PI
}
var polarToCartesian = function polarToCartesian2(cx, cy, radius, angle) {
    return {
        x: cx + Math.cos(-RADIAN$2 * angle) * radius,
        y: cy + Math.sin(-RADIAN$2 * angle) * radius
    }
}
var getMaxRadius = function getMaxRadius2(width, height) {
    var offset =
        arguments.length > 2 && arguments[2] !== void 0
            ? arguments[2]
            : {
                  top: 0,
                  right: 0,
                  bottom: 0,
                  left: 0
              }
    return (
        Math.min(
            Math.abs(width - (offset.left || 0) - (offset.right || 0)),
            Math.abs(height - (offset.top || 0) - (offset.bottom || 0))
        ) / 2
    )
}
var formatAxisMap$1 = function formatAxisMap(props, axisMap, offset, axisType, chartName) {
    var width = props.width,
        height = props.height
    var startAngle = props.startAngle,
        endAngle = props.endAngle
    var cx = getPercentValue(props.cx, width, width / 2)
    var cy = getPercentValue(props.cy, height, height / 2)
    var maxRadius = getMaxRadius(width, height, offset)
    var innerRadius = getPercentValue(props.innerRadius, maxRadius, 0)
    var outerRadius = getPercentValue(props.outerRadius, maxRadius, maxRadius * 0.8)
    var ids = Object.keys(axisMap)
    return ids.reduce(function (result, id) {
        var axis = axisMap[id]
        var domain = axis.domain,
            reversed = axis.reversed
        var range3
        if (isNil(axis.range)) {
            if (axisType === 'angleAxis') {
                range3 = [startAngle, endAngle]
            } else if (axisType === 'radiusAxis') {
                range3 = [innerRadius, outerRadius]
            }
            if (reversed) {
                range3 = [range3[1], range3[0]]
            }
        } else {
            range3 = axis.range
            var _range = range3
            var _range2 = _slicedToArray$7(_range, 2)
            startAngle = _range2[0]
            endAngle = _range2[1]
        }
        var _parseScale = parseScale(axis, chartName),
            realScaleType = _parseScale.realScaleType,
            scale = _parseScale.scale
        scale.domain(domain).range(range3)
        checkDomainOfScale(scale)
        var ticks2 = getTicksOfScale(
            scale,
            _objectSpread$v(
                _objectSpread$v({}, axis),
                {},
                {
                    realScaleType
                }
            )
        )
        var finalAxis = _objectSpread$v(
            _objectSpread$v(_objectSpread$v({}, axis), ticks2),
            {},
            {
                range: range3,
                radius: outerRadius,
                realScaleType,
                scale,
                cx,
                cy,
                innerRadius,
                outerRadius,
                startAngle,
                endAngle
            }
        )
        return _objectSpread$v(
            _objectSpread$v({}, result),
            {},
            _defineProperty$z({}, id, finalAxis)
        )
    }, {})
}
var distanceBetweenPoints = function distanceBetweenPoints2(point2, anotherPoint) {
    var x1 = point2.x,
        y1 = point2.y
    var x2 = anotherPoint.x,
        y2 = anotherPoint.y
    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))
}
var getAngleOfPoint = function getAngleOfPoint2(_ref3, _ref22) {
    var x2 = _ref3.x,
        y2 = _ref3.y
    var cx = _ref22.cx,
        cy = _ref22.cy
    var radius = distanceBetweenPoints(
        {
            x: x2,
            y: y2
        },
        {
            x: cx,
            y: cy
        }
    )
    if (radius <= 0) {
        return {
            radius
        }
    }
    var cos2 = (x2 - cx) / radius
    var angleInRadian = Math.acos(cos2)
    if (y2 > cy) {
        angleInRadian = 2 * Math.PI - angleInRadian
    }
    return {
        radius,
        angle: radianToDegree(angleInRadian),
        angleInRadian
    }
}
var formatAngleOfSector = function formatAngleOfSector2(_ref3) {
    var startAngle = _ref3.startAngle,
        endAngle = _ref3.endAngle
    var startCnt = Math.floor(startAngle / 360)
    var endCnt = Math.floor(endAngle / 360)
    var min2 = Math.min(startCnt, endCnt)
    return {
        startAngle: startAngle - min2 * 360,
        endAngle: endAngle - min2 * 360
    }
}
var reverseFormatAngleOfSetor = function reverseFormatAngleOfSetor2(angle, _ref4) {
    var startAngle = _ref4.startAngle,
        endAngle = _ref4.endAngle
    var startCnt = Math.floor(startAngle / 360)
    var endCnt = Math.floor(endAngle / 360)
    var min2 = Math.min(startCnt, endCnt)
    return angle + min2 * 360
}
var inRangeOfSector = function inRangeOfSector2(_ref5, sector) {
    var x2 = _ref5.x,
        y2 = _ref5.y
    var _getAngleOfPoint = getAngleOfPoint(
            {
                x: x2,
                y: y2
            },
            sector
        ),
        radius = _getAngleOfPoint.radius,
        angle = _getAngleOfPoint.angle
    var innerRadius = sector.innerRadius,
        outerRadius = sector.outerRadius
    if (radius < innerRadius || radius > outerRadius) {
        return false
    }
    if (radius === 0) {
        return true
    }
    var _formatAngleOfSector = formatAngleOfSector(sector),
        startAngle = _formatAngleOfSector.startAngle,
        endAngle = _formatAngleOfSector.endAngle
    var formatAngle = angle
    var inRange
    if (startAngle <= endAngle) {
        while (formatAngle > endAngle) {
            formatAngle -= 360
        }
        while (formatAngle < startAngle) {
            formatAngle += 360
        }
        inRange = formatAngle >= startAngle && formatAngle <= endAngle
    } else {
        while (formatAngle > startAngle) {
            formatAngle -= 360
        }
        while (formatAngle < endAngle) {
            formatAngle += 360
        }
        inRange = formatAngle >= endAngle && formatAngle <= startAngle
    }
    if (inRange) {
        return _objectSpread$v(
            _objectSpread$v({}, sector),
            {},
            {
                radius,
                angle: reverseFormatAngleOfSetor(formatAngle, sector)
            }
        )
    }
    return null
}
var getTickClassName = function getTickClassName2(tick) {
    return !(/* @__PURE__ */ reactExports.isValidElement(tick)) &&
        !isFunction(tick) &&
        typeof tick !== 'boolean'
        ? tick.className
        : ''
}
function _typeof$z(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$z =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$z(o)
    )
}
var _excluded$m = ['offset']
function _toConsumableArray$9(arr) {
    return (
        _arrayWithoutHoles$9(arr) ||
        _iterableToArray$a(arr) ||
        _unsupportedIterableToArray$d(arr) ||
        _nonIterableSpread$9()
    )
}
function _nonIterableSpread$9() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$d(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$d(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$d(o, minLen)
}
function _iterableToArray$a(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$9(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$d(arr)
}
function _arrayLikeToArray$d(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _objectWithoutProperties$g(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$g(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$g(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function ownKeys$v(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$u(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$v(Object(t), true).forEach(function (r3) {
                  _defineProperty$y(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$v(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$y(obj, key, value) {
    key = _toPropertyKey$x(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$x(t) {
    var i = _toPrimitive$x(t, 'string')
    return 'symbol' == _typeof$z(i) ? i : i + ''
}
function _toPrimitive$x(t, r2) {
    if ('object' != _typeof$z(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$z(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function _extends$r() {
    _extends$r = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$r.apply(this, arguments)
}
var getLabel = function getLabel2(props) {
    var value = props.value,
        formatter = props.formatter
    var label = isNil(props.children) ? value : props.children
    if (isFunction(formatter)) {
        return formatter(label)
    }
    return label
}
var getDeltaAngle$1 = function getDeltaAngle(startAngle, endAngle) {
    var sign2 = mathSign(endAngle - startAngle)
    var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360)
    return sign2 * deltaAngle
}
var renderRadialLabel = function renderRadialLabel2(labelProps, label, attrs) {
    var position2 = labelProps.position,
        viewBox = labelProps.viewBox,
        offset = labelProps.offset,
        className = labelProps.className
    var _ref3 = viewBox,
        cx = _ref3.cx,
        cy = _ref3.cy,
        innerRadius = _ref3.innerRadius,
        outerRadius = _ref3.outerRadius,
        startAngle = _ref3.startAngle,
        endAngle = _ref3.endAngle,
        clockWise = _ref3.clockWise
    var radius = (innerRadius + outerRadius) / 2
    var deltaAngle = getDeltaAngle$1(startAngle, endAngle)
    var sign2 = deltaAngle >= 0 ? 1 : -1
    var labelAngle, direction
    if (position2 === 'insideStart') {
        labelAngle = startAngle + sign2 * offset
        direction = clockWise
    } else if (position2 === 'insideEnd') {
        labelAngle = endAngle - sign2 * offset
        direction = !clockWise
    } else if (position2 === 'end') {
        labelAngle = endAngle + sign2 * offset
        direction = clockWise
    }
    direction = deltaAngle <= 0 ? direction : !direction
    var startPoint = polarToCartesian(cx, cy, radius, labelAngle)
    var endPoint = polarToCartesian(cx, cy, radius, labelAngle + (direction ? 1 : -1) * 359)
    var path = 'M'
        .concat(startPoint.x, ',')
        .concat(startPoint.y, '\n    A')
        .concat(radius, ',')
        .concat(radius, ',0,1,')
        .concat(direction ? 0 : 1, ',\n    ')
        .concat(endPoint.x, ',')
        .concat(endPoint.y)
    var id = isNil(labelProps.id) ? uniqueId('recharts-radial-line-') : labelProps.id
    return /* @__PURE__ */ React.createElement(
        'text',
        _extends$r({}, attrs, {
            dominantBaseline: 'central',
            className: clsx('recharts-radial-bar-label', className)
        }),
        /* @__PURE__ */ React.createElement(
            'defs',
            null,
            /* @__PURE__ */ React.createElement('path', {
                id,
                d: path
            })
        ),
        /* @__PURE__ */ React.createElement(
            'textPath',
            {
                xlinkHref: '#'.concat(id)
            },
            label
        )
    )
}
var getAttrsOfPolarLabel = function getAttrsOfPolarLabel2(props) {
    var viewBox = props.viewBox,
        offset = props.offset,
        position2 = props.position
    var _ref22 = viewBox,
        cx = _ref22.cx,
        cy = _ref22.cy,
        innerRadius = _ref22.innerRadius,
        outerRadius = _ref22.outerRadius,
        startAngle = _ref22.startAngle,
        endAngle = _ref22.endAngle
    var midAngle = (startAngle + endAngle) / 2
    if (position2 === 'outside') {
        var _polarToCartesian = polarToCartesian(cx, cy, outerRadius + offset, midAngle),
            _x = _polarToCartesian.x,
            _y = _polarToCartesian.y
        return {
            x: _x,
            y: _y,
            textAnchor: _x >= cx ? 'start' : 'end',
            verticalAnchor: 'middle'
        }
    }
    if (position2 === 'center') {
        return {
            x: cx,
            y: cy,
            textAnchor: 'middle',
            verticalAnchor: 'middle'
        }
    }
    if (position2 === 'centerTop') {
        return {
            x: cx,
            y: cy,
            textAnchor: 'middle',
            verticalAnchor: 'start'
        }
    }
    if (position2 === 'centerBottom') {
        return {
            x: cx,
            y: cy,
            textAnchor: 'middle',
            verticalAnchor: 'end'
        }
    }
    var r2 = (innerRadius + outerRadius) / 2
    var _polarToCartesian2 = polarToCartesian(cx, cy, r2, midAngle),
        x2 = _polarToCartesian2.x,
        y2 = _polarToCartesian2.y
    return {
        x: x2,
        y: y2,
        textAnchor: 'middle',
        verticalAnchor: 'middle'
    }
}
var getAttrsOfCartesianLabel = function getAttrsOfCartesianLabel2(props) {
    var viewBox = props.viewBox,
        parentViewBox = props.parentViewBox,
        offset = props.offset,
        position2 = props.position
    var _ref3 = viewBox,
        x2 = _ref3.x,
        y2 = _ref3.y,
        width = _ref3.width,
        height = _ref3.height
    var verticalSign = height >= 0 ? 1 : -1
    var verticalOffset = verticalSign * offset
    var verticalEnd = verticalSign > 0 ? 'end' : 'start'
    var verticalStart = verticalSign > 0 ? 'start' : 'end'
    var horizontalSign = width >= 0 ? 1 : -1
    var horizontalOffset = horizontalSign * offset
    var horizontalEnd = horizontalSign > 0 ? 'end' : 'start'
    var horizontalStart = horizontalSign > 0 ? 'start' : 'end'
    if (position2 === 'top') {
        var attrs = {
            x: x2 + width / 2,
            y: y2 - verticalSign * offset,
            textAnchor: 'middle',
            verticalAnchor: verticalEnd
        }
        return _objectSpread$u(
            _objectSpread$u({}, attrs),
            parentViewBox
                ? {
                      height: Math.max(y2 - parentViewBox.y, 0),
                      width
                  }
                : {}
        )
    }
    if (position2 === 'bottom') {
        var _attrs = {
            x: x2 + width / 2,
            y: y2 + height + verticalOffset,
            textAnchor: 'middle',
            verticalAnchor: verticalStart
        }
        return _objectSpread$u(
            _objectSpread$u({}, _attrs),
            parentViewBox
                ? {
                      height: Math.max(parentViewBox.y + parentViewBox.height - (y2 + height), 0),
                      width
                  }
                : {}
        )
    }
    if (position2 === 'left') {
        var _attrs2 = {
            x: x2 - horizontalOffset,
            y: y2 + height / 2,
            textAnchor: horizontalEnd,
            verticalAnchor: 'middle'
        }
        return _objectSpread$u(
            _objectSpread$u({}, _attrs2),
            parentViewBox
                ? {
                      width: Math.max(_attrs2.x - parentViewBox.x, 0),
                      height
                  }
                : {}
        )
    }
    if (position2 === 'right') {
        var _attrs3 = {
            x: x2 + width + horizontalOffset,
            y: y2 + height / 2,
            textAnchor: horizontalStart,
            verticalAnchor: 'middle'
        }
        return _objectSpread$u(
            _objectSpread$u({}, _attrs3),
            parentViewBox
                ? {
                      width: Math.max(parentViewBox.x + parentViewBox.width - _attrs3.x, 0),
                      height
                  }
                : {}
        )
    }
    var sizeAttrs = parentViewBox
        ? {
              width,
              height
          }
        : {}
    if (position2 === 'insideLeft') {
        return _objectSpread$u(
            {
                x: x2 + horizontalOffset,
                y: y2 + height / 2,
                textAnchor: horizontalStart,
                verticalAnchor: 'middle'
            },
            sizeAttrs
        )
    }
    if (position2 === 'insideRight') {
        return _objectSpread$u(
            {
                x: x2 + width - horizontalOffset,
                y: y2 + height / 2,
                textAnchor: horizontalEnd,
                verticalAnchor: 'middle'
            },
            sizeAttrs
        )
    }
    if (position2 === 'insideTop') {
        return _objectSpread$u(
            {
                x: x2 + width / 2,
                y: y2 + verticalOffset,
                textAnchor: 'middle',
                verticalAnchor: verticalStart
            },
            sizeAttrs
        )
    }
    if (position2 === 'insideBottom') {
        return _objectSpread$u(
            {
                x: x2 + width / 2,
                y: y2 + height - verticalOffset,
                textAnchor: 'middle',
                verticalAnchor: verticalEnd
            },
            sizeAttrs
        )
    }
    if (position2 === 'insideTopLeft') {
        return _objectSpread$u(
            {
                x: x2 + horizontalOffset,
                y: y2 + verticalOffset,
                textAnchor: horizontalStart,
                verticalAnchor: verticalStart
            },
            sizeAttrs
        )
    }
    if (position2 === 'insideTopRight') {
        return _objectSpread$u(
            {
                x: x2 + width - horizontalOffset,
                y: y2 + verticalOffset,
                textAnchor: horizontalEnd,
                verticalAnchor: verticalStart
            },
            sizeAttrs
        )
    }
    if (position2 === 'insideBottomLeft') {
        return _objectSpread$u(
            {
                x: x2 + horizontalOffset,
                y: y2 + height - verticalOffset,
                textAnchor: horizontalStart,
                verticalAnchor: verticalEnd
            },
            sizeAttrs
        )
    }
    if (position2 === 'insideBottomRight') {
        return _objectSpread$u(
            {
                x: x2 + width - horizontalOffset,
                y: y2 + height - verticalOffset,
                textAnchor: horizontalEnd,
                verticalAnchor: verticalEnd
            },
            sizeAttrs
        )
    }
    if (
        isObject(position2) &&
        (isNumber(position2.x) || isPercent(position2.x)) &&
        (isNumber(position2.y) || isPercent(position2.y))
    ) {
        return _objectSpread$u(
            {
                x: x2 + getPercentValue(position2.x, width),
                y: y2 + getPercentValue(position2.y, height),
                textAnchor: 'end',
                verticalAnchor: 'end'
            },
            sizeAttrs
        )
    }
    return _objectSpread$u(
        {
            x: x2 + width / 2,
            y: y2 + height / 2,
            textAnchor: 'middle',
            verticalAnchor: 'middle'
        },
        sizeAttrs
    )
}
var isPolar = function isPolar2(viewBox) {
    return 'cx' in viewBox && isNumber(viewBox.cx)
}
function Label(_ref4) {
    var _ref4$offset = _ref4.offset,
        offset = _ref4$offset === void 0 ? 5 : _ref4$offset,
        restProps = _objectWithoutProperties$g(_ref4, _excluded$m)
    var props = _objectSpread$u(
        {
            offset
        },
        restProps
    )
    var viewBox = props.viewBox,
        position2 = props.position,
        value = props.value,
        children = props.children,
        content = props.content,
        _props$className = props.className,
        className = _props$className === void 0 ? '' : _props$className,
        textBreakAll = props.textBreakAll
    if (
        !viewBox ||
        (isNil(value) &&
            isNil(children) &&
            !(/* @__PURE__ */ reactExports.isValidElement(content)) &&
            !isFunction(content))
    ) {
        return null
    }
    if (/* @__PURE__ */ reactExports.isValidElement(content)) {
        return /* @__PURE__ */ reactExports.cloneElement(content, props)
    }
    var label
    if (isFunction(content)) {
        label = /* @__PURE__ */ reactExports.createElement(content, props)
        if (/* @__PURE__ */ reactExports.isValidElement(label)) {
            return label
        }
    } else {
        label = getLabel(props)
    }
    var isPolarLabel = isPolar(viewBox)
    var attrs = filterProps(props, true)
    if (
        isPolarLabel &&
        (position2 === 'insideStart' || position2 === 'insideEnd' || position2 === 'end')
    ) {
        return renderRadialLabel(props, label, attrs)
    }
    var positionAttrs = isPolarLabel ? getAttrsOfPolarLabel(props) : getAttrsOfCartesianLabel(props)
    return /* @__PURE__ */ React.createElement(
        Text,
        _extends$r(
            {
                className: clsx('recharts-label', className)
            },
            attrs,
            positionAttrs,
            {
                breakAll: textBreakAll
            }
        ),
        label
    )
}
Label.displayName = 'Label'
var parseViewBox = function parseViewBox2(props) {
    var cx = props.cx,
        cy = props.cy,
        angle = props.angle,
        startAngle = props.startAngle,
        endAngle = props.endAngle,
        r2 = props.r,
        radius = props.radius,
        innerRadius = props.innerRadius,
        outerRadius = props.outerRadius,
        x2 = props.x,
        y2 = props.y,
        top = props.top,
        left = props.left,
        width = props.width,
        height = props.height,
        clockWise = props.clockWise,
        labelViewBox = props.labelViewBox
    if (labelViewBox) {
        return labelViewBox
    }
    if (isNumber(width) && isNumber(height)) {
        if (isNumber(x2) && isNumber(y2)) {
            return {
                x: x2,
                y: y2,
                width,
                height
            }
        }
        if (isNumber(top) && isNumber(left)) {
            return {
                x: top,
                y: left,
                width,
                height
            }
        }
    }
    if (isNumber(x2) && isNumber(y2)) {
        return {
            x: x2,
            y: y2,
            width: 0,
            height: 0
        }
    }
    if (isNumber(cx) && isNumber(cy)) {
        return {
            cx,
            cy,
            startAngle: startAngle || angle || 0,
            endAngle: endAngle || angle || 0,
            innerRadius: innerRadius || 0,
            outerRadius: outerRadius || radius || r2 || 0,
            clockWise
        }
    }
    if (props.viewBox) {
        return props.viewBox
    }
    return {}
}
var parseLabel = function parseLabel2(label, viewBox) {
    if (!label) {
        return null
    }
    if (label === true) {
        return /* @__PURE__ */ React.createElement(Label, {
            key: 'label-implicit',
            viewBox
        })
    }
    if (isNumOrStr(label)) {
        return /* @__PURE__ */ React.createElement(Label, {
            key: 'label-implicit',
            viewBox,
            value: label
        })
    }
    if (/* @__PURE__ */ reactExports.isValidElement(label)) {
        if (label.type === Label) {
            return /* @__PURE__ */ reactExports.cloneElement(label, {
                key: 'label-implicit',
                viewBox
            })
        }
        return /* @__PURE__ */ React.createElement(Label, {
            key: 'label-implicit',
            content: label,
            viewBox
        })
    }
    if (isFunction(label)) {
        return /* @__PURE__ */ React.createElement(Label, {
            key: 'label-implicit',
            content: label,
            viewBox
        })
    }
    if (isObject(label)) {
        return /* @__PURE__ */ React.createElement(
            Label,
            _extends$r(
                {
                    viewBox
                },
                label,
                {
                    key: 'label-implicit'
                }
            )
        )
    }
    return null
}
var renderCallByParent$1 = function renderCallByParent(parentProps, viewBox) {
    var checkPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true
    if (!parentProps || (!parentProps.children && checkPropsLabel && !parentProps.label)) {
        return null
    }
    var children = parentProps.children
    var parentViewBox = parseViewBox(parentProps)
    var explicitChildren = findAllByType(children, Label).map(function (child, index2) {
        return /* @__PURE__ */ reactExports.cloneElement(child, {
            viewBox: viewBox || parentViewBox,
            // eslint-disable-next-line react/no-array-index-key
            key: 'label-'.concat(index2)
        })
    })
    if (!checkPropsLabel) {
        return explicitChildren
    }
    var implicitLabel = parseLabel(parentProps.label, viewBox || parentViewBox)
    return [implicitLabel].concat(_toConsumableArray$9(explicitChildren))
}
Label.parseViewBox = parseViewBox
Label.renderCallByParent = renderCallByParent$1
var last_1
var hasRequiredLast
function requireLast() {
    if (hasRequiredLast) return last_1
    hasRequiredLast = 1
    function last2(array2) {
        var length2 = array2 == null ? 0 : array2.length
        return length2 ? array2[length2 - 1] : void 0
    }
    last_1 = last2
    return last_1
}
var lastExports = requireLast()
const last = /* @__PURE__ */ getDefaultExportFromCjs(lastExports)
function _typeof$y(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$y =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$y(o)
    )
}
var _excluded$l = ['valueAccessor'],
    _excluded2$8 = ['data', 'dataKey', 'clockWise', 'id', 'textBreakAll']
function _toConsumableArray$8(arr) {
    return (
        _arrayWithoutHoles$8(arr) ||
        _iterableToArray$9(arr) ||
        _unsupportedIterableToArray$c(arr) ||
        _nonIterableSpread$8()
    )
}
function _nonIterableSpread$8() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$c(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$c(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$c(o, minLen)
}
function _iterableToArray$9(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$8(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$c(arr)
}
function _arrayLikeToArray$c(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _extends$q() {
    _extends$q = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$q.apply(this, arguments)
}
function ownKeys$u(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$t(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$u(Object(t), true).forEach(function (r3) {
                  _defineProperty$x(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$u(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$x(obj, key, value) {
    key = _toPropertyKey$w(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$w(t) {
    var i = _toPrimitive$w(t, 'string')
    return 'symbol' == _typeof$y(i) ? i : i + ''
}
function _toPrimitive$w(t, r2) {
    if ('object' != _typeof$y(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$y(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function _objectWithoutProperties$f(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$f(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$f(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
var defaultAccessor = function defaultAccessor2(entry) {
    return Array.isArray(entry.value) ? last(entry.value) : entry.value
}
function LabelList(_ref3) {
    var _ref$valueAccessor = _ref3.valueAccessor,
        valueAccessor = _ref$valueAccessor === void 0 ? defaultAccessor : _ref$valueAccessor,
        restProps = _objectWithoutProperties$f(_ref3, _excluded$l)
    var data = restProps.data,
        dataKey = restProps.dataKey,
        clockWise = restProps.clockWise,
        id = restProps.id,
        textBreakAll = restProps.textBreakAll,
        others = _objectWithoutProperties$f(restProps, _excluded2$8)
    if (!data || !data.length) {
        return null
    }
    return /* @__PURE__ */ React.createElement(
        Layer,
        {
            className: 'recharts-label-list'
        },
        data.map(function (entry, index2) {
            var value = isNil(dataKey)
                ? valueAccessor(entry, index2)
                : getValueByDataKey(entry && entry.payload, dataKey)
            var idProps = isNil(id)
                ? {}
                : {
                      id: ''.concat(id, '-').concat(index2)
                  }
            return /* @__PURE__ */ React.createElement(
                Label,
                _extends$q({}, filterProps(entry, true), others, idProps, {
                    parentViewBox: entry.parentViewBox,
                    value,
                    textBreakAll,
                    viewBox: Label.parseViewBox(
                        isNil(clockWise)
                            ? entry
                            : _objectSpread$t(
                                  _objectSpread$t({}, entry),
                                  {},
                                  {
                                      clockWise
                                  }
                              )
                    ),
                    key: 'label-'.concat(index2),
                    index: index2
                })
            )
        })
    )
}
LabelList.displayName = 'LabelList'
function parseLabelList(label, data) {
    if (!label) {
        return null
    }
    if (label === true) {
        return /* @__PURE__ */ React.createElement(LabelList, {
            key: 'labelList-implicit',
            data
        })
    }
    if (/* @__PURE__ */ React.isValidElement(label) || isFunction(label)) {
        return /* @__PURE__ */ React.createElement(LabelList, {
            key: 'labelList-implicit',
            data,
            content: label
        })
    }
    if (isObject(label)) {
        return /* @__PURE__ */ React.createElement(
            LabelList,
            _extends$q(
                {
                    data
                },
                label,
                {
                    key: 'labelList-implicit'
                }
            )
        )
    }
    return null
}
function renderCallByParent2(parentProps, data) {
    var checkPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true
    if (!parentProps || (!parentProps.children && checkPropsLabel && !parentProps.label)) {
        return null
    }
    var children = parentProps.children
    var explicitChildren = findAllByType(children, LabelList).map(function (child, index2) {
        return /* @__PURE__ */ reactExports.cloneElement(child, {
            data,
            // eslint-disable-next-line react/no-array-index-key
            key: 'labelList-'.concat(index2)
        })
    })
    if (!checkPropsLabel) {
        return explicitChildren
    }
    var implicitLabelList = parseLabelList(parentProps.label, data)
    return [implicitLabelList].concat(_toConsumableArray$8(explicitChildren))
}
LabelList.renderCallByParent = renderCallByParent2
function _typeof$x(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$x =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$x(o)
    )
}
function _extends$p() {
    _extends$p = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$p.apply(this, arguments)
}
function ownKeys$t(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$s(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$t(Object(t), true).forEach(function (r3) {
                  _defineProperty$w(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$t(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$w(obj, key, value) {
    key = _toPropertyKey$v(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$v(t) {
    var i = _toPrimitive$v(t, 'string')
    return 'symbol' == _typeof$x(i) ? i : i + ''
}
function _toPrimitive$v(t, r2) {
    if ('object' != _typeof$x(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$x(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var getDeltaAngle2 = function getDeltaAngle3(startAngle, endAngle) {
    var sign2 = mathSign(endAngle - startAngle)
    var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 359.999)
    return sign2 * deltaAngle
}
var getTangentCircle = function getTangentCircle2(_ref3) {
    var cx = _ref3.cx,
        cy = _ref3.cy,
        radius = _ref3.radius,
        angle = _ref3.angle,
        sign2 = _ref3.sign,
        isExternal = _ref3.isExternal,
        cornerRadius = _ref3.cornerRadius,
        cornerIsExternal = _ref3.cornerIsExternal
    var centerRadius = cornerRadius * (isExternal ? 1 : -1) + radius
    var theta = Math.asin(cornerRadius / centerRadius) / RADIAN$2
    var centerAngle = cornerIsExternal ? angle : angle + sign2 * theta
    var center = polarToCartesian(cx, cy, centerRadius, centerAngle)
    var circleTangency = polarToCartesian(cx, cy, radius, centerAngle)
    var lineTangencyAngle = cornerIsExternal ? angle - sign2 * theta : angle
    var lineTangency = polarToCartesian(
        cx,
        cy,
        centerRadius * Math.cos(theta * RADIAN$2),
        lineTangencyAngle
    )
    return {
        center,
        circleTangency,
        lineTangency,
        theta
    }
}
var getSectorPath = function getSectorPath2(_ref22) {
    var cx = _ref22.cx,
        cy = _ref22.cy,
        innerRadius = _ref22.innerRadius,
        outerRadius = _ref22.outerRadius,
        startAngle = _ref22.startAngle,
        endAngle = _ref22.endAngle
    var angle = getDeltaAngle2(startAngle, endAngle)
    var tempEndAngle = startAngle + angle
    var outerStartPoint = polarToCartesian(cx, cy, outerRadius, startAngle)
    var outerEndPoint = polarToCartesian(cx, cy, outerRadius, tempEndAngle)
    var path = 'M '
        .concat(outerStartPoint.x, ',')
        .concat(outerStartPoint.y, '\n    A ')
        .concat(outerRadius, ',')
        .concat(outerRadius, ',0,\n    ')
        .concat(+(Math.abs(angle) > 180), ',')
        .concat(+(startAngle > tempEndAngle), ',\n    ')
        .concat(outerEndPoint.x, ',')
        .concat(outerEndPoint.y, '\n  ')
    if (innerRadius > 0) {
        var innerStartPoint = polarToCartesian(cx, cy, innerRadius, startAngle)
        var innerEndPoint = polarToCartesian(cx, cy, innerRadius, tempEndAngle)
        path += 'L '
            .concat(innerEndPoint.x, ',')
            .concat(innerEndPoint.y, '\n            A ')
            .concat(innerRadius, ',')
            .concat(innerRadius, ',0,\n            ')
            .concat(+(Math.abs(angle) > 180), ',')
            .concat(+(startAngle <= tempEndAngle), ',\n            ')
            .concat(innerStartPoint.x, ',')
            .concat(innerStartPoint.y, ' Z')
    } else {
        path += 'L '.concat(cx, ',').concat(cy, ' Z')
    }
    return path
}
var getSectorWithCorner = function getSectorWithCorner2(_ref3) {
    var cx = _ref3.cx,
        cy = _ref3.cy,
        innerRadius = _ref3.innerRadius,
        outerRadius = _ref3.outerRadius,
        cornerRadius = _ref3.cornerRadius,
        forceCornerRadius = _ref3.forceCornerRadius,
        cornerIsExternal = _ref3.cornerIsExternal,
        startAngle = _ref3.startAngle,
        endAngle = _ref3.endAngle
    var sign2 = mathSign(endAngle - startAngle)
    var _getTangentCircle = getTangentCircle({
            cx,
            cy,
            radius: outerRadius,
            angle: startAngle,
            sign: sign2,
            cornerRadius,
            cornerIsExternal
        }),
        soct = _getTangentCircle.circleTangency,
        solt = _getTangentCircle.lineTangency,
        sot = _getTangentCircle.theta
    var _getTangentCircle2 = getTangentCircle({
            cx,
            cy,
            radius: outerRadius,
            angle: endAngle,
            sign: -sign2,
            cornerRadius,
            cornerIsExternal
        }),
        eoct = _getTangentCircle2.circleTangency,
        eolt = _getTangentCircle2.lineTangency,
        eot = _getTangentCircle2.theta
    var outerArcAngle = cornerIsExternal
        ? Math.abs(startAngle - endAngle)
        : Math.abs(startAngle - endAngle) - sot - eot
    if (outerArcAngle < 0) {
        if (forceCornerRadius) {
            return 'M '
                .concat(solt.x, ',')
                .concat(solt.y, '\n        a')
                .concat(cornerRadius, ',')
                .concat(cornerRadius, ',0,0,1,')
                .concat(cornerRadius * 2, ',0\n        a')
                .concat(cornerRadius, ',')
                .concat(cornerRadius, ',0,0,1,')
                .concat(-cornerRadius * 2, ',0\n      ')
        }
        return getSectorPath({
            cx,
            cy,
            innerRadius,
            outerRadius,
            startAngle,
            endAngle
        })
    }
    var path = 'M '
        .concat(solt.x, ',')
        .concat(solt.y, '\n    A')
        .concat(cornerRadius, ',')
        .concat(cornerRadius, ',0,0,')
        .concat(+(sign2 < 0), ',')
        .concat(soct.x, ',')
        .concat(soct.y, '\n    A')
        .concat(outerRadius, ',')
        .concat(outerRadius, ',0,')
        .concat(+(outerArcAngle > 180), ',')
        .concat(+(sign2 < 0), ',')
        .concat(eoct.x, ',')
        .concat(eoct.y, '\n    A')
        .concat(cornerRadius, ',')
        .concat(cornerRadius, ',0,0,')
        .concat(+(sign2 < 0), ',')
        .concat(eolt.x, ',')
        .concat(eolt.y, '\n  ')
    if (innerRadius > 0) {
        var _getTangentCircle3 = getTangentCircle({
                cx,
                cy,
                radius: innerRadius,
                angle: startAngle,
                sign: sign2,
                isExternal: true,
                cornerRadius,
                cornerIsExternal
            }),
            sict = _getTangentCircle3.circleTangency,
            silt = _getTangentCircle3.lineTangency,
            sit = _getTangentCircle3.theta
        var _getTangentCircle4 = getTangentCircle({
                cx,
                cy,
                radius: innerRadius,
                angle: endAngle,
                sign: -sign2,
                isExternal: true,
                cornerRadius,
                cornerIsExternal
            }),
            eict = _getTangentCircle4.circleTangency,
            eilt = _getTangentCircle4.lineTangency,
            eit = _getTangentCircle4.theta
        var innerArcAngle = cornerIsExternal
            ? Math.abs(startAngle - endAngle)
            : Math.abs(startAngle - endAngle) - sit - eit
        if (innerArcAngle < 0 && cornerRadius === 0) {
            return ''.concat(path, 'L').concat(cx, ',').concat(cy, 'Z')
        }
        path += 'L'
            .concat(eilt.x, ',')
            .concat(eilt.y, '\n      A')
            .concat(cornerRadius, ',')
            .concat(cornerRadius, ',0,0,')
            .concat(+(sign2 < 0), ',')
            .concat(eict.x, ',')
            .concat(eict.y, '\n      A')
            .concat(innerRadius, ',')
            .concat(innerRadius, ',0,')
            .concat(+(innerArcAngle > 180), ',')
            .concat(+(sign2 > 0), ',')
            .concat(sict.x, ',')
            .concat(sict.y, '\n      A')
            .concat(cornerRadius, ',')
            .concat(cornerRadius, ',0,0,')
            .concat(+(sign2 < 0), ',')
            .concat(silt.x, ',')
            .concat(silt.y, 'Z')
    } else {
        path += 'L'.concat(cx, ',').concat(cy, 'Z')
    }
    return path
}
var defaultProps$4 = {
    cx: 0,
    cy: 0,
    innerRadius: 0,
    outerRadius: 0,
    startAngle: 0,
    endAngle: 0,
    cornerRadius: 0,
    forceCornerRadius: false,
    cornerIsExternal: false
}
var Sector = function Sector2(sectorProps) {
    var props = _objectSpread$s(_objectSpread$s({}, defaultProps$4), sectorProps)
    var cx = props.cx,
        cy = props.cy,
        innerRadius = props.innerRadius,
        outerRadius = props.outerRadius,
        cornerRadius = props.cornerRadius,
        forceCornerRadius = props.forceCornerRadius,
        cornerIsExternal = props.cornerIsExternal,
        startAngle = props.startAngle,
        endAngle = props.endAngle,
        className = props.className
    if (outerRadius < innerRadius || startAngle === endAngle) {
        return null
    }
    var layerClass = clsx('recharts-sector', className)
    var deltaRadius = outerRadius - innerRadius
    var cr = getPercentValue(cornerRadius, deltaRadius, 0, true)
    var path
    if (cr > 0 && Math.abs(startAngle - endAngle) < 360) {
        path = getSectorWithCorner({
            cx,
            cy,
            innerRadius,
            outerRadius,
            cornerRadius: Math.min(cr, deltaRadius / 2),
            forceCornerRadius,
            cornerIsExternal,
            startAngle,
            endAngle
        })
    } else {
        path = getSectorPath({
            cx,
            cy,
            innerRadius,
            outerRadius,
            startAngle,
            endAngle
        })
    }
    return /* @__PURE__ */ React.createElement(
        'path',
        _extends$p({}, filterProps(props, true), {
            className: layerClass,
            d: path,
            role: 'img'
        })
    )
}
function _typeof$w(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$w =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$w(o)
    )
}
function _extends$o() {
    _extends$o = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$o.apply(this, arguments)
}
function ownKeys$s(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$r(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$s(Object(t), true).forEach(function (r3) {
                  _defineProperty$v(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$s(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$v(obj, key, value) {
    key = _toPropertyKey$u(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$u(t) {
    var i = _toPrimitive$u(t, 'string')
    return 'symbol' == _typeof$w(i) ? i : i + ''
}
function _toPrimitive$u(t, r2) {
    if ('object' != _typeof$w(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$w(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var CURVE_FACTORIES = {
    curveBasisClosed,
    curveBasisOpen,
    curveBasis,
    curveBumpX: bumpX,
    curveBumpY: bumpY,
    curveLinearClosed,
    curveLinear,
    curveMonotoneX: monotoneX,
    curveMonotoneY: monotoneY,
    curveNatural,
    curveStep,
    curveStepAfter: stepAfter,
    curveStepBefore: stepBefore
}
var defined = function defined2(p) {
    return p.x === +p.x && p.y === +p.y
}
var getX = function getX2(p) {
    return p.x
}
var getY = function getY2(p) {
    return p.y
}
var getCurveFactory = function getCurveFactory2(type, layout) {
    if (isFunction(type)) {
        return type
    }
    var name = 'curve'.concat(upperFirst(type))
    if ((name === 'curveMonotone' || name === 'curveBump') && layout) {
        return CURVE_FACTORIES[''.concat(name).concat(layout === 'vertical' ? 'Y' : 'X')]
    }
    return CURVE_FACTORIES[name] || curveLinear
}
var getPath$1 = function getPath(_ref3) {
    var _ref$type = _ref3.type,
        type = _ref$type === void 0 ? 'linear' : _ref$type,
        _ref$points = _ref3.points,
        points = _ref$points === void 0 ? [] : _ref$points,
        baseLine = _ref3.baseLine,
        layout = _ref3.layout,
        _ref$connectNulls = _ref3.connectNulls,
        connectNulls = _ref$connectNulls === void 0 ? false : _ref$connectNulls
    var curveFactory = getCurveFactory(type, layout)
    var formatPoints = connectNulls
        ? points.filter(function (entry) {
              return defined(entry)
          })
        : points
    var lineFunction
    if (Array.isArray(baseLine)) {
        var formatBaseLine = connectNulls
            ? baseLine.filter(function (base) {
                  return defined(base)
              })
            : baseLine
        var areaPoints = formatPoints.map(function (entry, index2) {
            return _objectSpread$r(
                _objectSpread$r({}, entry),
                {},
                {
                    base: formatBaseLine[index2]
                }
            )
        })
        if (layout === 'vertical') {
            lineFunction = shapeArea()
                .y(getY)
                .x1(getX)
                .x0(function (d) {
                    return d.base.x
                })
        } else {
            lineFunction = shapeArea()
                .x(getX)
                .y1(getY)
                .y0(function (d) {
                    return d.base.y
                })
        }
        lineFunction.defined(defined).curve(curveFactory)
        return lineFunction(areaPoints)
    }
    if (layout === 'vertical' && isNumber(baseLine)) {
        lineFunction = shapeArea().y(getY).x1(getX).x0(baseLine)
    } else if (isNumber(baseLine)) {
        lineFunction = shapeArea().x(getX).y1(getY).y0(baseLine)
    } else {
        lineFunction = shapeLine().x(getX).y(getY)
    }
    lineFunction.defined(defined).curve(curveFactory)
    return lineFunction(formatPoints)
}
var Curve = function Curve2(props) {
    var className = props.className,
        points = props.points,
        path = props.path,
        pathRef = props.pathRef
    if ((!points || !points.length) && !path) {
        return null
    }
    var realPath = points && points.length ? getPath$1(props) : path
    return /* @__PURE__ */ React.createElement(
        'path',
        _extends$o({}, filterProps(props, false), adaptEventHandlers(props), {
            className: clsx('recharts-curve', className),
            d: realPath,
            ref: pathRef
        })
    )
}
var propTypes = { exports: {} }
var ReactPropTypesSecret_1
var hasRequiredReactPropTypesSecret
function requireReactPropTypesSecret() {
    if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1
    hasRequiredReactPropTypesSecret = 1
    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'
    ReactPropTypesSecret_1 = ReactPropTypesSecret
    return ReactPropTypesSecret_1
}
var factoryWithThrowingShims
var hasRequiredFactoryWithThrowingShims
function requireFactoryWithThrowingShims() {
    if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims
    hasRequiredFactoryWithThrowingShims = 1
    var ReactPropTypesSecret = /* @__PURE__ */ requireReactPropTypesSecret()
    function emptyFunction() {}
    function emptyFunctionWithReset() {}
    emptyFunctionWithReset.resetWarningCache = emptyFunction
    factoryWithThrowingShims = function () {
        function shim(props, propName, componentName, location, propFullName, secret) {
            if (secret === ReactPropTypesSecret) {
                return
            }
            var err = new Error(
                'Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types'
            )
            err.name = 'Invariant Violation'
            throw err
        }
        shim.isRequired = shim
        function getShim() {
            return shim
        }
        var ReactPropTypes = {
            array: shim,
            bigint: shim,
            bool: shim,
            func: shim,
            number: shim,
            object: shim,
            string: shim,
            symbol: shim,
            any: shim,
            arrayOf: getShim,
            element: shim,
            elementType: shim,
            instanceOf: getShim,
            node: shim,
            objectOf: getShim,
            oneOf: getShim,
            oneOfType: getShim,
            shape: getShim,
            exact: getShim,
            checkPropTypes: emptyFunctionWithReset,
            resetWarningCache: emptyFunction
        }
        ReactPropTypes.PropTypes = ReactPropTypes
        return ReactPropTypes
    }
    return factoryWithThrowingShims
}
var hasRequiredPropTypes
function requirePropTypes() {
    if (hasRequiredPropTypes) return propTypes.exports
    hasRequiredPropTypes = 1
    {
        propTypes.exports = /* @__PURE__ */ requireFactoryWithThrowingShims()()
    }
    return propTypes.exports
}
var propTypesExports = /* @__PURE__ */ requirePropTypes()
const PropTypes = /* @__PURE__ */ getDefaultExportFromCjs(propTypesExports)
var getOwnPropertyNames = Object.getOwnPropertyNames,
    getOwnPropertySymbols = Object.getOwnPropertySymbols
var hasOwnProperty = Object.prototype.hasOwnProperty
function combineComparators(comparatorA, comparatorB) {
    return function isEqual2(a2, b, state) {
        return comparatorA(a2, b, state) && comparatorB(a2, b, state)
    }
}
function createIsCircular(areItemsEqual) {
    return function isCircular(a2, b, state) {
        if (!a2 || !b || typeof a2 !== 'object' || typeof b !== 'object') {
            return areItemsEqual(a2, b, state)
        }
        var cache = state.cache
        var cachedA = cache.get(a2)
        var cachedB = cache.get(b)
        if (cachedA && cachedB) {
            return cachedA === b && cachedB === a2
        }
        cache.set(a2, b)
        cache.set(b, a2)
        var result = areItemsEqual(a2, b, state)
        cache.delete(a2)
        cache.delete(b)
        return result
    }
}
function getStrictProperties(object2) {
    return getOwnPropertyNames(object2).concat(getOwnPropertySymbols(object2))
}
var hasOwn$1 =
    Object.hasOwn ||
    function (object2, property) {
        return hasOwnProperty.call(object2, property)
    }
function sameValueZeroEqual(a2, b) {
    return a2 === b || (!a2 && !b && a2 !== a2 && b !== b)
}
var PREACT_VNODE = '__v'
var PREACT_OWNER = '__o'
var REACT_OWNER = '_owner'
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
    keys = Object.keys
function areArraysEqual(a2, b, state) {
    var index2 = a2.length
    if (b.length !== index2) {
        return false
    }
    while (index2-- > 0) {
        if (!state.equals(a2[index2], b[index2], index2, index2, a2, b, state)) {
            return false
        }
    }
    return true
}
function areDatesEqual(a2, b) {
    return sameValueZeroEqual(a2.getTime(), b.getTime())
}
function areErrorsEqual(a2, b) {
    return (
        a2.name === b.name &&
        a2.message === b.message &&
        a2.cause === b.cause &&
        a2.stack === b.stack
    )
}
function areFunctionsEqual(a2, b) {
    return a2 === b
}
function areMapsEqual(a2, b, state) {
    var size = a2.size
    if (size !== b.size) {
        return false
    }
    if (!size) {
        return true
    }
    var matchedIndices = new Array(size)
    var aIterable = a2.entries()
    var aResult
    var bResult
    var index2 = 0
    while ((aResult = aIterable.next())) {
        if (aResult.done) {
            break
        }
        var bIterable = b.entries()
        var hasMatch = false
        var matchIndex = 0
        while ((bResult = bIterable.next())) {
            if (bResult.done) {
                break
            }
            if (matchedIndices[matchIndex]) {
                matchIndex++
                continue
            }
            var aEntry = aResult.value
            var bEntry = bResult.value
            if (
                state.equals(aEntry[0], bEntry[0], index2, matchIndex, a2, b, state) &&
                state.equals(aEntry[1], bEntry[1], aEntry[0], bEntry[0], a2, b, state)
            ) {
                hasMatch = matchedIndices[matchIndex] = true
                break
            }
            matchIndex++
        }
        if (!hasMatch) {
            return false
        }
        index2++
    }
    return true
}
var areNumbersEqual = sameValueZeroEqual
function areObjectsEqual(a2, b, state) {
    var properties = keys(a2)
    var index2 = properties.length
    if (keys(b).length !== index2) {
        return false
    }
    while (index2-- > 0) {
        if (!isPropertyEqual(a2, b, state, properties[index2])) {
            return false
        }
    }
    return true
}
function areObjectsEqualStrict(a2, b, state) {
    var properties = getStrictProperties(a2)
    var index2 = properties.length
    if (getStrictProperties(b).length !== index2) {
        return false
    }
    var property
    var descriptorA
    var descriptorB
    while (index2-- > 0) {
        property = properties[index2]
        if (!isPropertyEqual(a2, b, state, property)) {
            return false
        }
        descriptorA = getOwnPropertyDescriptor(a2, property)
        descriptorB = getOwnPropertyDescriptor(b, property)
        if (
            (descriptorA || descriptorB) &&
            (!descriptorA ||
                !descriptorB ||
                descriptorA.configurable !== descriptorB.configurable ||
                descriptorA.enumerable !== descriptorB.enumerable ||
                descriptorA.writable !== descriptorB.writable)
        ) {
            return false
        }
    }
    return true
}
function arePrimitiveWrappersEqual(a2, b) {
    return sameValueZeroEqual(a2.valueOf(), b.valueOf())
}
function areRegExpsEqual(a2, b) {
    return a2.source === b.source && a2.flags === b.flags
}
function areSetsEqual(a2, b, state) {
    var size = a2.size
    if (size !== b.size) {
        return false
    }
    if (!size) {
        return true
    }
    var matchedIndices = new Array(size)
    var aIterable = a2.values()
    var aResult
    var bResult
    while ((aResult = aIterable.next())) {
        if (aResult.done) {
            break
        }
        var bIterable = b.values()
        var hasMatch = false
        var matchIndex = 0
        while ((bResult = bIterable.next())) {
            if (bResult.done) {
                break
            }
            if (
                !matchedIndices[matchIndex] &&
                state.equals(
                    aResult.value,
                    bResult.value,
                    aResult.value,
                    bResult.value,
                    a2,
                    b,
                    state
                )
            ) {
                hasMatch = matchedIndices[matchIndex] = true
                break
            }
            matchIndex++
        }
        if (!hasMatch) {
            return false
        }
    }
    return true
}
function areTypedArraysEqual(a2, b) {
    var index2 = a2.length
    if (b.length !== index2) {
        return false
    }
    while (index2-- > 0) {
        if (a2[index2] !== b[index2]) {
            return false
        }
    }
    return true
}
function areUrlsEqual(a2, b) {
    return (
        a2.hostname === b.hostname &&
        a2.pathname === b.pathname &&
        a2.protocol === b.protocol &&
        a2.port === b.port &&
        a2.hash === b.hash &&
        a2.username === b.username &&
        a2.password === b.password
    )
}
function isPropertyEqual(a2, b, state, property) {
    if (
        (property === REACT_OWNER || property === PREACT_OWNER || property === PREACT_VNODE) &&
        (a2.$$typeof || b.$$typeof)
    ) {
        return true
    }
    return (
        hasOwn$1(b, property) &&
        state.equals(a2[property], b[property], property, property, a2, b, state)
    )
}
var ARGUMENTS_TAG = '[object Arguments]'
var BOOLEAN_TAG = '[object Boolean]'
var DATE_TAG = '[object Date]'
var ERROR_TAG = '[object Error]'
var MAP_TAG = '[object Map]'
var NUMBER_TAG = '[object Number]'
var OBJECT_TAG = '[object Object]'
var REG_EXP_TAG = '[object RegExp]'
var SET_TAG = '[object Set]'
var STRING_TAG = '[object String]'
var URL_TAG = '[object URL]'
var isArray$1 = Array.isArray
var isTypedArray =
    typeof ArrayBuffer === 'function' && ArrayBuffer.isView ? ArrayBuffer.isView : null
var assign$1 = Object.assign
var getTag = Object.prototype.toString.call.bind(Object.prototype.toString)
function createEqualityComparator(_a) {
    var areArraysEqual2 = _a.areArraysEqual,
        areDatesEqual2 = _a.areDatesEqual,
        areErrorsEqual2 = _a.areErrorsEqual,
        areFunctionsEqual2 = _a.areFunctionsEqual,
        areMapsEqual2 = _a.areMapsEqual,
        areNumbersEqual2 = _a.areNumbersEqual,
        areObjectsEqual2 = _a.areObjectsEqual,
        arePrimitiveWrappersEqual2 = _a.arePrimitiveWrappersEqual,
        areRegExpsEqual2 = _a.areRegExpsEqual,
        areSetsEqual2 = _a.areSetsEqual,
        areTypedArraysEqual2 = _a.areTypedArraysEqual,
        areUrlsEqual2 = _a.areUrlsEqual
    return function comparator(a2, b, state) {
        if (a2 === b) {
            return true
        }
        if (a2 == null || b == null) {
            return false
        }
        var type = typeof a2
        if (type !== typeof b) {
            return false
        }
        if (type !== 'object') {
            if (type === 'number') {
                return areNumbersEqual2(a2, b, state)
            }
            if (type === 'function') {
                return areFunctionsEqual2(a2, b, state)
            }
            return false
        }
        var constructor = a2.constructor
        if (constructor !== b.constructor) {
            return false
        }
        if (constructor === Object) {
            return areObjectsEqual2(a2, b, state)
        }
        if (isArray$1(a2)) {
            return areArraysEqual2(a2, b, state)
        }
        if (isTypedArray != null && isTypedArray(a2)) {
            return areTypedArraysEqual2(a2, b, state)
        }
        if (constructor === Date) {
            return areDatesEqual2(a2, b, state)
        }
        if (constructor === RegExp) {
            return areRegExpsEqual2(a2, b, state)
        }
        if (constructor === Map) {
            return areMapsEqual2(a2, b, state)
        }
        if (constructor === Set) {
            return areSetsEqual2(a2, b, state)
        }
        var tag = getTag(a2)
        if (tag === DATE_TAG) {
            return areDatesEqual2(a2, b, state)
        }
        if (tag === REG_EXP_TAG) {
            return areRegExpsEqual2(a2, b, state)
        }
        if (tag === MAP_TAG) {
            return areMapsEqual2(a2, b, state)
        }
        if (tag === SET_TAG) {
            return areSetsEqual2(a2, b, state)
        }
        if (tag === OBJECT_TAG) {
            return (
                typeof a2.then !== 'function' &&
                typeof b.then !== 'function' &&
                areObjectsEqual2(a2, b, state)
            )
        }
        if (tag === URL_TAG) {
            return areUrlsEqual2(a2, b, state)
        }
        if (tag === ERROR_TAG) {
            return areErrorsEqual2(a2, b, state)
        }
        if (tag === ARGUMENTS_TAG) {
            return areObjectsEqual2(a2, b, state)
        }
        if (tag === BOOLEAN_TAG || tag === NUMBER_TAG || tag === STRING_TAG) {
            return arePrimitiveWrappersEqual2(a2, b, state)
        }
        return false
    }
}
function createEqualityComparatorConfig(_a) {
    var circular = _a.circular,
        createCustomConfig = _a.createCustomConfig,
        strict = _a.strict
    var config2 = {
        areArraysEqual: strict ? areObjectsEqualStrict : areArraysEqual,
        areDatesEqual,
        areErrorsEqual,
        areFunctionsEqual,
        areMapsEqual: strict
            ? combineComparators(areMapsEqual, areObjectsEqualStrict)
            : areMapsEqual,
        areNumbersEqual,
        areObjectsEqual: strict ? areObjectsEqualStrict : areObjectsEqual,
        arePrimitiveWrappersEqual,
        areRegExpsEqual,
        areSetsEqual: strict
            ? combineComparators(areSetsEqual, areObjectsEqualStrict)
            : areSetsEqual,
        areTypedArraysEqual: strict ? areObjectsEqualStrict : areTypedArraysEqual,
        areUrlsEqual
    }
    if (createCustomConfig) {
        config2 = assign$1({}, config2, createCustomConfig(config2))
    }
    if (circular) {
        var areArraysEqual$1 = createIsCircular(config2.areArraysEqual)
        var areMapsEqual$1 = createIsCircular(config2.areMapsEqual)
        var areObjectsEqual$1 = createIsCircular(config2.areObjectsEqual)
        var areSetsEqual$1 = createIsCircular(config2.areSetsEqual)
        config2 = assign$1({}, config2, {
            areArraysEqual: areArraysEqual$1,
            areMapsEqual: areMapsEqual$1,
            areObjectsEqual: areObjectsEqual$1,
            areSetsEqual: areSetsEqual$1
        })
    }
    return config2
}
function createInternalEqualityComparator(compare) {
    return function (a2, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, state) {
        return compare(a2, b, state)
    }
}
function createIsEqual(_a) {
    var circular = _a.circular,
        comparator = _a.comparator,
        createState = _a.createState,
        equals2 = _a.equals,
        strict = _a.strict
    if (createState) {
        return function isEqual2(a2, b) {
            var _a2 = createState(),
                _b = _a2.cache,
                cache = _b === void 0 ? (circular ? /* @__PURE__ */ new WeakMap() : void 0) : _b,
                meta = _a2.meta
            return comparator(a2, b, {
                cache,
                equals: equals2,
                meta,
                strict
            })
        }
    }
    if (circular) {
        return function isEqual2(a2, b) {
            return comparator(a2, b, {
                cache: /* @__PURE__ */ new WeakMap(),
                equals: equals2,
                meta: void 0,
                strict
            })
        }
    }
    var state = {
        cache: void 0,
        equals: equals2,
        meta: void 0,
        strict
    }
    return function isEqual2(a2, b) {
        return comparator(a2, b, state)
    }
}
var deepEqual = createCustomEqual()
createCustomEqual({ strict: true })
createCustomEqual({ circular: true })
createCustomEqual({
    circular: true,
    strict: true
})
createCustomEqual({
    createInternalComparator: function () {
        return sameValueZeroEqual
    }
})
createCustomEqual({
    strict: true,
    createInternalComparator: function () {
        return sameValueZeroEqual
    }
})
createCustomEqual({
    circular: true,
    createInternalComparator: function () {
        return sameValueZeroEqual
    }
})
createCustomEqual({
    circular: true,
    createInternalComparator: function () {
        return sameValueZeroEqual
    },
    strict: true
})
function createCustomEqual(options2) {
    if (options2 === void 0) {
        options2 = {}
    }
    var _a = options2.circular,
        circular = _a === void 0 ? false : _a,
        createCustomInternalComparator = options2.createInternalComparator,
        createState = options2.createState,
        _b = options2.strict,
        strict = _b === void 0 ? false : _b
    var config2 = createEqualityComparatorConfig(options2)
    var comparator = createEqualityComparator(config2)
    var equals2 = createCustomInternalComparator
        ? createCustomInternalComparator(comparator)
        : createInternalEqualityComparator(comparator)
    return createIsEqual({ circular, comparator, createState, equals: equals2, strict })
}
function safeRequestAnimationFrame(callback) {
    if (typeof requestAnimationFrame !== 'undefined') requestAnimationFrame(callback)
}
function setRafTimeout(callback) {
    var timeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0
    var currTime = -1
    var shouldUpdate = function shouldUpdate2(now) {
        if (currTime < 0) {
            currTime = now
        }
        if (now - currTime > timeout) {
            callback(now)
            currTime = -1
        } else {
            safeRequestAnimationFrame(shouldUpdate2)
        }
    }
    requestAnimationFrame(shouldUpdate)
}
function _typeof$v(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$v =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$v(o)
    )
}
function _toArray(arr) {
    return (
        _arrayWithHoles$7(arr) ||
        _iterableToArray$8(arr) ||
        _unsupportedIterableToArray$b(arr) ||
        _nonIterableRest$7()
    )
}
function _nonIterableRest$7() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$b(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$b(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$b(o, minLen)
}
function _arrayLikeToArray$b(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArray$8(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithHoles$7(arr) {
    if (Array.isArray(arr)) return arr
}
function createAnimateManager() {
    var currStyle = {}
    var handleChange = function handleChange2() {
        return null
    }
    var shouldStop = false
    var setStyle = function setStyle2(_style) {
        if (shouldStop) {
            return
        }
        if (Array.isArray(_style)) {
            if (!_style.length) {
                return
            }
            var styles = _style
            var _styles = _toArray(styles),
                curr = _styles[0],
                restStyles = _styles.slice(1)
            if (typeof curr === 'number') {
                setRafTimeout(setStyle2.bind(null, restStyles), curr)
                return
            }
            setStyle2(curr)
            setRafTimeout(setStyle2.bind(null, restStyles))
            return
        }
        if (_typeof$v(_style) === 'object') {
            currStyle = _style
            handleChange(currStyle)
        }
        if (typeof _style === 'function') {
            _style()
        }
    }
    return {
        stop: function stop() {
            shouldStop = true
        },
        start: function start(style) {
            shouldStop = false
            setStyle(style)
        },
        subscribe: function subscribe(_handleChange) {
            handleChange = _handleChange
            return function () {
                handleChange = function handleChange2() {
                    return null
                }
            }
        }
    }
}
function _typeof$u(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$u =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$u(o)
    )
}
function ownKeys$r(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r22) {
                return Object.getOwnPropertyDescriptor(e, r22).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$q(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$r(Object(t), true).forEach(function (r22) {
                  _defineProperty$u(e, r22, t[r22])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$r(Object(t)).forEach(function (r22) {
                    Object.defineProperty(e, r22, Object.getOwnPropertyDescriptor(t, r22))
                })
    }
    return e
}
function _defineProperty$u(obj, key, value) {
    key = _toPropertyKey$t(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$t(arg) {
    var key = _toPrimitive$t(arg, 'string')
    return _typeof$u(key) === 'symbol' ? key : String(key)
}
function _toPrimitive$t(input, hint) {
    if (_typeof$u(input) !== 'object' || input === null) return input
    var prim = input[Symbol.toPrimitive]
    if (prim !== void 0) {
        var res = prim.call(input, hint)
        if (_typeof$u(res) !== 'object') return res
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return (hint === 'string' ? String : Number)(input)
}
var getIntersectionKeys = function getIntersectionKeys2(preObj, nextObj) {
    return [Object.keys(preObj), Object.keys(nextObj)].reduce(function (a2, b) {
        return a2.filter(function (c2) {
            return b.includes(c2)
        })
    })
}
var identity2 = function identity22(param) {
    return param
}
var getDashCase = function getDashCase2(name) {
    return name.replace(/([A-Z])/g, function (v) {
        return '-'.concat(v.toLowerCase())
    })
}
var mapObject = function mapObject2(fn, obj) {
    return Object.keys(obj).reduce(function (res, key) {
        return _objectSpread$q(
            _objectSpread$q({}, res),
            {},
            _defineProperty$u({}, key, fn(key, obj[key]))
        )
    }, {})
}
var getTransitionVal = function getTransitionVal2(props, duration, easing) {
    return props
        .map(function (prop) {
            return ''.concat(getDashCase(prop), ' ').concat(duration, 'ms ').concat(easing)
        })
        .join(',')
}
function _slicedToArray$6(arr, i) {
    return (
        _arrayWithHoles$6(arr) ||
        _iterableToArrayLimit$6(arr, i) ||
        _unsupportedIterableToArray$a(arr, i) ||
        _nonIterableRest$6()
    )
}
function _nonIterableRest$6() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _iterableToArrayLimit$6(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t.return && ((u = t.return()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$6(arr) {
    if (Array.isArray(arr)) return arr
}
function _toConsumableArray$7(arr) {
    return (
        _arrayWithoutHoles$7(arr) ||
        _iterableToArray$7(arr) ||
        _unsupportedIterableToArray$a(arr) ||
        _nonIterableSpread$7()
    )
}
function _nonIterableSpread$7() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$a(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$a(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$a(o, minLen)
}
function _iterableToArray$7(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$7(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$a(arr)
}
function _arrayLikeToArray$a(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
var ACCURACY = 1e-4
var cubicBezierFactor = function cubicBezierFactor2(c1, c2) {
    return [0, 3 * c1, 3 * c2 - 6 * c1, 3 * c1 - 3 * c2 + 1]
}
var multyTime = function multyTime2(params, t) {
    return params
        .map(function (param, i) {
            return param * Math.pow(t, i)
        })
        .reduce(function (pre, curr) {
            return pre + curr
        })
}
var cubicBezier = function cubicBezier2(c1, c2) {
    return function (t) {
        var params = cubicBezierFactor(c1, c2)
        return multyTime(params, t)
    }
}
var derivativeCubicBezier = function derivativeCubicBezier2(c1, c2) {
    return function (t) {
        var params = cubicBezierFactor(c1, c2)
        var newParams = [].concat(
            _toConsumableArray$7(
                params
                    .map(function (param, i) {
                        return param * i
                    })
                    .slice(1)
            ),
            [0]
        )
        return multyTime(newParams, t)
    }
}
var configBezier = function configBezier2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key]
    }
    var x1 = args[0],
        y1 = args[1],
        x2 = args[2],
        y2 = args[3]
    if (args.length === 1) {
        switch (args[0]) {
            case 'linear':
                x1 = 0
                y1 = 0
                x2 = 1
                y2 = 1
                break
            case 'ease':
                x1 = 0.25
                y1 = 0.1
                x2 = 0.25
                y2 = 1
                break
            case 'ease-in':
                x1 = 0.42
                y1 = 0
                x2 = 1
                y2 = 1
                break
            case 'ease-out':
                x1 = 0.42
                y1 = 0
                x2 = 0.58
                y2 = 1
                break
            case 'ease-in-out':
                x1 = 0
                y1 = 0
                x2 = 0.58
                y2 = 1
                break
            default: {
                var easing = args[0].split('(')
                if (
                    easing[0] === 'cubic-bezier' &&
                    easing[1].split(')')[0].split(',').length === 4
                ) {
                    var _easing$1$split$0$spl = easing[1]
                        .split(')')[0]
                        .split(',')
                        .map(function (x3) {
                            return parseFloat(x3)
                        })
                    var _easing$1$split$0$spl2 = _slicedToArray$6(_easing$1$split$0$spl, 4)
                    x1 = _easing$1$split$0$spl2[0]
                    y1 = _easing$1$split$0$spl2[1]
                    x2 = _easing$1$split$0$spl2[2]
                    y2 = _easing$1$split$0$spl2[3]
                }
            }
        }
    }
    var curveX = cubicBezier(x1, x2)
    var curveY = cubicBezier(y1, y2)
    var derCurveX = derivativeCubicBezier(x1, x2)
    var rangeValue = function rangeValue2(value) {
        if (value > 1) {
            return 1
        }
        if (value < 0) {
            return 0
        }
        return value
    }
    var bezier = function bezier2(_t) {
        var t = _t > 1 ? 1 : _t
        var x3 = t
        for (var i = 0; i < 8; ++i) {
            var evalT = curveX(x3) - t
            var derVal = derCurveX(x3)
            if (Math.abs(evalT - t) < ACCURACY || derVal < ACCURACY) {
                return curveY(x3)
            }
            x3 = rangeValue(x3 - evalT / derVal)
        }
        return curveY(x3)
    }
    bezier.isStepper = false
    return bezier
}
var configSpring = function configSpring2() {
    var config2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}
    var _config$stiff = config2.stiff,
        stiff = _config$stiff === void 0 ? 100 : _config$stiff,
        _config$damping = config2.damping,
        damping = _config$damping === void 0 ? 8 : _config$damping,
        _config$dt = config2.dt,
        dt = _config$dt === void 0 ? 17 : _config$dt
    var stepper = function stepper2(currX, destX, currV) {
        var FSpring = -(currX - destX) * stiff
        var FDamping = currV * damping
        var newV = currV + ((FSpring - FDamping) * dt) / 1e3
        var newX = (currV * dt) / 1e3 + currX
        if (Math.abs(newX - destX) < ACCURACY && Math.abs(newV) < ACCURACY) {
            return [destX, 0]
        }
        return [newX, newV]
    }
    stepper.isStepper = true
    stepper.dt = dt
    return stepper
}
var configEasing = function configEasing2() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2]
    }
    var easing = args[0]
    if (typeof easing === 'string') {
        switch (easing) {
            case 'ease':
            case 'ease-in-out':
            case 'ease-out':
            case 'ease-in':
            case 'linear':
                return configBezier(easing)
            case 'spring':
                return configSpring()
            default:
                if (easing.split('(')[0] === 'cubic-bezier') {
                    return configBezier(easing)
                }
        }
    }
    if (typeof easing === 'function') {
        return easing
    }
    return null
}
function _typeof$t(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$t =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$t(o)
    )
}
function _toConsumableArray$6(arr) {
    return (
        _arrayWithoutHoles$6(arr) ||
        _iterableToArray$6(arr) ||
        _unsupportedIterableToArray$9(arr) ||
        _nonIterableSpread$6()
    )
}
function _nonIterableSpread$6() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _iterableToArray$6(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$6(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$9(arr)
}
function ownKeys$q(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$p(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$q(Object(t), true).forEach(function (r3) {
                  _defineProperty$t(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$q(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$t(obj, key, value) {
    key = _toPropertyKey$s(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$s(arg) {
    var key = _toPrimitive$s(arg, 'string')
    return _typeof$t(key) === 'symbol' ? key : String(key)
}
function _toPrimitive$s(input, hint) {
    if (_typeof$t(input) !== 'object' || input === null) return input
    var prim = input[Symbol.toPrimitive]
    if (prim !== void 0) {
        var res = prim.call(input, hint)
        if (_typeof$t(res) !== 'object') return res
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return (hint === 'string' ? String : Number)(input)
}
function _slicedToArray$5(arr, i) {
    return (
        _arrayWithHoles$5(arr) ||
        _iterableToArrayLimit$5(arr, i) ||
        _unsupportedIterableToArray$9(arr, i) ||
        _nonIterableRest$5()
    )
}
function _nonIterableRest$5() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$9(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$9(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$9(o, minLen)
}
function _arrayLikeToArray$9(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$5(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t.return && ((u = t.return()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$5(arr) {
    if (Array.isArray(arr)) return arr
}
var alpha = function alpha2(begin, end, k2) {
    return begin + (end - begin) * k2
}
var needContinue = function needContinue2(_ref3) {
    var from2 = _ref3.from,
        to = _ref3.to
    return from2 !== to
}
var calStepperVals = function calStepperVals2(easing, preVals, steps) {
    var nextStepVals = mapObject(function (key, val) {
        if (needContinue(val)) {
            var _easing = easing(val.from, val.to, val.velocity),
                _easing2 = _slicedToArray$5(_easing, 2),
                newX = _easing2[0],
                newV = _easing2[1]
            return _objectSpread$p(
                _objectSpread$p({}, val),
                {},
                {
                    from: newX,
                    velocity: newV
                }
            )
        }
        return val
    }, preVals)
    if (steps < 1) {
        return mapObject(function (key, val) {
            if (needContinue(val)) {
                return _objectSpread$p(
                    _objectSpread$p({}, val),
                    {},
                    {
                        velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),
                        from: alpha(val.from, nextStepVals[key].from, steps)
                    }
                )
            }
            return val
        }, preVals)
    }
    return calStepperVals2(easing, nextStepVals, steps - 1)
}
const configUpdate = function (from2, to, easing, duration, render) {
    var interKeys = getIntersectionKeys(from2, to)
    var timingStyle = interKeys.reduce(function (res, key) {
        return _objectSpread$p(
            _objectSpread$p({}, res),
            {},
            _defineProperty$t({}, key, [from2[key], to[key]])
        )
    }, {})
    var stepperStyle = interKeys.reduce(function (res, key) {
        return _objectSpread$p(
            _objectSpread$p({}, res),
            {},
            _defineProperty$t({}, key, {
                from: from2[key],
                velocity: 0,
                to: to[key]
            })
        )
    }, {})
    var cafId = -1
    var preTime
    var beginTime
    var update = function update2() {
        return null
    }
    var getCurrStyle = function getCurrStyle2() {
        return mapObject(function (key, val) {
            return val.from
        }, stepperStyle)
    }
    var shouldStopAnimation = function shouldStopAnimation2() {
        return !Object.values(stepperStyle).filter(needContinue).length
    }
    var stepperUpdate = function stepperUpdate2(now) {
        if (!preTime) {
            preTime = now
        }
        var deltaTime = now - preTime
        var steps = deltaTime / easing.dt
        stepperStyle = calStepperVals(easing, stepperStyle, steps)
        render(_objectSpread$p(_objectSpread$p(_objectSpread$p({}, from2), to), getCurrStyle()))
        preTime = now
        if (!shouldStopAnimation()) {
            cafId = requestAnimationFrame(update)
        }
    }
    var timingUpdate = function timingUpdate2(now) {
        if (!beginTime) {
            beginTime = now
        }
        var t = (now - beginTime) / duration
        var currStyle = mapObject(function (key, val) {
            return alpha.apply(void 0, _toConsumableArray$6(val).concat([easing(t)]))
        }, timingStyle)
        render(_objectSpread$p(_objectSpread$p(_objectSpread$p({}, from2), to), currStyle))
        if (t < 1) {
            cafId = requestAnimationFrame(update)
        } else {
            var finalStyle = mapObject(function (key, val) {
                return alpha.apply(void 0, _toConsumableArray$6(val).concat([easing(1)]))
            }, timingStyle)
            render(_objectSpread$p(_objectSpread$p(_objectSpread$p({}, from2), to), finalStyle))
        }
    }
    update = easing.isStepper ? stepperUpdate : timingUpdate
    return function () {
        requestAnimationFrame(update)
        return function () {
            cancelAnimationFrame(cafId)
        }
    }
}
function _typeof$s(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$s =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$s(o)
    )
}
var _excluded$k = [
    'children',
    'begin',
    'duration',
    'attributeName',
    'easing',
    'isActive',
    'steps',
    'from',
    'to',
    'canBegin',
    'onAnimationEnd',
    'shouldReAnimate',
    'onAnimationReStart'
]
function _objectWithoutProperties$e(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$e(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$e(source, excluded) {
    if (source == null) return {}
    var target = {}
    var sourceKeys = Object.keys(source)
    var key, i
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i]
        if (excluded.indexOf(key) >= 0) continue
        target[key] = source[key]
    }
    return target
}
function _toConsumableArray$5(arr) {
    return (
        _arrayWithoutHoles$5(arr) ||
        _iterableToArray$5(arr) ||
        _unsupportedIterableToArray$8(arr) ||
        _nonIterableSpread$5()
    )
}
function _nonIterableSpread$5() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$8(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$8(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$8(o, minLen)
}
function _iterableToArray$5(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$5(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$8(arr)
}
function _arrayLikeToArray$8(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function ownKeys$p(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$o(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$p(Object(t), true).forEach(function (r3) {
                  _defineProperty$s(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$p(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$s(obj, key, value) {
    key = _toPropertyKey$r(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _classCallCheck$i(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$i(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$r(descriptor.key), descriptor)
    }
}
function _createClass$i(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$i(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _toPropertyKey$r(arg) {
    var key = _toPrimitive$r(arg, 'string')
    return _typeof$s(key) === 'symbol' ? key : String(key)
}
function _toPrimitive$r(input, hint) {
    if (_typeof$s(input) !== 'object' || input === null) return input
    var prim = input[Symbol.toPrimitive]
    if (prim !== void 0) {
        var res = prim.call(input, hint)
        if (_typeof$s(res) !== 'object') return res
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return (hint === 'string' ? String : Number)(input)
}
function _inherits$g(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$g(subClass, superClass)
}
function _setPrototypeOf$g(o, p) {
    _setPrototypeOf$g = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$g(o, p)
}
function _createSuper$1(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct$g()
    return function _createSuperInternal() {
        var Super = _getPrototypeOf$g(Derived),
            result
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf$g(this).constructor
            result = Reflect.construct(Super, arguments, NewTarget)
        } else {
            result = Super.apply(this, arguments)
        }
        return _possibleConstructorReturn$g(this, result)
    }
}
function _possibleConstructorReturn$g(self2, call) {
    if (call && (_typeof$s(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$g(self2)
}
function _assertThisInitialized$g(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$g() {
    if (typeof Reflect === 'undefined' || !Reflect.construct) return false
    if (Reflect.construct.sham) return false
    if (typeof Proxy === 'function') return true
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
        return true
    } catch (e) {
        return false
    }
}
function _getPrototypeOf$g(o) {
    _getPrototypeOf$g = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$g(o)
}
var Animate = /* @__PURE__ */ (function (_PureComponent) {
    _inherits$g(Animate2, _PureComponent)
    var _super = _createSuper$1(Animate2)
    function Animate2(props, context) {
        var _this
        _classCallCheck$i(this, Animate2)
        _this = _super.call(this, props, context)
        var _this$props = _this.props,
            isActive = _this$props.isActive,
            attributeName = _this$props.attributeName,
            from2 = _this$props.from,
            to = _this$props.to,
            steps = _this$props.steps,
            children = _this$props.children,
            duration = _this$props.duration
        _this.handleStyleChange = _this.handleStyleChange.bind(_assertThisInitialized$g(_this))
        _this.changeStyle = _this.changeStyle.bind(_assertThisInitialized$g(_this))
        if (!isActive || duration <= 0) {
            _this.state = {
                style: {}
            }
            if (typeof children === 'function') {
                _this.state = {
                    style: to
                }
            }
            return _possibleConstructorReturn$g(_this)
        }
        if (steps && steps.length) {
            _this.state = {
                style: steps[0].style
            }
        } else if (from2) {
            if (typeof children === 'function') {
                _this.state = {
                    style: from2
                }
                return _possibleConstructorReturn$g(_this)
            }
            _this.state = {
                style: attributeName ? _defineProperty$s({}, attributeName, from2) : from2
            }
        } else {
            _this.state = {
                style: {}
            }
        }
        return _this
    }
    _createClass$i(Animate2, [
        {
            key: 'componentDidMount',
            value: function componentDidMount() {
                var _this$props2 = this.props,
                    isActive = _this$props2.isActive,
                    canBegin = _this$props2.canBegin
                this.mounted = true
                if (!isActive || !canBegin) {
                    return
                }
                this.runAnimation(this.props)
            }
        },
        {
            key: 'componentDidUpdate',
            value: function componentDidUpdate(prevProps) {
                var _this$props3 = this.props,
                    isActive = _this$props3.isActive,
                    canBegin = _this$props3.canBegin,
                    attributeName = _this$props3.attributeName,
                    shouldReAnimate = _this$props3.shouldReAnimate,
                    to = _this$props3.to,
                    currentFrom = _this$props3.from
                var style = this.state.style
                if (!canBegin) {
                    return
                }
                if (!isActive) {
                    var newState = {
                        style: attributeName ? _defineProperty$s({}, attributeName, to) : to
                    }
                    if (this.state && style) {
                        if (
                            (attributeName && style[attributeName] !== to) ||
                            (!attributeName && style !== to)
                        ) {
                            this.setState(newState)
                        }
                    }
                    return
                }
                if (deepEqual(prevProps.to, to) && prevProps.canBegin && prevProps.isActive) {
                    return
                }
                var isTriggered = !prevProps.canBegin || !prevProps.isActive
                if (this.manager) {
                    this.manager.stop()
                }
                if (this.stopJSAnimation) {
                    this.stopJSAnimation()
                }
                var from2 = isTriggered || shouldReAnimate ? currentFrom : prevProps.to
                if (this.state && style) {
                    var _newState = {
                        style: attributeName ? _defineProperty$s({}, attributeName, from2) : from2
                    }
                    if (
                        (attributeName && style[attributeName] !== from2) ||
                        (!attributeName && style !== from2)
                    ) {
                        this.setState(_newState)
                    }
                }
                this.runAnimation(
                    _objectSpread$o(
                        _objectSpread$o({}, this.props),
                        {},
                        {
                            from: from2,
                            begin: 0
                        }
                    )
                )
            }
        },
        {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
                this.mounted = false
                var onAnimationEnd2 = this.props.onAnimationEnd
                if (this.unSubscribe) {
                    this.unSubscribe()
                }
                if (this.manager) {
                    this.manager.stop()
                    this.manager = null
                }
                if (this.stopJSAnimation) {
                    this.stopJSAnimation()
                }
                if (onAnimationEnd2) {
                    onAnimationEnd2()
                }
            }
        },
        {
            key: 'handleStyleChange',
            value: function handleStyleChange(style) {
                this.changeStyle(style)
            }
        },
        {
            key: 'changeStyle',
            value: function changeStyle(style) {
                if (this.mounted) {
                    this.setState({
                        style
                    })
                }
            }
        },
        {
            key: 'runJSAnimation',
            value: function runJSAnimation(props) {
                var _this2 = this
                var from2 = props.from,
                    to = props.to,
                    duration = props.duration,
                    easing = props.easing,
                    begin = props.begin,
                    onAnimationEnd2 = props.onAnimationEnd,
                    onAnimationStart2 = props.onAnimationStart
                var startAnimation = configUpdate(
                    from2,
                    to,
                    configEasing(easing),
                    duration,
                    this.changeStyle
                )
                var finalStartAnimation = function finalStartAnimation2() {
                    _this2.stopJSAnimation = startAnimation()
                }
                this.manager.start([
                    onAnimationStart2,
                    begin,
                    finalStartAnimation,
                    duration,
                    onAnimationEnd2
                ])
            }
        },
        {
            key: 'runStepAnimation',
            value: function runStepAnimation(props) {
                var _this3 = this
                var steps = props.steps,
                    begin = props.begin,
                    onAnimationStart2 = props.onAnimationStart
                var _steps$ = steps[0],
                    initialStyle = _steps$.style,
                    _steps$$duration = _steps$.duration,
                    initialTime = _steps$$duration === void 0 ? 0 : _steps$$duration
                var addStyle = function addStyle2(sequence, nextItem, index2) {
                    if (index2 === 0) {
                        return sequence
                    }
                    var duration = nextItem.duration,
                        _nextItem$easing = nextItem.easing,
                        easing = _nextItem$easing === void 0 ? 'ease' : _nextItem$easing,
                        style = nextItem.style,
                        nextProperties = nextItem.properties,
                        onAnimationEnd2 = nextItem.onAnimationEnd
                    var preItem = index2 > 0 ? steps[index2 - 1] : nextItem
                    var properties = nextProperties || Object.keys(style)
                    if (typeof easing === 'function' || easing === 'spring') {
                        return [].concat(_toConsumableArray$5(sequence), [
                            _this3.runJSAnimation.bind(_this3, {
                                from: preItem.style,
                                to: style,
                                duration,
                                easing
                            }),
                            duration
                        ])
                    }
                    var transition = getTransitionVal(properties, duration, easing)
                    var newStyle = _objectSpread$o(
                        _objectSpread$o(_objectSpread$o({}, preItem.style), style),
                        {},
                        {
                            transition
                        }
                    )
                    return []
                        .concat(_toConsumableArray$5(sequence), [
                            newStyle,
                            duration,
                            onAnimationEnd2
                        ])
                        .filter(identity2)
                }
                return this.manager.start(
                    [onAnimationStart2].concat(
                        _toConsumableArray$5(
                            steps.reduce(addStyle, [initialStyle, Math.max(initialTime, begin)])
                        ),
                        [props.onAnimationEnd]
                    )
                )
            }
        },
        {
            key: 'runAnimation',
            value: function runAnimation(props) {
                if (!this.manager) {
                    this.manager = createAnimateManager()
                }
                var begin = props.begin,
                    duration = props.duration,
                    attributeName = props.attributeName,
                    propsTo = props.to,
                    easing = props.easing,
                    onAnimationStart2 = props.onAnimationStart,
                    onAnimationEnd2 = props.onAnimationEnd,
                    steps = props.steps,
                    children = props.children
                var manager = this.manager
                this.unSubscribe = manager.subscribe(this.handleStyleChange)
                if (
                    typeof easing === 'function' ||
                    typeof children === 'function' ||
                    easing === 'spring'
                ) {
                    this.runJSAnimation(props)
                    return
                }
                if (steps.length > 1) {
                    this.runStepAnimation(props)
                    return
                }
                var to = attributeName ? _defineProperty$s({}, attributeName, propsTo) : propsTo
                var transition = getTransitionVal(Object.keys(to), duration, easing)
                manager.start([
                    onAnimationStart2,
                    begin,
                    _objectSpread$o(
                        _objectSpread$o({}, to),
                        {},
                        {
                            transition
                        }
                    ),
                    duration,
                    onAnimationEnd2
                ])
            }
        },
        {
            key: 'render',
            value: function render() {
                var _this$props4 = this.props,
                    children = _this$props4.children
                _this$props4.begin
                var duration = _this$props4.duration
                _this$props4.attributeName
                _this$props4.easing
                var isActive = _this$props4.isActive
                _this$props4.steps
                _this$props4.from
                _this$props4.to
                _this$props4.canBegin
                _this$props4.onAnimationEnd
                _this$props4.shouldReAnimate
                _this$props4.onAnimationReStart
                var others = _objectWithoutProperties$e(_this$props4, _excluded$k)
                var count2 = reactExports.Children.count(children)
                var stateStyle = this.state.style
                if (typeof children === 'function') {
                    return children(stateStyle)
                }
                if (!isActive || count2 === 0 || duration <= 0) {
                    return children
                }
                var cloneContainer = function cloneContainer2(container) {
                    var _container$props = container.props,
                        _container$props$styl = _container$props.style,
                        style = _container$props$styl === void 0 ? {} : _container$props$styl,
                        className = _container$props.className
                    var res = /* @__PURE__ */ reactExports.cloneElement(
                        container,
                        _objectSpread$o(
                            _objectSpread$o({}, others),
                            {},
                            {
                                style: _objectSpread$o(_objectSpread$o({}, style), stateStyle),
                                className
                            }
                        )
                    )
                    return res
                }
                if (count2 === 1) {
                    return cloneContainer(reactExports.Children.only(children))
                }
                return /* @__PURE__ */ React.createElement(
                    'div',
                    null,
                    reactExports.Children.map(children, function (child) {
                        return cloneContainer(child)
                    })
                )
            }
        }
    ])
    return Animate2
})(reactExports.PureComponent)
Animate.displayName = 'Animate'
Animate.defaultProps = {
    begin: 0,
    duration: 1e3,
    from: '',
    to: '',
    attributeName: '',
    easing: 'ease',
    isActive: true,
    canBegin: true,
    steps: [],
    onAnimationEnd: function onAnimationEnd() {},
    onAnimationStart: function onAnimationStart() {}
}
Animate.propTypes = {
    from: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
    to: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
    attributeName: PropTypes.string,
    // animation duration
    duration: PropTypes.number,
    begin: PropTypes.number,
    easing: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
    steps: PropTypes.arrayOf(
        PropTypes.shape({
            duration: PropTypes.number.isRequired,
            style: PropTypes.object.isRequired,
            easing: PropTypes.oneOfType([
                PropTypes.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),
                PropTypes.func
            ]),
            // transition css properties(dash case), optional
            properties: PropTypes.arrayOf('string'),
            onAnimationEnd: PropTypes.func
        })
    ),
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    isActive: PropTypes.bool,
    canBegin: PropTypes.bool,
    onAnimationEnd: PropTypes.func,
    // decide if it should reanimate with initial from style when props change
    shouldReAnimate: PropTypes.bool,
    onAnimationStart: PropTypes.func,
    onAnimationReStart: PropTypes.func
}
function _extends$n() {
    return (
        (_extends$n = Object.assign
            ? Object.assign.bind()
            : function (n) {
                  for (var e = 1; e < arguments.length; e++) {
                      var t = arguments[e]
                      for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2])
                  }
                  return n
              }),
        _extends$n.apply(null, arguments)
    )
}
function _objectWithoutPropertiesLoose$d(r2, e) {
    if (null == r2) return {}
    var t = {}
    for (var n in r2)
        if ({}.hasOwnProperty.call(r2, n)) {
            if (-1 !== e.indexOf(n)) continue
            t[n] = r2[n]
        }
    return t
}
function _setPrototypeOf$f(t, e) {
    return (
        (_setPrototypeOf$f = Object.setPrototypeOf
            ? Object.setPrototypeOf.bind()
            : function (t2, e3) {
                  return (t2.__proto__ = e3), t2
              }),
        _setPrototypeOf$f(t, e)
    )
}
function _assertThisInitialized$f(e) {
    if (void 0 === e)
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    return e
}
function _typeof$r(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$r =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$r(o)
    )
}
function _extends$m() {
    _extends$m = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$m.apply(this, arguments)
}
function _slicedToArray$4(arr, i) {
    return (
        _arrayWithHoles$4(arr) ||
        _iterableToArrayLimit$4(arr, i) ||
        _unsupportedIterableToArray$7(arr, i) ||
        _nonIterableRest$4()
    )
}
function _nonIterableRest$4() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$7(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$7(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$7(o, minLen)
}
function _arrayLikeToArray$7(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$4(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$4(arr) {
    if (Array.isArray(arr)) return arr
}
function ownKeys$o(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$n(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$o(Object(t), true).forEach(function (r3) {
                  _defineProperty$r(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$o(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$r(obj, key, value) {
    key = _toPropertyKey$q(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$q(t) {
    var i = _toPrimitive$q(t, 'string')
    return 'symbol' == _typeof$r(i) ? i : i + ''
}
function _toPrimitive$q(t, r2) {
    if ('object' != _typeof$r(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$r(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var getRectanglePath = function getRectanglePath2(x2, y2, width, height, radius) {
    var maxRadius = Math.min(Math.abs(width) / 2, Math.abs(height) / 2)
    var ySign = height >= 0 ? 1 : -1
    var xSign = width >= 0 ? 1 : -1
    var clockWise = (height >= 0 && width >= 0) || (height < 0 && width < 0) ? 1 : 0
    var path
    if (maxRadius > 0 && radius instanceof Array) {
        var newRadius = [0, 0, 0, 0]
        for (var i = 0, len = 4; i < len; i++) {
            newRadius[i] = radius[i] > maxRadius ? maxRadius : radius[i]
        }
        path = 'M'.concat(x2, ',').concat(y2 + ySign * newRadius[0])
        if (newRadius[0] > 0) {
            path += 'A '
                .concat(newRadius[0], ',')
                .concat(newRadius[0], ',0,0,')
                .concat(clockWise, ',')
                .concat(x2 + xSign * newRadius[0], ',')
                .concat(y2)
        }
        path += 'L '.concat(x2 + width - xSign * newRadius[1], ',').concat(y2)
        if (newRadius[1] > 0) {
            path += 'A '
                .concat(newRadius[1], ',')
                .concat(newRadius[1], ',0,0,')
                .concat(clockWise, ',\n        ')
                .concat(x2 + width, ',')
                .concat(y2 + ySign * newRadius[1])
        }
        path += 'L '.concat(x2 + width, ',').concat(y2 + height - ySign * newRadius[2])
        if (newRadius[2] > 0) {
            path += 'A '
                .concat(newRadius[2], ',')
                .concat(newRadius[2], ',0,0,')
                .concat(clockWise, ',\n        ')
                .concat(x2 + width - xSign * newRadius[2], ',')
                .concat(y2 + height)
        }
        path += 'L '.concat(x2 + xSign * newRadius[3], ',').concat(y2 + height)
        if (newRadius[3] > 0) {
            path += 'A '
                .concat(newRadius[3], ',')
                .concat(newRadius[3], ',0,0,')
                .concat(clockWise, ',\n        ')
                .concat(x2, ',')
                .concat(y2 + height - ySign * newRadius[3])
        }
        path += 'Z'
    } else if (maxRadius > 0 && radius === +radius && radius > 0) {
        var _newRadius = Math.min(maxRadius, radius)
        path = 'M '
            .concat(x2, ',')
            .concat(y2 + ySign * _newRadius, '\n            A ')
            .concat(_newRadius, ',')
            .concat(_newRadius, ',0,0,')
            .concat(clockWise, ',')
            .concat(x2 + xSign * _newRadius, ',')
            .concat(y2, '\n            L ')
            .concat(x2 + width - xSign * _newRadius, ',')
            .concat(y2, '\n            A ')
            .concat(_newRadius, ',')
            .concat(_newRadius, ',0,0,')
            .concat(clockWise, ',')
            .concat(x2 + width, ',')
            .concat(y2 + ySign * _newRadius, '\n            L ')
            .concat(x2 + width, ',')
            .concat(y2 + height - ySign * _newRadius, '\n            A ')
            .concat(_newRadius, ',')
            .concat(_newRadius, ',0,0,')
            .concat(clockWise, ',')
            .concat(x2 + width - xSign * _newRadius, ',')
            .concat(y2 + height, '\n            L ')
            .concat(x2 + xSign * _newRadius, ',')
            .concat(y2 + height, '\n            A ')
            .concat(_newRadius, ',')
            .concat(_newRadius, ',0,0,')
            .concat(clockWise, ',')
            .concat(x2, ',')
            .concat(y2 + height - ySign * _newRadius, ' Z')
    } else {
        path = 'M '
            .concat(x2, ',')
            .concat(y2, ' h ')
            .concat(width, ' v ')
            .concat(height, ' h ')
            .concat(-width, ' Z')
    }
    return path
}
var isInRectangle = function isInRectangle2(point2, rect) {
    if (!point2 || !rect) {
        return false
    }
    var px = point2.x,
        py = point2.y
    var x2 = rect.x,
        y2 = rect.y,
        width = rect.width,
        height = rect.height
    if (Math.abs(width) > 0 && Math.abs(height) > 0) {
        var minX = Math.min(x2, x2 + width)
        var maxX = Math.max(x2, x2 + width)
        var minY = Math.min(y2, y2 + height)
        var maxY = Math.max(y2, y2 + height)
        return px >= minX && px <= maxX && py >= minY && py <= maxY
    }
    return false
}
var defaultProps$3 = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    // The radius of border
    // The radius of four corners when radius is a number
    // The radius of left-top, right-top, right-bottom, left-bottom when radius is an array
    radius: 0,
    isAnimationActive: false,
    isUpdateAnimationActive: false,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: 'ease'
}
var Rectangle = function Rectangle2(rectangleProps) {
    var props = _objectSpread$n(_objectSpread$n({}, defaultProps$3), rectangleProps)
    var pathRef = reactExports.useRef()
    var _useState = reactExports.useState(-1),
        _useState2 = _slicedToArray$4(_useState, 2),
        totalLength = _useState2[0],
        setTotalLength = _useState2[1]
    reactExports.useEffect(function () {
        if (pathRef.current && pathRef.current.getTotalLength) {
            try {
                var pathTotalLength = pathRef.current.getTotalLength()
                if (pathTotalLength) {
                    setTotalLength(pathTotalLength)
                }
            } catch (err) {}
        }
    }, [])
    var x2 = props.x,
        y2 = props.y,
        width = props.width,
        height = props.height,
        radius = props.radius,
        className = props.className
    var animationEasing = props.animationEasing,
        animationDuration = props.animationDuration,
        animationBegin = props.animationBegin,
        isAnimationActive = props.isAnimationActive,
        isUpdateAnimationActive = props.isUpdateAnimationActive
    if (
        x2 !== +x2 ||
        y2 !== +y2 ||
        width !== +width ||
        height !== +height ||
        width === 0 ||
        height === 0
    ) {
        return null
    }
    var layerClass = clsx('recharts-rectangle', className)
    if (!isUpdateAnimationActive) {
        return /* @__PURE__ */ React.createElement(
            'path',
            _extends$m({}, filterProps(props, true), {
                className: layerClass,
                d: getRectanglePath(x2, y2, width, height, radius)
            })
        )
    }
    return /* @__PURE__ */ React.createElement(
        Animate,
        {
            canBegin: totalLength > 0,
            from: {
                width,
                height,
                x: x2,
                y: y2
            },
            to: {
                width,
                height,
                x: x2,
                y: y2
            },
            duration: animationDuration,
            animationEasing,
            isActive: isUpdateAnimationActive
        },
        function (_ref3) {
            var currWidth = _ref3.width,
                currHeight = _ref3.height,
                currX = _ref3.x,
                currY = _ref3.y
            return /* @__PURE__ */ React.createElement(
                Animate,
                {
                    canBegin: totalLength > 0,
                    from: '0px '.concat(totalLength === -1 ? 1 : totalLength, 'px'),
                    to: ''.concat(totalLength, 'px 0px'),
                    attributeName: 'strokeDasharray',
                    begin: animationBegin,
                    duration: animationDuration,
                    isActive: isAnimationActive,
                    easing: animationEasing
                },
                /* @__PURE__ */ React.createElement(
                    'path',
                    _extends$m({}, filterProps(props, true), {
                        className: layerClass,
                        d: getRectanglePath(currX, currY, currWidth, currHeight, radius),
                        ref: pathRef
                    })
                )
            )
        }
    )
}
var _excluded$j = ['points', 'className', 'baseLinePoints', 'connectNulls']
function _extends$l() {
    _extends$l = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$l.apply(this, arguments)
}
function _objectWithoutProperties$d(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$c(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$c(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _toConsumableArray$4(arr) {
    return (
        _arrayWithoutHoles$4(arr) ||
        _iterableToArray$4(arr) ||
        _unsupportedIterableToArray$6(arr) ||
        _nonIterableSpread$4()
    )
}
function _nonIterableSpread$4() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$6(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$6(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$6(o, minLen)
}
function _iterableToArray$4(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$4(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$6(arr)
}
function _arrayLikeToArray$6(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
var isValidatePoint = function isValidatePoint2(point2) {
    return point2 && point2.x === +point2.x && point2.y === +point2.y
}
var getParsedPoints = function getParsedPoints2() {
    var points = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : []
    var segmentPoints = [[]]
    points.forEach(function (entry) {
        if (isValidatePoint(entry)) {
            segmentPoints[segmentPoints.length - 1].push(entry)
        } else if (segmentPoints[segmentPoints.length - 1].length > 0) {
            segmentPoints.push([])
        }
    })
    if (isValidatePoint(points[0])) {
        segmentPoints[segmentPoints.length - 1].push(points[0])
    }
    if (segmentPoints[segmentPoints.length - 1].length <= 0) {
        segmentPoints = segmentPoints.slice(0, -1)
    }
    return segmentPoints
}
var getSinglePolygonPath = function getSinglePolygonPath2(points, connectNulls) {
    var segmentPoints = getParsedPoints(points)
    if (connectNulls) {
        segmentPoints = [
            segmentPoints.reduce(function (res, segPoints) {
                return [].concat(_toConsumableArray$4(res), _toConsumableArray$4(segPoints))
            }, [])
        ]
    }
    var polygonPath = segmentPoints
        .map(function (segPoints) {
            return segPoints.reduce(function (path, point2, index2) {
                return ''
                    .concat(path)
                    .concat(index2 === 0 ? 'M' : 'L')
                    .concat(point2.x, ',')
                    .concat(point2.y)
            }, '')
        })
        .join('')
    return segmentPoints.length === 1 ? ''.concat(polygonPath, 'Z') : polygonPath
}
var getRanglePath = function getRanglePath2(points, baseLinePoints, connectNulls) {
    var outerPath = getSinglePolygonPath(points, connectNulls)
    return ''
        .concat(outerPath.slice(-1) === 'Z' ? outerPath.slice(0, -1) : outerPath, 'L')
        .concat(getSinglePolygonPath(baseLinePoints.reverse(), connectNulls).slice(1))
}
var Polygon = function Polygon2(props) {
    var points = props.points,
        className = props.className,
        baseLinePoints = props.baseLinePoints,
        connectNulls = props.connectNulls,
        others = _objectWithoutProperties$d(props, _excluded$j)
    if (!points || !points.length) {
        return null
    }
    var layerClass = clsx('recharts-polygon', className)
    if (baseLinePoints && baseLinePoints.length) {
        var hasStroke = others.stroke && others.stroke !== 'none'
        var rangePath = getRanglePath(points, baseLinePoints, connectNulls)
        return /* @__PURE__ */ React.createElement(
            'g',
            {
                className: layerClass
            },
            /* @__PURE__ */ React.createElement(
                'path',
                _extends$l({}, filterProps(others, true), {
                    fill: rangePath.slice(-1) === 'Z' ? others.fill : 'none',
                    stroke: 'none',
                    d: rangePath
                })
            ),
            hasStroke
                ? /* @__PURE__ */ React.createElement(
                      'path',
                      _extends$l({}, filterProps(others, true), {
                          fill: 'none',
                          d: getSinglePolygonPath(points, connectNulls)
                      })
                  )
                : null,
            hasStroke
                ? /* @__PURE__ */ React.createElement(
                      'path',
                      _extends$l({}, filterProps(others, true), {
                          fill: 'none',
                          d: getSinglePolygonPath(baseLinePoints, connectNulls)
                      })
                  )
                : null
        )
    }
    var singlePath = getSinglePolygonPath(points, connectNulls)
    return /* @__PURE__ */ React.createElement(
        'path',
        _extends$l({}, filterProps(others, true), {
            fill: singlePath.slice(-1) === 'Z' ? others.fill : 'none',
            className: layerClass,
            d: singlePath
        })
    )
}
function _extends$k() {
    _extends$k = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$k.apply(this, arguments)
}
var Dot = function Dot2(props) {
    var cx = props.cx,
        cy = props.cy,
        r2 = props.r,
        className = props.className
    var layerClass = clsx('recharts-dot', className)
    if (cx === +cx && cy === +cy && r2 === +r2) {
        return /* @__PURE__ */ React.createElement(
            'circle',
            _extends$k({}, filterProps(props, false), adaptEventHandlers(props), {
                className: layerClass,
                cx,
                cy,
                r: r2
            })
        )
    }
    return null
}
function _typeof$q(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$q =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$q(o)
    )
}
var _excluded$i = ['x', 'y', 'top', 'left', 'width', 'height', 'className']
function _extends$j() {
    _extends$j = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$j.apply(this, arguments)
}
function ownKeys$n(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$m(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$n(Object(t), true).forEach(function (r3) {
                  _defineProperty$q(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$n(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$q(obj, key, value) {
    key = _toPropertyKey$p(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$p(t) {
    var i = _toPrimitive$p(t, 'string')
    return 'symbol' == _typeof$q(i) ? i : i + ''
}
function _toPrimitive$p(t, r2) {
    if ('object' != _typeof$q(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$q(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function _objectWithoutProperties$c(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$b(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$b(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
var getPath2 = function getPath3(x2, y2, width, height, top, left) {
    return 'M'
        .concat(x2, ',')
        .concat(top, 'v')
        .concat(height, 'M')
        .concat(left, ',')
        .concat(y2, 'h')
        .concat(width)
}
var Cross = function Cross2(_ref3) {
    var _ref$x = _ref3.x,
        x2 = _ref$x === void 0 ? 0 : _ref$x,
        _ref$y = _ref3.y,
        y2 = _ref$y === void 0 ? 0 : _ref$y,
        _ref$top = _ref3.top,
        top = _ref$top === void 0 ? 0 : _ref$top,
        _ref$left = _ref3.left,
        left = _ref$left === void 0 ? 0 : _ref$left,
        _ref$width = _ref3.width,
        width = _ref$width === void 0 ? 0 : _ref$width,
        _ref$height = _ref3.height,
        height = _ref$height === void 0 ? 0 : _ref$height,
        className = _ref3.className,
        rest = _objectWithoutProperties$c(_ref3, _excluded$i)
    var props = _objectSpread$m(
        {
            x: x2,
            y: y2,
            top,
            left,
            width,
            height
        },
        rest
    )
    if (
        !isNumber(x2) ||
        !isNumber(y2) ||
        !isNumber(width) ||
        !isNumber(height) ||
        !isNumber(top) ||
        !isNumber(left)
    ) {
        return null
    }
    return /* @__PURE__ */ React.createElement(
        'path',
        _extends$j({}, filterProps(props, true), {
            className: clsx('recharts-cross', className),
            d: getPath2(x2, y2, width, height, top, left)
        })
    )
}
var _excluded$h = ['cx', 'cy', 'innerRadius', 'outerRadius', 'gridType', 'radialLines']
function _typeof$p(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$p =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$p(o)
    )
}
function _objectWithoutProperties$b(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$a(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$a(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _extends$i() {
    _extends$i = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$i.apply(this, arguments)
}
function ownKeys$m(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$l(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$m(Object(t), true).forEach(function (r3) {
                  _defineProperty$p(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$m(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$p(obj, key, value) {
    key = _toPropertyKey$o(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$o(t) {
    var i = _toPrimitive$o(t, 'string')
    return 'symbol' == _typeof$p(i) ? i : i + ''
}
function _toPrimitive$o(t, r2) {
    if ('object' != _typeof$p(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$p(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var getPolygonPath = function getPolygonPath2(radius, cx, cy, polarAngles) {
    var path = ''
    polarAngles.forEach(function (angle, i) {
        var point2 = polarToCartesian(cx, cy, radius, angle)
        if (i) {
            path += 'L '.concat(point2.x, ',').concat(point2.y)
        } else {
            path += 'M '.concat(point2.x, ',').concat(point2.y)
        }
    })
    path += 'Z'
    return path
}
var PolarAngles = function PolarAngles2(props) {
    var cx = props.cx,
        cy = props.cy,
        innerRadius = props.innerRadius,
        outerRadius = props.outerRadius,
        polarAngles = props.polarAngles,
        radialLines = props.radialLines
    if (!polarAngles || !polarAngles.length || !radialLines) {
        return null
    }
    var polarAnglesProps = _objectSpread$l(
        {
            stroke: '#ccc'
        },
        filterProps(props, false)
    )
    return /* @__PURE__ */ React.createElement(
        'g',
        {
            className: 'recharts-polar-grid-angle'
        },
        polarAngles.map(function (entry) {
            var start = polarToCartesian(cx, cy, innerRadius, entry)
            var end = polarToCartesian(cx, cy, outerRadius, entry)
            return /* @__PURE__ */ React.createElement(
                'line',
                _extends$i({}, polarAnglesProps, {
                    key: 'line-'.concat(entry),
                    x1: start.x,
                    y1: start.y,
                    x2: end.x,
                    y2: end.y
                })
            )
        })
    )
}
var ConcentricCircle = function ConcentricCircle2(props) {
    var cx = props.cx,
        cy = props.cy,
        radius = props.radius,
        index2 = props.index
    var concentricCircleProps = _objectSpread$l(
        _objectSpread$l(
            {
                stroke: '#ccc'
            },
            filterProps(props, false)
        ),
        {},
        {
            fill: 'none'
        }
    )
    return /* @__PURE__ */ React.createElement(
        'circle',
        _extends$i({}, concentricCircleProps, {
            className: clsx('recharts-polar-grid-concentric-circle', props.className),
            key: 'circle-'.concat(index2),
            cx,
            cy,
            r: radius
        })
    )
}
var ConcentricPolygon = function ConcentricPolygon2(props) {
    var radius = props.radius,
        index2 = props.index
    var concentricPolygonProps = _objectSpread$l(
        _objectSpread$l(
            {
                stroke: '#ccc'
            },
            filterProps(props, false)
        ),
        {},
        {
            fill: 'none'
        }
    )
    return /* @__PURE__ */ React.createElement(
        'path',
        _extends$i({}, concentricPolygonProps, {
            className: clsx('recharts-polar-grid-concentric-polygon', props.className),
            key: 'path-'.concat(index2),
            d: getPolygonPath(radius, props.cx, props.cy, props.polarAngles)
        })
    )
}
var ConcentricPath = function ConcentricPath2(props) {
    var polarRadius = props.polarRadius,
        gridType = props.gridType
    if (!polarRadius || !polarRadius.length) {
        return null
    }
    return /* @__PURE__ */ React.createElement(
        'g',
        {
            className: 'recharts-polar-grid-concentric'
        },
        polarRadius.map(function (entry, i) {
            var key = i
            if (gridType === 'circle')
                return /* @__PURE__ */ React.createElement(
                    ConcentricCircle,
                    _extends$i(
                        {
                            key
                        },
                        props,
                        {
                            radius: entry,
                            index: i
                        }
                    )
                )
            return /* @__PURE__ */ React.createElement(
                ConcentricPolygon,
                _extends$i(
                    {
                        key
                    },
                    props,
                    {
                        radius: entry,
                        index: i
                    }
                )
            )
        })
    )
}
var PolarGrid = function PolarGrid2(_ref3) {
    var _ref$cx = _ref3.cx,
        cx = _ref$cx === void 0 ? 0 : _ref$cx,
        _ref$cy = _ref3.cy,
        cy = _ref$cy === void 0 ? 0 : _ref$cy,
        _ref$innerRadius = _ref3.innerRadius,
        innerRadius = _ref$innerRadius === void 0 ? 0 : _ref$innerRadius,
        _ref$outerRadius = _ref3.outerRadius,
        outerRadius = _ref$outerRadius === void 0 ? 0 : _ref$outerRadius,
        _ref$gridType = _ref3.gridType,
        gridType = _ref$gridType === void 0 ? 'polygon' : _ref$gridType,
        _ref$radialLines = _ref3.radialLines,
        radialLines = _ref$radialLines === void 0 ? true : _ref$radialLines,
        props = _objectWithoutProperties$b(_ref3, _excluded$h)
    if (outerRadius <= 0) {
        return null
    }
    return /* @__PURE__ */ React.createElement(
        'g',
        {
            className: 'recharts-polar-grid'
        },
        /* @__PURE__ */ React.createElement(
            PolarAngles,
            _extends$i(
                {
                    cx,
                    cy,
                    innerRadius,
                    outerRadius,
                    gridType,
                    radialLines
                },
                props
            )
        ),
        /* @__PURE__ */ React.createElement(
            ConcentricPath,
            _extends$i(
                {
                    cx,
                    cy,
                    innerRadius,
                    outerRadius,
                    gridType,
                    radialLines
                },
                props
            )
        )
    )
}
PolarGrid.displayName = 'PolarGrid'
var maxBy_1
var hasRequiredMaxBy
function requireMaxBy() {
    if (hasRequiredMaxBy) return maxBy_1
    hasRequiredMaxBy = 1
    var baseExtremum = require_baseExtremum(),
        baseGt = require_baseGt(),
        baseIteratee = require_baseIteratee()
    function maxBy2(array2, iteratee) {
        return array2 && array2.length
            ? baseExtremum(array2, baseIteratee(iteratee, 2), baseGt)
            : void 0
    }
    maxBy_1 = maxBy2
    return maxBy_1
}
var maxByExports = requireMaxBy()
const maxBy = /* @__PURE__ */ getDefaultExportFromCjs(maxByExports)
var minBy_1
var hasRequiredMinBy
function requireMinBy() {
    if (hasRequiredMinBy) return minBy_1
    hasRequiredMinBy = 1
    var baseExtremum = require_baseExtremum(),
        baseIteratee = require_baseIteratee(),
        baseLt = require_baseLt()
    function minBy2(array2, iteratee) {
        return array2 && array2.length
            ? baseExtremum(array2, baseIteratee(iteratee, 2), baseLt)
            : void 0
    }
    minBy_1 = minBy2
    return minBy_1
}
var minByExports = requireMinBy()
const minBy = /* @__PURE__ */ getDefaultExportFromCjs(minByExports)
var _excluded$g = ['cx', 'cy', 'angle', 'ticks', 'axisLine'],
    _excluded2$7 = ['ticks', 'tick', 'angle', 'tickFormatter', 'stroke']
function _typeof$o(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$o =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$o(o)
    )
}
function _extends$h() {
    _extends$h = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$h.apply(this, arguments)
}
function ownKeys$l(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$k(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$l(Object(t), true).forEach(function (r3) {
                  _defineProperty$o(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$l(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _objectWithoutProperties$a(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$9(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$9(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _classCallCheck$h(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$h(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$n(descriptor.key), descriptor)
    }
}
function _createClass$h(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$h(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$h(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$e(t, o, e) {
    return (
        (o = _getPrototypeOf$f(o)),
        _possibleConstructorReturn$f(
            t,
            _isNativeReflectConstruct$f()
                ? Reflect.construct(o, e || [], _getPrototypeOf$f(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$f(self2, call) {
    if (call && (_typeof$o(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$e(self2)
}
function _assertThisInitialized$e(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$f() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$f = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$f(o) {
    _getPrototypeOf$f = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$f(o)
}
function _inherits$f(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$e(subClass, superClass)
}
function _setPrototypeOf$e(o, p) {
    _setPrototypeOf$e = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$e(o, p)
}
function _defineProperty$o(obj, key, value) {
    key = _toPropertyKey$n(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$n(t) {
    var i = _toPrimitive$n(t, 'string')
    return 'symbol' == _typeof$o(i) ? i : i + ''
}
function _toPrimitive$n(t, r2) {
    if ('object' != _typeof$o(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$o(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var PolarRadiusAxis = /* @__PURE__ */ (function (_PureComponent) {
    function PolarRadiusAxis2() {
        _classCallCheck$h(this, PolarRadiusAxis2)
        return _callSuper$e(this, PolarRadiusAxis2, arguments)
    }
    _inherits$f(PolarRadiusAxis2, _PureComponent)
    return _createClass$h(
        PolarRadiusAxis2,
        [
            {
                key: 'getTickValueCoord',
                value:
                    /**
                     * Calculate the coordinate of tick
                     * @param  {Number} coordinate The radius of tick
                     * @return {Object} (x, y)
                     */
                    function getTickValueCoord(_ref3) {
                        var coordinate = _ref3.coordinate
                        var _this$props = this.props,
                            angle = _this$props.angle,
                            cx = _this$props.cx,
                            cy = _this$props.cy
                        return polarToCartesian(cx, cy, coordinate, angle)
                    }
            },
            {
                key: 'getTickTextAnchor',
                value: function getTickTextAnchor() {
                    var orientation = this.props.orientation
                    var textAnchor
                    switch (orientation) {
                        case 'left':
                            textAnchor = 'end'
                            break
                        case 'right':
                            textAnchor = 'start'
                            break
                        default:
                            textAnchor = 'middle'
                            break
                    }
                    return textAnchor
                }
            },
            {
                key: 'getViewBox',
                value: function getViewBox() {
                    var _this$props2 = this.props,
                        cx = _this$props2.cx,
                        cy = _this$props2.cy,
                        angle = _this$props2.angle,
                        ticks2 = _this$props2.ticks
                    var maxRadiusTick = maxBy(ticks2, function (entry) {
                        return entry.coordinate || 0
                    })
                    var minRadiusTick = minBy(ticks2, function (entry) {
                        return entry.coordinate || 0
                    })
                    return {
                        cx,
                        cy,
                        startAngle: angle,
                        endAngle: angle,
                        innerRadius: minRadiusTick.coordinate || 0,
                        outerRadius: maxRadiusTick.coordinate || 0
                    }
                }
            },
            {
                key: 'renderAxisLine',
                value: function renderAxisLine() {
                    var _this$props3 = this.props,
                        cx = _this$props3.cx,
                        cy = _this$props3.cy,
                        angle = _this$props3.angle,
                        ticks2 = _this$props3.ticks,
                        axisLine = _this$props3.axisLine,
                        others = _objectWithoutProperties$a(_this$props3, _excluded$g)
                    var extent2 = ticks2.reduce(
                        function (result, entry) {
                            return [
                                Math.min(result[0], entry.coordinate),
                                Math.max(result[1], entry.coordinate)
                            ]
                        },
                        [Infinity, -Infinity]
                    )
                    var point0 = polarToCartesian(cx, cy, extent2[0], angle)
                    var point1 = polarToCartesian(cx, cy, extent2[1], angle)
                    var props = _objectSpread$k(
                        _objectSpread$k(
                            _objectSpread$k({}, filterProps(others, false)),
                            {},
                            {
                                fill: 'none'
                            },
                            filterProps(axisLine, false)
                        ),
                        {},
                        {
                            x1: point0.x,
                            y1: point0.y,
                            x2: point1.x,
                            y2: point1.y
                        }
                    )
                    return /* @__PURE__ */ React.createElement(
                        'line',
                        _extends$h(
                            {
                                className: 'recharts-polar-radius-axis-line'
                            },
                            props
                        )
                    )
                }
            },
            {
                key: 'renderTicks',
                value: function renderTicks() {
                    var _this = this
                    var _this$props4 = this.props,
                        ticks2 = _this$props4.ticks,
                        tick = _this$props4.tick,
                        angle = _this$props4.angle,
                        tickFormatter = _this$props4.tickFormatter,
                        stroke = _this$props4.stroke,
                        others = _objectWithoutProperties$a(_this$props4, _excluded2$7)
                    var textAnchor = this.getTickTextAnchor()
                    var axisProps = filterProps(others, false)
                    var customTickProps = filterProps(tick, false)
                    var items = ticks2.map(function (entry, i) {
                        var coord = _this.getTickValueCoord(entry)
                        var tickProps = _objectSpread$k(
                            _objectSpread$k(
                                _objectSpread$k(
                                    _objectSpread$k(
                                        {
                                            textAnchor,
                                            transform: 'rotate('
                                                .concat(90 - angle, ', ')
                                                .concat(coord.x, ', ')
                                                .concat(coord.y, ')')
                                        },
                                        axisProps
                                    ),
                                    {},
                                    {
                                        stroke: 'none',
                                        fill: stroke
                                    },
                                    customTickProps
                                ),
                                {},
                                {
                                    index: i
                                },
                                coord
                            ),
                            {},
                            {
                                payload: entry
                            }
                        )
                        return /* @__PURE__ */ React.createElement(
                            Layer,
                            _extends$h(
                                {
                                    className: clsx(
                                        'recharts-polar-radius-axis-tick',
                                        getTickClassName(tick)
                                    ),
                                    key: 'tick-'.concat(entry.coordinate)
                                },
                                adaptEventsOfChild(_this.props, entry, i)
                            ),
                            PolarRadiusAxis2.renderTickItem(
                                tick,
                                tickProps,
                                tickFormatter ? tickFormatter(entry.value, i) : entry.value
                            )
                        )
                    })
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: 'recharts-polar-radius-axis-ticks'
                        },
                        items
                    )
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _this$props5 = this.props,
                        ticks2 = _this$props5.ticks,
                        axisLine = _this$props5.axisLine,
                        tick = _this$props5.tick
                    if (!ticks2 || !ticks2.length) {
                        return null
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: clsx('recharts-polar-radius-axis', this.props.className)
                        },
                        axisLine && this.renderAxisLine(),
                        tick && this.renderTicks(),
                        Label.renderCallByParent(this.props, this.getViewBox())
                    )
                }
            }
        ],
        [
            {
                key: 'renderTickItem',
                value: function renderTickItem(option, props, value) {
                    var tickItem
                    if (/* @__PURE__ */ React.isValidElement(option)) {
                        tickItem = /* @__PURE__ */ React.cloneElement(option, props)
                    } else if (isFunction(option)) {
                        tickItem = option(props)
                    } else {
                        tickItem = /* @__PURE__ */ React.createElement(
                            Text,
                            _extends$h({}, props, {
                                className: 'recharts-polar-radius-axis-tick-value'
                            }),
                            value
                        )
                    }
                    return tickItem
                }
            }
        ]
    )
})(reactExports.PureComponent)
_defineProperty$o(PolarRadiusAxis, 'displayName', 'PolarRadiusAxis')
_defineProperty$o(PolarRadiusAxis, 'axisType', 'radiusAxis')
_defineProperty$o(PolarRadiusAxis, 'defaultProps', {
    type: 'number',
    radiusAxisId: 0,
    cx: 0,
    cy: 0,
    angle: 0,
    orientation: 'right',
    stroke: '#ccc',
    axisLine: true,
    tick: true,
    tickCount: 5,
    allowDataOverflow: false,
    scale: 'auto',
    allowDuplicatedCategory: true
})
function _typeof$n(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$n =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$n(o)
    )
}
function _extends$g() {
    _extends$g = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$g.apply(this, arguments)
}
function ownKeys$k(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$j(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$k(Object(t), true).forEach(function (r3) {
                  _defineProperty$n(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$k(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$g(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$g(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$m(descriptor.key), descriptor)
    }
}
function _createClass$g(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$g(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$g(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$d(t, o, e) {
    return (
        (o = _getPrototypeOf$e(o)),
        _possibleConstructorReturn$e(
            t,
            _isNativeReflectConstruct$e()
                ? Reflect.construct(o, e || [], _getPrototypeOf$e(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$e(self2, call) {
    if (call && (_typeof$n(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$d(self2)
}
function _assertThisInitialized$d(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$e() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$e = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$e(o) {
    _getPrototypeOf$e = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$e(o)
}
function _inherits$e(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$d(subClass, superClass)
}
function _setPrototypeOf$d(o, p) {
    _setPrototypeOf$d = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$d(o, p)
}
function _defineProperty$n(obj, key, value) {
    key = _toPropertyKey$m(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$m(t) {
    var i = _toPrimitive$m(t, 'string')
    return 'symbol' == _typeof$n(i) ? i : i + ''
}
function _toPrimitive$m(t, r2) {
    if ('object' != _typeof$n(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$n(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var RADIAN$1 = Math.PI / 180
var eps = 1e-5
var PolarAngleAxis = /* @__PURE__ */ (function (_PureComponent) {
    function PolarAngleAxis2() {
        _classCallCheck$g(this, PolarAngleAxis2)
        return _callSuper$d(this, PolarAngleAxis2, arguments)
    }
    _inherits$e(PolarAngleAxis2, _PureComponent)
    return _createClass$g(
        PolarAngleAxis2,
        [
            {
                key: 'getTickLineCoord',
                value:
                    /**
                     * Calculate the coordinate of line endpoint
                     * @param  {Object} data The Data if ticks
                     * @return {Object} (x0, y0): The start point of text,
                     *                  (x1, y1): The end point close to text,
                     *                  (x2, y2): The end point close to axis
                     */
                    function getTickLineCoord(data) {
                        var _this$props = this.props,
                            cx = _this$props.cx,
                            cy = _this$props.cy,
                            radius = _this$props.radius,
                            orientation = _this$props.orientation,
                            tickSize = _this$props.tickSize
                        var tickLineSize = tickSize || 8
                        var p1 = polarToCartesian(cx, cy, radius, data.coordinate)
                        var p2 = polarToCartesian(
                            cx,
                            cy,
                            radius + (orientation === 'inner' ? -1 : 1) * tickLineSize,
                            data.coordinate
                        )
                        return {
                            x1: p1.x,
                            y1: p1.y,
                            x2: p2.x,
                            y2: p2.y
                        }
                    }
                /**
                 * Get the text-anchor of each tick
                 * @param  {Object} data Data of ticks
                 * @return {String} text-anchor
                 */
            },
            {
                key: 'getTickTextAnchor',
                value: function getTickTextAnchor(data) {
                    var orientation = this.props.orientation
                    var cos2 = Math.cos(-data.coordinate * RADIAN$1)
                    var textAnchor
                    if (cos2 > eps) {
                        textAnchor = orientation === 'outer' ? 'start' : 'end'
                    } else if (cos2 < -1e-5) {
                        textAnchor = orientation === 'outer' ? 'end' : 'start'
                    } else {
                        textAnchor = 'middle'
                    }
                    return textAnchor
                }
            },
            {
                key: 'renderAxisLine',
                value: function renderAxisLine() {
                    var _this$props2 = this.props,
                        cx = _this$props2.cx,
                        cy = _this$props2.cy,
                        radius = _this$props2.radius,
                        axisLine = _this$props2.axisLine,
                        axisLineType = _this$props2.axisLineType
                    var props = _objectSpread$j(
                        _objectSpread$j({}, filterProps(this.props, false)),
                        {},
                        {
                            fill: 'none'
                        },
                        filterProps(axisLine, false)
                    )
                    if (axisLineType === 'circle') {
                        return /* @__PURE__ */ React.createElement(
                            Dot,
                            _extends$g(
                                {
                                    className: 'recharts-polar-angle-axis-line'
                                },
                                props,
                                {
                                    cx,
                                    cy,
                                    r: radius
                                }
                            )
                        )
                    }
                    var ticks2 = this.props.ticks
                    var points = ticks2.map(function (entry) {
                        return polarToCartesian(cx, cy, radius, entry.coordinate)
                    })
                    return /* @__PURE__ */ React.createElement(
                        Polygon,
                        _extends$g(
                            {
                                className: 'recharts-polar-angle-axis-line'
                            },
                            props,
                            {
                                points
                            }
                        )
                    )
                }
            },
            {
                key: 'renderTicks',
                value: function renderTicks() {
                    var _this = this
                    var _this$props3 = this.props,
                        ticks2 = _this$props3.ticks,
                        tick = _this$props3.tick,
                        tickLine = _this$props3.tickLine,
                        tickFormatter = _this$props3.tickFormatter,
                        stroke = _this$props3.stroke
                    var axisProps = filterProps(this.props, false)
                    var customTickProps = filterProps(tick, false)
                    var tickLineProps = _objectSpread$j(
                        _objectSpread$j({}, axisProps),
                        {},
                        {
                            fill: 'none'
                        },
                        filterProps(tickLine, false)
                    )
                    var items = ticks2.map(function (entry, i) {
                        var lineCoord = _this.getTickLineCoord(entry)
                        var textAnchor = _this.getTickTextAnchor(entry)
                        var tickProps = _objectSpread$j(
                            _objectSpread$j(
                                _objectSpread$j(
                                    {
                                        textAnchor
                                    },
                                    axisProps
                                ),
                                {},
                                {
                                    stroke: 'none',
                                    fill: stroke
                                },
                                customTickProps
                            ),
                            {},
                            {
                                index: i,
                                payload: entry,
                                x: lineCoord.x2,
                                y: lineCoord.y2
                            }
                        )
                        return /* @__PURE__ */ React.createElement(
                            Layer,
                            _extends$g(
                                {
                                    className: clsx(
                                        'recharts-polar-angle-axis-tick',
                                        getTickClassName(tick)
                                    ),
                                    key: 'tick-'.concat(entry.coordinate)
                                },
                                adaptEventsOfChild(_this.props, entry, i)
                            ),
                            tickLine &&
                                /* @__PURE__ */ React.createElement(
                                    'line',
                                    _extends$g(
                                        {
                                            className: 'recharts-polar-angle-axis-tick-line'
                                        },
                                        tickLineProps,
                                        lineCoord
                                    )
                                ),
                            tick &&
                                PolarAngleAxis2.renderTickItem(
                                    tick,
                                    tickProps,
                                    tickFormatter ? tickFormatter(entry.value, i) : entry.value
                                )
                        )
                    })
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: 'recharts-polar-angle-axis-ticks'
                        },
                        items
                    )
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _this$props4 = this.props,
                        ticks2 = _this$props4.ticks,
                        radius = _this$props4.radius,
                        axisLine = _this$props4.axisLine
                    if (radius <= 0 || !ticks2 || !ticks2.length) {
                        return null
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: clsx('recharts-polar-angle-axis', this.props.className)
                        },
                        axisLine && this.renderAxisLine(),
                        this.renderTicks()
                    )
                }
            }
        ],
        [
            {
                key: 'renderTickItem',
                value: function renderTickItem(option, props, value) {
                    var tickItem
                    if (/* @__PURE__ */ React.isValidElement(option)) {
                        tickItem = /* @__PURE__ */ React.cloneElement(option, props)
                    } else if (isFunction(option)) {
                        tickItem = option(props)
                    } else {
                        tickItem = /* @__PURE__ */ React.createElement(
                            Text,
                            _extends$g({}, props, {
                                className: 'recharts-polar-angle-axis-tick-value'
                            }),
                            value
                        )
                    }
                    return tickItem
                }
            }
        ]
    )
})(reactExports.PureComponent)
_defineProperty$n(PolarAngleAxis, 'displayName', 'PolarAngleAxis')
_defineProperty$n(PolarAngleAxis, 'axisType', 'angleAxis')
_defineProperty$n(PolarAngleAxis, 'defaultProps', {
    type: 'category',
    angleAxisId: 0,
    scale: 'auto',
    cx: 0,
    cy: 0,
    orientation: 'outer',
    axisLine: true,
    tickLine: true,
    tickSize: 8,
    tick: true,
    hide: false,
    allowDuplicatedCategory: true
})
var _getPrototype
var hasRequired_getPrototype
function require_getPrototype() {
    if (hasRequired_getPrototype) return _getPrototype
    hasRequired_getPrototype = 1
    var overArg = require_overArg()
    var getPrototype = overArg(Object.getPrototypeOf, Object)
    _getPrototype = getPrototype
    return _getPrototype
}
var isPlainObject_1
var hasRequiredIsPlainObject
function requireIsPlainObject() {
    if (hasRequiredIsPlainObject) return isPlainObject_1
    hasRequiredIsPlainObject = 1
    var baseGetTag = require_baseGetTag(),
        getPrototype = require_getPrototype(),
        isObjectLike = requireIsObjectLike()
    var objectTag = '[object Object]'
    var funcProto = Function.prototype,
        objectProto = Object.prototype
    var funcToString = funcProto.toString
    var hasOwnProperty2 = objectProto.hasOwnProperty
    var objectCtorString = funcToString.call(Object)
    function isPlainObject2(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false
        }
        var proto = getPrototype(value)
        if (proto === null) {
            return true
        }
        var Ctor = hasOwnProperty2.call(proto, 'constructor') && proto.constructor
        return (
            typeof Ctor == 'function' &&
            Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString
        )
    }
    isPlainObject_1 = isPlainObject2
    return isPlainObject_1
}
var isPlainObjectExports = requireIsPlainObject()
const isPlainObject = /* @__PURE__ */ getDefaultExportFromCjs(isPlainObjectExports)
var isBoolean_1
var hasRequiredIsBoolean
function requireIsBoolean() {
    if (hasRequiredIsBoolean) return isBoolean_1
    hasRequiredIsBoolean = 1
    var baseGetTag = require_baseGetTag(),
        isObjectLike = requireIsObjectLike()
    var boolTag = '[object Boolean]'
    function isBoolean2(value) {
        return (
            value === true ||
            value === false ||
            (isObjectLike(value) && baseGetTag(value) == boolTag)
        )
    }
    isBoolean_1 = isBoolean2
    return isBoolean_1
}
var isBooleanExports = requireIsBoolean()
const isBoolean = /* @__PURE__ */ getDefaultExportFromCjs(isBooleanExports)
function _typeof$m(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$m =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$m(o)
    )
}
function _extends$f() {
    _extends$f = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$f.apply(this, arguments)
}
function _slicedToArray$3(arr, i) {
    return (
        _arrayWithHoles$3(arr) ||
        _iterableToArrayLimit$3(arr, i) ||
        _unsupportedIterableToArray$5(arr, i) ||
        _nonIterableRest$3()
    )
}
function _nonIterableRest$3() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$5(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$5(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$5(o, minLen)
}
function _arrayLikeToArray$5(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$3(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$3(arr) {
    if (Array.isArray(arr)) return arr
}
function ownKeys$j(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$i(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$j(Object(t), true).forEach(function (r3) {
                  _defineProperty$m(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$j(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$m(obj, key, value) {
    key = _toPropertyKey$l(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$l(t) {
    var i = _toPrimitive$l(t, 'string')
    return 'symbol' == _typeof$m(i) ? i : i + ''
}
function _toPrimitive$l(t, r2) {
    if ('object' != _typeof$m(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$m(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var getTrapezoidPath = function getTrapezoidPath2(x2, y2, upperWidth, lowerWidth, height) {
    var widthGap = upperWidth - lowerWidth
    var path
    path = 'M '.concat(x2, ',').concat(y2)
    path += 'L '.concat(x2 + upperWidth, ',').concat(y2)
    path += 'L '.concat(x2 + upperWidth - widthGap / 2, ',').concat(y2 + height)
    path += 'L '.concat(x2 + upperWidth - widthGap / 2 - lowerWidth, ',').concat(y2 + height)
    path += 'L '.concat(x2, ',').concat(y2, ' Z')
    return path
}
var defaultProps$2 = {
    x: 0,
    y: 0,
    upperWidth: 0,
    lowerWidth: 0,
    height: 0,
    isUpdateAnimationActive: false,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: 'ease'
}
var Trapezoid = function Trapezoid2(props) {
    var trapezoidProps = _objectSpread$i(_objectSpread$i({}, defaultProps$2), props)
    var pathRef = reactExports.useRef()
    var _useState = reactExports.useState(-1),
        _useState2 = _slicedToArray$3(_useState, 2),
        totalLength = _useState2[0],
        setTotalLength = _useState2[1]
    reactExports.useEffect(function () {
        if (pathRef.current && pathRef.current.getTotalLength) {
            try {
                var pathTotalLength = pathRef.current.getTotalLength()
                if (pathTotalLength) {
                    setTotalLength(pathTotalLength)
                }
            } catch (err) {}
        }
    }, [])
    var x2 = trapezoidProps.x,
        y2 = trapezoidProps.y,
        upperWidth = trapezoidProps.upperWidth,
        lowerWidth = trapezoidProps.lowerWidth,
        height = trapezoidProps.height,
        className = trapezoidProps.className
    var animationEasing = trapezoidProps.animationEasing,
        animationDuration = trapezoidProps.animationDuration,
        animationBegin = trapezoidProps.animationBegin,
        isUpdateAnimationActive = trapezoidProps.isUpdateAnimationActive
    if (
        x2 !== +x2 ||
        y2 !== +y2 ||
        upperWidth !== +upperWidth ||
        lowerWidth !== +lowerWidth ||
        height !== +height ||
        (upperWidth === 0 && lowerWidth === 0) ||
        height === 0
    ) {
        return null
    }
    var layerClass = clsx('recharts-trapezoid', className)
    if (!isUpdateAnimationActive) {
        return /* @__PURE__ */ React.createElement(
            'g',
            null,
            /* @__PURE__ */ React.createElement(
                'path',
                _extends$f({}, filterProps(trapezoidProps, true), {
                    className: layerClass,
                    d: getTrapezoidPath(x2, y2, upperWidth, lowerWidth, height)
                })
            )
        )
    }
    return /* @__PURE__ */ React.createElement(
        Animate,
        {
            canBegin: totalLength > 0,
            from: {
                upperWidth: 0,
                lowerWidth: 0,
                height,
                x: x2,
                y: y2
            },
            to: {
                upperWidth,
                lowerWidth,
                height,
                x: x2,
                y: y2
            },
            duration: animationDuration,
            animationEasing,
            isActive: isUpdateAnimationActive
        },
        function (_ref3) {
            var currUpperWidth = _ref3.upperWidth,
                currLowerWidth = _ref3.lowerWidth,
                currHeight = _ref3.height,
                currX = _ref3.x,
                currY = _ref3.y
            return /* @__PURE__ */ React.createElement(
                Animate,
                {
                    canBegin: totalLength > 0,
                    from: '0px '.concat(totalLength === -1 ? 1 : totalLength, 'px'),
                    to: ''.concat(totalLength, 'px 0px'),
                    attributeName: 'strokeDasharray',
                    begin: animationBegin,
                    duration: animationDuration,
                    easing: animationEasing
                },
                /* @__PURE__ */ React.createElement(
                    'path',
                    _extends$f({}, filterProps(trapezoidProps, true), {
                        className: layerClass,
                        d: getTrapezoidPath(
                            currX,
                            currY,
                            currUpperWidth,
                            currLowerWidth,
                            currHeight
                        ),
                        ref: pathRef
                    })
                )
            )
        }
    )
}
var _excluded$f = ['option', 'shapeType', 'propTransformer', 'activeClassName', 'isActive']
function _typeof$l(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$l =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$l(o)
    )
}
function _objectWithoutProperties$9(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$8(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$8(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function ownKeys$i(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$h(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$i(Object(t), true).forEach(function (r3) {
                  _defineProperty$l(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$i(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$l(obj, key, value) {
    key = _toPropertyKey$k(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$k(t) {
    var i = _toPrimitive$k(t, 'string')
    return 'symbol' == _typeof$l(i) ? i : i + ''
}
function _toPrimitive$k(t, r2) {
    if ('object' != _typeof$l(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$l(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function defaultPropTransformer(option, props) {
    return _objectSpread$h(_objectSpread$h({}, props), option)
}
function isSymbolsProps(shapeType, _elementProps) {
    return shapeType === 'symbols'
}
function ShapeSelector(_ref3) {
    var shapeType = _ref3.shapeType,
        elementProps = _ref3.elementProps
    switch (shapeType) {
        case 'rectangle':
            return /* @__PURE__ */ React.createElement(Rectangle, elementProps)
        case 'trapezoid':
            return /* @__PURE__ */ React.createElement(Trapezoid, elementProps)
        case 'sector':
            return /* @__PURE__ */ React.createElement(Sector, elementProps)
        case 'symbols':
            if (isSymbolsProps(shapeType)) {
                return /* @__PURE__ */ React.createElement(Symbols, elementProps)
            }
            break
        default:
            return null
    }
}
function getPropsFromShapeOption(option) {
    if (/* @__PURE__ */ reactExports.isValidElement(option)) {
        return option.props
    }
    return option
}
function Shape(_ref22) {
    var option = _ref22.option,
        shapeType = _ref22.shapeType,
        _ref2$propTransformer = _ref22.propTransformer,
        propTransformer =
            _ref2$propTransformer === void 0 ? defaultPropTransformer : _ref2$propTransformer,
        _ref2$activeClassName = _ref22.activeClassName,
        activeClassName =
            _ref2$activeClassName === void 0 ? 'recharts-active-shape' : _ref2$activeClassName,
        isActive = _ref22.isActive,
        props = _objectWithoutProperties$9(_ref22, _excluded$f)
    var shape
    if (/* @__PURE__ */ reactExports.isValidElement(option)) {
        shape = /* @__PURE__ */ reactExports.cloneElement(
            option,
            _objectSpread$h(_objectSpread$h({}, props), getPropsFromShapeOption(option))
        )
    } else if (isFunction(option)) {
        shape = option(props)
    } else if (isPlainObject(option) && !isBoolean(option)) {
        var nextProps = propTransformer(option, props)
        shape = /* @__PURE__ */ React.createElement(ShapeSelector, {
            shapeType,
            elementProps: nextProps
        })
    } else {
        var elementProps = props
        shape = /* @__PURE__ */ React.createElement(ShapeSelector, {
            shapeType,
            elementProps
        })
    }
    if (isActive) {
        return /* @__PURE__ */ React.createElement(
            Layer,
            {
                className: activeClassName
            },
            shape
        )
    }
    return shape
}
function isFunnel(graphicalItem, _item) {
    return _item != null && 'trapezoids' in graphicalItem.props
}
function isPie(graphicalItem, _item) {
    return _item != null && 'sectors' in graphicalItem.props
}
function isScatter(graphicalItem, _item) {
    return _item != null && 'points' in graphicalItem.props
}
function compareFunnel(shapeData, activeTooltipItem) {
    var _activeTooltipItem$la, _activeTooltipItem$la2
    var xMatches =
        shapeData.x ===
            (activeTooltipItem === null ||
            activeTooltipItem === void 0 ||
            (_activeTooltipItem$la = activeTooltipItem.labelViewBox) === null ||
            _activeTooltipItem$la === void 0
                ? void 0
                : _activeTooltipItem$la.x) || shapeData.x === activeTooltipItem.x
    var yMatches =
        shapeData.y ===
            (activeTooltipItem === null ||
            activeTooltipItem === void 0 ||
            (_activeTooltipItem$la2 = activeTooltipItem.labelViewBox) === null ||
            _activeTooltipItem$la2 === void 0
                ? void 0
                : _activeTooltipItem$la2.y) || shapeData.y === activeTooltipItem.y
    return xMatches && yMatches
}
function comparePie(shapeData, activeTooltipItem) {
    var startAngleMatches = shapeData.endAngle === activeTooltipItem.endAngle
    var endAngleMatches = shapeData.startAngle === activeTooltipItem.startAngle
    return startAngleMatches && endAngleMatches
}
function compareScatter(shapeData, activeTooltipItem) {
    var xMatches = shapeData.x === activeTooltipItem.x
    var yMatches = shapeData.y === activeTooltipItem.y
    var zMatches = shapeData.z === activeTooltipItem.z
    return xMatches && yMatches && zMatches
}
function getComparisonFn(graphicalItem, activeItem) {
    var comparison
    if (isFunnel(graphicalItem, activeItem)) {
        comparison = compareFunnel
    } else if (isPie(graphicalItem, activeItem)) {
        comparison = comparePie
    } else if (isScatter(graphicalItem, activeItem)) {
        comparison = compareScatter
    }
    return comparison
}
function getShapeDataKey(graphicalItem, activeItem) {
    var shapeKey
    if (isFunnel(graphicalItem, activeItem)) {
        shapeKey = 'trapezoids'
    } else if (isPie(graphicalItem, activeItem)) {
        shapeKey = 'sectors'
    } else if (isScatter(graphicalItem, activeItem)) {
        shapeKey = 'points'
    }
    return shapeKey
}
function getActiveShapeTooltipPayload(graphicalItem, activeItem) {
    if (isFunnel(graphicalItem, activeItem)) {
        var _activeItem$tooltipPa
        return (_activeItem$tooltipPa = activeItem.tooltipPayload) === null ||
            _activeItem$tooltipPa === void 0 ||
            (_activeItem$tooltipPa = _activeItem$tooltipPa[0]) === null ||
            _activeItem$tooltipPa === void 0 ||
            (_activeItem$tooltipPa = _activeItem$tooltipPa.payload) === null ||
            _activeItem$tooltipPa === void 0
            ? void 0
            : _activeItem$tooltipPa.payload
    }
    if (isPie(graphicalItem, activeItem)) {
        var _activeItem$tooltipPa2
        return (_activeItem$tooltipPa2 = activeItem.tooltipPayload) === null ||
            _activeItem$tooltipPa2 === void 0 ||
            (_activeItem$tooltipPa2 = _activeItem$tooltipPa2[0]) === null ||
            _activeItem$tooltipPa2 === void 0 ||
            (_activeItem$tooltipPa2 = _activeItem$tooltipPa2.payload) === null ||
            _activeItem$tooltipPa2 === void 0
            ? void 0
            : _activeItem$tooltipPa2.payload
    }
    if (isScatter(graphicalItem, activeItem)) {
        return activeItem.payload
    }
    return {}
}
function getActiveShapeIndexForTooltip(_ref3) {
    var activeTooltipItem = _ref3.activeTooltipItem,
        graphicalItem = _ref3.graphicalItem,
        itemData = _ref3.itemData
    var shapeKey = getShapeDataKey(graphicalItem, activeTooltipItem)
    var tooltipPayload = getActiveShapeTooltipPayload(graphicalItem, activeTooltipItem)
    var activeItemMatches = itemData.filter(function (datum, dataIndex) {
        var valuesMatch = isEqual$1(tooltipPayload, datum)
        var mouseCoordinateMatches = graphicalItem.props[shapeKey].filter(function (shapeData) {
            var comparison = getComparisonFn(graphicalItem, activeTooltipItem)
            return comparison(shapeData, activeTooltipItem)
        })
        var indexOfMouseCoordinates = graphicalItem.props[shapeKey].indexOf(
            mouseCoordinateMatches[mouseCoordinateMatches.length - 1]
        )
        var coordinatesMatch = dataIndex === indexOfMouseCoordinates
        return valuesMatch && coordinatesMatch
    })
    var activeIndex = itemData.indexOf(activeItemMatches[activeItemMatches.length - 1])
    return activeIndex
}
var _Pie
function _typeof$k(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$k =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$k(o)
    )
}
function _extends$e() {
    _extends$e = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$e.apply(this, arguments)
}
function ownKeys$h(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$g(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$h(Object(t), true).forEach(function (r3) {
                  _defineProperty$k(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$h(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$f(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$f(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$j(descriptor.key), descriptor)
    }
}
function _createClass$f(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$f(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$f(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$c(t, o, e) {
    return (
        (o = _getPrototypeOf$d(o)),
        _possibleConstructorReturn$d(
            t,
            _isNativeReflectConstruct$d()
                ? Reflect.construct(o, e || [], _getPrototypeOf$d(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$d(self2, call) {
    if (call && (_typeof$k(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$c(self2)
}
function _assertThisInitialized$c(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$d() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$d = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$d(o) {
    _getPrototypeOf$d = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$d(o)
}
function _inherits$d(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$c(subClass, superClass)
}
function _setPrototypeOf$c(o, p) {
    _setPrototypeOf$c = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$c(o, p)
}
function _defineProperty$k(obj, key, value) {
    key = _toPropertyKey$j(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$j(t) {
    var i = _toPrimitive$j(t, 'string')
    return 'symbol' == _typeof$k(i) ? i : i + ''
}
function _toPrimitive$j(t, r2) {
    if ('object' != _typeof$k(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$k(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var Pie = /* @__PURE__ */ (function (_PureComponent) {
    function Pie2(props) {
        var _this
        _classCallCheck$f(this, Pie2)
        _this = _callSuper$c(this, Pie2, [props])
        _defineProperty$k(_this, 'pieRef', null)
        _defineProperty$k(_this, 'sectorRefs', [])
        _defineProperty$k(_this, 'id', uniqueId('recharts-pie-'))
        _defineProperty$k(_this, 'handleAnimationEnd', function () {
            var onAnimationEnd2 = _this.props.onAnimationEnd
            _this.setState({
                isAnimationFinished: true
            })
            if (isFunction(onAnimationEnd2)) {
                onAnimationEnd2()
            }
        })
        _defineProperty$k(_this, 'handleAnimationStart', function () {
            var onAnimationStart2 = _this.props.onAnimationStart
            _this.setState({
                isAnimationFinished: false
            })
            if (isFunction(onAnimationStart2)) {
                onAnimationStart2()
            }
        })
        _this.state = {
            isAnimationFinished: !props.isAnimationActive,
            prevIsAnimationActive: props.isAnimationActive,
            prevAnimationId: props.animationId,
            sectorToFocus: 0
        }
        return _this
    }
    _inherits$d(Pie2, _PureComponent)
    return _createClass$f(
        Pie2,
        [
            {
                key: 'isActiveIndex',
                value: function isActiveIndex(i) {
                    var activeIndex = this.props.activeIndex
                    if (Array.isArray(activeIndex)) {
                        return activeIndex.indexOf(i) !== -1
                    }
                    return i === activeIndex
                }
            },
            {
                key: 'hasActiveIndex',
                value: function hasActiveIndex() {
                    var activeIndex = this.props.activeIndex
                    return Array.isArray(activeIndex)
                        ? activeIndex.length !== 0
                        : activeIndex || activeIndex === 0
                }
            },
            {
                key: 'renderLabels',
                value: function renderLabels(sectors) {
                    var isAnimationActive = this.props.isAnimationActive
                    if (isAnimationActive && !this.state.isAnimationFinished) {
                        return null
                    }
                    var _this$props = this.props,
                        label = _this$props.label,
                        labelLine = _this$props.labelLine,
                        dataKey = _this$props.dataKey,
                        valueKey = _this$props.valueKey
                    var pieProps = filterProps(this.props, false)
                    var customLabelProps = filterProps(label, false)
                    var customLabelLineProps = filterProps(labelLine, false)
                    var offsetRadius = (label && label.offsetRadius) || 20
                    var labels = sectors.map(function (entry, i) {
                        var midAngle = (entry.startAngle + entry.endAngle) / 2
                        var endPoint = polarToCartesian(
                            entry.cx,
                            entry.cy,
                            entry.outerRadius + offsetRadius,
                            midAngle
                        )
                        var labelProps = _objectSpread$g(
                            _objectSpread$g(
                                _objectSpread$g(_objectSpread$g({}, pieProps), entry),
                                {},
                                {
                                    stroke: 'none'
                                },
                                customLabelProps
                            ),
                            {},
                            {
                                index: i,
                                textAnchor: Pie2.getTextAnchor(endPoint.x, entry.cx)
                            },
                            endPoint
                        )
                        var lineProps = _objectSpread$g(
                            _objectSpread$g(
                                _objectSpread$g(_objectSpread$g({}, pieProps), entry),
                                {},
                                {
                                    fill: 'none',
                                    stroke: entry.fill
                                },
                                customLabelLineProps
                            ),
                            {},
                            {
                                index: i,
                                points: [
                                    polarToCartesian(
                                        entry.cx,
                                        entry.cy,
                                        entry.outerRadius,
                                        midAngle
                                    ),
                                    endPoint
                                ]
                            }
                        )
                        var realDataKey = dataKey
                        if (isNil(dataKey) && isNil(valueKey)) {
                            realDataKey = 'value'
                        } else if (isNil(dataKey)) {
                            realDataKey = valueKey
                        }
                        return (
                            // eslint-disable-next-line react/no-array-index-key
                            /* @__PURE__ */ React.createElement(
                                Layer,
                                {
                                    key: 'label-'
                                        .concat(entry.startAngle, '-')
                                        .concat(entry.endAngle, '-')
                                        .concat(entry.midAngle, '-')
                                        .concat(i)
                                },
                                labelLine && Pie2.renderLabelLineItem(labelLine, lineProps, 'line'),
                                Pie2.renderLabelItem(
                                    label,
                                    labelProps,
                                    getValueByDataKey(entry, realDataKey)
                                )
                            )
                        )
                    })
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: 'recharts-pie-labels'
                        },
                        labels
                    )
                }
            },
            {
                key: 'renderSectorsStatically',
                value: function renderSectorsStatically(sectors) {
                    var _this2 = this
                    var _this$props2 = this.props,
                        activeShape = _this$props2.activeShape,
                        blendStroke = _this$props2.blendStroke,
                        inactiveShapeProp = _this$props2.inactiveShape
                    return sectors.map(function (entry, i) {
                        if (
                            (entry === null || entry === void 0 ? void 0 : entry.startAngle) ===
                                0 &&
                            (entry === null || entry === void 0 ? void 0 : entry.endAngle) === 0 &&
                            sectors.length !== 1
                        )
                            return null
                        var isActive = _this2.isActiveIndex(i)
                        var inactiveShape =
                            inactiveShapeProp && _this2.hasActiveIndex() ? inactiveShapeProp : null
                        var sectorOptions = isActive ? activeShape : inactiveShape
                        var sectorProps = _objectSpread$g(
                            _objectSpread$g({}, entry),
                            {},
                            {
                                stroke: blendStroke ? entry.fill : entry.stroke,
                                tabIndex: -1
                            }
                        )
                        return /* @__PURE__ */ React.createElement(
                            Layer,
                            _extends$e(
                                {
                                    ref: function ref(_ref3) {
                                        if (_ref3 && !_this2.sectorRefs.includes(_ref3)) {
                                            _this2.sectorRefs.push(_ref3)
                                        }
                                    },
                                    tabIndex: -1,
                                    className: 'recharts-pie-sector'
                                },
                                adaptEventsOfChild(_this2.props, entry, i),
                                {
                                    // eslint-disable-next-line react/no-array-index-key
                                    key: 'sector-'
                                        .concat(
                                            entry === null || entry === void 0
                                                ? void 0
                                                : entry.startAngle,
                                            '-'
                                        )
                                        .concat(
                                            entry === null || entry === void 0
                                                ? void 0
                                                : entry.endAngle,
                                            '-'
                                        )
                                        .concat(entry.midAngle, '-')
                                        .concat(i)
                                }
                            ),
                            /* @__PURE__ */ React.createElement(
                                Shape,
                                _extends$e(
                                    {
                                        option: sectorOptions,
                                        isActive,
                                        shapeType: 'sector'
                                    },
                                    sectorProps
                                )
                            )
                        )
                    })
                }
            },
            {
                key: 'renderSectorsWithAnimation',
                value: function renderSectorsWithAnimation() {
                    var _this3 = this
                    var _this$props3 = this.props,
                        sectors = _this$props3.sectors,
                        isAnimationActive = _this$props3.isAnimationActive,
                        animationBegin = _this$props3.animationBegin,
                        animationDuration = _this$props3.animationDuration,
                        animationEasing = _this$props3.animationEasing,
                        animationId = _this$props3.animationId
                    var _this$state = this.state,
                        prevSectors = _this$state.prevSectors,
                        prevIsAnimationActive = _this$state.prevIsAnimationActive
                    return /* @__PURE__ */ React.createElement(
                        Animate,
                        {
                            begin: animationBegin,
                            duration: animationDuration,
                            isActive: isAnimationActive,
                            easing: animationEasing,
                            from: {
                                t: 0
                            },
                            to: {
                                t: 1
                            },
                            key: 'pie-'.concat(animationId, '-').concat(prevIsAnimationActive),
                            onAnimationStart: this.handleAnimationStart,
                            onAnimationEnd: this.handleAnimationEnd
                        },
                        function (_ref22) {
                            var t = _ref22.t
                            var stepData = []
                            var first2 = sectors && sectors[0]
                            var curAngle = first2.startAngle
                            sectors.forEach(function (entry, index2) {
                                var prev2 = prevSectors && prevSectors[index2]
                                var paddingAngle = index2 > 0 ? get(entry, 'paddingAngle', 0) : 0
                                if (prev2) {
                                    var angleIp = interpolateNumber$2(
                                        prev2.endAngle - prev2.startAngle,
                                        entry.endAngle - entry.startAngle
                                    )
                                    var latest = _objectSpread$g(
                                        _objectSpread$g({}, entry),
                                        {},
                                        {
                                            startAngle: curAngle + paddingAngle,
                                            endAngle: curAngle + angleIp(t) + paddingAngle
                                        }
                                    )
                                    stepData.push(latest)
                                    curAngle = latest.endAngle
                                } else {
                                    var endAngle = entry.endAngle,
                                        startAngle = entry.startAngle
                                    var interpolatorAngle = interpolateNumber$2(
                                        0,
                                        endAngle - startAngle
                                    )
                                    var deltaAngle = interpolatorAngle(t)
                                    var _latest = _objectSpread$g(
                                        _objectSpread$g({}, entry),
                                        {},
                                        {
                                            startAngle: curAngle + paddingAngle,
                                            endAngle: curAngle + deltaAngle + paddingAngle
                                        }
                                    )
                                    stepData.push(_latest)
                                    curAngle = _latest.endAngle
                                }
                            })
                            return /* @__PURE__ */ React.createElement(
                                Layer,
                                null,
                                _this3.renderSectorsStatically(stepData)
                            )
                        }
                    )
                }
            },
            {
                key: 'attachKeyboardHandlers',
                value: function attachKeyboardHandlers(pieRef) {
                    var _this4 = this
                    pieRef.onkeydown = function (e) {
                        if (!e.altKey) {
                            switch (e.key) {
                                case 'ArrowLeft': {
                                    var next2 =
                                        ++_this4.state.sectorToFocus % _this4.sectorRefs.length
                                    _this4.sectorRefs[next2].focus()
                                    _this4.setState({
                                        sectorToFocus: next2
                                    })
                                    break
                                }
                                case 'ArrowRight': {
                                    var _next =
                                        --_this4.state.sectorToFocus < 0
                                            ? _this4.sectorRefs.length - 1
                                            : _this4.state.sectorToFocus % _this4.sectorRefs.length
                                    _this4.sectorRefs[_next].focus()
                                    _this4.setState({
                                        sectorToFocus: _next
                                    })
                                    break
                                }
                                case 'Escape': {
                                    _this4.sectorRefs[_this4.state.sectorToFocus].blur()
                                    _this4.setState({
                                        sectorToFocus: 0
                                    })
                                    break
                                }
                            }
                        }
                    }
                }
            },
            {
                key: 'renderSectors',
                value: function renderSectors() {
                    var _this$props4 = this.props,
                        sectors = _this$props4.sectors,
                        isAnimationActive = _this$props4.isAnimationActive
                    var prevSectors = this.state.prevSectors
                    if (
                        isAnimationActive &&
                        sectors &&
                        sectors.length &&
                        (!prevSectors || !isEqual$1(prevSectors, sectors))
                    ) {
                        return this.renderSectorsWithAnimation()
                    }
                    return this.renderSectorsStatically(sectors)
                }
            },
            {
                key: 'componentDidMount',
                value: function componentDidMount() {
                    if (this.pieRef) {
                        this.attachKeyboardHandlers(this.pieRef)
                    }
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _this5 = this
                    var _this$props5 = this.props,
                        hide = _this$props5.hide,
                        sectors = _this$props5.sectors,
                        className = _this$props5.className,
                        label = _this$props5.label,
                        cx = _this$props5.cx,
                        cy = _this$props5.cy,
                        innerRadius = _this$props5.innerRadius,
                        outerRadius = _this$props5.outerRadius,
                        isAnimationActive = _this$props5.isAnimationActive
                    var isAnimationFinished = this.state.isAnimationFinished
                    if (
                        hide ||
                        !sectors ||
                        !sectors.length ||
                        !isNumber(cx) ||
                        !isNumber(cy) ||
                        !isNumber(innerRadius) ||
                        !isNumber(outerRadius)
                    ) {
                        return null
                    }
                    var layerClass = clsx('recharts-pie', className)
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            tabIndex: this.props.rootTabIndex,
                            className: layerClass,
                            ref: function ref(_ref3) {
                                _this5.pieRef = _ref3
                            }
                        },
                        this.renderSectors(),
                        label && this.renderLabels(sectors),
                        Label.renderCallByParent(this.props, null, false),
                        (!isAnimationActive || isAnimationFinished) &&
                            LabelList.renderCallByParent(this.props, sectors, false)
                    )
                }
            }
        ],
        [
            {
                key: 'getDerivedStateFromProps',
                value: function getDerivedStateFromProps(nextProps, prevState) {
                    if (prevState.prevIsAnimationActive !== nextProps.isAnimationActive) {
                        return {
                            prevIsAnimationActive: nextProps.isAnimationActive,
                            prevAnimationId: nextProps.animationId,
                            curSectors: nextProps.sectors,
                            prevSectors: [],
                            isAnimationFinished: true
                        }
                    }
                    if (
                        nextProps.isAnimationActive &&
                        nextProps.animationId !== prevState.prevAnimationId
                    ) {
                        return {
                            prevAnimationId: nextProps.animationId,
                            curSectors: nextProps.sectors,
                            prevSectors: prevState.curSectors,
                            isAnimationFinished: true
                        }
                    }
                    if (nextProps.sectors !== prevState.curSectors) {
                        return {
                            curSectors: nextProps.sectors,
                            isAnimationFinished: true
                        }
                    }
                    return null
                }
            },
            {
                key: 'getTextAnchor',
                value: function getTextAnchor(x2, cx) {
                    if (x2 > cx) {
                        return 'start'
                    }
                    if (x2 < cx) {
                        return 'end'
                    }
                    return 'middle'
                }
            },
            {
                key: 'renderLabelLineItem',
                value: function renderLabelLineItem(option, props, key) {
                    if (/* @__PURE__ */ React.isValidElement(option)) {
                        return /* @__PURE__ */ React.cloneElement(option, props)
                    }
                    if (isFunction(option)) {
                        return option(props)
                    }
                    var className = clsx(
                        'recharts-pie-label-line',
                        typeof option !== 'boolean' ? option.className : ''
                    )
                    return /* @__PURE__ */ React.createElement(
                        Curve,
                        _extends$e({}, props, {
                            key,
                            type: 'linear',
                            className
                        })
                    )
                }
            },
            {
                key: 'renderLabelItem',
                value: function renderLabelItem(option, props, value) {
                    if (/* @__PURE__ */ React.isValidElement(option)) {
                        return /* @__PURE__ */ React.cloneElement(option, props)
                    }
                    var label = value
                    if (isFunction(option)) {
                        label = option(props)
                        if (/* @__PURE__ */ React.isValidElement(label)) {
                            return label
                        }
                    }
                    var className = clsx(
                        'recharts-pie-label-text',
                        typeof option !== 'boolean' && !isFunction(option) ? option.className : ''
                    )
                    return /* @__PURE__ */ React.createElement(
                        Text,
                        _extends$e({}, props, {
                            alignmentBaseline: 'middle',
                            className
                        }),
                        label
                    )
                }
            }
        ]
    )
})(reactExports.PureComponent)
_Pie = Pie
_defineProperty$k(Pie, 'displayName', 'Pie')
_defineProperty$k(Pie, 'defaultProps', {
    stroke: '#fff',
    fill: '#808080',
    legendType: 'rect',
    cx: '50%',
    cy: '50%',
    startAngle: 0,
    endAngle: 360,
    innerRadius: 0,
    outerRadius: '80%',
    paddingAngle: 0,
    labelLine: true,
    hide: false,
    minAngle: 0,
    isAnimationActive: !Global.isSsr,
    animationBegin: 400,
    animationDuration: 1500,
    animationEasing: 'ease',
    nameKey: 'name',
    blendStroke: false,
    rootTabIndex: 0
})
_defineProperty$k(Pie, 'parseDeltaAngle', function (startAngle, endAngle) {
    var sign2 = mathSign(endAngle - startAngle)
    var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360)
    return sign2 * deltaAngle
})
_defineProperty$k(Pie, 'getRealPieData', function (itemProps) {
    var data = itemProps.data,
        children = itemProps.children
    var presentationProps = filterProps(itemProps, false)
    var cells = findAllByType(children, Cell)
    if (data && data.length) {
        return data.map(function (entry, index2) {
            return _objectSpread$g(
                _objectSpread$g(
                    _objectSpread$g(
                        {
                            payload: entry
                        },
                        presentationProps
                    ),
                    entry
                ),
                cells && cells[index2] && cells[index2].props
            )
        })
    }
    if (cells && cells.length) {
        return cells.map(function (cell) {
            return _objectSpread$g(_objectSpread$g({}, presentationProps), cell.props)
        })
    }
    return []
})
_defineProperty$k(Pie, 'parseCoordinateOfPie', function (itemProps, offset) {
    var top = offset.top,
        left = offset.left,
        width = offset.width,
        height = offset.height
    var maxPieRadius = getMaxRadius(width, height)
    var cx = left + getPercentValue(itemProps.cx, width, width / 2)
    var cy = top + getPercentValue(itemProps.cy, height, height / 2)
    var innerRadius = getPercentValue(itemProps.innerRadius, maxPieRadius, 0)
    var outerRadius = getPercentValue(itemProps.outerRadius, maxPieRadius, maxPieRadius * 0.8)
    var maxRadius = itemProps.maxRadius || Math.sqrt(width * width + height * height) / 2
    return {
        cx,
        cy,
        innerRadius,
        outerRadius,
        maxRadius
    }
})
_defineProperty$k(Pie, 'getComposedData', function (_ref4) {
    var item = _ref4.item,
        offset = _ref4.offset
    var itemProps =
        item.type.defaultProps !== void 0
            ? _objectSpread$g(_objectSpread$g({}, item.type.defaultProps), item.props)
            : item.props
    var pieData = _Pie.getRealPieData(itemProps)
    if (!pieData || !pieData.length) {
        return null
    }
    var cornerRadius = itemProps.cornerRadius,
        startAngle = itemProps.startAngle,
        endAngle = itemProps.endAngle,
        paddingAngle = itemProps.paddingAngle,
        dataKey = itemProps.dataKey,
        nameKey = itemProps.nameKey,
        valueKey = itemProps.valueKey,
        tooltipType = itemProps.tooltipType
    var minAngle = Math.abs(itemProps.minAngle)
    var coordinate = _Pie.parseCoordinateOfPie(itemProps, offset)
    var deltaAngle = _Pie.parseDeltaAngle(startAngle, endAngle)
    var absDeltaAngle = Math.abs(deltaAngle)
    var realDataKey = dataKey
    if (isNil(dataKey) && isNil(valueKey)) {
        warn(
            false,
            'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'
        )
        realDataKey = 'value'
    } else if (isNil(dataKey)) {
        warn(
            false,
            'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'
        )
        realDataKey = valueKey
    }
    var notZeroItemCount = pieData.filter(function (entry) {
        return getValueByDataKey(entry, realDataKey, 0) !== 0
    }).length
    var totalPadingAngle =
        (absDeltaAngle >= 360 ? notZeroItemCount : notZeroItemCount - 1) * paddingAngle
    var realTotalAngle = absDeltaAngle - notZeroItemCount * minAngle - totalPadingAngle
    var sum2 = pieData.reduce(function (result, entry) {
        var val = getValueByDataKey(entry, realDataKey, 0)
        return result + (isNumber(val) ? val : 0)
    }, 0)
    var sectors
    if (sum2 > 0) {
        var prev2
        sectors = pieData.map(function (entry, i) {
            var val = getValueByDataKey(entry, realDataKey, 0)
            var name = getValueByDataKey(entry, nameKey, i)
            var percent = (isNumber(val) ? val : 0) / sum2
            var tempStartAngle
            if (i) {
                tempStartAngle =
                    prev2.endAngle + mathSign(deltaAngle) * paddingAngle * (val !== 0 ? 1 : 0)
            } else {
                tempStartAngle = startAngle
            }
            var tempEndAngle =
                tempStartAngle +
                mathSign(deltaAngle) * ((val !== 0 ? minAngle : 0) + percent * realTotalAngle)
            var midAngle = (tempStartAngle + tempEndAngle) / 2
            var middleRadius = (coordinate.innerRadius + coordinate.outerRadius) / 2
            var tooltipPayload = [
                {
                    name,
                    value: val,
                    payload: entry,
                    dataKey: realDataKey,
                    type: tooltipType
                }
            ]
            var tooltipPosition = polarToCartesian(
                coordinate.cx,
                coordinate.cy,
                middleRadius,
                midAngle
            )
            prev2 = _objectSpread$g(
                _objectSpread$g(
                    _objectSpread$g(
                        {
                            percent,
                            cornerRadius,
                            name,
                            tooltipPayload,
                            midAngle,
                            middleRadius,
                            tooltipPosition
                        },
                        entry
                    ),
                    coordinate
                ),
                {},
                {
                    value: getValueByDataKey(entry, realDataKey),
                    startAngle: tempStartAngle,
                    endAngle: tempEndAngle,
                    payload: entry,
                    paddingAngle: mathSign(deltaAngle) * paddingAngle
                }
            )
            return prev2
        })
    }
    return _objectSpread$g(
        _objectSpread$g({}, coordinate),
        {},
        {
            sectors,
            data: pieData
        }
    )
})
var head_1
var hasRequiredHead
function requireHead() {
    if (hasRequiredHead) return head_1
    hasRequiredHead = 1
    function head(array2) {
        return array2 && array2.length ? array2[0] : void 0
    }
    head_1 = head
    return head_1
}
var first$1
var hasRequiredFirst
function requireFirst() {
    if (hasRequiredFirst) return first$1
    hasRequiredFirst = 1
    first$1 = requireHead()
    return first$1
}
var firstExports = requireFirst()
const first = /* @__PURE__ */ getDefaultExportFromCjs(firstExports)
var _excluded$e = ['key']
function _typeof$j(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$j =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$j(o)
    )
}
function _objectWithoutProperties$8(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$7(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$7(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _extends$d() {
    _extends$d = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$d.apply(this, arguments)
}
function ownKeys$g(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$f(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$g(Object(t), true).forEach(function (r3) {
                  _defineProperty$j(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$g(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$e(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$e(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$i(descriptor.key), descriptor)
    }
}
function _createClass$e(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$e(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$e(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$b(t, o, e) {
    return (
        (o = _getPrototypeOf$c(o)),
        _possibleConstructorReturn$c(
            t,
            _isNativeReflectConstruct$c()
                ? Reflect.construct(o, e || [], _getPrototypeOf$c(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$c(self2, call) {
    if (call && (_typeof$j(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$b(self2)
}
function _assertThisInitialized$b(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$c() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$c = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$c(o) {
    _getPrototypeOf$c = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$c(o)
}
function _inherits$c(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$b(subClass, superClass)
}
function _setPrototypeOf$b(o, p) {
    _setPrototypeOf$b = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$b(o, p)
}
function _defineProperty$j(obj, key, value) {
    key = _toPropertyKey$i(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$i(t) {
    var i = _toPrimitive$i(t, 'string')
    return 'symbol' == _typeof$j(i) ? i : i + ''
}
function _toPrimitive$i(t, r2) {
    if ('object' != _typeof$j(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$j(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var Radar = /* @__PURE__ */ (function (_PureComponent) {
    function Radar2() {
        var _this
        _classCallCheck$e(this, Radar2)
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key]
        }
        _this = _callSuper$b(this, Radar2, [].concat(args))
        _defineProperty$j(_this, 'state', {
            isAnimationFinished: false
        })
        _defineProperty$j(_this, 'handleAnimationEnd', function () {
            var onAnimationEnd2 = _this.props.onAnimationEnd
            _this.setState({
                isAnimationFinished: true
            })
            if (isFunction(onAnimationEnd2)) {
                onAnimationEnd2()
            }
        })
        _defineProperty$j(_this, 'handleAnimationStart', function () {
            var onAnimationStart2 = _this.props.onAnimationStart
            _this.setState({
                isAnimationFinished: false
            })
            if (isFunction(onAnimationStart2)) {
                onAnimationStart2()
            }
        })
        _defineProperty$j(_this, 'handleMouseEnter', function (e) {
            var onMouseEnter = _this.props.onMouseEnter
            if (onMouseEnter) {
                onMouseEnter(_this.props, e)
            }
        })
        _defineProperty$j(_this, 'handleMouseLeave', function (e) {
            var onMouseLeave = _this.props.onMouseLeave
            if (onMouseLeave) {
                onMouseLeave(_this.props, e)
            }
        })
        return _this
    }
    _inherits$c(Radar2, _PureComponent)
    return _createClass$e(
        Radar2,
        [
            {
                key: 'renderDots',
                value: function renderDots(points) {
                    var _this$props = this.props,
                        dot = _this$props.dot,
                        dataKey = _this$props.dataKey
                    var baseProps = filterProps(this.props, false)
                    var customDotProps = filterProps(dot, true)
                    var dots = points.map(function (entry, i) {
                        var dotProps = _objectSpread$f(
                            _objectSpread$f(
                                _objectSpread$f(
                                    {
                                        key: 'dot-'.concat(i),
                                        r: 3
                                    },
                                    baseProps
                                ),
                                customDotProps
                            ),
                            {},
                            {
                                dataKey,
                                cx: entry.x,
                                cy: entry.y,
                                index: i,
                                payload: entry
                            }
                        )
                        return Radar2.renderDotItem(dot, dotProps)
                    })
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: 'recharts-radar-dots'
                        },
                        dots
                    )
                }
            },
            {
                key: 'renderPolygonStatically',
                value: function renderPolygonStatically(points) {
                    var _this$props2 = this.props,
                        shape = _this$props2.shape,
                        dot = _this$props2.dot,
                        isRange = _this$props2.isRange,
                        baseLinePoints = _this$props2.baseLinePoints,
                        connectNulls = _this$props2.connectNulls
                    var radar
                    if (/* @__PURE__ */ React.isValidElement(shape)) {
                        radar = /* @__PURE__ */ React.cloneElement(
                            shape,
                            _objectSpread$f(
                                _objectSpread$f({}, this.props),
                                {},
                                {
                                    points
                                }
                            )
                        )
                    } else if (isFunction(shape)) {
                        radar = shape(
                            _objectSpread$f(
                                _objectSpread$f({}, this.props),
                                {},
                                {
                                    points
                                }
                            )
                        )
                    } else {
                        radar = /* @__PURE__ */ React.createElement(
                            Polygon,
                            _extends$d({}, filterProps(this.props, true), {
                                onMouseEnter: this.handleMouseEnter,
                                onMouseLeave: this.handleMouseLeave,
                                points,
                                baseLinePoints: isRange ? baseLinePoints : null,
                                connectNulls
                            })
                        )
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: 'recharts-radar-polygon'
                        },
                        radar,
                        dot ? this.renderDots(points) : null
                    )
                }
            },
            {
                key: 'renderPolygonWithAnimation',
                value: function renderPolygonWithAnimation() {
                    var _this2 = this
                    var _this$props3 = this.props,
                        points = _this$props3.points,
                        isAnimationActive = _this$props3.isAnimationActive,
                        animationBegin = _this$props3.animationBegin,
                        animationDuration = _this$props3.animationDuration,
                        animationEasing = _this$props3.animationEasing,
                        animationId = _this$props3.animationId
                    var prevPoints = this.state.prevPoints
                    return /* @__PURE__ */ React.createElement(
                        Animate,
                        {
                            begin: animationBegin,
                            duration: animationDuration,
                            isActive: isAnimationActive,
                            easing: animationEasing,
                            from: {
                                t: 0
                            },
                            to: {
                                t: 1
                            },
                            key: 'radar-'.concat(animationId),
                            onAnimationEnd: this.handleAnimationEnd,
                            onAnimationStart: this.handleAnimationStart
                        },
                        function (_ref3) {
                            var t = _ref3.t
                            var prevPointsDiffFactor =
                                prevPoints && prevPoints.length / points.length
                            var stepData = points.map(function (entry, index2) {
                                var prev2 =
                                    prevPoints &&
                                    prevPoints[Math.floor(index2 * prevPointsDiffFactor)]
                                if (prev2) {
                                    var _interpolatorX = interpolateNumber$2(prev2.x, entry.x)
                                    var _interpolatorY = interpolateNumber$2(prev2.y, entry.y)
                                    return _objectSpread$f(
                                        _objectSpread$f({}, entry),
                                        {},
                                        {
                                            x: _interpolatorX(t),
                                            y: _interpolatorY(t)
                                        }
                                    )
                                }
                                var interpolatorX = interpolateNumber$2(entry.cx, entry.x)
                                var interpolatorY = interpolateNumber$2(entry.cy, entry.y)
                                return _objectSpread$f(
                                    _objectSpread$f({}, entry),
                                    {},
                                    {
                                        x: interpolatorX(t),
                                        y: interpolatorY(t)
                                    }
                                )
                            })
                            return _this2.renderPolygonStatically(stepData)
                        }
                    )
                }
            },
            {
                key: 'renderPolygon',
                value: function renderPolygon() {
                    var _this$props4 = this.props,
                        points = _this$props4.points,
                        isAnimationActive = _this$props4.isAnimationActive,
                        isRange = _this$props4.isRange
                    var prevPoints = this.state.prevPoints
                    if (
                        isAnimationActive &&
                        points &&
                        points.length &&
                        !isRange &&
                        (!prevPoints || !isEqual$1(prevPoints, points))
                    ) {
                        return this.renderPolygonWithAnimation()
                    }
                    return this.renderPolygonStatically(points)
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _this$props5 = this.props,
                        hide = _this$props5.hide,
                        className = _this$props5.className,
                        points = _this$props5.points,
                        isAnimationActive = _this$props5.isAnimationActive
                    if (hide || !points || !points.length) {
                        return null
                    }
                    var isAnimationFinished = this.state.isAnimationFinished
                    var layerClass = clsx('recharts-radar', className)
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: layerClass
                        },
                        this.renderPolygon(),
                        (!isAnimationActive || isAnimationFinished) &&
                            LabelList.renderCallByParent(this.props, points)
                    )
                }
            }
        ],
        [
            {
                key: 'getDerivedStateFromProps',
                value: function getDerivedStateFromProps(nextProps, prevState) {
                    if (nextProps.animationId !== prevState.prevAnimationId) {
                        return {
                            prevAnimationId: nextProps.animationId,
                            curPoints: nextProps.points,
                            prevPoints: prevState.curPoints
                        }
                    }
                    if (nextProps.points !== prevState.curPoints) {
                        return {
                            curPoints: nextProps.points
                        }
                    }
                    return null
                }
            },
            {
                key: 'renderDotItem',
                value: function renderDotItem(option, props) {
                    var dotItem
                    if (/* @__PURE__ */ React.isValidElement(option)) {
                        dotItem = /* @__PURE__ */ React.cloneElement(option, props)
                    } else if (isFunction(option)) {
                        dotItem = option(props)
                    } else {
                        var key = props.key,
                            dotProps = _objectWithoutProperties$8(props, _excluded$e)
                        dotItem = /* @__PURE__ */ React.createElement(
                            Dot,
                            _extends$d({}, dotProps, {
                                key,
                                className: clsx(
                                    'recharts-radar-dot',
                                    typeof option !== 'boolean' ? option.className : ''
                                )
                            })
                        )
                    }
                    return dotItem
                }
            }
        ]
    )
})(reactExports.PureComponent)
_defineProperty$j(Radar, 'displayName', 'Radar')
_defineProperty$j(Radar, 'defaultProps', {
    angleAxisId: 0,
    radiusAxisId: 0,
    hide: false,
    activeDot: true,
    dot: false,
    legendType: 'rect',
    isAnimationActive: !Global.isSsr,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: 'ease'
})
_defineProperty$j(Radar, 'getComposedData', function (_ref22) {
    var radiusAxis = _ref22.radiusAxis,
        angleAxis = _ref22.angleAxis,
        displayedData = _ref22.displayedData,
        dataKey = _ref22.dataKey,
        bandSize = _ref22.bandSize
    var cx = angleAxis.cx,
        cy = angleAxis.cy
    var isRange = false
    var points = []
    var angleBandSize =
        angleAxis.type !== 'number' ? (bandSize !== null && bandSize !== void 0 ? bandSize : 0) : 0
    displayedData.forEach(function (entry, i) {
        var name = getValueByDataKey(entry, angleAxis.dataKey, i)
        var value = getValueByDataKey(entry, dataKey)
        var angle = angleAxis.scale(name) + angleBandSize
        var pointValue = Array.isArray(value) ? last(value) : value
        var radius = isNil(pointValue) ? void 0 : radiusAxis.scale(pointValue)
        if (Array.isArray(value) && value.length >= 2) {
            isRange = true
        }
        points.push(
            _objectSpread$f(
                _objectSpread$f({}, polarToCartesian(cx, cy, radius, angle)),
                {},
                {
                    name,
                    value,
                    cx,
                    cy,
                    radius,
                    angle,
                    payload: entry
                }
            )
        )
    })
    var baseLinePoints = []
    if (isRange) {
        points.forEach(function (point2) {
            if (Array.isArray(point2.value)) {
                var baseValue = first(point2.value)
                var radius = isNil(baseValue) ? void 0 : radiusAxis.scale(baseValue)
                baseLinePoints.push(
                    _objectSpread$f(
                        _objectSpread$f({}, point2),
                        {},
                        {
                            radius
                        },
                        polarToCartesian(cx, cy, radius, point2.angle)
                    )
                )
            } else {
                baseLinePoints.push(point2)
            }
        })
    }
    return {
        points,
        isRange,
        baseLinePoints
    }
})
var _baseRange
var hasRequired_baseRange
function require_baseRange() {
    if (hasRequired_baseRange) return _baseRange
    hasRequired_baseRange = 1
    var nativeCeil = Math.ceil,
        nativeMax = Math.max
    function baseRange(start, end, step, fromRight) {
        var index2 = -1,
            length2 = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length2)
        while (length2--) {
            result[fromRight ? length2 : ++index2] = start
            start += step
        }
        return result
    }
    _baseRange = baseRange
    return _baseRange
}
var toFinite_1
var hasRequiredToFinite
function requireToFinite() {
    if (hasRequiredToFinite) return toFinite_1
    hasRequiredToFinite = 1
    var toNumber = requireToNumber()
    var INFINITY = 1 / 0,
        MAX_INTEGER = 17976931348623157e292
    function toFinite(value) {
        if (!value) {
            return value === 0 ? value : 0
        }
        value = toNumber(value)
        if (value === INFINITY || value === -Infinity) {
            var sign2 = value < 0 ? -1 : 1
            return sign2 * MAX_INTEGER
        }
        return value === value ? value : 0
    }
    toFinite_1 = toFinite
    return toFinite_1
}
var _createRange
var hasRequired_createRange
function require_createRange() {
    if (hasRequired_createRange) return _createRange
    hasRequired_createRange = 1
    var baseRange = require_baseRange(),
        isIterateeCall = require_isIterateeCall(),
        toFinite = requireToFinite()
    function createRange(fromRight) {
        return function (start, end, step) {
            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                end = step = void 0
            }
            start = toFinite(start)
            if (end === void 0) {
                end = start
                start = 0
            } else {
                end = toFinite(end)
            }
            step = step === void 0 ? (start < end ? 1 : -1) : toFinite(step)
            return baseRange(start, end, step, fromRight)
        }
    }
    _createRange = createRange
    return _createRange
}
var range_1
var hasRequiredRange
function requireRange() {
    if (hasRequiredRange) return range_1
    hasRequiredRange = 1
    var createRange = require_createRange()
    var range3 = createRange()
    range_1 = range3
    return range_1
}
var rangeExports = requireRange()
const range2 = /* @__PURE__ */ getDefaultExportFromCjs(rangeExports)
function _typeof$i(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$i =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$i(o)
    )
}
function ownKeys$f(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$e(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$f(Object(t), true).forEach(function (r3) {
                  _defineProperty$i(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$f(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$i(obj, key, value) {
    key = _toPropertyKey$h(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$h(t) {
    var i = _toPrimitive$h(t, 'string')
    return 'symbol' == _typeof$i(i) ? i : i + ''
}
function _toPrimitive$h(t, r2) {
    if ('object' != _typeof$i(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$i(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var PREFIX_LIST = ['Webkit', 'Moz', 'O', 'ms']
var generatePrefixStyle = function generatePrefixStyle2(name, value) {
    var camelName = name.replace(/(\w)/, function (v) {
        return v.toUpperCase()
    })
    var result = PREFIX_LIST.reduce(function (res, entry) {
        return _objectSpread$e(
            _objectSpread$e({}, res),
            {},
            _defineProperty$i({}, entry + camelName, value)
        )
    }, {})
    result[name] = value
    return result
}
function _typeof$h(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$h =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$h(o)
    )
}
function _extends$c() {
    _extends$c = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$c.apply(this, arguments)
}
function ownKeys$e(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$d(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$e(Object(t), true).forEach(function (r3) {
                  _defineProperty$h(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$e(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$d(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$d(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$g(descriptor.key), descriptor)
    }
}
function _createClass$d(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$d(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$d(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$a(t, o, e) {
    return (
        (o = _getPrototypeOf$b(o)),
        _possibleConstructorReturn$b(
            t,
            _isNativeReflectConstruct$b()
                ? Reflect.construct(o, e || [], _getPrototypeOf$b(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$b(self2, call) {
    if (call && (_typeof$h(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$a(self2)
}
function _assertThisInitialized$a(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$b() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$b = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$b(o) {
    _getPrototypeOf$b = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$b(o)
}
function _inherits$b(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$a(subClass, superClass)
}
function _setPrototypeOf$a(o, p) {
    _setPrototypeOf$a = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$a(o, p)
}
function _defineProperty$h(obj, key, value) {
    key = _toPropertyKey$g(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$g(t) {
    var i = _toPrimitive$g(t, 'string')
    return 'symbol' == _typeof$h(i) ? i : i + ''
}
function _toPrimitive$g(t, r2) {
    if ('object' != _typeof$h(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$h(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var createScale = function createScale2(_ref3) {
    var data = _ref3.data,
        startIndex = _ref3.startIndex,
        endIndex = _ref3.endIndex,
        x2 = _ref3.x,
        width = _ref3.width,
        travellerWidth = _ref3.travellerWidth
    if (!data || !data.length) {
        return {}
    }
    var len = data.length
    var scale = point()
        .domain(range2(0, len))
        .range([x2, x2 + width - travellerWidth])
    var scaleValues = scale.domain().map(function (entry) {
        return scale(entry)
    })
    return {
        isTextActive: false,
        isSlideMoving: false,
        isTravellerMoving: false,
        isTravellerFocused: false,
        startX: scale(startIndex),
        endX: scale(endIndex),
        scale,
        scaleValues
    }
}
var isTouch = function isTouch2(e) {
    return e.changedTouches && !!e.changedTouches.length
}
var Brush = /* @__PURE__ */ (function (_PureComponent) {
    function Brush2(props) {
        var _this
        _classCallCheck$d(this, Brush2)
        _this = _callSuper$a(this, Brush2, [props])
        _defineProperty$h(_this, 'handleDrag', function (e) {
            if (_this.leaveTimer) {
                clearTimeout(_this.leaveTimer)
                _this.leaveTimer = null
            }
            if (_this.state.isTravellerMoving) {
                _this.handleTravellerMove(e)
            } else if (_this.state.isSlideMoving) {
                _this.handleSlideDrag(e)
            }
        })
        _defineProperty$h(_this, 'handleTouchMove', function (e) {
            if (e.changedTouches != null && e.changedTouches.length > 0) {
                _this.handleDrag(e.changedTouches[0])
            }
        })
        _defineProperty$h(_this, 'handleDragEnd', function () {
            _this.setState(
                {
                    isTravellerMoving: false,
                    isSlideMoving: false
                },
                function () {
                    var _this$props = _this.props,
                        endIndex = _this$props.endIndex,
                        onDragEnd = _this$props.onDragEnd,
                        startIndex = _this$props.startIndex
                    onDragEnd === null ||
                        onDragEnd === void 0 ||
                        onDragEnd({
                            endIndex,
                            startIndex
                        })
                }
            )
            _this.detachDragEndListener()
        })
        _defineProperty$h(_this, 'handleLeaveWrapper', function () {
            if (_this.state.isTravellerMoving || _this.state.isSlideMoving) {
                _this.leaveTimer = window.setTimeout(_this.handleDragEnd, _this.props.leaveTimeOut)
            }
        })
        _defineProperty$h(_this, 'handleEnterSlideOrTraveller', function () {
            _this.setState({
                isTextActive: true
            })
        })
        _defineProperty$h(_this, 'handleLeaveSlideOrTraveller', function () {
            _this.setState({
                isTextActive: false
            })
        })
        _defineProperty$h(_this, 'handleSlideDragStart', function (e) {
            var event = isTouch(e) ? e.changedTouches[0] : e
            _this.setState({
                isTravellerMoving: false,
                isSlideMoving: true,
                slideMoveStartX: event.pageX
            })
            _this.attachDragEndListener()
        })
        _this.travellerDragStartHandlers = {
            startX: _this.handleTravellerDragStart.bind(_this, 'startX'),
            endX: _this.handleTravellerDragStart.bind(_this, 'endX')
        }
        _this.state = {}
        return _this
    }
    _inherits$b(Brush2, _PureComponent)
    return _createClass$d(
        Brush2,
        [
            {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                    if (this.leaveTimer) {
                        clearTimeout(this.leaveTimer)
                        this.leaveTimer = null
                    }
                    this.detachDragEndListener()
                }
            },
            {
                key: 'getIndex',
                value: function getIndex(_ref22) {
                    var startX = _ref22.startX,
                        endX = _ref22.endX
                    var scaleValues = this.state.scaleValues
                    var _this$props2 = this.props,
                        gap = _this$props2.gap,
                        data = _this$props2.data
                    var lastIndex = data.length - 1
                    var min2 = Math.min(startX, endX)
                    var max2 = Math.max(startX, endX)
                    var minIndex = Brush2.getIndexInRange(scaleValues, min2)
                    var maxIndex = Brush2.getIndexInRange(scaleValues, max2)
                    return {
                        startIndex: minIndex - (minIndex % gap),
                        endIndex: maxIndex === lastIndex ? lastIndex : maxIndex - (maxIndex % gap)
                    }
                }
            },
            {
                key: 'getTextOfTick',
                value: function getTextOfTick(index2) {
                    var _this$props3 = this.props,
                        data = _this$props3.data,
                        tickFormatter = _this$props3.tickFormatter,
                        dataKey = _this$props3.dataKey
                    var text2 = getValueByDataKey(data[index2], dataKey, index2)
                    return isFunction(tickFormatter) ? tickFormatter(text2, index2) : text2
                }
            },
            {
                key: 'attachDragEndListener',
                value: function attachDragEndListener() {
                    window.addEventListener('mouseup', this.handleDragEnd, true)
                    window.addEventListener('touchend', this.handleDragEnd, true)
                    window.addEventListener('mousemove', this.handleDrag, true)
                }
            },
            {
                key: 'detachDragEndListener',
                value: function detachDragEndListener() {
                    window.removeEventListener('mouseup', this.handleDragEnd, true)
                    window.removeEventListener('touchend', this.handleDragEnd, true)
                    window.removeEventListener('mousemove', this.handleDrag, true)
                }
            },
            {
                key: 'handleSlideDrag',
                value: function handleSlideDrag(e) {
                    var _this$state = this.state,
                        slideMoveStartX = _this$state.slideMoveStartX,
                        startX = _this$state.startX,
                        endX = _this$state.endX
                    var _this$props4 = this.props,
                        x2 = _this$props4.x,
                        width = _this$props4.width,
                        travellerWidth = _this$props4.travellerWidth,
                        startIndex = _this$props4.startIndex,
                        endIndex = _this$props4.endIndex,
                        onChange2 = _this$props4.onChange
                    var delta = e.pageX - slideMoveStartX
                    if (delta > 0) {
                        delta = Math.min(
                            delta,
                            x2 + width - travellerWidth - endX,
                            x2 + width - travellerWidth - startX
                        )
                    } else if (delta < 0) {
                        delta = Math.max(delta, x2 - startX, x2 - endX)
                    }
                    var newIndex = this.getIndex({
                        startX: startX + delta,
                        endX: endX + delta
                    })
                    if (
                        (newIndex.startIndex !== startIndex || newIndex.endIndex !== endIndex) &&
                        onChange2
                    ) {
                        onChange2(newIndex)
                    }
                    this.setState({
                        startX: startX + delta,
                        endX: endX + delta,
                        slideMoveStartX: e.pageX
                    })
                }
            },
            {
                key: 'handleTravellerDragStart',
                value: function handleTravellerDragStart(id, e) {
                    var event = isTouch(e) ? e.changedTouches[0] : e
                    this.setState({
                        isSlideMoving: false,
                        isTravellerMoving: true,
                        movingTravellerId: id,
                        brushMoveStartX: event.pageX
                    })
                    this.attachDragEndListener()
                }
            },
            {
                key: 'handleTravellerMove',
                value: function handleTravellerMove(e) {
                    var _this$state2 = this.state,
                        brushMoveStartX = _this$state2.brushMoveStartX,
                        movingTravellerId = _this$state2.movingTravellerId,
                        endX = _this$state2.endX,
                        startX = _this$state2.startX
                    var prevValue = this.state[movingTravellerId]
                    var _this$props5 = this.props,
                        x2 = _this$props5.x,
                        width = _this$props5.width,
                        travellerWidth = _this$props5.travellerWidth,
                        onChange2 = _this$props5.onChange,
                        gap = _this$props5.gap,
                        data = _this$props5.data
                    var params = {
                        startX: this.state.startX,
                        endX: this.state.endX
                    }
                    var delta = e.pageX - brushMoveStartX
                    if (delta > 0) {
                        delta = Math.min(delta, x2 + width - travellerWidth - prevValue)
                    } else if (delta < 0) {
                        delta = Math.max(delta, x2 - prevValue)
                    }
                    params[movingTravellerId] = prevValue + delta
                    var newIndex = this.getIndex(params)
                    var startIndex = newIndex.startIndex,
                        endIndex = newIndex.endIndex
                    var isFullGap = function isFullGap2() {
                        var lastIndex = data.length - 1
                        if (
                            (movingTravellerId === 'startX' &&
                                (endX > startX ? startIndex % gap === 0 : endIndex % gap === 0)) ||
                            (endX < startX && endIndex === lastIndex) ||
                            (movingTravellerId === 'endX' &&
                                (endX > startX ? endIndex % gap === 0 : startIndex % gap === 0)) ||
                            (endX > startX && endIndex === lastIndex)
                        ) {
                            return true
                        }
                        return false
                    }
                    this.setState(
                        _defineProperty$h(
                            _defineProperty$h({}, movingTravellerId, prevValue + delta),
                            'brushMoveStartX',
                            e.pageX
                        ),
                        function () {
                            if (onChange2) {
                                if (isFullGap()) {
                                    onChange2(newIndex)
                                }
                            }
                        }
                    )
                }
            },
            {
                key: 'handleTravellerMoveKeyboard',
                value: function handleTravellerMoveKeyboard(direction, id) {
                    var _this2 = this
                    var _this$state3 = this.state,
                        scaleValues = _this$state3.scaleValues,
                        startX = _this$state3.startX,
                        endX = _this$state3.endX
                    var currentScaleValue = this.state[id]
                    var currentIndex = scaleValues.indexOf(currentScaleValue)
                    if (currentIndex === -1) {
                        return
                    }
                    var newIndex = currentIndex + direction
                    if (newIndex === -1 || newIndex >= scaleValues.length) {
                        return
                    }
                    var newScaleValue = scaleValues[newIndex]
                    if (
                        (id === 'startX' && newScaleValue >= endX) ||
                        (id === 'endX' && newScaleValue <= startX)
                    ) {
                        return
                    }
                    this.setState(_defineProperty$h({}, id, newScaleValue), function () {
                        _this2.props.onChange(
                            _this2.getIndex({
                                startX: _this2.state.startX,
                                endX: _this2.state.endX
                            })
                        )
                    })
                }
            },
            {
                key: 'renderBackground',
                value: function renderBackground() {
                    var _this$props6 = this.props,
                        x2 = _this$props6.x,
                        y2 = _this$props6.y,
                        width = _this$props6.width,
                        height = _this$props6.height,
                        fill = _this$props6.fill,
                        stroke = _this$props6.stroke
                    return /* @__PURE__ */ React.createElement('rect', {
                        stroke,
                        fill,
                        x: x2,
                        y: y2,
                        width,
                        height
                    })
                }
            },
            {
                key: 'renderPanorama',
                value: function renderPanorama() {
                    var _this$props7 = this.props,
                        x2 = _this$props7.x,
                        y2 = _this$props7.y,
                        width = _this$props7.width,
                        height = _this$props7.height,
                        data = _this$props7.data,
                        children = _this$props7.children,
                        padding = _this$props7.padding
                    var chartElement = reactExports.Children.only(children)
                    if (!chartElement) {
                        return null
                    }
                    return /* @__PURE__ */ React.cloneElement(chartElement, {
                        x: x2,
                        y: y2,
                        width,
                        height,
                        margin: padding,
                        compact: true,
                        data
                    })
                }
            },
            {
                key: 'renderTravellerLayer',
                value: function renderTravellerLayer(travellerX, id) {
                    var _data$startIndex,
                        _data$endIndex,
                        _this3 = this
                    var _this$props8 = this.props,
                        y2 = _this$props8.y,
                        travellerWidth = _this$props8.travellerWidth,
                        height = _this$props8.height,
                        traveller = _this$props8.traveller,
                        ariaLabel = _this$props8.ariaLabel,
                        data = _this$props8.data,
                        startIndex = _this$props8.startIndex,
                        endIndex = _this$props8.endIndex
                    var x2 = Math.max(travellerX, this.props.x)
                    var travellerProps = _objectSpread$d(
                        _objectSpread$d({}, filterProps(this.props, false)),
                        {},
                        {
                            x: x2,
                            y: y2,
                            width: travellerWidth,
                            height
                        }
                    )
                    var ariaLabelBrush =
                        ariaLabel ||
                        'Min value: '
                            .concat(
                                (_data$startIndex = data[startIndex]) === null ||
                                    _data$startIndex === void 0
                                    ? void 0
                                    : _data$startIndex.name,
                                ', Max value: '
                            )
                            .concat(
                                (_data$endIndex = data[endIndex]) === null ||
                                    _data$endIndex === void 0
                                    ? void 0
                                    : _data$endIndex.name
                            )
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            tabIndex: 0,
                            role: 'slider',
                            'aria-label': ariaLabelBrush,
                            'aria-valuenow': travellerX,
                            className: 'recharts-brush-traveller',
                            onMouseEnter: this.handleEnterSlideOrTraveller,
                            onMouseLeave: this.handleLeaveSlideOrTraveller,
                            onMouseDown: this.travellerDragStartHandlers[id],
                            onTouchStart: this.travellerDragStartHandlers[id],
                            onKeyDown: function onKeyDown(e) {
                                if (!['ArrowLeft', 'ArrowRight'].includes(e.key)) {
                                    return
                                }
                                e.preventDefault()
                                e.stopPropagation()
                                _this3.handleTravellerMoveKeyboard(
                                    e.key === 'ArrowRight' ? 1 : -1,
                                    id
                                )
                            },
                            onFocus: function onFocus2() {
                                _this3.setState({
                                    isTravellerFocused: true
                                })
                            },
                            onBlur: function onBlur() {
                                _this3.setState({
                                    isTravellerFocused: false
                                })
                            },
                            style: {
                                cursor: 'col-resize'
                            }
                        },
                        Brush2.renderTraveller(traveller, travellerProps)
                    )
                }
            },
            {
                key: 'renderSlide',
                value: function renderSlide(startX, endX) {
                    var _this$props9 = this.props,
                        y2 = _this$props9.y,
                        height = _this$props9.height,
                        stroke = _this$props9.stroke,
                        travellerWidth = _this$props9.travellerWidth
                    var x2 = Math.min(startX, endX) + travellerWidth
                    var width = Math.max(Math.abs(endX - startX) - travellerWidth, 0)
                    return /* @__PURE__ */ React.createElement('rect', {
                        className: 'recharts-brush-slide',
                        onMouseEnter: this.handleEnterSlideOrTraveller,
                        onMouseLeave: this.handleLeaveSlideOrTraveller,
                        onMouseDown: this.handleSlideDragStart,
                        onTouchStart: this.handleSlideDragStart,
                        style: {
                            cursor: 'move'
                        },
                        stroke: 'none',
                        fill: stroke,
                        fillOpacity: 0.2,
                        x: x2,
                        y: y2,
                        width,
                        height
                    })
                }
            },
            {
                key: 'renderText',
                value: function renderText() {
                    var _this$props10 = this.props,
                        startIndex = _this$props10.startIndex,
                        endIndex = _this$props10.endIndex,
                        y2 = _this$props10.y,
                        height = _this$props10.height,
                        travellerWidth = _this$props10.travellerWidth,
                        stroke = _this$props10.stroke
                    var _this$state4 = this.state,
                        startX = _this$state4.startX,
                        endX = _this$state4.endX
                    var offset = 5
                    var attrs = {
                        pointerEvents: 'none',
                        fill: stroke
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: 'recharts-brush-texts'
                        },
                        /* @__PURE__ */ React.createElement(
                            Text,
                            _extends$c(
                                {
                                    textAnchor: 'end',
                                    verticalAnchor: 'middle',
                                    x: Math.min(startX, endX) - offset,
                                    y: y2 + height / 2
                                },
                                attrs
                            ),
                            this.getTextOfTick(startIndex)
                        ),
                        /* @__PURE__ */ React.createElement(
                            Text,
                            _extends$c(
                                {
                                    textAnchor: 'start',
                                    verticalAnchor: 'middle',
                                    x: Math.max(startX, endX) + travellerWidth + offset,
                                    y: y2 + height / 2
                                },
                                attrs
                            ),
                            this.getTextOfTick(endIndex)
                        )
                    )
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _this$props11 = this.props,
                        data = _this$props11.data,
                        className = _this$props11.className,
                        children = _this$props11.children,
                        x2 = _this$props11.x,
                        y2 = _this$props11.y,
                        width = _this$props11.width,
                        height = _this$props11.height,
                        alwaysShowText = _this$props11.alwaysShowText
                    var _this$state5 = this.state,
                        startX = _this$state5.startX,
                        endX = _this$state5.endX,
                        isTextActive = _this$state5.isTextActive,
                        isSlideMoving = _this$state5.isSlideMoving,
                        isTravellerMoving = _this$state5.isTravellerMoving,
                        isTravellerFocused = _this$state5.isTravellerFocused
                    if (
                        !data ||
                        !data.length ||
                        !isNumber(x2) ||
                        !isNumber(y2) ||
                        !isNumber(width) ||
                        !isNumber(height) ||
                        width <= 0 ||
                        height <= 0
                    ) {
                        return null
                    }
                    var layerClass = clsx('recharts-brush', className)
                    var isPanoramic = React.Children.count(children) === 1
                    var style = generatePrefixStyle('userSelect', 'none')
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: layerClass,
                            onMouseLeave: this.handleLeaveWrapper,
                            onTouchMove: this.handleTouchMove,
                            style
                        },
                        this.renderBackground(),
                        isPanoramic && this.renderPanorama(),
                        this.renderSlide(startX, endX),
                        this.renderTravellerLayer(startX, 'startX'),
                        this.renderTravellerLayer(endX, 'endX'),
                        (isTextActive ||
                            isSlideMoving ||
                            isTravellerMoving ||
                            isTravellerFocused ||
                            alwaysShowText) &&
                            this.renderText()
                    )
                }
            }
        ],
        [
            {
                key: 'renderDefaultTraveller',
                value: function renderDefaultTraveller(props) {
                    var x2 = props.x,
                        y2 = props.y,
                        width = props.width,
                        height = props.height,
                        stroke = props.stroke
                    var lineY = Math.floor(y2 + height / 2) - 1
                    return /* @__PURE__ */ React.createElement(
                        React.Fragment,
                        null,
                        /* @__PURE__ */ React.createElement('rect', {
                            x: x2,
                            y: y2,
                            width,
                            height,
                            fill: stroke,
                            stroke: 'none'
                        }),
                        /* @__PURE__ */ React.createElement('line', {
                            x1: x2 + 1,
                            y1: lineY,
                            x2: x2 + width - 1,
                            y2: lineY,
                            fill: 'none',
                            stroke: '#fff'
                        }),
                        /* @__PURE__ */ React.createElement('line', {
                            x1: x2 + 1,
                            y1: lineY + 2,
                            x2: x2 + width - 1,
                            y2: lineY + 2,
                            fill: 'none',
                            stroke: '#fff'
                        })
                    )
                }
            },
            {
                key: 'renderTraveller',
                value: function renderTraveller(option, props) {
                    var rectangle
                    if (/* @__PURE__ */ React.isValidElement(option)) {
                        rectangle = /* @__PURE__ */ React.cloneElement(option, props)
                    } else if (isFunction(option)) {
                        rectangle = option(props)
                    } else {
                        rectangle = Brush2.renderDefaultTraveller(props)
                    }
                    return rectangle
                }
            },
            {
                key: 'getDerivedStateFromProps',
                value: function getDerivedStateFromProps(nextProps, prevState) {
                    var data = nextProps.data,
                        width = nextProps.width,
                        x2 = nextProps.x,
                        travellerWidth = nextProps.travellerWidth,
                        updateId = nextProps.updateId,
                        startIndex = nextProps.startIndex,
                        endIndex = nextProps.endIndex
                    if (data !== prevState.prevData || updateId !== prevState.prevUpdateId) {
                        return _objectSpread$d(
                            {
                                prevData: data,
                                prevTravellerWidth: travellerWidth,
                                prevUpdateId: updateId,
                                prevX: x2,
                                prevWidth: width
                            },
                            data && data.length
                                ? createScale({
                                      data,
                                      width,
                                      x: x2,
                                      travellerWidth,
                                      startIndex,
                                      endIndex
                                  })
                                : {
                                      scale: null,
                                      scaleValues: null
                                  }
                        )
                    }
                    if (
                        prevState.scale &&
                        (width !== prevState.prevWidth ||
                            x2 !== prevState.prevX ||
                            travellerWidth !== prevState.prevTravellerWidth)
                    ) {
                        prevState.scale.range([x2, x2 + width - travellerWidth])
                        var scaleValues = prevState.scale.domain().map(function (entry) {
                            return prevState.scale(entry)
                        })
                        return {
                            prevData: data,
                            prevTravellerWidth: travellerWidth,
                            prevUpdateId: updateId,
                            prevX: x2,
                            prevWidth: width,
                            startX: prevState.scale(nextProps.startIndex),
                            endX: prevState.scale(nextProps.endIndex),
                            scaleValues
                        }
                    }
                    return null
                }
            },
            {
                key: 'getIndexInRange',
                value: function getIndexInRange(valueRange, x2) {
                    var len = valueRange.length
                    var start = 0
                    var end = len - 1
                    while (end - start > 1) {
                        var middle = Math.floor((start + end) / 2)
                        if (valueRange[middle] > x2) {
                            end = middle
                        } else {
                            start = middle
                        }
                    }
                    return x2 >= valueRange[end] ? end : start
                }
            }
        ]
    )
})(reactExports.PureComponent)
_defineProperty$h(Brush, 'displayName', 'Brush')
_defineProperty$h(Brush, 'defaultProps', {
    height: 40,
    travellerWidth: 5,
    gap: 1,
    fill: '#fff',
    stroke: '#666',
    padding: {
        top: 1,
        right: 1,
        bottom: 1,
        left: 1
    },
    leaveTimeOut: 1e3,
    alwaysShowText: false
})
var _baseSome
var hasRequired_baseSome
function require_baseSome() {
    if (hasRequired_baseSome) return _baseSome
    hasRequired_baseSome = 1
    var baseEach = require_baseEach()
    function baseSome(collection, predicate) {
        var result
        baseEach(collection, function (value, index2, collection2) {
            result = predicate(value, index2, collection2)
            return !result
        })
        return !!result
    }
    _baseSome = baseSome
    return _baseSome
}
var some_1
var hasRequiredSome
function requireSome() {
    if (hasRequiredSome) return some_1
    hasRequiredSome = 1
    var arraySome = require_arraySome(),
        baseIteratee = require_baseIteratee(),
        baseSome = require_baseSome(),
        isArray2 = requireIsArray(),
        isIterateeCall = require_isIterateeCall()
    function some2(collection, predicate, guard) {
        var func = isArray2(collection) ? arraySome : baseSome
        if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = void 0
        }
        return func(collection, baseIteratee(predicate, 3))
    }
    some_1 = some2
    return some_1
}
var someExports = requireSome()
const some = /* @__PURE__ */ getDefaultExportFromCjs(someExports)
var ifOverflowMatches = function ifOverflowMatches2(props, value) {
    var alwaysShow = props.alwaysShow
    var ifOverflow = props.ifOverflow
    if (alwaysShow) {
        ifOverflow = 'extendDomain'
    }
    return ifOverflow === value
}
var _baseAssignValue
var hasRequired_baseAssignValue
function require_baseAssignValue() {
    if (hasRequired_baseAssignValue) return _baseAssignValue
    hasRequired_baseAssignValue = 1
    var defineProperty = require_defineProperty()
    function baseAssignValue(object2, key, value) {
        if (key == '__proto__' && defineProperty) {
            defineProperty(object2, key, {
                configurable: true,
                enumerable: true,
                value: value,
                writable: true
            })
        } else {
            object2[key] = value
        }
    }
    _baseAssignValue = baseAssignValue
    return _baseAssignValue
}
var mapValues_1
var hasRequiredMapValues
function requireMapValues() {
    if (hasRequiredMapValues) return mapValues_1
    hasRequiredMapValues = 1
    var baseAssignValue = require_baseAssignValue(),
        baseForOwn = require_baseForOwn(),
        baseIteratee = require_baseIteratee()
    function mapValues2(object2, iteratee) {
        var result = {}
        iteratee = baseIteratee(iteratee, 3)
        baseForOwn(object2, function (value, key, object3) {
            baseAssignValue(result, key, iteratee(value, key, object3))
        })
        return result
    }
    mapValues_1 = mapValues2
    return mapValues_1
}
var mapValuesExports = requireMapValues()
const mapValues = /* @__PURE__ */ getDefaultExportFromCjs(mapValuesExports)
var _arrayEvery
var hasRequired_arrayEvery
function require_arrayEvery() {
    if (hasRequired_arrayEvery) return _arrayEvery
    hasRequired_arrayEvery = 1
    function arrayEvery(array2, predicate) {
        var index2 = -1,
            length2 = array2 == null ? 0 : array2.length
        while (++index2 < length2) {
            if (!predicate(array2[index2], index2, array2)) {
                return false
            }
        }
        return true
    }
    _arrayEvery = arrayEvery
    return _arrayEvery
}
var _baseEvery
var hasRequired_baseEvery
function require_baseEvery() {
    if (hasRequired_baseEvery) return _baseEvery
    hasRequired_baseEvery = 1
    var baseEach = require_baseEach()
    function baseEvery(collection, predicate) {
        var result = true
        baseEach(collection, function (value, index2, collection2) {
            result = !!predicate(value, index2, collection2)
            return result
        })
        return result
    }
    _baseEvery = baseEvery
    return _baseEvery
}
var every_1
var hasRequiredEvery
function requireEvery() {
    if (hasRequiredEvery) return every_1
    hasRequiredEvery = 1
    var arrayEvery = require_arrayEvery(),
        baseEvery = require_baseEvery(),
        baseIteratee = require_baseIteratee(),
        isArray2 = requireIsArray(),
        isIterateeCall = require_isIterateeCall()
    function every2(collection, predicate, guard) {
        var func = isArray2(collection) ? arrayEvery : baseEvery
        if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = void 0
        }
        return func(collection, baseIteratee(predicate, 3))
    }
    every_1 = every2
    return every_1
}
var everyExports = requireEvery()
const every = /* @__PURE__ */ getDefaultExportFromCjs(everyExports)
var _excluded$d = ['x', 'y']
function _typeof$g(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$g =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$g(o)
    )
}
function _extends$b() {
    _extends$b = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$b.apply(this, arguments)
}
function ownKeys$d(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r22) {
                return Object.getOwnPropertyDescriptor(e, r22).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$c(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$d(Object(t), true).forEach(function (r22) {
                  _defineProperty$g(e, r22, t[r22])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$d(Object(t)).forEach(function (r22) {
                    Object.defineProperty(e, r22, Object.getOwnPropertyDescriptor(t, r22))
                })
    }
    return e
}
function _defineProperty$g(obj, key, value) {
    key = _toPropertyKey$f(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$f(t) {
    var i = _toPrimitive$f(t, 'string')
    return 'symbol' == _typeof$g(i) ? i : i + ''
}
function _toPrimitive$f(t, r2) {
    if ('object' != _typeof$g(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$g(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function _objectWithoutProperties$7(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$6(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$6(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function typeguardBarRectangleProps(_ref3, props) {
    var xProp = _ref3.x,
        yProp = _ref3.y,
        option = _objectWithoutProperties$7(_ref3, _excluded$d)
    var xValue = ''.concat(xProp)
    var x2 = parseInt(xValue, 10)
    var yValue = ''.concat(yProp)
    var y2 = parseInt(yValue, 10)
    var heightValue = ''.concat(props.height || option.height)
    var height = parseInt(heightValue, 10)
    var widthValue = ''.concat(props.width || option.width)
    var width = parseInt(widthValue, 10)
    return _objectSpread$c(
        _objectSpread$c(
            _objectSpread$c(
                _objectSpread$c(_objectSpread$c({}, props), option),
                x2
                    ? {
                          x: x2
                      }
                    : {}
            ),
            y2
                ? {
                      y: y2
                  }
                : {}
        ),
        {},
        {
            height,
            width,
            name: props.name,
            radius: props.radius
        }
    )
}
function BarRectangle(props) {
    return /* @__PURE__ */ React.createElement(
        Shape,
        _extends$b(
            {
                shapeType: 'rectangle',
                propTransformer: typeguardBarRectangleProps,
                activeClassName: 'recharts-active-bar'
            },
            props
        )
    )
}
var minPointSizeCallback = function minPointSizeCallback2(minPointSize) {
    var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0
    return function (value, index2) {
        if (typeof minPointSize === 'number') return minPointSize
        var isValueNumber = typeof value === 'number'
        if (isValueNumber) {
            return minPointSize(value, index2)
        }
        !isValueNumber ? invariant() : void 0
        return defaultValue
    }
}
var _excluded$c = ['value', 'background']
var _Bar
function _typeof$f(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$f =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$f(o)
    )
}
function _objectWithoutProperties$6(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$5(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$5(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _extends$a() {
    _extends$a = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$a.apply(this, arguments)
}
function ownKeys$c(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$b(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$c(Object(t), true).forEach(function (r3) {
                  _defineProperty$f(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$c(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$c(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$c(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$e(descriptor.key), descriptor)
    }
}
function _createClass$c(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$c(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$c(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$9(t, o, e) {
    return (
        (o = _getPrototypeOf$a(o)),
        _possibleConstructorReturn$a(
            t,
            _isNativeReflectConstruct$a()
                ? Reflect.construct(o, e || [], _getPrototypeOf$a(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$a(self2, call) {
    if (call && (_typeof$f(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$9(self2)
}
function _assertThisInitialized$9(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$a() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$a = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$a(o) {
    _getPrototypeOf$a = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$a(o)
}
function _inherits$a(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$9(subClass, superClass)
}
function _setPrototypeOf$9(o, p) {
    _setPrototypeOf$9 = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$9(o, p)
}
function _defineProperty$f(obj, key, value) {
    key = _toPropertyKey$e(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$e(t) {
    var i = _toPrimitive$e(t, 'string')
    return 'symbol' == _typeof$f(i) ? i : i + ''
}
function _toPrimitive$e(t, r2) {
    if ('object' != _typeof$f(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$f(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var Bar = /* @__PURE__ */ (function (_PureComponent) {
    function Bar2() {
        var _this
        _classCallCheck$c(this, Bar2)
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key]
        }
        _this = _callSuper$9(this, Bar2, [].concat(args))
        _defineProperty$f(_this, 'state', {
            isAnimationFinished: false
        })
        _defineProperty$f(_this, 'id', uniqueId('recharts-bar-'))
        _defineProperty$f(_this, 'handleAnimationEnd', function () {
            var onAnimationEnd2 = _this.props.onAnimationEnd
            _this.setState({
                isAnimationFinished: true
            })
            if (onAnimationEnd2) {
                onAnimationEnd2()
            }
        })
        _defineProperty$f(_this, 'handleAnimationStart', function () {
            var onAnimationStart2 = _this.props.onAnimationStart
            _this.setState({
                isAnimationFinished: false
            })
            if (onAnimationStart2) {
                onAnimationStart2()
            }
        })
        return _this
    }
    _inherits$a(Bar2, _PureComponent)
    return _createClass$c(
        Bar2,
        [
            {
                key: 'renderRectanglesStatically',
                value: function renderRectanglesStatically(data) {
                    var _this2 = this
                    var _this$props = this.props,
                        shape = _this$props.shape,
                        dataKey = _this$props.dataKey,
                        activeIndex = _this$props.activeIndex,
                        activeBar = _this$props.activeBar
                    var baseProps = filterProps(this.props, false)
                    return (
                        data &&
                        data.map(function (entry, i) {
                            var isActive = i === activeIndex
                            var option = isActive ? activeBar : shape
                            var props = _objectSpread$b(
                                _objectSpread$b(_objectSpread$b({}, baseProps), entry),
                                {},
                                {
                                    isActive,
                                    option,
                                    index: i,
                                    dataKey,
                                    onAnimationStart: _this2.handleAnimationStart,
                                    onAnimationEnd: _this2.handleAnimationEnd
                                }
                            )
                            return /* @__PURE__ */ React.createElement(
                                Layer,
                                _extends$a(
                                    {
                                        className: 'recharts-bar-rectangle'
                                    },
                                    adaptEventsOfChild(_this2.props, entry, i),
                                    {
                                        // https://github.com/recharts/recharts/issues/5415
                                        // eslint-disable-next-line react/no-array-index-key
                                        key: 'rectangle-'
                                            .concat(
                                                entry === null || entry === void 0
                                                    ? void 0
                                                    : entry.x,
                                                '-'
                                            )
                                            .concat(
                                                entry === null || entry === void 0
                                                    ? void 0
                                                    : entry.y,
                                                '-'
                                            )
                                            .concat(
                                                entry === null || entry === void 0
                                                    ? void 0
                                                    : entry.value,
                                                '-'
                                            )
                                            .concat(i)
                                    }
                                ),
                                /* @__PURE__ */ React.createElement(BarRectangle, props)
                            )
                        })
                    )
                }
            },
            {
                key: 'renderRectanglesWithAnimation',
                value: function renderRectanglesWithAnimation() {
                    var _this3 = this
                    var _this$props2 = this.props,
                        data = _this$props2.data,
                        layout = _this$props2.layout,
                        isAnimationActive = _this$props2.isAnimationActive,
                        animationBegin = _this$props2.animationBegin,
                        animationDuration = _this$props2.animationDuration,
                        animationEasing = _this$props2.animationEasing,
                        animationId = _this$props2.animationId
                    var prevData = this.state.prevData
                    return /* @__PURE__ */ React.createElement(
                        Animate,
                        {
                            begin: animationBegin,
                            duration: animationDuration,
                            isActive: isAnimationActive,
                            easing: animationEasing,
                            from: {
                                t: 0
                            },
                            to: {
                                t: 1
                            },
                            key: 'bar-'.concat(animationId),
                            onAnimationEnd: this.handleAnimationEnd,
                            onAnimationStart: this.handleAnimationStart
                        },
                        function (_ref3) {
                            var t = _ref3.t
                            var stepData = data.map(function (entry, index2) {
                                var prev2 = prevData && prevData[index2]
                                if (prev2) {
                                    var interpolatorX = interpolateNumber$2(prev2.x, entry.x)
                                    var interpolatorY = interpolateNumber$2(prev2.y, entry.y)
                                    var interpolatorWidth = interpolateNumber$2(
                                        prev2.width,
                                        entry.width
                                    )
                                    var interpolatorHeight = interpolateNumber$2(
                                        prev2.height,
                                        entry.height
                                    )
                                    return _objectSpread$b(
                                        _objectSpread$b({}, entry),
                                        {},
                                        {
                                            x: interpolatorX(t),
                                            y: interpolatorY(t),
                                            width: interpolatorWidth(t),
                                            height: interpolatorHeight(t)
                                        }
                                    )
                                }
                                if (layout === 'horizontal') {
                                    var _interpolatorHeight = interpolateNumber$2(0, entry.height)
                                    var h = _interpolatorHeight(t)
                                    return _objectSpread$b(
                                        _objectSpread$b({}, entry),
                                        {},
                                        {
                                            y: entry.y + entry.height - h,
                                            height: h
                                        }
                                    )
                                }
                                var interpolator = interpolateNumber$2(0, entry.width)
                                var w2 = interpolator(t)
                                return _objectSpread$b(
                                    _objectSpread$b({}, entry),
                                    {},
                                    {
                                        width: w2
                                    }
                                )
                            })
                            return /* @__PURE__ */ React.createElement(
                                Layer,
                                null,
                                _this3.renderRectanglesStatically(stepData)
                            )
                        }
                    )
                }
            },
            {
                key: 'renderRectangles',
                value: function renderRectangles() {
                    var _this$props3 = this.props,
                        data = _this$props3.data,
                        isAnimationActive = _this$props3.isAnimationActive
                    var prevData = this.state.prevData
                    if (
                        isAnimationActive &&
                        data &&
                        data.length &&
                        (!prevData || !isEqual$1(prevData, data))
                    ) {
                        return this.renderRectanglesWithAnimation()
                    }
                    return this.renderRectanglesStatically(data)
                }
            },
            {
                key: 'renderBackground',
                value: function renderBackground() {
                    var _this4 = this
                    var _this$props4 = this.props,
                        data = _this$props4.data,
                        dataKey = _this$props4.dataKey,
                        activeIndex = _this$props4.activeIndex
                    var backgroundProps = filterProps(this.props.background, false)
                    return data.map(function (entry, i) {
                        entry.value
                        var background = entry.background,
                            rest = _objectWithoutProperties$6(entry, _excluded$c)
                        if (!background) {
                            return null
                        }
                        var props = _objectSpread$b(
                            _objectSpread$b(
                                _objectSpread$b(
                                    _objectSpread$b(
                                        _objectSpread$b({}, rest),
                                        {},
                                        {
                                            fill: '#eee'
                                        },
                                        background
                                    ),
                                    backgroundProps
                                ),
                                adaptEventsOfChild(_this4.props, entry, i)
                            ),
                            {},
                            {
                                onAnimationStart: _this4.handleAnimationStart,
                                onAnimationEnd: _this4.handleAnimationEnd,
                                dataKey,
                                index: i,
                                className: 'recharts-bar-background-rectangle'
                            }
                        )
                        return /* @__PURE__ */ React.createElement(
                            BarRectangle,
                            _extends$a(
                                {
                                    key: 'background-bar-'.concat(i),
                                    option: _this4.props.background,
                                    isActive: i === activeIndex
                                },
                                props
                            )
                        )
                    })
                }
            },
            {
                key: 'renderErrorBar',
                value: function renderErrorBar(needClip, clipPathId) {
                    if (this.props.isAnimationActive && !this.state.isAnimationFinished) {
                        return null
                    }
                    var _this$props5 = this.props,
                        data = _this$props5.data,
                        xAxis = _this$props5.xAxis,
                        yAxis = _this$props5.yAxis,
                        layout = _this$props5.layout,
                        children = _this$props5.children
                    var errorBarItems = findAllByType(children, ErrorBar)
                    if (!errorBarItems) {
                        return null
                    }
                    var offset = layout === 'vertical' ? data[0].height / 2 : data[0].width / 2
                    var dataPointFormatter = function dataPointFormatter2(dataPoint, dataKey) {
                        var value = Array.isArray(dataPoint.value)
                            ? dataPoint.value[1]
                            : dataPoint.value
                        return {
                            x: dataPoint.x,
                            y: dataPoint.y,
                            value,
                            errorVal: getValueByDataKey(dataPoint, dataKey)
                        }
                    }
                    var errorBarProps = {
                        clipPath: needClip ? 'url(#clipPath-'.concat(clipPathId, ')') : null
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        errorBarProps,
                        errorBarItems.map(function (item) {
                            return /* @__PURE__ */ React.cloneElement(item, {
                                key: 'error-bar-'
                                    .concat(clipPathId, '-')
                                    .concat(item.props.dataKey),
                                data,
                                xAxis,
                                yAxis,
                                layout,
                                offset,
                                dataPointFormatter
                            })
                        })
                    )
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _this$props6 = this.props,
                        hide = _this$props6.hide,
                        data = _this$props6.data,
                        className = _this$props6.className,
                        xAxis = _this$props6.xAxis,
                        yAxis = _this$props6.yAxis,
                        left = _this$props6.left,
                        top = _this$props6.top,
                        width = _this$props6.width,
                        height = _this$props6.height,
                        isAnimationActive = _this$props6.isAnimationActive,
                        background = _this$props6.background,
                        id = _this$props6.id
                    if (hide || !data || !data.length) {
                        return null
                    }
                    var isAnimationFinished = this.state.isAnimationFinished
                    var layerClass = clsx('recharts-bar', className)
                    var needClipX = xAxis && xAxis.allowDataOverflow
                    var needClipY = yAxis && yAxis.allowDataOverflow
                    var needClip = needClipX || needClipY
                    var clipPathId = isNil(id) ? this.id : id
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: layerClass
                        },
                        needClipX || needClipY
                            ? /* @__PURE__ */ React.createElement(
                                  'defs',
                                  null,
                                  /* @__PURE__ */ React.createElement(
                                      'clipPath',
                                      {
                                          id: 'clipPath-'.concat(clipPathId)
                                      },
                                      /* @__PURE__ */ React.createElement('rect', {
                                          x: needClipX ? left : left - width / 2,
                                          y: needClipY ? top : top - height / 2,
                                          width: needClipX ? width : width * 2,
                                          height: needClipY ? height : height * 2
                                      })
                                  )
                              )
                            : null,
                        /* @__PURE__ */ React.createElement(
                            Layer,
                            {
                                className: 'recharts-bar-rectangles',
                                clipPath: needClip ? 'url(#clipPath-'.concat(clipPathId, ')') : null
                            },
                            background ? this.renderBackground() : null,
                            this.renderRectangles()
                        ),
                        this.renderErrorBar(needClip, clipPathId),
                        (!isAnimationActive || isAnimationFinished) &&
                            LabelList.renderCallByParent(this.props, data)
                    )
                }
            }
        ],
        [
            {
                key: 'getDerivedStateFromProps',
                value: function getDerivedStateFromProps(nextProps, prevState) {
                    if (nextProps.animationId !== prevState.prevAnimationId) {
                        return {
                            prevAnimationId: nextProps.animationId,
                            curData: nextProps.data,
                            prevData: prevState.curData
                        }
                    }
                    if (nextProps.data !== prevState.curData) {
                        return {
                            curData: nextProps.data
                        }
                    }
                    return null
                }
            }
        ]
    )
})(reactExports.PureComponent)
_Bar = Bar
_defineProperty$f(Bar, 'displayName', 'Bar')
_defineProperty$f(Bar, 'defaultProps', {
    xAxisId: 0,
    yAxisId: 0,
    legendType: 'rect',
    minPointSize: 0,
    hide: false,
    data: [],
    layout: 'vertical',
    activeBar: false,
    isAnimationActive: !Global.isSsr,
    animationBegin: 0,
    animationDuration: 400,
    animationEasing: 'ease'
})
_defineProperty$f(Bar, 'getComposedData', function (_ref22) {
    var props = _ref22.props,
        item = _ref22.item,
        barPosition = _ref22.barPosition,
        bandSize = _ref22.bandSize,
        xAxis = _ref22.xAxis,
        yAxis = _ref22.yAxis,
        xAxisTicks = _ref22.xAxisTicks,
        yAxisTicks = _ref22.yAxisTicks,
        stackedData = _ref22.stackedData,
        dataStartIndex = _ref22.dataStartIndex,
        displayedData = _ref22.displayedData,
        offset = _ref22.offset
    var pos = findPositionOfBar(barPosition, item)
    if (!pos) {
        return null
    }
    var layout = props.layout
    var itemDefaultProps = item.type.defaultProps
    var itemProps =
        itemDefaultProps !== void 0
            ? _objectSpread$b(_objectSpread$b({}, itemDefaultProps), item.props)
            : item.props
    var dataKey = itemProps.dataKey,
        children = itemProps.children,
        minPointSizeProp = itemProps.minPointSize
    var numericAxis = layout === 'horizontal' ? yAxis : xAxis
    var stackedDomain = stackedData ? numericAxis.scale.domain() : null
    var baseValue = getBaseValueOfBar({
        numericAxis
    })
    var cells = findAllByType(children, Cell)
    var rects = displayedData.map(function (entry, index2) {
        var value, x2, y2, width, height, background
        if (stackedData) {
            value = truncateByDomain(stackedData[dataStartIndex + index2], stackedDomain)
        } else {
            value = getValueByDataKey(entry, dataKey)
            if (!Array.isArray(value)) {
                value = [baseValue, value]
            }
        }
        var minPointSize = minPointSizeCallback(minPointSizeProp, _Bar.defaultProps.minPointSize)(
            value[1],
            index2
        )
        if (layout === 'horizontal') {
            var _ref4
            var _ref3 = [yAxis.scale(value[0]), yAxis.scale(value[1])],
                baseValueScale = _ref3[0],
                currentValueScale = _ref3[1]
            x2 = getCateCoordinateOfBar({
                axis: xAxis,
                ticks: xAxisTicks,
                bandSize,
                offset: pos.offset,
                entry,
                index: index2
            })
            y2 =
                (_ref4 =
                    currentValueScale !== null && currentValueScale !== void 0
                        ? currentValueScale
                        : baseValueScale) !== null && _ref4 !== void 0
                    ? _ref4
                    : void 0
            width = pos.size
            var computedHeight = baseValueScale - currentValueScale
            height = Number.isNaN(computedHeight) ? 0 : computedHeight
            background = {
                x: x2,
                y: yAxis.y,
                width,
                height: yAxis.height
            }
            if (Math.abs(minPointSize) > 0 && Math.abs(height) < Math.abs(minPointSize)) {
                var delta =
                    mathSign(height || minPointSize) * (Math.abs(minPointSize) - Math.abs(height))
                y2 -= delta
                height += delta
            }
        } else {
            var _ref5 = [xAxis.scale(value[0]), xAxis.scale(value[1])],
                _baseValueScale = _ref5[0],
                _currentValueScale = _ref5[1]
            x2 = _baseValueScale
            y2 = getCateCoordinateOfBar({
                axis: yAxis,
                ticks: yAxisTicks,
                bandSize,
                offset: pos.offset,
                entry,
                index: index2
            })
            width = _currentValueScale - _baseValueScale
            height = pos.size
            background = {
                x: xAxis.x,
                y: y2,
                width: xAxis.width,
                height
            }
            if (Math.abs(minPointSize) > 0 && Math.abs(width) < Math.abs(minPointSize)) {
                var _delta =
                    mathSign(width || minPointSize) * (Math.abs(minPointSize) - Math.abs(width))
                width += _delta
            }
        }
        return _objectSpread$b(
            _objectSpread$b(
                _objectSpread$b({}, entry),
                {},
                {
                    x: x2,
                    y: y2,
                    width,
                    height,
                    value: stackedData ? value : value[1],
                    payload: entry,
                    background
                },
                cells && cells[index2] && cells[index2].props
            ),
            {},
            {
                tooltipPayload: [getTooltipItem(item, entry)],
                tooltipPosition: {
                    x: x2 + width / 2,
                    y: y2 + height / 2
                }
            }
        )
    })
    return _objectSpread$b(
        {
            data: rects,
            layout
        },
        offset
    )
})
function _typeof$e(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$e =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$e(o)
    )
}
function _classCallCheck$b(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$b(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$d(descriptor.key), descriptor)
    }
}
function _createClass$b(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$b(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$b(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function ownKeys$b(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$a(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$b(Object(t), true).forEach(function (r3) {
                  _defineProperty$e(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$b(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$e(obj, key, value) {
    key = _toPropertyKey$d(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$d(t) {
    var i = _toPrimitive$d(t, 'string')
    return 'symbol' == _typeof$e(i) ? i : i + ''
}
function _toPrimitive$d(t, r2) {
    if ('object' != _typeof$e(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$e(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var formatAxisMap2 = function formatAxisMap3(props, axisMap, offset, axisType, chartName) {
    var width = props.width,
        height = props.height,
        layout = props.layout,
        children = props.children
    var ids = Object.keys(axisMap)
    var steps = {
        left: offset.left,
        leftMirror: offset.left,
        right: width - offset.right,
        rightMirror: width - offset.right,
        top: offset.top,
        topMirror: offset.top,
        bottom: height - offset.bottom,
        bottomMirror: height - offset.bottom
    }
    var hasBar = !!findChildByType(children, Bar)
    return ids.reduce(function (result, id) {
        var axis = axisMap[id]
        var orientation = axis.orientation,
            domain = axis.domain,
            _axis$padding = axis.padding,
            padding = _axis$padding === void 0 ? {} : _axis$padding,
            mirror = axis.mirror,
            reversed = axis.reversed
        var offsetKey = ''.concat(orientation).concat(mirror ? 'Mirror' : '')
        var calculatedPadding, range3, x2, y2, needSpace
        if (axis.type === 'number' && (axis.padding === 'gap' || axis.padding === 'no-gap')) {
            var diff = domain[1] - domain[0]
            var smallestDistanceBetweenValues = Infinity
            var sortedValues = axis.categoricalDomain.sort(compareValues)
            sortedValues.forEach(function (value, index2) {
                if (index2 > 0) {
                    smallestDistanceBetweenValues = Math.min(
                        (value || 0) - (sortedValues[index2 - 1] || 0),
                        smallestDistanceBetweenValues
                    )
                }
            })
            if (Number.isFinite(smallestDistanceBetweenValues)) {
                var smallestDistanceInPercent = smallestDistanceBetweenValues / diff
                var rangeWidth = axis.layout === 'vertical' ? offset.height : offset.width
                if (axis.padding === 'gap') {
                    calculatedPadding = (smallestDistanceInPercent * rangeWidth) / 2
                }
                if (axis.padding === 'no-gap') {
                    var gap = getPercentValue(
                        props.barCategoryGap,
                        smallestDistanceInPercent * rangeWidth
                    )
                    var halfBand = (smallestDistanceInPercent * rangeWidth) / 2
                    calculatedPadding = halfBand - gap - ((halfBand - gap) / rangeWidth) * gap
                }
            }
        }
        if (axisType === 'xAxis') {
            range3 = [
                offset.left + (padding.left || 0) + (calculatedPadding || 0),
                offset.left + offset.width - (padding.right || 0) - (calculatedPadding || 0)
            ]
        } else if (axisType === 'yAxis') {
            range3 =
                layout === 'horizontal'
                    ? [
                          offset.top + offset.height - (padding.bottom || 0),
                          offset.top + (padding.top || 0)
                      ]
                    : [
                          offset.top + (padding.top || 0) + (calculatedPadding || 0),
                          offset.top +
                              offset.height -
                              (padding.bottom || 0) -
                              (calculatedPadding || 0)
                      ]
        } else {
            range3 = axis.range
        }
        if (reversed) {
            range3 = [range3[1], range3[0]]
        }
        var _parseScale = parseScale(axis, chartName, hasBar),
            scale = _parseScale.scale,
            realScaleType = _parseScale.realScaleType
        scale.domain(domain).range(range3)
        checkDomainOfScale(scale)
        var ticks2 = getTicksOfScale(
            scale,
            _objectSpread$a(
                _objectSpread$a({}, axis),
                {},
                {
                    realScaleType
                }
            )
        )
        if (axisType === 'xAxis') {
            needSpace = (orientation === 'top' && !mirror) || (orientation === 'bottom' && mirror)
            x2 = offset.left
            y2 = steps[offsetKey] - needSpace * axis.height
        } else if (axisType === 'yAxis') {
            needSpace = (orientation === 'left' && !mirror) || (orientation === 'right' && mirror)
            x2 = steps[offsetKey] - needSpace * axis.width
            y2 = offset.top
        }
        var finalAxis = _objectSpread$a(
            _objectSpread$a(_objectSpread$a({}, axis), ticks2),
            {},
            {
                realScaleType,
                x: x2,
                y: y2,
                scale,
                width: axisType === 'xAxis' ? offset.width : axis.width,
                height: axisType === 'yAxis' ? offset.height : axis.height
            }
        )
        finalAxis.bandSize = getBandSizeOfAxis(finalAxis, ticks2)
        if (!axis.hide && axisType === 'xAxis') {
            steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.height
        } else if (!axis.hide) {
            steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.width
        }
        return _objectSpread$a(
            _objectSpread$a({}, result),
            {},
            _defineProperty$e({}, id, finalAxis)
        )
    }, {})
}
var rectWithPoints = function rectWithPoints2(_ref3, _ref22) {
    var x1 = _ref3.x,
        y1 = _ref3.y
    var x2 = _ref22.x,
        y2 = _ref22.y
    return {
        x: Math.min(x1, x2),
        y: Math.min(y1, y2),
        width: Math.abs(x2 - x1),
        height: Math.abs(y2 - y1)
    }
}
var rectWithCoords = function rectWithCoords2(_ref3) {
    var x1 = _ref3.x1,
        y1 = _ref3.y1,
        x2 = _ref3.x2,
        y2 = _ref3.y2
    return rectWithPoints(
        {
            x: x1,
            y: y1
        },
        {
            x: x2,
            y: y2
        }
    )
}
var ScaleHelper = /* @__PURE__ */ (function () {
    function ScaleHelper2(scale) {
        _classCallCheck$b(this, ScaleHelper2)
        this.scale = scale
    }
    return _createClass$b(
        ScaleHelper2,
        [
            {
                key: 'domain',
                get: function get2() {
                    return this.scale.domain
                }
            },
            {
                key: 'range',
                get: function get2() {
                    return this.scale.range
                }
            },
            {
                key: 'rangeMin',
                get: function get2() {
                    return this.range()[0]
                }
            },
            {
                key: 'rangeMax',
                get: function get2() {
                    return this.range()[1]
                }
            },
            {
                key: 'bandwidth',
                get: function get2() {
                    return this.scale.bandwidth
                }
            },
            {
                key: 'apply',
                value: function apply(value) {
                    var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
                        bandAware = _ref4.bandAware,
                        position2 = _ref4.position
                    if (value === void 0) {
                        return void 0
                    }
                    if (position2) {
                        switch (position2) {
                            case 'start': {
                                return this.scale(value)
                            }
                            case 'middle': {
                                var offset = this.bandwidth ? this.bandwidth() / 2 : 0
                                return this.scale(value) + offset
                            }
                            case 'end': {
                                var _offset = this.bandwidth ? this.bandwidth() : 0
                                return this.scale(value) + _offset
                            }
                            default: {
                                return this.scale(value)
                            }
                        }
                    }
                    if (bandAware) {
                        var _offset2 = this.bandwidth ? this.bandwidth() / 2 : 0
                        return this.scale(value) + _offset2
                    }
                    return this.scale(value)
                }
            },
            {
                key: 'isInRange',
                value: function isInRange(value) {
                    var range3 = this.range()
                    var first2 = range3[0]
                    var last2 = range3[range3.length - 1]
                    return first2 <= last2
                        ? value >= first2 && value <= last2
                        : value >= last2 && value <= first2
                }
            }
        ],
        [
            {
                key: 'create',
                value: function create(obj) {
                    return new ScaleHelper2(obj)
                }
            }
        ]
    )
})()
_defineProperty$e(ScaleHelper, 'EPS', 1e-4)
var createLabeledScales = function createLabeledScales2(options2) {
    var scales = Object.keys(options2).reduce(function (res, key) {
        return _objectSpread$a(
            _objectSpread$a({}, res),
            {},
            _defineProperty$e({}, key, ScaleHelper.create(options2[key]))
        )
    }, {})
    return _objectSpread$a(
        _objectSpread$a({}, scales),
        {},
        {
            apply: function apply(coord) {
                var _ref5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
                    bandAware = _ref5.bandAware,
                    position2 = _ref5.position
                return mapValues(coord, function (value, label) {
                    return scales[label].apply(value, {
                        bandAware,
                        position: position2
                    })
                })
            },
            isInRange: function isInRange(coord) {
                return every(coord, function (value, label) {
                    return scales[label].isInRange(value)
                })
            }
        }
    )
}
function normalizeAngle(angle) {
    return ((angle % 180) + 180) % 180
}
var getAngledRectangleWidth = function getAngledRectangleWidth2(_ref6) {
    var width = _ref6.width,
        height = _ref6.height
    var angle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0
    var normalizedAngle = normalizeAngle(angle)
    var angleRadians = (normalizedAngle * Math.PI) / 180
    var angleThreshold = Math.atan(height / width)
    var angledWidth =
        angleRadians > angleThreshold && angleRadians < Math.PI - angleThreshold
            ? height / Math.sin(angleRadians)
            : width / Math.cos(angleRadians)
    return Math.abs(angledWidth)
}
var _createFind
var hasRequired_createFind
function require_createFind() {
    if (hasRequired_createFind) return _createFind
    hasRequired_createFind = 1
    var baseIteratee = require_baseIteratee(),
        isArrayLike = requireIsArrayLike(),
        keys2 = requireKeys()
    function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
            var iterable = Object(collection)
            if (!isArrayLike(collection)) {
                var iteratee = baseIteratee(predicate, 3)
                collection = keys2(collection)
                predicate = function (key) {
                    return iteratee(iterable[key], key, iterable)
                }
            }
            var index2 = findIndexFunc(collection, predicate, fromIndex)
            return index2 > -1 ? iterable[iteratee ? collection[index2] : index2] : void 0
        }
    }
    _createFind = createFind
    return _createFind
}
var toInteger_1
var hasRequiredToInteger
function requireToInteger() {
    if (hasRequiredToInteger) return toInteger_1
    hasRequiredToInteger = 1
    var toFinite = requireToFinite()
    function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1
        return result === result ? (remainder ? result - remainder : result) : 0
    }
    toInteger_1 = toInteger
    return toInteger_1
}
var findIndex_1
var hasRequiredFindIndex
function requireFindIndex() {
    if (hasRequiredFindIndex) return findIndex_1
    hasRequiredFindIndex = 1
    var baseFindIndex = require_baseFindIndex(),
        baseIteratee = require_baseIteratee(),
        toInteger = requireToInteger()
    var nativeMax = Math.max
    function findIndex(array2, predicate, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length
        if (!length2) {
            return -1
        }
        var index2 = fromIndex == null ? 0 : toInteger(fromIndex)
        if (index2 < 0) {
            index2 = nativeMax(length2 + index2, 0)
        }
        return baseFindIndex(array2, baseIteratee(predicate, 3), index2)
    }
    findIndex_1 = findIndex
    return findIndex_1
}
var find_1
var hasRequiredFind
function requireFind() {
    if (hasRequiredFind) return find_1
    hasRequiredFind = 1
    var createFind = require_createFind(),
        findIndex = requireFindIndex()
    var find2 = createFind(findIndex)
    find_1 = find2
    return find_1
}
var findExports = requireFind()
const find = /* @__PURE__ */ getDefaultExportFromCjs(findExports)
var memoizeExports = requireMemoize()
const memoize$1 = /* @__PURE__ */ getDefaultExportFromCjs(memoizeExports)
var calculateViewBox = memoize$1(
    function (offset) {
        return {
            x: offset.left,
            y: offset.top,
            width: offset.width,
            height: offset.height
        }
    },
    function (offset) {
        return ['l', offset.left, 't', offset.top, 'w', offset.width, 'h', offset.height].join('')
    }
)
var XAxisContext = /* @__PURE__ */ reactExports.createContext(void 0)
var YAxisContext = /* @__PURE__ */ reactExports.createContext(void 0)
var ViewBoxContext = /* @__PURE__ */ reactExports.createContext(void 0)
var OffsetContext = /* @__PURE__ */ reactExports.createContext({})
var ClipPathIdContext = /* @__PURE__ */ reactExports.createContext(void 0)
var ChartHeightContext = /* @__PURE__ */ reactExports.createContext(0)
var ChartWidthContext = /* @__PURE__ */ reactExports.createContext(0)
var ChartLayoutContextProvider = function ChartLayoutContextProvider2(props) {
    var _props$state = props.state,
        xAxisMap = _props$state.xAxisMap,
        yAxisMap = _props$state.yAxisMap,
        offset = _props$state.offset,
        clipPathId = props.clipPathId,
        children = props.children,
        width = props.width,
        height = props.height
    var viewBox = calculateViewBox(offset)
    return /* @__PURE__ */ React.createElement(
        XAxisContext.Provider,
        {
            value: xAxisMap
        },
        /* @__PURE__ */ React.createElement(
            YAxisContext.Provider,
            {
                value: yAxisMap
            },
            /* @__PURE__ */ React.createElement(
                OffsetContext.Provider,
                {
                    value: offset
                },
                /* @__PURE__ */ React.createElement(
                    ViewBoxContext.Provider,
                    {
                        value: viewBox
                    },
                    /* @__PURE__ */ React.createElement(
                        ClipPathIdContext.Provider,
                        {
                            value: clipPathId
                        },
                        /* @__PURE__ */ React.createElement(
                            ChartHeightContext.Provider,
                            {
                                value: height
                            },
                            /* @__PURE__ */ React.createElement(
                                ChartWidthContext.Provider,
                                {
                                    value: width
                                },
                                children
                            )
                        )
                    )
                )
            )
        )
    )
}
var useClipPathId = function useClipPathId2() {
    return reactExports.useContext(ClipPathIdContext)
}
var useXAxisOrThrow = function useXAxisOrThrow2(xAxisId) {
    var xAxisMap = reactExports.useContext(XAxisContext)
    !(xAxisMap != null) ? invariant() : void 0
    var xAxis = xAxisMap[xAxisId]
    !(xAxis != null) ? invariant() : void 0
    return xAxis
}
var useArbitraryXAxis = function useArbitraryXAxis2() {
    var xAxisMap = reactExports.useContext(XAxisContext)
    return getAnyElementOfObject(xAxisMap)
}
var useYAxisWithFiniteDomainOrRandom = function useYAxisWithFiniteDomainOrRandom2() {
    var yAxisMap = reactExports.useContext(YAxisContext)
    var yAxisWithFiniteDomain = find(yAxisMap, function (axis) {
        return every(axis.domain, Number.isFinite)
    })
    return yAxisWithFiniteDomain || getAnyElementOfObject(yAxisMap)
}
var useYAxisOrThrow = function useYAxisOrThrow2(yAxisId) {
    var yAxisMap = reactExports.useContext(YAxisContext)
    !(yAxisMap != null) ? invariant() : void 0
    var yAxis = yAxisMap[yAxisId]
    !(yAxis != null) ? invariant() : void 0
    return yAxis
}
var useViewBox = function useViewBox2() {
    var viewBox = reactExports.useContext(ViewBoxContext)
    return viewBox
}
var useOffset = function useOffset2() {
    return reactExports.useContext(OffsetContext)
}
var useChartWidth = function useChartWidth2() {
    return reactExports.useContext(ChartWidthContext)
}
var useChartHeight = function useChartHeight2() {
    return reactExports.useContext(ChartHeightContext)
}
function _typeof$d(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$d =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$d(o)
    )
}
function _classCallCheck$a(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$a(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$c(descriptor.key), descriptor)
    }
}
function _createClass$a(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$a(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$8(t, o, e) {
    return (
        (o = _getPrototypeOf$9(o)),
        _possibleConstructorReturn$9(
            t,
            _isNativeReflectConstruct$9()
                ? Reflect.construct(o, e || [], _getPrototypeOf$9(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$9(self2, call) {
    if (call && (_typeof$d(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$8(self2)
}
function _assertThisInitialized$8(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$9() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$9 = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$9(o) {
    _getPrototypeOf$9 = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$9(o)
}
function _inherits$9(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$8(subClass, superClass)
}
function _setPrototypeOf$8(o, p) {
    _setPrototypeOf$8 = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$8(o, p)
}
function ownKeys$a(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$9(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$a(Object(t), true).forEach(function (r3) {
                  _defineProperty$d(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$a(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$d(obj, key, value) {
    key = _toPropertyKey$c(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$c(t) {
    var i = _toPrimitive$c(t, 'string')
    return 'symbol' == _typeof$d(i) ? i : i + ''
}
function _toPrimitive$c(t, r2) {
    if ('object' != _typeof$d(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$d(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
function _slicedToArray$2(arr, i) {
    return (
        _arrayWithHoles$2(arr) ||
        _iterableToArrayLimit$2(arr, i) ||
        _unsupportedIterableToArray$4(arr, i) ||
        _nonIterableRest$2()
    )
}
function _nonIterableRest$2() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$4(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$4(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$4(o, minLen)
}
function _arrayLikeToArray$4(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _iterableToArrayLimit$2(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$2(arr) {
    if (Array.isArray(arr)) return arr
}
function _extends$9() {
    _extends$9 = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$9.apply(this, arguments)
}
var renderLine = function renderLine2(option, props) {
    var line2
    if (/* @__PURE__ */ React.isValidElement(option)) {
        line2 = /* @__PURE__ */ React.cloneElement(option, props)
    } else if (isFunction(option)) {
        line2 = option(props)
    } else {
        line2 = /* @__PURE__ */ React.createElement(
            'line',
            _extends$9({}, props, {
                className: 'recharts-reference-line-line'
            })
        )
    }
    return line2
}
var getEndPoints = function getEndPoints2(
    scales,
    isFixedX,
    isFixedY,
    isSegment,
    viewBox,
    position2,
    xAxisOrientation,
    yAxisOrientation,
    props
) {
    var x2 = viewBox.x,
        y2 = viewBox.y,
        width = viewBox.width,
        height = viewBox.height
    if (isFixedY) {
        var yCoord = props.y
        var coord = scales.y.apply(yCoord, {
            position: position2
        })
        if (ifOverflowMatches(props, 'discard') && !scales.y.isInRange(coord)) {
            return null
        }
        var points = [
            {
                x: x2 + width,
                y: coord
            },
            {
                x: x2,
                y: coord
            }
        ]
        return yAxisOrientation === 'left' ? points.reverse() : points
    }
    if (isFixedX) {
        var xCoord = props.x
        var _coord = scales.x.apply(xCoord, {
            position: position2
        })
        if (ifOverflowMatches(props, 'discard') && !scales.x.isInRange(_coord)) {
            return null
        }
        var _points = [
            {
                x: _coord,
                y: y2 + height
            },
            {
                x: _coord,
                y: y2
            }
        ]
        return xAxisOrientation === 'top' ? _points.reverse() : _points
    }
    if (isSegment) {
        var segment = props.segment
        var _points2 = segment.map(function (p) {
            return scales.apply(p, {
                position: position2
            })
        })
        if (
            ifOverflowMatches(props, 'discard') &&
            some(_points2, function (p) {
                return !scales.isInRange(p)
            })
        ) {
            return null
        }
        return _points2
    }
    return null
}
function ReferenceLineImpl(props) {
    var fixedX = props.x,
        fixedY = props.y,
        segment = props.segment,
        xAxisId = props.xAxisId,
        yAxisId = props.yAxisId,
        shape = props.shape,
        className = props.className,
        alwaysShow = props.alwaysShow
    var clipPathId = useClipPathId()
    var xAxis = useXAxisOrThrow(xAxisId)
    var yAxis = useYAxisOrThrow(yAxisId)
    var viewBox = useViewBox()
    if (!clipPathId || !viewBox) {
        return null
    }
    warn(
        alwaysShow === void 0,
        'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.'
    )
    var scales = createLabeledScales({
        x: xAxis.scale,
        y: yAxis.scale
    })
    var isX = isNumOrStr(fixedX)
    var isY = isNumOrStr(fixedY)
    var isSegment = segment && segment.length === 2
    var endPoints = getEndPoints(
        scales,
        isX,
        isY,
        isSegment,
        viewBox,
        props.position,
        xAxis.orientation,
        yAxis.orientation,
        props
    )
    if (!endPoints) {
        return null
    }
    var _endPoints = _slicedToArray$2(endPoints, 2),
        _endPoints$ = _endPoints[0],
        x1 = _endPoints$.x,
        y1 = _endPoints$.y,
        _endPoints$2 = _endPoints[1],
        x2 = _endPoints$2.x,
        y2 = _endPoints$2.y
    var clipPath = ifOverflowMatches(props, 'hidden') ? 'url(#'.concat(clipPathId, ')') : void 0
    var lineProps = _objectSpread$9(
        _objectSpread$9(
            {
                clipPath
            },
            filterProps(props, true)
        ),
        {},
        {
            x1,
            y1,
            x2,
            y2
        }
    )
    return /* @__PURE__ */ React.createElement(
        Layer,
        {
            className: clsx('recharts-reference-line', className)
        },
        renderLine(shape, lineProps),
        Label.renderCallByParent(
            props,
            rectWithCoords({
                x1,
                y1,
                x2,
                y2
            })
        )
    )
}
var ReferenceLine = /* @__PURE__ */ (function (_React$Component) {
    function ReferenceLine2() {
        _classCallCheck$a(this, ReferenceLine2)
        return _callSuper$8(this, ReferenceLine2, arguments)
    }
    _inherits$9(ReferenceLine2, _React$Component)
    return _createClass$a(ReferenceLine2, [
        {
            key: 'render',
            value: function render() {
                return /* @__PURE__ */ React.createElement(ReferenceLineImpl, this.props)
            }
        }
    ])
})(React.Component)
_defineProperty$d(ReferenceLine, 'displayName', 'ReferenceLine')
_defineProperty$d(ReferenceLine, 'defaultProps', {
    isFront: false,
    ifOverflow: 'discard',
    xAxisId: 0,
    yAxisId: 0,
    fill: 'none',
    stroke: '#ccc',
    fillOpacity: 1,
    strokeWidth: 1,
    position: 'middle'
})
function _extends$8() {
    _extends$8 = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$8.apply(this, arguments)
}
function _typeof$c(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$c =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$c(o)
    )
}
function ownKeys$9(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$8(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$9(Object(t), true).forEach(function (r3) {
                  _defineProperty$c(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$9(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$9(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$9(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$b(descriptor.key), descriptor)
    }
}
function _createClass$9(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$9(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$7(t, o, e) {
    return (
        (o = _getPrototypeOf$8(o)),
        _possibleConstructorReturn$8(
            t,
            _isNativeReflectConstruct$8()
                ? Reflect.construct(o, e || [], _getPrototypeOf$8(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$8(self2, call) {
    if (call && (_typeof$c(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$7(self2)
}
function _assertThisInitialized$7(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$8() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$8 = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$8(o) {
    _getPrototypeOf$8 = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$8(o)
}
function _inherits$8(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$7(subClass, superClass)
}
function _setPrototypeOf$7(o, p) {
    _setPrototypeOf$7 = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$7(o, p)
}
function _defineProperty$c(obj, key, value) {
    key = _toPropertyKey$b(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$b(t) {
    var i = _toPrimitive$b(t, 'string')
    return 'symbol' == _typeof$c(i) ? i : i + ''
}
function _toPrimitive$b(t, r2) {
    if ('object' != _typeof$c(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$c(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var getCoordinate = function getCoordinate2(props) {
    var x2 = props.x,
        y2 = props.y,
        xAxis = props.xAxis,
        yAxis = props.yAxis
    var scales = createLabeledScales({
        x: xAxis.scale,
        y: yAxis.scale
    })
    var result = scales.apply(
        {
            x: x2,
            y: y2
        },
        {
            bandAware: true
        }
    )
    if (ifOverflowMatches(props, 'discard') && !scales.isInRange(result)) {
        return null
    }
    return result
}
var ReferenceDot = /* @__PURE__ */ (function (_React$Component) {
    function ReferenceDot2() {
        _classCallCheck$9(this, ReferenceDot2)
        return _callSuper$7(this, ReferenceDot2, arguments)
    }
    _inherits$8(ReferenceDot2, _React$Component)
    return _createClass$9(ReferenceDot2, [
        {
            key: 'render',
            value: function render() {
                var _this$props = this.props,
                    x2 = _this$props.x,
                    y2 = _this$props.y,
                    r2 = _this$props.r,
                    alwaysShow = _this$props.alwaysShow,
                    clipPathId = _this$props.clipPathId
                var isX = isNumOrStr(x2)
                var isY = isNumOrStr(y2)
                warn(
                    alwaysShow === void 0,
                    'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.'
                )
                if (!isX || !isY) {
                    return null
                }
                var coordinate = getCoordinate(this.props)
                if (!coordinate) {
                    return null
                }
                var cx = coordinate.x,
                    cy = coordinate.y
                var _this$props2 = this.props,
                    shape = _this$props2.shape,
                    className = _this$props2.className
                var clipPath = ifOverflowMatches(this.props, 'hidden')
                    ? 'url(#'.concat(clipPathId, ')')
                    : void 0
                var dotProps = _objectSpread$8(
                    _objectSpread$8(
                        {
                            clipPath
                        },
                        filterProps(this.props, true)
                    ),
                    {},
                    {
                        cx,
                        cy
                    }
                )
                return /* @__PURE__ */ React.createElement(
                    Layer,
                    {
                        className: clsx('recharts-reference-dot', className)
                    },
                    ReferenceDot2.renderDot(shape, dotProps),
                    Label.renderCallByParent(this.props, {
                        x: cx - r2,
                        y: cy - r2,
                        width: 2 * r2,
                        height: 2 * r2
                    })
                )
            }
        }
    ])
})(React.Component)
_defineProperty$c(ReferenceDot, 'displayName', 'ReferenceDot')
_defineProperty$c(ReferenceDot, 'defaultProps', {
    isFront: false,
    ifOverflow: 'discard',
    xAxisId: 0,
    yAxisId: 0,
    r: 10,
    fill: '#fff',
    stroke: '#ccc',
    fillOpacity: 1,
    strokeWidth: 1
})
_defineProperty$c(ReferenceDot, 'renderDot', function (option, props) {
    var dot
    if (/* @__PURE__ */ React.isValidElement(option)) {
        dot = /* @__PURE__ */ React.cloneElement(option, props)
    } else if (isFunction(option)) {
        dot = option(props)
    } else {
        dot = /* @__PURE__ */ React.createElement(
            Dot,
            _extends$8({}, props, {
                cx: props.cx,
                cy: props.cy,
                className: 'recharts-reference-dot-dot'
            })
        )
    }
    return dot
})
function _extends$7() {
    _extends$7 = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$7.apply(this, arguments)
}
function _typeof$b(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$b =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$b(o)
    )
}
function ownKeys$8(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$7(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$8(Object(t), true).forEach(function (r3) {
                  _defineProperty$b(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$8(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$8(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$8(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$a(descriptor.key), descriptor)
    }
}
function _createClass$8(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$8(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$6(t, o, e) {
    return (
        (o = _getPrototypeOf$7(o)),
        _possibleConstructorReturn$7(
            t,
            _isNativeReflectConstruct$7()
                ? Reflect.construct(o, e || [], _getPrototypeOf$7(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$7(self2, call) {
    if (call && (_typeof$b(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$6(self2)
}
function _assertThisInitialized$6(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$7() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$7 = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$7(o) {
    _getPrototypeOf$7 = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$7(o)
}
function _inherits$7(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$6(subClass, superClass)
}
function _setPrototypeOf$6(o, p) {
    _setPrototypeOf$6 = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$6(o, p)
}
function _defineProperty$b(obj, key, value) {
    key = _toPropertyKey$a(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$a(t) {
    var i = _toPrimitive$a(t, 'string')
    return 'symbol' == _typeof$b(i) ? i : i + ''
}
function _toPrimitive$a(t, r2) {
    if ('object' != _typeof$b(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$b(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var getRect = function getRect2(hasX1, hasX2, hasY1, hasY2, props) {
    var xValue1 = props.x1,
        xValue2 = props.x2,
        yValue1 = props.y1,
        yValue2 = props.y2,
        xAxis = props.xAxis,
        yAxis = props.yAxis
    if (!xAxis || !yAxis) return null
    var scales = createLabeledScales({
        x: xAxis.scale,
        y: yAxis.scale
    })
    var p1 = {
        x: hasX1
            ? scales.x.apply(xValue1, {
                  position: 'start'
              })
            : scales.x.rangeMin,
        y: hasY1
            ? scales.y.apply(yValue1, {
                  position: 'start'
              })
            : scales.y.rangeMin
    }
    var p2 = {
        x: hasX2
            ? scales.x.apply(xValue2, {
                  position: 'end'
              })
            : scales.x.rangeMax,
        y: hasY2
            ? scales.y.apply(yValue2, {
                  position: 'end'
              })
            : scales.y.rangeMax
    }
    if (ifOverflowMatches(props, 'discard') && (!scales.isInRange(p1) || !scales.isInRange(p2))) {
        return null
    }
    return rectWithPoints(p1, p2)
}
var ReferenceArea = /* @__PURE__ */ (function (_React$Component) {
    function ReferenceArea2() {
        _classCallCheck$8(this, ReferenceArea2)
        return _callSuper$6(this, ReferenceArea2, arguments)
    }
    _inherits$7(ReferenceArea2, _React$Component)
    return _createClass$8(ReferenceArea2, [
        {
            key: 'render',
            value: function render() {
                var _this$props = this.props,
                    x1 = _this$props.x1,
                    x2 = _this$props.x2,
                    y1 = _this$props.y1,
                    y2 = _this$props.y2,
                    className = _this$props.className,
                    alwaysShow = _this$props.alwaysShow,
                    clipPathId = _this$props.clipPathId
                warn(
                    alwaysShow === void 0,
                    'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.'
                )
                var hasX1 = isNumOrStr(x1)
                var hasX2 = isNumOrStr(x2)
                var hasY1 = isNumOrStr(y1)
                var hasY2 = isNumOrStr(y2)
                var shape = this.props.shape
                if (!hasX1 && !hasX2 && !hasY1 && !hasY2 && !shape) {
                    return null
                }
                var rect = getRect(hasX1, hasX2, hasY1, hasY2, this.props)
                if (!rect && !shape) {
                    return null
                }
                var clipPath = ifOverflowMatches(this.props, 'hidden')
                    ? 'url(#'.concat(clipPathId, ')')
                    : void 0
                return /* @__PURE__ */ React.createElement(
                    Layer,
                    {
                        className: clsx('recharts-reference-area', className)
                    },
                    ReferenceArea2.renderRect(
                        shape,
                        _objectSpread$7(
                            _objectSpread$7(
                                {
                                    clipPath
                                },
                                filterProps(this.props, true)
                            ),
                            rect
                        )
                    ),
                    Label.renderCallByParent(this.props, rect)
                )
            }
        }
    ])
})(React.Component)
_defineProperty$b(ReferenceArea, 'displayName', 'ReferenceArea')
_defineProperty$b(ReferenceArea, 'defaultProps', {
    isFront: false,
    ifOverflow: 'discard',
    xAxisId: 0,
    yAxisId: 0,
    r: 10,
    fill: '#ccc',
    fillOpacity: 0.5,
    stroke: 'none',
    strokeWidth: 1
})
_defineProperty$b(ReferenceArea, 'renderRect', function (option, props) {
    var rect
    if (/* @__PURE__ */ React.isValidElement(option)) {
        rect = /* @__PURE__ */ React.cloneElement(option, props)
    } else if (isFunction(option)) {
        rect = option(props)
    } else {
        rect = /* @__PURE__ */ React.createElement(
            Rectangle,
            _extends$7({}, props, {
                className: 'recharts-reference-area-rect'
            })
        )
    }
    return rect
})
function getEveryNthWithCondition(array2, n, isValid) {
    if (n < 1) {
        return []
    }
    if (n === 1 && isValid === void 0) {
        return array2
    }
    var result = []
    for (var i = 0; i < array2.length; i += n) {
        {
            result.push(array2[i])
        }
    }
    return result
}
function getAngledTickWidth(contentSize, unitSize, angle) {
    var size = {
        width: contentSize.width + unitSize.width,
        height: contentSize.height + unitSize.height
    }
    return getAngledRectangleWidth(size, angle)
}
function getTickBoundaries(viewBox, sign2, sizeKey) {
    var isWidth = sizeKey === 'width'
    var x2 = viewBox.x,
        y2 = viewBox.y,
        width = viewBox.width,
        height = viewBox.height
    if (sign2 === 1) {
        return {
            start: isWidth ? x2 : y2,
            end: isWidth ? x2 + width : y2 + height
        }
    }
    return {
        start: isWidth ? x2 + width : y2 + height,
        end: isWidth ? x2 : y2
    }
}
function isVisible(sign2, tickPosition, getSize, start, end) {
    if (sign2 * tickPosition < sign2 * start || sign2 * tickPosition > sign2 * end) {
        return false
    }
    var size = getSize()
    return (
        sign2 * (tickPosition - (sign2 * size) / 2 - start) >= 0 &&
        sign2 * (tickPosition + (sign2 * size) / 2 - end) <= 0
    )
}
function getNumberIntervalTicks(ticks2, interval) {
    return getEveryNthWithCondition(ticks2, interval + 1)
}
function getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap) {
    var result = (ticks2 || []).slice()
    var initialStart = boundaries.start,
        end = boundaries.end
    var index2 = 0
    var stepsize = 1
    var start = initialStart
    var _loop = function _loop2() {
            var entry = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2[index2]
            if (entry === void 0) {
                return {
                    v: getEveryNthWithCondition(ticks2, stepsize)
                }
            }
            var i = index2
            var size
            var getSize = function getSize2() {
                if (size === void 0) {
                    size = getTickSize(entry, i)
                }
                return size
            }
            var tickCoord = entry.coordinate
            var isShow = index2 === 0 || isVisible(sign2, tickCoord, getSize, start, end)
            if (!isShow) {
                index2 = 0
                start = initialStart
                stepsize += 1
            }
            if (isShow) {
                start = tickCoord + sign2 * (getSize() / 2 + minTickGap)
                index2 += stepsize
            }
        },
        _ret
    while (stepsize <= result.length) {
        _ret = _loop()
        if (_ret) return _ret.v
    }
    return []
}
function _typeof$a(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$a =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$a(o)
    )
}
function ownKeys$7(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$6(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$7(Object(t), true).forEach(function (r3) {
                  _defineProperty$a(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$7(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$a(obj, key, value) {
    key = _toPropertyKey$9(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$9(t) {
    var i = _toPrimitive$9(t, 'string')
    return 'symbol' == _typeof$a(i) ? i : i + ''
}
function _toPrimitive$9(t, r2) {
    if ('object' != _typeof$a(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$a(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap) {
    var result = (ticks2 || []).slice()
    var len = result.length
    var start = boundaries.start
    var end = boundaries.end
    var _loop = function _loop2(i2) {
        var entry = result[i2]
        var size
        var getSize = function getSize2() {
            if (size === void 0) {
                size = getTickSize(entry, i2)
            }
            return size
        }
        if (i2 === len - 1) {
            var gap = sign2 * (entry.coordinate + (sign2 * getSize()) / 2 - end)
            result[i2] = entry = _objectSpread$6(
                _objectSpread$6({}, entry),
                {},
                {
                    tickCoord: gap > 0 ? entry.coordinate - gap * sign2 : entry.coordinate
                }
            )
        } else {
            result[i2] = entry = _objectSpread$6(
                _objectSpread$6({}, entry),
                {},
                {
                    tickCoord: entry.coordinate
                }
            )
        }
        var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end)
        if (isShow) {
            end = entry.tickCoord - sign2 * (getSize() / 2 + minTickGap)
            result[i2] = _objectSpread$6(
                _objectSpread$6({}, entry),
                {},
                {
                    isShow: true
                }
            )
        }
    }
    for (var i = len - 1; i >= 0; i--) {
        _loop(i)
    }
    return result
}
function getTicksStart(sign2, boundaries, getTickSize, ticks2, minTickGap, preserveEnd) {
    var result = (ticks2 || []).slice()
    var len = result.length
    var start = boundaries.start,
        end = boundaries.end
    if (preserveEnd) {
        var tail = ticks2[len - 1]
        var tailSize = getTickSize(tail, len - 1)
        var tailGap = sign2 * (tail.coordinate + (sign2 * tailSize) / 2 - end)
        result[len - 1] = tail = _objectSpread$6(
            _objectSpread$6({}, tail),
            {},
            {
                tickCoord: tailGap > 0 ? tail.coordinate - tailGap * sign2 : tail.coordinate
            }
        )
        var isTailShow = isVisible(
            sign2,
            tail.tickCoord,
            function () {
                return tailSize
            },
            start,
            end
        )
        if (isTailShow) {
            end = tail.tickCoord - sign2 * (tailSize / 2 + minTickGap)
            result[len - 1] = _objectSpread$6(
                _objectSpread$6({}, tail),
                {},
                {
                    isShow: true
                }
            )
        }
    }
    var count2 = preserveEnd ? len - 1 : len
    var _loop2 = function _loop22(i2) {
        var entry = result[i2]
        var size
        var getSize = function getSize2() {
            if (size === void 0) {
                size = getTickSize(entry, i2)
            }
            return size
        }
        if (i2 === 0) {
            var gap = sign2 * (entry.coordinate - (sign2 * getSize()) / 2 - start)
            result[i2] = entry = _objectSpread$6(
                _objectSpread$6({}, entry),
                {},
                {
                    tickCoord: gap < 0 ? entry.coordinate - gap * sign2 : entry.coordinate
                }
            )
        } else {
            result[i2] = entry = _objectSpread$6(
                _objectSpread$6({}, entry),
                {},
                {
                    tickCoord: entry.coordinate
                }
            )
        }
        var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end)
        if (isShow) {
            start = entry.tickCoord + sign2 * (getSize() / 2 + minTickGap)
            result[i2] = _objectSpread$6(
                _objectSpread$6({}, entry),
                {},
                {
                    isShow: true
                }
            )
        }
    }
    for (var i = 0; i < count2; i++) {
        _loop2(i)
    }
    return result
}
function getTicks(props, fontSize, letterSpacing) {
    var tick = props.tick,
        ticks2 = props.ticks,
        viewBox = props.viewBox,
        minTickGap = props.minTickGap,
        orientation = props.orientation,
        interval = props.interval,
        tickFormatter = props.tickFormatter,
        unit2 = props.unit,
        angle = props.angle
    if (!ticks2 || !ticks2.length || !tick) {
        return []
    }
    if (isNumber(interval) || Global.isSsr) {
        return getNumberIntervalTicks(
            ticks2,
            typeof interval === 'number' && isNumber(interval) ? interval : 0
        )
    }
    var candidates = []
    var sizeKey = orientation === 'top' || orientation === 'bottom' ? 'width' : 'height'
    var unitSize =
        unit2 && sizeKey === 'width'
            ? getStringSize(unit2, {
                  fontSize,
                  letterSpacing
              })
            : {
                  width: 0,
                  height: 0
              }
    var getTickSize = function getTickSize2(content, index2) {
        var value = isFunction(tickFormatter) ? tickFormatter(content.value, index2) : content.value
        return sizeKey === 'width'
            ? getAngledTickWidth(
                  getStringSize(value, {
                      fontSize,
                      letterSpacing
                  }),
                  unitSize,
                  angle
              )
            : getStringSize(value, {
                  fontSize,
                  letterSpacing
              })[sizeKey]
    }
    var sign2 = ticks2.length >= 2 ? mathSign(ticks2[1].coordinate - ticks2[0].coordinate) : 1
    var boundaries = getTickBoundaries(viewBox, sign2, sizeKey)
    if (interval === 'equidistantPreserveStart') {
        return getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap)
    }
    if (interval === 'preserveStart' || interval === 'preserveStartEnd') {
        candidates = getTicksStart(
            sign2,
            boundaries,
            getTickSize,
            ticks2,
            minTickGap,
            interval === 'preserveStartEnd'
        )
    } else {
        candidates = getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap)
    }
    return candidates.filter(function (entry) {
        return entry.isShow
    })
}
var _excluded$b = ['viewBox'],
    _excluded2$6 = ['viewBox'],
    _excluded3 = ['ticks']
function _typeof$9(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$9 =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$9(o)
    )
}
function _extends$6() {
    _extends$6 = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$6.apply(this, arguments)
}
function ownKeys$6(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$5(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$6(Object(t), true).forEach(function (r3) {
                  _defineProperty$9(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$6(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _objectWithoutProperties$5(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$4(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$4(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _classCallCheck$7(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$7(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$8(descriptor.key), descriptor)
    }
}
function _createClass$7(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$7(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$7(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$5(t, o, e) {
    return (
        (o = _getPrototypeOf$6(o)),
        _possibleConstructorReturn$6(
            t,
            _isNativeReflectConstruct$6()
                ? Reflect.construct(o, e || [], _getPrototypeOf$6(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$6(self2, call) {
    if (call && (_typeof$9(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$5(self2)
}
function _assertThisInitialized$5(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$6() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$6 = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$6(o) {
    _getPrototypeOf$6 = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$6(o)
}
function _inherits$6(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$5(subClass, superClass)
}
function _setPrototypeOf$5(o, p) {
    _setPrototypeOf$5 = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$5(o, p)
}
function _defineProperty$9(obj, key, value) {
    key = _toPropertyKey$8(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$8(t) {
    var i = _toPrimitive$8(t, 'string')
    return 'symbol' == _typeof$9(i) ? i : i + ''
}
function _toPrimitive$8(t, r2) {
    if ('object' != _typeof$9(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$9(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var CartesianAxis = /* @__PURE__ */ (function (_Component) {
    function CartesianAxis2(props) {
        var _this
        _classCallCheck$7(this, CartesianAxis2)
        _this = _callSuper$5(this, CartesianAxis2, [props])
        _this.state = {
            fontSize: '',
            letterSpacing: ''
        }
        return _this
    }
    _inherits$6(CartesianAxis2, _Component)
    return _createClass$7(
        CartesianAxis2,
        [
            {
                key: 'shouldComponentUpdate',
                value: function shouldComponentUpdate(_ref3, nextState) {
                    var viewBox = _ref3.viewBox,
                        restProps = _objectWithoutProperties$5(_ref3, _excluded$b)
                    var _this$props = this.props,
                        viewBoxOld = _this$props.viewBox,
                        restPropsOld = _objectWithoutProperties$5(_this$props, _excluded2$6)
                    return (
                        !shallowEqual(viewBox, viewBoxOld) ||
                        !shallowEqual(restProps, restPropsOld) ||
                        !shallowEqual(nextState, this.state)
                    )
                }
            },
            {
                key: 'componentDidMount',
                value: function componentDidMount() {
                    var htmlLayer = this.layerReference
                    if (!htmlLayer) return
                    var tick = htmlLayer.getElementsByClassName(
                        'recharts-cartesian-axis-tick-value'
                    )[0]
                    if (tick) {
                        this.setState({
                            fontSize: window.getComputedStyle(tick).fontSize,
                            letterSpacing: window.getComputedStyle(tick).letterSpacing
                        })
                    }
                }
                /**
                 * Calculate the coordinates of endpoints in ticks
                 * @param  {Object} data The data of a simple tick
                 * @return {Object} (x1, y1): The coordinate of endpoint close to tick text
                 *  (x2, y2): The coordinate of endpoint close to axis
                 */
            },
            {
                key: 'getTickLineCoord',
                value: function getTickLineCoord(data) {
                    var _this$props2 = this.props,
                        x2 = _this$props2.x,
                        y2 = _this$props2.y,
                        width = _this$props2.width,
                        height = _this$props2.height,
                        orientation = _this$props2.orientation,
                        tickSize = _this$props2.tickSize,
                        mirror = _this$props2.mirror,
                        tickMargin = _this$props2.tickMargin
                    var x1, x22, y1, y22, tx, ty
                    var sign2 = mirror ? -1 : 1
                    var finalTickSize = data.tickSize || tickSize
                    var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate
                    switch (orientation) {
                        case 'top':
                            x1 = x22 = data.coordinate
                            y22 = y2 + +!mirror * height
                            y1 = y22 - sign2 * finalTickSize
                            ty = y1 - sign2 * tickMargin
                            tx = tickCoord
                            break
                        case 'left':
                            y1 = y22 = data.coordinate
                            x22 = x2 + +!mirror * width
                            x1 = x22 - sign2 * finalTickSize
                            tx = x1 - sign2 * tickMargin
                            ty = tickCoord
                            break
                        case 'right':
                            y1 = y22 = data.coordinate
                            x22 = x2 + +mirror * width
                            x1 = x22 + sign2 * finalTickSize
                            tx = x1 + sign2 * tickMargin
                            ty = tickCoord
                            break
                        default:
                            x1 = x22 = data.coordinate
                            y22 = y2 + +mirror * height
                            y1 = y22 + sign2 * finalTickSize
                            ty = y1 + sign2 * tickMargin
                            tx = tickCoord
                            break
                    }
                    return {
                        line: {
                            x1,
                            y1,
                            x2: x22,
                            y2: y22
                        },
                        tick: {
                            x: tx,
                            y: ty
                        }
                    }
                }
            },
            {
                key: 'getTickTextAnchor',
                value: function getTickTextAnchor() {
                    var _this$props3 = this.props,
                        orientation = _this$props3.orientation,
                        mirror = _this$props3.mirror
                    var textAnchor
                    switch (orientation) {
                        case 'left':
                            textAnchor = mirror ? 'start' : 'end'
                            break
                        case 'right':
                            textAnchor = mirror ? 'end' : 'start'
                            break
                        default:
                            textAnchor = 'middle'
                            break
                    }
                    return textAnchor
                }
            },
            {
                key: 'getTickVerticalAnchor',
                value: function getTickVerticalAnchor() {
                    var _this$props4 = this.props,
                        orientation = _this$props4.orientation,
                        mirror = _this$props4.mirror
                    var verticalAnchor = 'end'
                    switch (orientation) {
                        case 'left':
                        case 'right':
                            verticalAnchor = 'middle'
                            break
                        case 'top':
                            verticalAnchor = mirror ? 'start' : 'end'
                            break
                        default:
                            verticalAnchor = mirror ? 'end' : 'start'
                            break
                    }
                    return verticalAnchor
                }
            },
            {
                key: 'renderAxisLine',
                value: function renderAxisLine() {
                    var _this$props5 = this.props,
                        x2 = _this$props5.x,
                        y2 = _this$props5.y,
                        width = _this$props5.width,
                        height = _this$props5.height,
                        orientation = _this$props5.orientation,
                        mirror = _this$props5.mirror,
                        axisLine = _this$props5.axisLine
                    var props = _objectSpread$5(
                        _objectSpread$5(
                            _objectSpread$5({}, filterProps(this.props, false)),
                            filterProps(axisLine, false)
                        ),
                        {},
                        {
                            fill: 'none'
                        }
                    )
                    if (orientation === 'top' || orientation === 'bottom') {
                        var needHeight = +(
                            (orientation === 'top' && !mirror) ||
                            (orientation === 'bottom' && mirror)
                        )
                        props = _objectSpread$5(
                            _objectSpread$5({}, props),
                            {},
                            {
                                x1: x2,
                                y1: y2 + needHeight * height,
                                x2: x2 + width,
                                y2: y2 + needHeight * height
                            }
                        )
                    } else {
                        var needWidth = +(
                            (orientation === 'left' && !mirror) ||
                            (orientation === 'right' && mirror)
                        )
                        props = _objectSpread$5(
                            _objectSpread$5({}, props),
                            {},
                            {
                                x1: x2 + needWidth * width,
                                y1: y2,
                                x2: x2 + needWidth * width,
                                y2: y2 + height
                            }
                        )
                    }
                    return /* @__PURE__ */ React.createElement(
                        'line',
                        _extends$6({}, props, {
                            className: clsx(
                                'recharts-cartesian-axis-line',
                                get(axisLine, 'className')
                            )
                        })
                    )
                }
            },
            {
                key: 'renderTicks',
                value:
                    /**
                     * render the ticks
                     * @param {Array} ticks The ticks to actually render (overrides what was passed in props)
                     * @param {string} fontSize Fontsize to consider for tick spacing
                     * @param {string} letterSpacing Letterspacing to consider for tick spacing
                     * @return {ReactComponent} renderedTicks
                     */
                    function renderTicks(ticks2, fontSize, letterSpacing) {
                        var _this2 = this
                        var _this$props6 = this.props,
                            tickLine = _this$props6.tickLine,
                            stroke = _this$props6.stroke,
                            tick = _this$props6.tick,
                            tickFormatter = _this$props6.tickFormatter,
                            unit2 = _this$props6.unit
                        var finalTicks = getTicks(
                            _objectSpread$5(
                                _objectSpread$5({}, this.props),
                                {},
                                {
                                    ticks: ticks2
                                }
                            ),
                            fontSize,
                            letterSpacing
                        )
                        var textAnchor = this.getTickTextAnchor()
                        var verticalAnchor = this.getTickVerticalAnchor()
                        var axisProps = filterProps(this.props, false)
                        var customTickProps = filterProps(tick, false)
                        var tickLineProps = _objectSpread$5(
                            _objectSpread$5({}, axisProps),
                            {},
                            {
                                fill: 'none'
                            },
                            filterProps(tickLine, false)
                        )
                        var items = finalTicks.map(function (entry, i) {
                            var _this2$getTickLineCoo = _this2.getTickLineCoord(entry),
                                lineCoord = _this2$getTickLineCoo.line,
                                tickCoord = _this2$getTickLineCoo.tick
                            var tickProps = _objectSpread$5(
                                _objectSpread$5(
                                    _objectSpread$5(
                                        _objectSpread$5(
                                            {
                                                textAnchor,
                                                verticalAnchor
                                            },
                                            axisProps
                                        ),
                                        {},
                                        {
                                            stroke: 'none',
                                            fill: stroke
                                        },
                                        customTickProps
                                    ),
                                    tickCoord
                                ),
                                {},
                                {
                                    index: i,
                                    payload: entry,
                                    visibleTicksCount: finalTicks.length,
                                    tickFormatter
                                }
                            )
                            return /* @__PURE__ */ React.createElement(
                                Layer,
                                _extends$6(
                                    {
                                        className: 'recharts-cartesian-axis-tick',
                                        key: 'tick-'
                                            .concat(entry.value, '-')
                                            .concat(entry.coordinate, '-')
                                            .concat(entry.tickCoord)
                                    },
                                    adaptEventsOfChild(_this2.props, entry, i)
                                ),
                                tickLine &&
                                    /* @__PURE__ */ React.createElement(
                                        'line',
                                        _extends$6({}, tickLineProps, lineCoord, {
                                            className: clsx(
                                                'recharts-cartesian-axis-tick-line',
                                                get(tickLine, 'className')
                                            )
                                        })
                                    ),
                                tick &&
                                    CartesianAxis2.renderTickItem(
                                        tick,
                                        tickProps,
                                        ''
                                            .concat(
                                                isFunction(tickFormatter)
                                                    ? tickFormatter(entry.value, i)
                                                    : entry.value
                                            )
                                            .concat(unit2 || '')
                                    )
                            )
                        })
                        return /* @__PURE__ */ React.createElement(
                            'g',
                            {
                                className: 'recharts-cartesian-axis-ticks'
                            },
                            items
                        )
                    }
            },
            {
                key: 'render',
                value: function render() {
                    var _this3 = this
                    var _this$props7 = this.props,
                        axisLine = _this$props7.axisLine,
                        width = _this$props7.width,
                        height = _this$props7.height,
                        ticksGenerator = _this$props7.ticksGenerator,
                        className = _this$props7.className,
                        hide = _this$props7.hide
                    if (hide) {
                        return null
                    }
                    var _this$props8 = this.props,
                        ticks2 = _this$props8.ticks,
                        noTicksProps = _objectWithoutProperties$5(_this$props8, _excluded3)
                    var finalTicks = ticks2
                    if (isFunction(ticksGenerator)) {
                        finalTicks =
                            ticks2 && ticks2.length > 0
                                ? ticksGenerator(this.props)
                                : ticksGenerator(noTicksProps)
                    }
                    if (width <= 0 || height <= 0 || !finalTicks || !finalTicks.length) {
                        return null
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: clsx('recharts-cartesian-axis', className),
                            ref: function ref(_ref22) {
                                _this3.layerReference = _ref22
                            }
                        },
                        axisLine && this.renderAxisLine(),
                        this.renderTicks(finalTicks, this.state.fontSize, this.state.letterSpacing),
                        Label.renderCallByParent(this.props)
                    )
                }
            }
        ],
        [
            {
                key: 'renderTickItem',
                value: function renderTickItem(option, props, value) {
                    var tickItem
                    if (/* @__PURE__ */ React.isValidElement(option)) {
                        tickItem = /* @__PURE__ */ React.cloneElement(option, props)
                    } else if (isFunction(option)) {
                        tickItem = option(props)
                    } else {
                        tickItem = /* @__PURE__ */ React.createElement(
                            Text,
                            _extends$6({}, props, {
                                className: 'recharts-cartesian-axis-tick-value'
                            }),
                            value
                        )
                    }
                    return tickItem
                }
            }
        ]
    )
})(reactExports.Component)
_defineProperty$9(CartesianAxis, 'displayName', 'CartesianAxis')
_defineProperty$9(CartesianAxis, 'defaultProps', {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    viewBox: {
        x: 0,
        y: 0,
        width: 0,
        height: 0
    },
    // The orientation of axis
    orientation: 'bottom',
    // The ticks
    ticks: [],
    stroke: '#666',
    tickLine: true,
    axisLine: true,
    tick: true,
    mirror: false,
    minTickGap: 5,
    // The width or height of tick
    tickSize: 6,
    tickMargin: 2,
    interval: 'preserveEnd'
})
var _excluded$a = ['x1', 'y1', 'x2', 'y2', 'key'],
    _excluded2$5 = ['offset']
function _typeof$8(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$8 =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$8(o)
    )
}
function ownKeys$5(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$4(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$5(Object(t), true).forEach(function (r3) {
                  _defineProperty$8(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$5(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$8(obj, key, value) {
    key = _toPropertyKey$7(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$7(t) {
    var i = _toPrimitive$7(t, 'string')
    return 'symbol' == _typeof$8(i) ? i : i + ''
}
function _toPrimitive$7(t, r2) {
    if ('object' != _typeof$8(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$8(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function _extends$5() {
    _extends$5 = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$5.apply(this, arguments)
}
function _objectWithoutProperties$4(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$3(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$3(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
var Background = function Background2(props) {
    var fill = props.fill
    if (!fill || fill === 'none') {
        return null
    }
    var fillOpacity = props.fillOpacity,
        x2 = props.x,
        y2 = props.y,
        width = props.width,
        height = props.height,
        ry = props.ry
    return /* @__PURE__ */ React.createElement('rect', {
        x: x2,
        y: y2,
        ry,
        width,
        height,
        stroke: 'none',
        fill,
        fillOpacity,
        className: 'recharts-cartesian-grid-bg'
    })
}
function renderLineItem(option, props) {
    var lineItem
    if (/* @__PURE__ */ React.isValidElement(option)) {
        lineItem = /* @__PURE__ */ React.cloneElement(option, props)
    } else if (isFunction(option)) {
        lineItem = option(props)
    } else {
        var x1 = props.x1,
            y1 = props.y1,
            x2 = props.x2,
            y2 = props.y2,
            key = props.key,
            others = _objectWithoutProperties$4(props, _excluded$a)
        var _filterProps = filterProps(others, false)
        _filterProps.offset
        var restOfFilteredProps = _objectWithoutProperties$4(_filterProps, _excluded2$5)
        lineItem = /* @__PURE__ */ React.createElement(
            'line',
            _extends$5({}, restOfFilteredProps, {
                x1,
                y1,
                x2,
                y2,
                fill: 'none',
                key
            })
        )
    }
    return lineItem
}
function HorizontalGridLines(props) {
    var x2 = props.x,
        width = props.width,
        _props$horizontal = props.horizontal,
        horizontal = _props$horizontal === void 0 ? true : _props$horizontal,
        horizontalPoints = props.horizontalPoints
    if (!horizontal || !horizontalPoints || !horizontalPoints.length) {
        return null
    }
    var items = horizontalPoints.map(function (entry, i) {
        var lineItemProps = _objectSpread$4(
            _objectSpread$4({}, props),
            {},
            {
                x1: x2,
                y1: entry,
                x2: x2 + width,
                y2: entry,
                key: 'line-'.concat(i),
                index: i
            }
        )
        return renderLineItem(horizontal, lineItemProps)
    })
    return /* @__PURE__ */ React.createElement(
        'g',
        {
            className: 'recharts-cartesian-grid-horizontal'
        },
        items
    )
}
function VerticalGridLines(props) {
    var y2 = props.y,
        height = props.height,
        _props$vertical = props.vertical,
        vertical = _props$vertical === void 0 ? true : _props$vertical,
        verticalPoints = props.verticalPoints
    if (!vertical || !verticalPoints || !verticalPoints.length) {
        return null
    }
    var items = verticalPoints.map(function (entry, i) {
        var lineItemProps = _objectSpread$4(
            _objectSpread$4({}, props),
            {},
            {
                x1: entry,
                y1: y2,
                x2: entry,
                y2: y2 + height,
                key: 'line-'.concat(i),
                index: i
            }
        )
        return renderLineItem(vertical, lineItemProps)
    })
    return /* @__PURE__ */ React.createElement(
        'g',
        {
            className: 'recharts-cartesian-grid-vertical'
        },
        items
    )
}
function HorizontalStripes(props) {
    var horizontalFill = props.horizontalFill,
        fillOpacity = props.fillOpacity,
        x2 = props.x,
        y2 = props.y,
        width = props.width,
        height = props.height,
        horizontalPoints = props.horizontalPoints,
        _props$horizontal2 = props.horizontal,
        horizontal = _props$horizontal2 === void 0 ? true : _props$horizontal2
    if (!horizontal || !horizontalFill || !horizontalFill.length) {
        return null
    }
    var roundedSortedHorizontalPoints = horizontalPoints
        .map(function (e) {
            return Math.round(e + y2 - y2)
        })
        .sort(function (a2, b) {
            return a2 - b
        })
    if (y2 !== roundedSortedHorizontalPoints[0]) {
        roundedSortedHorizontalPoints.unshift(0)
    }
    var items = roundedSortedHorizontalPoints.map(function (entry, i) {
        var lastStripe = !roundedSortedHorizontalPoints[i + 1]
        var lineHeight = lastStripe
            ? y2 + height - entry
            : roundedSortedHorizontalPoints[i + 1] - entry
        if (lineHeight <= 0) {
            return null
        }
        var colorIndex = i % horizontalFill.length
        return /* @__PURE__ */ React.createElement('rect', {
            key: 'react-'.concat(i),
            y: entry,
            x: x2,
            height: lineHeight,
            width,
            stroke: 'none',
            fill: horizontalFill[colorIndex],
            fillOpacity,
            className: 'recharts-cartesian-grid-bg'
        })
    })
    return /* @__PURE__ */ React.createElement(
        'g',
        {
            className: 'recharts-cartesian-gridstripes-horizontal'
        },
        items
    )
}
function VerticalStripes(props) {
    var _props$vertical2 = props.vertical,
        vertical = _props$vertical2 === void 0 ? true : _props$vertical2,
        verticalFill = props.verticalFill,
        fillOpacity = props.fillOpacity,
        x2 = props.x,
        y2 = props.y,
        width = props.width,
        height = props.height,
        verticalPoints = props.verticalPoints
    if (!vertical || !verticalFill || !verticalFill.length) {
        return null
    }
    var roundedSortedVerticalPoints = verticalPoints
        .map(function (e) {
            return Math.round(e + x2 - x2)
        })
        .sort(function (a2, b) {
            return a2 - b
        })
    if (x2 !== roundedSortedVerticalPoints[0]) {
        roundedSortedVerticalPoints.unshift(0)
    }
    var items = roundedSortedVerticalPoints.map(function (entry, i) {
        var lastStripe = !roundedSortedVerticalPoints[i + 1]
        var lineWidth = lastStripe ? x2 + width - entry : roundedSortedVerticalPoints[i + 1] - entry
        if (lineWidth <= 0) {
            return null
        }
        var colorIndex = i % verticalFill.length
        return /* @__PURE__ */ React.createElement('rect', {
            key: 'react-'.concat(i),
            x: entry,
            y: y2,
            width: lineWidth,
            height,
            stroke: 'none',
            fill: verticalFill[colorIndex],
            fillOpacity,
            className: 'recharts-cartesian-grid-bg'
        })
    })
    return /* @__PURE__ */ React.createElement(
        'g',
        {
            className: 'recharts-cartesian-gridstripes-vertical'
        },
        items
    )
}
var defaultVerticalCoordinatesGenerator = function defaultVerticalCoordinatesGenerator2(
    _ref3,
    syncWithTicks
) {
    var xAxis = _ref3.xAxis,
        width = _ref3.width,
        height = _ref3.height,
        offset = _ref3.offset
    return getCoordinatesOfGrid(
        getTicks(
            _objectSpread$4(
                _objectSpread$4(_objectSpread$4({}, CartesianAxis.defaultProps), xAxis),
                {},
                {
                    ticks: getTicksOfAxis(xAxis, true),
                    viewBox: {
                        x: 0,
                        y: 0,
                        width,
                        height
                    }
                }
            )
        ),
        offset.left,
        offset.left + offset.width,
        syncWithTicks
    )
}
var defaultHorizontalCoordinatesGenerator = function defaultHorizontalCoordinatesGenerator2(
    _ref22,
    syncWithTicks
) {
    var yAxis = _ref22.yAxis,
        width = _ref22.width,
        height = _ref22.height,
        offset = _ref22.offset
    return getCoordinatesOfGrid(
        getTicks(
            _objectSpread$4(
                _objectSpread$4(_objectSpread$4({}, CartesianAxis.defaultProps), yAxis),
                {},
                {
                    ticks: getTicksOfAxis(yAxis, true),
                    viewBox: {
                        x: 0,
                        y: 0,
                        width,
                        height
                    }
                }
            )
        ),
        offset.top,
        offset.top + offset.height,
        syncWithTicks
    )
}
var defaultProps$1 = {
    horizontal: true,
    vertical: true,
    stroke: '#ccc',
    fill: 'none',
    // The fill of colors of grid lines
    verticalFill: [],
    horizontalFill: []
}
function CartesianGrid(props) {
    var _props$stroke,
        _props$fill,
        _props$horizontal3,
        _props$horizontalFill,
        _props$vertical3,
        _props$verticalFill
    var chartWidth = useChartWidth()
    var chartHeight = useChartHeight()
    var offset = useOffset()
    var propsIncludingDefaults = _objectSpread$4(
        _objectSpread$4({}, props),
        {},
        {
            stroke:
                (_props$stroke = props.stroke) !== null && _props$stroke !== void 0
                    ? _props$stroke
                    : defaultProps$1.stroke,
            fill:
                (_props$fill = props.fill) !== null && _props$fill !== void 0
                    ? _props$fill
                    : defaultProps$1.fill,
            horizontal:
                (_props$horizontal3 = props.horizontal) !== null && _props$horizontal3 !== void 0
                    ? _props$horizontal3
                    : defaultProps$1.horizontal,
            horizontalFill:
                (_props$horizontalFill = props.horizontalFill) !== null &&
                _props$horizontalFill !== void 0
                    ? _props$horizontalFill
                    : defaultProps$1.horizontalFill,
            vertical:
                (_props$vertical3 = props.vertical) !== null && _props$vertical3 !== void 0
                    ? _props$vertical3
                    : defaultProps$1.vertical,
            verticalFill:
                (_props$verticalFill = props.verticalFill) !== null &&
                _props$verticalFill !== void 0
                    ? _props$verticalFill
                    : defaultProps$1.verticalFill,
            x: isNumber(props.x) ? props.x : offset.left,
            y: isNumber(props.y) ? props.y : offset.top,
            width: isNumber(props.width) ? props.width : offset.width,
            height: isNumber(props.height) ? props.height : offset.height
        }
    )
    var x2 = propsIncludingDefaults.x,
        y2 = propsIncludingDefaults.y,
        width = propsIncludingDefaults.width,
        height = propsIncludingDefaults.height,
        syncWithTicks = propsIncludingDefaults.syncWithTicks,
        horizontalValues = propsIncludingDefaults.horizontalValues,
        verticalValues = propsIncludingDefaults.verticalValues
    var xAxis = useArbitraryXAxis()
    var yAxis = useYAxisWithFiniteDomainOrRandom()
    if (
        !isNumber(width) ||
        width <= 0 ||
        !isNumber(height) ||
        height <= 0 ||
        !isNumber(x2) ||
        x2 !== +x2 ||
        !isNumber(y2) ||
        y2 !== +y2
    ) {
        return null
    }
    var verticalCoordinatesGenerator =
        propsIncludingDefaults.verticalCoordinatesGenerator || defaultVerticalCoordinatesGenerator
    var horizontalCoordinatesGenerator =
        propsIncludingDefaults.horizontalCoordinatesGenerator ||
        defaultHorizontalCoordinatesGenerator
    var horizontalPoints = propsIncludingDefaults.horizontalPoints,
        verticalPoints = propsIncludingDefaults.verticalPoints
    if (
        (!horizontalPoints || !horizontalPoints.length) &&
        isFunction(horizontalCoordinatesGenerator)
    ) {
        var isHorizontalValues = horizontalValues && horizontalValues.length
        var generatorResult = horizontalCoordinatesGenerator(
            {
                yAxis: yAxis
                    ? _objectSpread$4(
                          _objectSpread$4({}, yAxis),
                          {},
                          {
                              ticks: isHorizontalValues ? horizontalValues : yAxis.ticks
                          }
                      )
                    : void 0,
                width: chartWidth,
                height: chartHeight,
                offset
            },
            isHorizontalValues ? true : syncWithTicks
        )
        warn(
            Array.isArray(generatorResult),
            'horizontalCoordinatesGenerator should return Array but instead it returned ['.concat(
                _typeof$8(generatorResult),
                ']'
            )
        )
        if (Array.isArray(generatorResult)) {
            horizontalPoints = generatorResult
        }
    }
    if ((!verticalPoints || !verticalPoints.length) && isFunction(verticalCoordinatesGenerator)) {
        var isVerticalValues = verticalValues && verticalValues.length
        var _generatorResult = verticalCoordinatesGenerator(
            {
                xAxis: xAxis
                    ? _objectSpread$4(
                          _objectSpread$4({}, xAxis),
                          {},
                          {
                              ticks: isVerticalValues ? verticalValues : xAxis.ticks
                          }
                      )
                    : void 0,
                width: chartWidth,
                height: chartHeight,
                offset
            },
            isVerticalValues ? true : syncWithTicks
        )
        warn(
            Array.isArray(_generatorResult),
            'verticalCoordinatesGenerator should return Array but instead it returned ['.concat(
                _typeof$8(_generatorResult),
                ']'
            )
        )
        if (Array.isArray(_generatorResult)) {
            verticalPoints = _generatorResult
        }
    }
    return /* @__PURE__ */ React.createElement(
        'g',
        {
            className: 'recharts-cartesian-grid'
        },
        /* @__PURE__ */ React.createElement(Background, {
            fill: propsIncludingDefaults.fill,
            fillOpacity: propsIncludingDefaults.fillOpacity,
            x: propsIncludingDefaults.x,
            y: propsIncludingDefaults.y,
            width: propsIncludingDefaults.width,
            height: propsIncludingDefaults.height,
            ry: propsIncludingDefaults.ry
        }),
        /* @__PURE__ */ React.createElement(
            HorizontalGridLines,
            _extends$5({}, propsIncludingDefaults, {
                offset,
                horizontalPoints,
                xAxis,
                yAxis
            })
        ),
        /* @__PURE__ */ React.createElement(
            VerticalGridLines,
            _extends$5({}, propsIncludingDefaults, {
                offset,
                verticalPoints,
                xAxis,
                yAxis
            })
        ),
        /* @__PURE__ */ React.createElement(
            HorizontalStripes,
            _extends$5({}, propsIncludingDefaults, {
                horizontalPoints
            })
        ),
        /* @__PURE__ */ React.createElement(
            VerticalStripes,
            _extends$5({}, propsIncludingDefaults, {
                verticalPoints
            })
        )
    )
}
CartesianGrid.displayName = 'CartesianGrid'
var _excluded$9 = ['type', 'layout', 'connectNulls', 'ref'],
    _excluded2$4 = ['key']
function _typeof$7(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$7 =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$7(o)
    )
}
function _objectWithoutProperties$3(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$2(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$2(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _extends$4() {
    _extends$4 = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$4.apply(this, arguments)
}
function ownKeys$4(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$3(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$4(Object(t), true).forEach(function (r3) {
                  _defineProperty$7(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$4(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _toConsumableArray$3(arr) {
    return (
        _arrayWithoutHoles$3(arr) ||
        _iterableToArray$3(arr) ||
        _unsupportedIterableToArray$3(arr) ||
        _nonIterableSpread$3()
    )
}
function _nonIterableSpread$3() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$3(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$3(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$3(o, minLen)
}
function _iterableToArray$3(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$3(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$3(arr)
}
function _arrayLikeToArray$3(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function _classCallCheck$6(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$6(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$6(descriptor.key), descriptor)
    }
}
function _createClass$6(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$6(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$6(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$4(t, o, e) {
    return (
        (o = _getPrototypeOf$5(o)),
        _possibleConstructorReturn$5(
            t,
            _isNativeReflectConstruct$5()
                ? Reflect.construct(o, e || [], _getPrototypeOf$5(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$5(self2, call) {
    if (call && (_typeof$7(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$4(self2)
}
function _assertThisInitialized$4(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$5() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$5 = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$5(o) {
    _getPrototypeOf$5 = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$5(o)
}
function _inherits$5(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$4(subClass, superClass)
}
function _setPrototypeOf$4(o, p) {
    _setPrototypeOf$4 = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$4(o, p)
}
function _defineProperty$7(obj, key, value) {
    key = _toPropertyKey$6(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$6(t) {
    var i = _toPrimitive$6(t, 'string')
    return 'symbol' == _typeof$7(i) ? i : i + ''
}
function _toPrimitive$6(t, r2) {
    if ('object' != _typeof$7(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$7(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var Line = /* @__PURE__ */ (function (_PureComponent) {
    function Line2() {
        var _this
        _classCallCheck$6(this, Line2)
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key]
        }
        _this = _callSuper$4(this, Line2, [].concat(args))
        _defineProperty$7(_this, 'state', {
            isAnimationFinished: true,
            totalLength: 0
        })
        _defineProperty$7(_this, 'generateSimpleStrokeDasharray', function (totalLength, length2) {
            return ''.concat(length2, 'px ').concat(totalLength - length2, 'px')
        })
        _defineProperty$7(_this, 'getStrokeDasharray', function (length2, totalLength, lines) {
            var lineLength = lines.reduce(function (pre, next2) {
                return pre + next2
            })
            if (!lineLength) {
                return _this.generateSimpleStrokeDasharray(totalLength, length2)
            }
            var count2 = Math.floor(length2 / lineLength)
            var remainLength = length2 % lineLength
            var restLength = totalLength - length2
            var remainLines = []
            for (var i = 0, sum2 = 0; i < lines.length; sum2 += lines[i], ++i) {
                if (sum2 + lines[i] > remainLength) {
                    remainLines = [].concat(_toConsumableArray$3(lines.slice(0, i)), [
                        remainLength - sum2
                    ])
                    break
                }
            }
            var emptyLines = remainLines.length % 2 === 0 ? [0, restLength] : [restLength]
            return []
                .concat(
                    _toConsumableArray$3(Line2.repeat(lines, count2)),
                    _toConsumableArray$3(remainLines),
                    emptyLines
                )
                .map(function (line2) {
                    return ''.concat(line2, 'px')
                })
                .join(', ')
        })
        _defineProperty$7(_this, 'id', uniqueId('recharts-line-'))
        _defineProperty$7(_this, 'pathRef', function (node2) {
            _this.mainCurve = node2
        })
        _defineProperty$7(_this, 'handleAnimationEnd', function () {
            _this.setState({
                isAnimationFinished: true
            })
            if (_this.props.onAnimationEnd) {
                _this.props.onAnimationEnd()
            }
        })
        _defineProperty$7(_this, 'handleAnimationStart', function () {
            _this.setState({
                isAnimationFinished: false
            })
            if (_this.props.onAnimationStart) {
                _this.props.onAnimationStart()
            }
        })
        return _this
    }
    _inherits$5(Line2, _PureComponent)
    return _createClass$6(
        Line2,
        [
            {
                key: 'componentDidMount',
                value: function componentDidMount() {
                    if (!this.props.isAnimationActive) {
                        return
                    }
                    var totalLength = this.getTotalLength()
                    this.setState({
                        totalLength
                    })
                }
            },
            {
                key: 'componentDidUpdate',
                value: function componentDidUpdate() {
                    if (!this.props.isAnimationActive) {
                        return
                    }
                    var totalLength = this.getTotalLength()
                    if (totalLength !== this.state.totalLength) {
                        this.setState({
                            totalLength
                        })
                    }
                }
            },
            {
                key: 'getTotalLength',
                value: function getTotalLength() {
                    var curveDom = this.mainCurve
                    try {
                        return (
                            (curveDom && curveDom.getTotalLength && curveDom.getTotalLength()) || 0
                        )
                    } catch (err) {
                        return 0
                    }
                }
            },
            {
                key: 'renderErrorBar',
                value: function renderErrorBar(needClip, clipPathId) {
                    if (this.props.isAnimationActive && !this.state.isAnimationFinished) {
                        return null
                    }
                    var _this$props = this.props,
                        points = _this$props.points,
                        xAxis = _this$props.xAxis,
                        yAxis = _this$props.yAxis,
                        layout = _this$props.layout,
                        children = _this$props.children
                    var errorBarItems = findAllByType(children, ErrorBar)
                    if (!errorBarItems) {
                        return null
                    }
                    var dataPointFormatter = function dataPointFormatter2(dataPoint, dataKey) {
                        return {
                            x: dataPoint.x,
                            y: dataPoint.y,
                            value: dataPoint.value,
                            errorVal: getValueByDataKey(dataPoint.payload, dataKey)
                        }
                    }
                    var errorBarProps = {
                        clipPath: needClip ? 'url(#clipPath-'.concat(clipPathId, ')') : null
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        errorBarProps,
                        errorBarItems.map(function (item) {
                            return /* @__PURE__ */ React.cloneElement(item, {
                                key: 'bar-'.concat(item.props.dataKey),
                                data: points,
                                xAxis,
                                yAxis,
                                layout,
                                dataPointFormatter
                            })
                        })
                    )
                }
            },
            {
                key: 'renderDots',
                value: function renderDots(needClip, clipDot, clipPathId) {
                    var isAnimationActive = this.props.isAnimationActive
                    if (isAnimationActive && !this.state.isAnimationFinished) {
                        return null
                    }
                    var _this$props2 = this.props,
                        dot = _this$props2.dot,
                        points = _this$props2.points,
                        dataKey = _this$props2.dataKey
                    var lineProps = filterProps(this.props, false)
                    var customDotProps = filterProps(dot, true)
                    var dots = points.map(function (entry, i) {
                        var dotProps = _objectSpread$3(
                            _objectSpread$3(
                                _objectSpread$3(
                                    {
                                        key: 'dot-'.concat(i),
                                        r: 3
                                    },
                                    lineProps
                                ),
                                customDotProps
                            ),
                            {},
                            {
                                index: i,
                                cx: entry.x,
                                cy: entry.y,
                                value: entry.value,
                                dataKey,
                                payload: entry.payload,
                                points
                            }
                        )
                        return Line2.renderDotItem(dot, dotProps)
                    })
                    var dotsProps = {
                        clipPath: needClip
                            ? 'url(#clipPath-'
                                  .concat(clipDot ? '' : 'dots-')
                                  .concat(clipPathId, ')')
                            : null
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        _extends$4(
                            {
                                className: 'recharts-line-dots',
                                key: 'dots'
                            },
                            dotsProps
                        ),
                        dots
                    )
                }
            },
            {
                key: 'renderCurveStatically',
                value: function renderCurveStatically(points, needClip, clipPathId, props) {
                    var _this$props3 = this.props,
                        type = _this$props3.type,
                        layout = _this$props3.layout,
                        connectNulls = _this$props3.connectNulls
                    _this$props3.ref
                    var others = _objectWithoutProperties$3(_this$props3, _excluded$9)
                    var curveProps = _objectSpread$3(
                        _objectSpread$3(
                            _objectSpread$3({}, filterProps(others, true)),
                            {},
                            {
                                fill: 'none',
                                className: 'recharts-line-curve',
                                clipPath: needClip
                                    ? 'url(#clipPath-'.concat(clipPathId, ')')
                                    : null,
                                points
                            },
                            props
                        ),
                        {},
                        {
                            type,
                            layout,
                            connectNulls
                        }
                    )
                    return /* @__PURE__ */ React.createElement(
                        Curve,
                        _extends$4({}, curveProps, {
                            pathRef: this.pathRef
                        })
                    )
                }
            },
            {
                key: 'renderCurveWithAnimation',
                value: function renderCurveWithAnimation(needClip, clipPathId) {
                    var _this2 = this
                    var _this$props4 = this.props,
                        points = _this$props4.points,
                        strokeDasharray = _this$props4.strokeDasharray,
                        isAnimationActive = _this$props4.isAnimationActive,
                        animationBegin = _this$props4.animationBegin,
                        animationDuration = _this$props4.animationDuration,
                        animationEasing = _this$props4.animationEasing,
                        animationId = _this$props4.animationId,
                        animateNewValues = _this$props4.animateNewValues,
                        width = _this$props4.width,
                        height = _this$props4.height
                    var _this$state = this.state,
                        prevPoints = _this$state.prevPoints,
                        totalLength = _this$state.totalLength
                    return /* @__PURE__ */ React.createElement(
                        Animate,
                        {
                            begin: animationBegin,
                            duration: animationDuration,
                            isActive: isAnimationActive,
                            easing: animationEasing,
                            from: {
                                t: 0
                            },
                            to: {
                                t: 1
                            },
                            key: 'line-'.concat(animationId),
                            onAnimationEnd: this.handleAnimationEnd,
                            onAnimationStart: this.handleAnimationStart
                        },
                        function (_ref3) {
                            var t = _ref3.t
                            if (prevPoints) {
                                var prevPointsDiffFactor = prevPoints.length / points.length
                                var stepData = points.map(function (entry, index2) {
                                    var prevPointIndex = Math.floor(index2 * prevPointsDiffFactor)
                                    if (prevPoints[prevPointIndex]) {
                                        var prev2 = prevPoints[prevPointIndex]
                                        var interpolatorX = interpolateNumber$2(prev2.x, entry.x)
                                        var interpolatorY = interpolateNumber$2(prev2.y, entry.y)
                                        return _objectSpread$3(
                                            _objectSpread$3({}, entry),
                                            {},
                                            {
                                                x: interpolatorX(t),
                                                y: interpolatorY(t)
                                            }
                                        )
                                    }
                                    if (animateNewValues) {
                                        var _interpolatorX = interpolateNumber$2(width * 2, entry.x)
                                        var _interpolatorY = interpolateNumber$2(
                                            height / 2,
                                            entry.y
                                        )
                                        return _objectSpread$3(
                                            _objectSpread$3({}, entry),
                                            {},
                                            {
                                                x: _interpolatorX(t),
                                                y: _interpolatorY(t)
                                            }
                                        )
                                    }
                                    return _objectSpread$3(
                                        _objectSpread$3({}, entry),
                                        {},
                                        {
                                            x: entry.x,
                                            y: entry.y
                                        }
                                    )
                                })
                                return _this2.renderCurveStatically(stepData, needClip, clipPathId)
                            }
                            var interpolator = interpolateNumber$2(0, totalLength)
                            var curLength = interpolator(t)
                            var currentStrokeDasharray
                            if (strokeDasharray) {
                                var lines = ''
                                    .concat(strokeDasharray)
                                    .split(/[,\s]+/gim)
                                    .map(function (num) {
                                        return parseFloat(num)
                                    })
                                currentStrokeDasharray = _this2.getStrokeDasharray(
                                    curLength,
                                    totalLength,
                                    lines
                                )
                            } else {
                                currentStrokeDasharray = _this2.generateSimpleStrokeDasharray(
                                    totalLength,
                                    curLength
                                )
                            }
                            return _this2.renderCurveStatically(points, needClip, clipPathId, {
                                strokeDasharray: currentStrokeDasharray
                            })
                        }
                    )
                }
            },
            {
                key: 'renderCurve',
                value: function renderCurve(needClip, clipPathId) {
                    var _this$props5 = this.props,
                        points = _this$props5.points,
                        isAnimationActive = _this$props5.isAnimationActive
                    var _this$state2 = this.state,
                        prevPoints = _this$state2.prevPoints,
                        totalLength = _this$state2.totalLength
                    if (
                        isAnimationActive &&
                        points &&
                        points.length &&
                        ((!prevPoints && totalLength > 0) || !isEqual$1(prevPoints, points))
                    ) {
                        return this.renderCurveWithAnimation(needClip, clipPathId)
                    }
                    return this.renderCurveStatically(points, needClip, clipPathId)
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _filterProps
                    var _this$props6 = this.props,
                        hide = _this$props6.hide,
                        dot = _this$props6.dot,
                        points = _this$props6.points,
                        className = _this$props6.className,
                        xAxis = _this$props6.xAxis,
                        yAxis = _this$props6.yAxis,
                        top = _this$props6.top,
                        left = _this$props6.left,
                        width = _this$props6.width,
                        height = _this$props6.height,
                        isAnimationActive = _this$props6.isAnimationActive,
                        id = _this$props6.id
                    if (hide || !points || !points.length) {
                        return null
                    }
                    var isAnimationFinished = this.state.isAnimationFinished
                    var hasSinglePoint = points.length === 1
                    var layerClass = clsx('recharts-line', className)
                    var needClipX = xAxis && xAxis.allowDataOverflow
                    var needClipY = yAxis && yAxis.allowDataOverflow
                    var needClip = needClipX || needClipY
                    var clipPathId = isNil(id) ? this.id : id
                    var _ref22 =
                            (_filterProps = filterProps(dot, false)) !== null &&
                            _filterProps !== void 0
                                ? _filterProps
                                : {
                                      r: 3,
                                      strokeWidth: 2
                                  },
                        _ref2$r = _ref22.r,
                        r2 = _ref2$r === void 0 ? 3 : _ref2$r,
                        _ref2$strokeWidth = _ref22.strokeWidth,
                        strokeWidth = _ref2$strokeWidth === void 0 ? 2 : _ref2$strokeWidth
                    var _ref3 = hasClipDot(dot) ? dot : {},
                        _ref3$clipDot = _ref3.clipDot,
                        clipDot = _ref3$clipDot === void 0 ? true : _ref3$clipDot
                    var dotSize = r2 * 2 + strokeWidth
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: layerClass
                        },
                        needClipX || needClipY
                            ? /* @__PURE__ */ React.createElement(
                                  'defs',
                                  null,
                                  /* @__PURE__ */ React.createElement(
                                      'clipPath',
                                      {
                                          id: 'clipPath-'.concat(clipPathId)
                                      },
                                      /* @__PURE__ */ React.createElement('rect', {
                                          x: needClipX ? left : left - width / 2,
                                          y: needClipY ? top : top - height / 2,
                                          width: needClipX ? width : width * 2,
                                          height: needClipY ? height : height * 2
                                      })
                                  ),
                                  !clipDot &&
                                      /* @__PURE__ */ React.createElement(
                                          'clipPath',
                                          {
                                              id: 'clipPath-dots-'.concat(clipPathId)
                                          },
                                          /* @__PURE__ */ React.createElement('rect', {
                                              x: left - dotSize / 2,
                                              y: top - dotSize / 2,
                                              width: width + dotSize,
                                              height: height + dotSize
                                          })
                                      )
                              )
                            : null,
                        !hasSinglePoint && this.renderCurve(needClip, clipPathId),
                        this.renderErrorBar(needClip, clipPathId),
                        (hasSinglePoint || dot) && this.renderDots(needClip, clipDot, clipPathId),
                        (!isAnimationActive || isAnimationFinished) &&
                            LabelList.renderCallByParent(this.props, points)
                    )
                }
            }
        ],
        [
            {
                key: 'getDerivedStateFromProps',
                value: function getDerivedStateFromProps(nextProps, prevState) {
                    if (nextProps.animationId !== prevState.prevAnimationId) {
                        return {
                            prevAnimationId: nextProps.animationId,
                            curPoints: nextProps.points,
                            prevPoints: prevState.curPoints
                        }
                    }
                    if (nextProps.points !== prevState.curPoints) {
                        return {
                            curPoints: nextProps.points
                        }
                    }
                    return null
                }
            },
            {
                key: 'repeat',
                value: function repeat(lines, count2) {
                    var linesUnit =
                        lines.length % 2 !== 0 ? [].concat(_toConsumableArray$3(lines), [0]) : lines
                    var result = []
                    for (var i = 0; i < count2; ++i) {
                        result = [].concat(
                            _toConsumableArray$3(result),
                            _toConsumableArray$3(linesUnit)
                        )
                    }
                    return result
                }
            },
            {
                key: 'renderDotItem',
                value: function renderDotItem(option, props) {
                    var dotItem
                    if (/* @__PURE__ */ React.isValidElement(option)) {
                        dotItem = /* @__PURE__ */ React.cloneElement(option, props)
                    } else if (isFunction(option)) {
                        dotItem = option(props)
                    } else {
                        var key = props.key,
                            dotProps = _objectWithoutProperties$3(props, _excluded2$4)
                        var className = clsx(
                            'recharts-line-dot',
                            typeof option !== 'boolean' ? option.className : ''
                        )
                        dotItem = /* @__PURE__ */ React.createElement(
                            Dot,
                            _extends$4(
                                {
                                    key
                                },
                                dotProps,
                                {
                                    className
                                }
                            )
                        )
                    }
                    return dotItem
                }
            }
        ]
    )
})(reactExports.PureComponent)
_defineProperty$7(Line, 'displayName', 'Line')
_defineProperty$7(Line, 'defaultProps', {
    xAxisId: 0,
    yAxisId: 0,
    connectNulls: false,
    activeDot: true,
    dot: true,
    legendType: 'line',
    stroke: '#3182bd',
    strokeWidth: 1,
    fill: '#fff',
    points: [],
    isAnimationActive: !Global.isSsr,
    animateNewValues: true,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: 'ease',
    hide: false,
    label: false
})
_defineProperty$7(Line, 'getComposedData', function (_ref4) {
    var props = _ref4.props,
        xAxis = _ref4.xAxis,
        yAxis = _ref4.yAxis,
        xAxisTicks = _ref4.xAxisTicks,
        yAxisTicks = _ref4.yAxisTicks,
        dataKey = _ref4.dataKey,
        bandSize = _ref4.bandSize,
        displayedData = _ref4.displayedData,
        offset = _ref4.offset
    var layout = props.layout
    var points = displayedData.map(function (entry, index2) {
        var value = getValueByDataKey(entry, dataKey)
        if (layout === 'horizontal') {
            return {
                x: getCateCoordinateOfLine({
                    axis: xAxis,
                    ticks: xAxisTicks,
                    bandSize,
                    entry,
                    index: index2
                }),
                y: isNil(value) ? null : yAxis.scale(value),
                value,
                payload: entry
            }
        }
        return {
            x: isNil(value) ? null : xAxis.scale(value),
            y: getCateCoordinateOfLine({
                axis: yAxis,
                ticks: yAxisTicks,
                bandSize,
                entry,
                index: index2
            }),
            value,
            payload: entry
        }
    })
    return _objectSpread$3(
        {
            points,
            layout
        },
        offset
    )
})
var _excluded$8 = ['layout', 'type', 'stroke', 'connectNulls', 'isRange', 'ref'],
    _excluded2$3 = ['key']
var _Area
function _typeof$6(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$6 =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$6(o)
    )
}
function _objectWithoutProperties$2(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose$1(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _extends$3() {
    _extends$3 = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$3.apply(this, arguments)
}
function ownKeys$3(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$2(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$3(Object(t), true).forEach(function (r3) {
                  _defineProperty$6(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$3(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _classCallCheck$5(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$5(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$5(descriptor.key), descriptor)
    }
}
function _createClass$5(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$5(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties$5(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$3(t, o, e) {
    return (
        (o = _getPrototypeOf$4(o)),
        _possibleConstructorReturn$4(
            t,
            _isNativeReflectConstruct$4()
                ? Reflect.construct(o, e || [], _getPrototypeOf$4(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$4(self2, call) {
    if (call && (_typeof$6(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$3(self2)
}
function _assertThisInitialized$3(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$4() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$4 = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$4(o) {
    _getPrototypeOf$4 = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$4(o)
}
function _inherits$4(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$3(subClass, superClass)
}
function _setPrototypeOf$3(o, p) {
    _setPrototypeOf$3 = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$3(o, p)
}
function _defineProperty$6(obj, key, value) {
    key = _toPropertyKey$5(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$5(t) {
    var i = _toPrimitive$5(t, 'string')
    return 'symbol' == _typeof$6(i) ? i : i + ''
}
function _toPrimitive$5(t, r2) {
    if ('object' != _typeof$6(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$6(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var Area = /* @__PURE__ */ (function (_PureComponent) {
    function Area2() {
        var _this
        _classCallCheck$5(this, Area2)
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key]
        }
        _this = _callSuper$3(this, Area2, [].concat(args))
        _defineProperty$6(_this, 'state', {
            isAnimationFinished: true
        })
        _defineProperty$6(_this, 'id', uniqueId('recharts-area-'))
        _defineProperty$6(_this, 'handleAnimationEnd', function () {
            var onAnimationEnd2 = _this.props.onAnimationEnd
            _this.setState({
                isAnimationFinished: true
            })
            if (isFunction(onAnimationEnd2)) {
                onAnimationEnd2()
            }
        })
        _defineProperty$6(_this, 'handleAnimationStart', function () {
            var onAnimationStart2 = _this.props.onAnimationStart
            _this.setState({
                isAnimationFinished: false
            })
            if (isFunction(onAnimationStart2)) {
                onAnimationStart2()
            }
        })
        return _this
    }
    _inherits$4(Area2, _PureComponent)
    return _createClass$5(
        Area2,
        [
            {
                key: 'renderDots',
                value: function renderDots(needClip, clipDot, clipPathId) {
                    var isAnimationActive = this.props.isAnimationActive
                    var isAnimationFinished = this.state.isAnimationFinished
                    if (isAnimationActive && !isAnimationFinished) {
                        return null
                    }
                    var _this$props = this.props,
                        dot = _this$props.dot,
                        points = _this$props.points,
                        dataKey = _this$props.dataKey
                    var areaProps = filterProps(this.props, false)
                    var customDotProps = filterProps(dot, true)
                    var dots = points.map(function (entry, i) {
                        var dotProps = _objectSpread$2(
                            _objectSpread$2(
                                _objectSpread$2(
                                    {
                                        key: 'dot-'.concat(i),
                                        r: 3
                                    },
                                    areaProps
                                ),
                                customDotProps
                            ),
                            {},
                            {
                                index: i,
                                cx: entry.x,
                                cy: entry.y,
                                dataKey,
                                value: entry.value,
                                payload: entry.payload,
                                points
                            }
                        )
                        return Area2.renderDotItem(dot, dotProps)
                    })
                    var dotsProps = {
                        clipPath: needClip
                            ? 'url(#clipPath-'
                                  .concat(clipDot ? '' : 'dots-')
                                  .concat(clipPathId, ')')
                            : null
                    }
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        _extends$3(
                            {
                                className: 'recharts-area-dots'
                            },
                            dotsProps
                        ),
                        dots
                    )
                }
            },
            {
                key: 'renderHorizontalRect',
                value: function renderHorizontalRect(alpha3) {
                    var _this$props2 = this.props,
                        baseLine = _this$props2.baseLine,
                        points = _this$props2.points,
                        strokeWidth = _this$props2.strokeWidth
                    var startX = points[0].x
                    var endX = points[points.length - 1].x
                    var width = alpha3 * Math.abs(startX - endX)
                    var maxY = max$1(
                        points.map(function (entry) {
                            return entry.y || 0
                        })
                    )
                    if (isNumber(baseLine) && typeof baseLine === 'number') {
                        maxY = Math.max(baseLine, maxY)
                    } else if (baseLine && Array.isArray(baseLine) && baseLine.length) {
                        maxY = Math.max(
                            max$1(
                                baseLine.map(function (entry) {
                                    return entry.y || 0
                                })
                            ),
                            maxY
                        )
                    }
                    if (isNumber(maxY)) {
                        return /* @__PURE__ */ React.createElement('rect', {
                            x: startX < endX ? startX : startX - width,
                            y: 0,
                            width,
                            height: Math.floor(
                                maxY + (strokeWidth ? parseInt(''.concat(strokeWidth), 10) : 1)
                            )
                        })
                    }
                    return null
                }
            },
            {
                key: 'renderVerticalRect',
                value: function renderVerticalRect(alpha3) {
                    var _this$props3 = this.props,
                        baseLine = _this$props3.baseLine,
                        points = _this$props3.points,
                        strokeWidth = _this$props3.strokeWidth
                    var startY = points[0].y
                    var endY = points[points.length - 1].y
                    var height = alpha3 * Math.abs(startY - endY)
                    var maxX = max$1(
                        points.map(function (entry) {
                            return entry.x || 0
                        })
                    )
                    if (isNumber(baseLine) && typeof baseLine === 'number') {
                        maxX = Math.max(baseLine, maxX)
                    } else if (baseLine && Array.isArray(baseLine) && baseLine.length) {
                        maxX = Math.max(
                            max$1(
                                baseLine.map(function (entry) {
                                    return entry.x || 0
                                })
                            ),
                            maxX
                        )
                    }
                    if (isNumber(maxX)) {
                        return /* @__PURE__ */ React.createElement('rect', {
                            x: 0,
                            y: startY < endY ? startY : startY - height,
                            width: maxX + (strokeWidth ? parseInt(''.concat(strokeWidth), 10) : 1),
                            height: Math.floor(height)
                        })
                    }
                    return null
                }
            },
            {
                key: 'renderClipRect',
                value: function renderClipRect(alpha3) {
                    var layout = this.props.layout
                    if (layout === 'vertical') {
                        return this.renderVerticalRect(alpha3)
                    }
                    return this.renderHorizontalRect(alpha3)
                }
            },
            {
                key: 'renderAreaStatically',
                value: function renderAreaStatically(points, baseLine, needClip, clipPathId) {
                    var _this$props4 = this.props,
                        layout = _this$props4.layout,
                        type = _this$props4.type,
                        stroke = _this$props4.stroke,
                        connectNulls = _this$props4.connectNulls,
                        isRange = _this$props4.isRange
                    _this$props4.ref
                    var others = _objectWithoutProperties$2(_this$props4, _excluded$8)
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            clipPath: needClip ? 'url(#clipPath-'.concat(clipPathId, ')') : null
                        },
                        /* @__PURE__ */ React.createElement(
                            Curve,
                            _extends$3({}, filterProps(others, true), {
                                points,
                                connectNulls,
                                type,
                                baseLine,
                                layout,
                                stroke: 'none',
                                className: 'recharts-area-area'
                            })
                        ),
                        stroke !== 'none' &&
                            /* @__PURE__ */ React.createElement(
                                Curve,
                                _extends$3({}, filterProps(this.props, false), {
                                    className: 'recharts-area-curve',
                                    layout,
                                    type,
                                    connectNulls,
                                    fill: 'none',
                                    points
                                })
                            ),
                        stroke !== 'none' &&
                            isRange &&
                            /* @__PURE__ */ React.createElement(
                                Curve,
                                _extends$3({}, filterProps(this.props, false), {
                                    className: 'recharts-area-curve',
                                    layout,
                                    type,
                                    connectNulls,
                                    fill: 'none',
                                    points: baseLine
                                })
                            )
                    )
                }
            },
            {
                key: 'renderAreaWithAnimation',
                value: function renderAreaWithAnimation(needClip, clipPathId) {
                    var _this2 = this
                    var _this$props5 = this.props,
                        points = _this$props5.points,
                        baseLine = _this$props5.baseLine,
                        isAnimationActive = _this$props5.isAnimationActive,
                        animationBegin = _this$props5.animationBegin,
                        animationDuration = _this$props5.animationDuration,
                        animationEasing = _this$props5.animationEasing,
                        animationId = _this$props5.animationId
                    var _this$state = this.state,
                        prevPoints = _this$state.prevPoints,
                        prevBaseLine = _this$state.prevBaseLine
                    return /* @__PURE__ */ React.createElement(
                        Animate,
                        {
                            begin: animationBegin,
                            duration: animationDuration,
                            isActive: isAnimationActive,
                            easing: animationEasing,
                            from: {
                                t: 0
                            },
                            to: {
                                t: 1
                            },
                            key: 'area-'.concat(animationId),
                            onAnimationEnd: this.handleAnimationEnd,
                            onAnimationStart: this.handleAnimationStart
                        },
                        function (_ref3) {
                            var t = _ref3.t
                            if (prevPoints) {
                                var prevPointsDiffFactor = prevPoints.length / points.length
                                var stepPoints = points.map(function (entry, index2) {
                                    var prevPointIndex = Math.floor(index2 * prevPointsDiffFactor)
                                    if (prevPoints[prevPointIndex]) {
                                        var prev2 = prevPoints[prevPointIndex]
                                        var interpolatorX = interpolateNumber$2(prev2.x, entry.x)
                                        var interpolatorY = interpolateNumber$2(prev2.y, entry.y)
                                        return _objectSpread$2(
                                            _objectSpread$2({}, entry),
                                            {},
                                            {
                                                x: interpolatorX(t),
                                                y: interpolatorY(t)
                                            }
                                        )
                                    }
                                    return entry
                                })
                                var stepBaseLine
                                if (isNumber(baseLine) && typeof baseLine === 'number') {
                                    var interpolator = interpolateNumber$2(prevBaseLine, baseLine)
                                    stepBaseLine = interpolator(t)
                                } else if (isNil(baseLine) || isNan(baseLine)) {
                                    var _interpolator = interpolateNumber$2(prevBaseLine, 0)
                                    stepBaseLine = _interpolator(t)
                                } else {
                                    stepBaseLine = baseLine.map(function (entry, index2) {
                                        var prevPointIndex = Math.floor(
                                            index2 * prevPointsDiffFactor
                                        )
                                        if (prevBaseLine[prevPointIndex]) {
                                            var prev2 = prevBaseLine[prevPointIndex]
                                            var interpolatorX = interpolateNumber$2(
                                                prev2.x,
                                                entry.x
                                            )
                                            var interpolatorY = interpolateNumber$2(
                                                prev2.y,
                                                entry.y
                                            )
                                            return _objectSpread$2(
                                                _objectSpread$2({}, entry),
                                                {},
                                                {
                                                    x: interpolatorX(t),
                                                    y: interpolatorY(t)
                                                }
                                            )
                                        }
                                        return entry
                                    })
                                }
                                return _this2.renderAreaStatically(
                                    stepPoints,
                                    stepBaseLine,
                                    needClip,
                                    clipPathId
                                )
                            }
                            return /* @__PURE__ */ React.createElement(
                                Layer,
                                null,
                                /* @__PURE__ */ React.createElement(
                                    'defs',
                                    null,
                                    /* @__PURE__ */ React.createElement(
                                        'clipPath',
                                        {
                                            id: 'animationClipPath-'.concat(clipPathId)
                                        },
                                        _this2.renderClipRect(t)
                                    )
                                ),
                                /* @__PURE__ */ React.createElement(
                                    Layer,
                                    {
                                        clipPath: 'url(#animationClipPath-'.concat(clipPathId, ')')
                                    },
                                    _this2.renderAreaStatically(
                                        points,
                                        baseLine,
                                        needClip,
                                        clipPathId
                                    )
                                )
                            )
                        }
                    )
                }
            },
            {
                key: 'renderArea',
                value: function renderArea(needClip, clipPathId) {
                    var _this$props6 = this.props,
                        points = _this$props6.points,
                        baseLine = _this$props6.baseLine,
                        isAnimationActive = _this$props6.isAnimationActive
                    var _this$state2 = this.state,
                        prevPoints = _this$state2.prevPoints,
                        prevBaseLine = _this$state2.prevBaseLine,
                        totalLength = _this$state2.totalLength
                    if (
                        isAnimationActive &&
                        points &&
                        points.length &&
                        ((!prevPoints && totalLength > 0) ||
                            !isEqual$1(prevPoints, points) ||
                            !isEqual$1(prevBaseLine, baseLine))
                    ) {
                        return this.renderAreaWithAnimation(needClip, clipPathId)
                    }
                    return this.renderAreaStatically(points, baseLine, needClip, clipPathId)
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _filterProps
                    var _this$props7 = this.props,
                        hide = _this$props7.hide,
                        dot = _this$props7.dot,
                        points = _this$props7.points,
                        className = _this$props7.className,
                        top = _this$props7.top,
                        left = _this$props7.left,
                        xAxis = _this$props7.xAxis,
                        yAxis = _this$props7.yAxis,
                        width = _this$props7.width,
                        height = _this$props7.height,
                        isAnimationActive = _this$props7.isAnimationActive,
                        id = _this$props7.id
                    if (hide || !points || !points.length) {
                        return null
                    }
                    var isAnimationFinished = this.state.isAnimationFinished
                    var hasSinglePoint = points.length === 1
                    var layerClass = clsx('recharts-area', className)
                    var needClipX = xAxis && xAxis.allowDataOverflow
                    var needClipY = yAxis && yAxis.allowDataOverflow
                    var needClip = needClipX || needClipY
                    var clipPathId = isNil(id) ? this.id : id
                    var _ref22 =
                            (_filterProps = filterProps(dot, false)) !== null &&
                            _filterProps !== void 0
                                ? _filterProps
                                : {
                                      r: 3,
                                      strokeWidth: 2
                                  },
                        _ref2$r = _ref22.r,
                        r2 = _ref2$r === void 0 ? 3 : _ref2$r,
                        _ref2$strokeWidth = _ref22.strokeWidth,
                        strokeWidth = _ref2$strokeWidth === void 0 ? 2 : _ref2$strokeWidth
                    var _ref3 = hasClipDot(dot) ? dot : {},
                        _ref3$clipDot = _ref3.clipDot,
                        clipDot = _ref3$clipDot === void 0 ? true : _ref3$clipDot
                    var dotSize = r2 * 2 + strokeWidth
                    return /* @__PURE__ */ React.createElement(
                        Layer,
                        {
                            className: layerClass
                        },
                        needClipX || needClipY
                            ? /* @__PURE__ */ React.createElement(
                                  'defs',
                                  null,
                                  /* @__PURE__ */ React.createElement(
                                      'clipPath',
                                      {
                                          id: 'clipPath-'.concat(clipPathId)
                                      },
                                      /* @__PURE__ */ React.createElement('rect', {
                                          x: needClipX ? left : left - width / 2,
                                          y: needClipY ? top : top - height / 2,
                                          width: needClipX ? width : width * 2,
                                          height: needClipY ? height : height * 2
                                      })
                                  ),
                                  !clipDot &&
                                      /* @__PURE__ */ React.createElement(
                                          'clipPath',
                                          {
                                              id: 'clipPath-dots-'.concat(clipPathId)
                                          },
                                          /* @__PURE__ */ React.createElement('rect', {
                                              x: left - dotSize / 2,
                                              y: top - dotSize / 2,
                                              width: width + dotSize,
                                              height: height + dotSize
                                          })
                                      )
                              )
                            : null,
                        !hasSinglePoint ? this.renderArea(needClip, clipPathId) : null,
                        (dot || hasSinglePoint) && this.renderDots(needClip, clipDot, clipPathId),
                        (!isAnimationActive || isAnimationFinished) &&
                            LabelList.renderCallByParent(this.props, points)
                    )
                }
            }
        ],
        [
            {
                key: 'getDerivedStateFromProps',
                value: function getDerivedStateFromProps(nextProps, prevState) {
                    if (nextProps.animationId !== prevState.prevAnimationId) {
                        return {
                            prevAnimationId: nextProps.animationId,
                            curPoints: nextProps.points,
                            curBaseLine: nextProps.baseLine,
                            prevPoints: prevState.curPoints,
                            prevBaseLine: prevState.curBaseLine
                        }
                    }
                    if (
                        nextProps.points !== prevState.curPoints ||
                        nextProps.baseLine !== prevState.curBaseLine
                    ) {
                        return {
                            curPoints: nextProps.points,
                            curBaseLine: nextProps.baseLine
                        }
                    }
                    return null
                }
            }
        ]
    )
})(reactExports.PureComponent)
_Area = Area
_defineProperty$6(Area, 'displayName', 'Area')
_defineProperty$6(Area, 'defaultProps', {
    stroke: '#3182bd',
    fill: '#3182bd',
    fillOpacity: 0.6,
    xAxisId: 0,
    yAxisId: 0,
    legendType: 'line',
    connectNulls: false,
    // points of area
    points: [],
    dot: false,
    activeDot: true,
    hide: false,
    isAnimationActive: !Global.isSsr,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: 'ease'
})
_defineProperty$6(Area, 'getBaseValue', function (props, item, xAxis, yAxis) {
    var layout = props.layout,
        chartBaseValue = props.baseValue
    var itemBaseValue = item.props.baseValue
    var baseValue =
        itemBaseValue !== null && itemBaseValue !== void 0 ? itemBaseValue : chartBaseValue
    if (isNumber(baseValue) && typeof baseValue === 'number') {
        return baseValue
    }
    var numericAxis = layout === 'horizontal' ? yAxis : xAxis
    var domain = numericAxis.scale.domain()
    if (numericAxis.type === 'number') {
        var domainMax = Math.max(domain[0], domain[1])
        var domainMin = Math.min(domain[0], domain[1])
        if (baseValue === 'dataMin') {
            return domainMin
        }
        if (baseValue === 'dataMax') {
            return domainMax
        }
        return domainMax < 0 ? domainMax : Math.max(Math.min(domain[0], domain[1]), 0)
    }
    if (baseValue === 'dataMin') {
        return domain[0]
    }
    if (baseValue === 'dataMax') {
        return domain[1]
    }
    return domain[0]
})
_defineProperty$6(Area, 'getComposedData', function (_ref4) {
    var props = _ref4.props,
        item = _ref4.item,
        xAxis = _ref4.xAxis,
        yAxis = _ref4.yAxis,
        xAxisTicks = _ref4.xAxisTicks,
        yAxisTicks = _ref4.yAxisTicks,
        bandSize = _ref4.bandSize,
        dataKey = _ref4.dataKey,
        stackedData = _ref4.stackedData,
        dataStartIndex = _ref4.dataStartIndex,
        displayedData = _ref4.displayedData,
        offset = _ref4.offset
    var layout = props.layout
    var hasStack = stackedData && stackedData.length
    var baseValue = _Area.getBaseValue(props, item, xAxis, yAxis)
    var isHorizontalLayout = layout === 'horizontal'
    var isRange = false
    var points = displayedData.map(function (entry, index2) {
        var value
        if (hasStack) {
            value = stackedData[dataStartIndex + index2]
        } else {
            value = getValueByDataKey(entry, dataKey)
            if (!Array.isArray(value)) {
                value = [baseValue, value]
            } else {
                isRange = true
            }
        }
        var isBreakPoint =
            value[1] == null || (hasStack && getValueByDataKey(entry, dataKey) == null)
        if (isHorizontalLayout) {
            return {
                x: getCateCoordinateOfLine({
                    axis: xAxis,
                    ticks: xAxisTicks,
                    bandSize,
                    entry,
                    index: index2
                }),
                y: isBreakPoint ? null : yAxis.scale(value[1]),
                value,
                payload: entry
            }
        }
        return {
            x: isBreakPoint ? null : xAxis.scale(value[1]),
            y: getCateCoordinateOfLine({
                axis: yAxis,
                ticks: yAxisTicks,
                bandSize,
                entry,
                index: index2
            }),
            value,
            payload: entry
        }
    })
    var baseLine
    if (hasStack || isRange) {
        baseLine = points.map(function (entry) {
            var x2 = Array.isArray(entry.value) ? entry.value[0] : null
            if (isHorizontalLayout) {
                return {
                    x: entry.x,
                    y: x2 != null && entry.y != null ? yAxis.scale(x2) : null
                }
            }
            return {
                x: x2 != null ? xAxis.scale(x2) : null,
                y: entry.y
            }
        })
    } else {
        baseLine = isHorizontalLayout ? yAxis.scale(baseValue) : xAxis.scale(baseValue)
    }
    return _objectSpread$2(
        {
            points,
            baseLine,
            layout,
            isRange
        },
        offset
    )
})
_defineProperty$6(Area, 'renderDotItem', function (option, props) {
    var dotItem
    if (/* @__PURE__ */ React.isValidElement(option)) {
        dotItem = /* @__PURE__ */ React.cloneElement(option, props)
    } else if (isFunction(option)) {
        dotItem = option(props)
    } else {
        var className = clsx(
            'recharts-area-dot',
            typeof option !== 'boolean' ? option.className : ''
        )
        var key = props.key,
            rest = _objectWithoutProperties$2(props, _excluded2$3)
        dotItem = /* @__PURE__ */ React.createElement(
            Dot,
            _extends$3({}, rest, {
                key,
                className
            })
        )
    }
    return dotItem
})
function _typeof$5(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$5 =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$5(o)
    )
}
function _classCallCheck$4(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$4(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$4(descriptor.key), descriptor)
    }
}
function _createClass$4(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$4(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$2(t, o, e) {
    return (
        (o = _getPrototypeOf$3(o)),
        _possibleConstructorReturn$3(
            t,
            _isNativeReflectConstruct$3()
                ? Reflect.construct(o, e || [], _getPrototypeOf$3(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$3(self2, call) {
    if (call && (_typeof$5(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$2(self2)
}
function _assertThisInitialized$2(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$3() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$3(o) {
    _getPrototypeOf$3 = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$3(o)
}
function _inherits$3(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$2(subClass, superClass)
}
function _setPrototypeOf$2(o, p) {
    _setPrototypeOf$2 = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$2(o, p)
}
function _defineProperty$5(obj, key, value) {
    key = _toPropertyKey$4(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$4(t) {
    var i = _toPrimitive$4(t, 'string')
    return 'symbol' == _typeof$5(i) ? i : i + ''
}
function _toPrimitive$4(t, r2) {
    if ('object' != _typeof$5(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$5(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
function _extends$2() {
    _extends$2 = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$2.apply(this, arguments)
}
function XAxisImpl(_ref3) {
    var xAxisId = _ref3.xAxisId
    var width = useChartWidth()
    var height = useChartHeight()
    var axisOptions = useXAxisOrThrow(xAxisId)
    if (axisOptions == null) {
        return null
    }
    return (
        // @ts-expect-error the axisOptions type is not exactly what CartesianAxis is expecting.
        /* @__PURE__ */ React.createElement(
            CartesianAxis,
            _extends$2({}, axisOptions, {
                className: clsx(
                    'recharts-'.concat(axisOptions.axisType, ' ').concat(axisOptions.axisType),
                    axisOptions.className
                ),
                viewBox: {
                    x: 0,
                    y: 0,
                    width,
                    height
                },
                ticksGenerator: function ticksGenerator(axis) {
                    return getTicksOfAxis(axis, true)
                }
            })
        )
    )
}
var XAxis = /* @__PURE__ */ (function (_React$Component) {
    function XAxis2() {
        _classCallCheck$4(this, XAxis2)
        return _callSuper$2(this, XAxis2, arguments)
    }
    _inherits$3(XAxis2, _React$Component)
    return _createClass$4(XAxis2, [
        {
            key: 'render',
            value: function render() {
                return /* @__PURE__ */ React.createElement(XAxisImpl, this.props)
            }
        }
    ])
})(React.Component)
_defineProperty$5(XAxis, 'displayName', 'XAxis')
_defineProperty$5(XAxis, 'defaultProps', {
    allowDecimals: true,
    hide: false,
    orientation: 'bottom',
    width: 0,
    height: 30,
    mirror: false,
    xAxisId: 0,
    tickCount: 5,
    type: 'category',
    padding: {
        left: 0,
        right: 0
    },
    allowDataOverflow: false,
    scale: 'auto',
    reversed: false,
    allowDuplicatedCategory: true
})
function _typeof$4(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$4 =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$4(o)
    )
}
function _classCallCheck$3(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$3(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$3(descriptor.key), descriptor)
    }
}
function _createClass$3(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$3(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper$1(t, o, e) {
    return (
        (o = _getPrototypeOf$2(o)),
        _possibleConstructorReturn$2(
            t,
            _isNativeReflectConstruct$2()
                ? Reflect.construct(o, e || [], _getPrototypeOf$2(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$2(self2, call) {
    if (call && (_typeof$4(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized$1(self2)
}
function _assertThisInitialized$1(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$2() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$2(o) {
    _getPrototypeOf$2 = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$2(o)
}
function _inherits$2(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf$1(subClass, superClass)
}
function _setPrototypeOf$1(o, p) {
    _setPrototypeOf$1 = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf$1(o, p)
}
function _defineProperty$4(obj, key, value) {
    key = _toPropertyKey$3(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$3(t) {
    var i = _toPrimitive$3(t, 'string')
    return 'symbol' == _typeof$4(i) ? i : i + ''
}
function _toPrimitive$3(t, r2) {
    if ('object' != _typeof$4(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$4(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
function _extends$1() {
    _extends$1 = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends$1.apply(this, arguments)
}
var YAxisImpl = function YAxisImpl2(_ref3) {
    var yAxisId = _ref3.yAxisId
    var width = useChartWidth()
    var height = useChartHeight()
    var axisOptions = useYAxisOrThrow(yAxisId)
    if (axisOptions == null) {
        return null
    }
    return (
        // @ts-expect-error the axisOptions type is not exactly what CartesianAxis is expecting.
        /* @__PURE__ */ React.createElement(
            CartesianAxis,
            _extends$1({}, axisOptions, {
                className: clsx(
                    'recharts-'.concat(axisOptions.axisType, ' ').concat(axisOptions.axisType),
                    axisOptions.className
                ),
                viewBox: {
                    x: 0,
                    y: 0,
                    width,
                    height
                },
                ticksGenerator: function ticksGenerator(axis) {
                    return getTicksOfAxis(axis, true)
                }
            })
        )
    )
}
var YAxis = /* @__PURE__ */ (function (_React$Component) {
    function YAxis2() {
        _classCallCheck$3(this, YAxis2)
        return _callSuper$1(this, YAxis2, arguments)
    }
    _inherits$2(YAxis2, _React$Component)
    return _createClass$3(YAxis2, [
        {
            key: 'render',
            value: function render() {
                return /* @__PURE__ */ React.createElement(YAxisImpl, this.props)
            }
        }
    ])
})(React.Component)
_defineProperty$4(YAxis, 'displayName', 'YAxis')
_defineProperty$4(YAxis, 'defaultProps', {
    allowDuplicatedCategory: true,
    allowDecimals: true,
    hide: false,
    orientation: 'left',
    width: 60,
    height: 0,
    mirror: false,
    yAxisId: 0,
    tickCount: 5,
    type: 'number',
    padding: {
        top: 0,
        bottom: 0
    },
    allowDataOverflow: false,
    scale: 'auto',
    reversed: false
})
function _toConsumableArray$2(arr) {
    return (
        _arrayWithoutHoles$2(arr) ||
        _iterableToArray$2(arr) ||
        _unsupportedIterableToArray$2(arr) ||
        _nonIterableSpread$2()
    )
}
function _nonIterableSpread$2() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$2(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$2(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$2(o, minLen)
}
function _iterableToArray$2(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$2(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$2(arr)
}
function _arrayLikeToArray$2(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
var detectReferenceElementsDomain = function detectReferenceElementsDomain2(
    children,
    domain,
    axisId,
    axisType,
    specifiedTicks
) {
    var lines = findAllByType(children, ReferenceLine)
    var dots = findAllByType(children, ReferenceDot)
    var elements = [].concat(_toConsumableArray$2(lines), _toConsumableArray$2(dots))
    var areas = findAllByType(children, ReferenceArea)
    var idKey = ''.concat(axisType, 'Id')
    var valueKey = axisType[0]
    var finalDomain = domain
    if (elements.length) {
        finalDomain = elements.reduce(function (result, el) {
            if (
                el.props[idKey] === axisId &&
                ifOverflowMatches(el.props, 'extendDomain') &&
                isNumber(el.props[valueKey])
            ) {
                var value = el.props[valueKey]
                return [Math.min(result[0], value), Math.max(result[1], value)]
            }
            return result
        }, finalDomain)
    }
    if (areas.length) {
        var key1 = ''.concat(valueKey, '1')
        var key2 = ''.concat(valueKey, '2')
        finalDomain = areas.reduce(function (result, el) {
            if (
                el.props[idKey] === axisId &&
                ifOverflowMatches(el.props, 'extendDomain') &&
                isNumber(el.props[key1]) &&
                isNumber(el.props[key2])
            ) {
                var value1 = el.props[key1]
                var value2 = el.props[key2]
                return [Math.min(result[0], value1, value2), Math.max(result[1], value1, value2)]
            }
            return result
        }, finalDomain)
    }
    if (specifiedTicks && specifiedTicks.length) {
        finalDomain = specifiedTicks.reduce(function (result, tick) {
            if (isNumber(tick)) {
                return [Math.min(result[0], tick), Math.max(result[1], tick)]
            }
            return result
        }, finalDomain)
    }
    return finalDomain
}
var eventemitter3 = { exports: {} }
var hasRequiredEventemitter3
function requireEventemitter3() {
    if (hasRequiredEventemitter3) return eventemitter3.exports
    hasRequiredEventemitter3 = 1
    ;(function (module) {
        var has = Object.prototype.hasOwnProperty,
            prefix2 = '~'
        function Events() {}
        if (Object.create) {
            Events.prototype = /* @__PURE__ */ Object.create(null)
            if (!new Events().__proto__) prefix2 = false
        }
        function EE(fn, context, once) {
            this.fn = fn
            this.context = context
            this.once = once || false
        }
        function addListener(emitter, event, fn, context, once) {
            if (typeof fn !== 'function') {
                throw new TypeError('The listener must be a function')
            }
            var listener = new EE(fn, context || emitter, once),
                evt = prefix2 ? prefix2 + event : event
            if (!emitter._events[evt]) (emitter._events[evt] = listener), emitter._eventsCount++
            else if (!emitter._events[evt].fn) emitter._events[evt].push(listener)
            else emitter._events[evt] = [emitter._events[evt], listener]
            return emitter
        }
        function clearEvent(emitter, evt) {
            if (--emitter._eventsCount === 0) emitter._events = new Events()
            else delete emitter._events[evt]
        }
        function EventEmitter2() {
            this._events = new Events()
            this._eventsCount = 0
        }
        EventEmitter2.prototype.eventNames = function eventNames() {
            var names = [],
                events,
                name
            if (this._eventsCount === 0) return names
            for (name in (events = this._events)) {
                if (has.call(events, name)) names.push(prefix2 ? name.slice(1) : name)
            }
            if (Object.getOwnPropertySymbols) {
                return names.concat(Object.getOwnPropertySymbols(events))
            }
            return names
        }
        EventEmitter2.prototype.listeners = function listeners(event) {
            var evt = prefix2 ? prefix2 + event : event,
                handlers = this._events[evt]
            if (!handlers) return []
            if (handlers.fn) return [handlers.fn]
            for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
                ee[i] = handlers[i].fn
            }
            return ee
        }
        EventEmitter2.prototype.listenerCount = function listenerCount(event) {
            var evt = prefix2 ? prefix2 + event : event,
                listeners = this._events[evt]
            if (!listeners) return 0
            if (listeners.fn) return 1
            return listeners.length
        }
        EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
            var evt = prefix2 ? prefix2 + event : event
            if (!this._events[evt]) return false
            var listeners = this._events[evt],
                len = arguments.length,
                args,
                i
            if (listeners.fn) {
                if (listeners.once) this.removeListener(event, listeners.fn, void 0, true)
                switch (len) {
                    case 1:
                        return listeners.fn.call(listeners.context), true
                    case 2:
                        return listeners.fn.call(listeners.context, a1), true
                    case 3:
                        return listeners.fn.call(listeners.context, a1, a2), true
                    case 4:
                        return listeners.fn.call(listeners.context, a1, a2, a3), true
                    case 5:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true
                    case 6:
                        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true
                }
                for (i = 1, args = new Array(len - 1); i < len; i++) {
                    args[i - 1] = arguments[i]
                }
                listeners.fn.apply(listeners.context, args)
            } else {
                var length2 = listeners.length,
                    j
                for (i = 0; i < length2; i++) {
                    if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true)
                    switch (len) {
                        case 1:
                            listeners[i].fn.call(listeners[i].context)
                            break
                        case 2:
                            listeners[i].fn.call(listeners[i].context, a1)
                            break
                        case 3:
                            listeners[i].fn.call(listeners[i].context, a1, a2)
                            break
                        case 4:
                            listeners[i].fn.call(listeners[i].context, a1, a2, a3)
                            break
                        default:
                            if (!args)
                                for (j = 1, args = new Array(len - 1); j < len; j++) {
                                    args[j - 1] = arguments[j]
                                }
                            listeners[i].fn.apply(listeners[i].context, args)
                    }
                }
            }
            return true
        }
        EventEmitter2.prototype.on = function on(event, fn, context) {
            return addListener(this, event, fn, context, false)
        }
        EventEmitter2.prototype.once = function once(event, fn, context) {
            return addListener(this, event, fn, context, true)
        }
        EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
            var evt = prefix2 ? prefix2 + event : event
            if (!this._events[evt]) return this
            if (!fn) {
                clearEvent(this, evt)
                return this
            }
            var listeners = this._events[evt]
            if (listeners.fn) {
                if (
                    listeners.fn === fn &&
                    (!once || listeners.once) &&
                    (!context || listeners.context === context)
                ) {
                    clearEvent(this, evt)
                }
            } else {
                for (var i = 0, events = [], length2 = listeners.length; i < length2; i++) {
                    if (
                        listeners[i].fn !== fn ||
                        (once && !listeners[i].once) ||
                        (context && listeners[i].context !== context)
                    ) {
                        events.push(listeners[i])
                    }
                }
                if (events.length) this._events[evt] = events.length === 1 ? events[0] : events
                else clearEvent(this, evt)
            }
            return this
        }
        EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
            var evt
            if (event) {
                evt = prefix2 ? prefix2 + event : event
                if (this._events[evt]) clearEvent(this, evt)
            } else {
                this._events = new Events()
                this._eventsCount = 0
            }
            return this
        }
        EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener
        EventEmitter2.prototype.addListener = EventEmitter2.prototype.on
        EventEmitter2.prefixed = prefix2
        EventEmitter2.EventEmitter = EventEmitter2
        {
            module.exports = EventEmitter2
        }
    })(eventemitter3)
    return eventemitter3.exports
}
var eventemitter3Exports = requireEventemitter3()
const EventEmitter = /* @__PURE__ */ getDefaultExportFromCjs(eventemitter3Exports)
var eventCenter = new EventEmitter()
var SYNC_EVENT = 'recharts.syncMouseEvents'
function _typeof$3(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$3 =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$3(o)
    )
}
function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$2(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey$2(descriptor.key), descriptor)
    }
}
function _createClass$2(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$2(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _defineProperty$3(obj, key, value) {
    key = _toPropertyKey$2(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$2(t) {
    var i = _toPrimitive$2(t, 'string')
    return 'symbol' == _typeof$3(i) ? i : i + ''
}
function _toPrimitive$2(t, r2) {
    if ('object' != _typeof$3(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$3(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return String(t)
}
var AccessibilityManager = /* @__PURE__ */ (function () {
    function AccessibilityManager2() {
        _classCallCheck$2(this, AccessibilityManager2)
        _defineProperty$3(this, 'activeIndex', 0)
        _defineProperty$3(this, 'coordinateList', [])
        _defineProperty$3(this, 'layout', 'horizontal')
    }
    return _createClass$2(AccessibilityManager2, [
        {
            key: 'setDetails',
            value: function setDetails(_ref3) {
                var _ref22
                var _ref$coordinateList = _ref3.coordinateList,
                    coordinateList = _ref$coordinateList === void 0 ? null : _ref$coordinateList,
                    _ref$container = _ref3.container,
                    container = _ref$container === void 0 ? null : _ref$container,
                    _ref$layout = _ref3.layout,
                    layout = _ref$layout === void 0 ? null : _ref$layout,
                    _ref$offset = _ref3.offset,
                    offset = _ref$offset === void 0 ? null : _ref$offset,
                    _ref$mouseHandlerCall = _ref3.mouseHandlerCallback,
                    mouseHandlerCallback =
                        _ref$mouseHandlerCall === void 0 ? null : _ref$mouseHandlerCall
                this.coordinateList =
                    (_ref22 =
                        coordinateList !== null && coordinateList !== void 0
                            ? coordinateList
                            : this.coordinateList) !== null && _ref22 !== void 0
                        ? _ref22
                        : []
                this.container =
                    container !== null && container !== void 0 ? container : this.container
                this.layout = layout !== null && layout !== void 0 ? layout : this.layout
                this.offset = offset !== null && offset !== void 0 ? offset : this.offset
                this.mouseHandlerCallback =
                    mouseHandlerCallback !== null && mouseHandlerCallback !== void 0
                        ? mouseHandlerCallback
                        : this.mouseHandlerCallback
                this.activeIndex = Math.min(
                    Math.max(this.activeIndex, 0),
                    this.coordinateList.length - 1
                )
            }
        },
        {
            key: 'focus',
            value: function focus() {
                this.spoofMouse()
            }
        },
        {
            key: 'keyboardEvent',
            value: function keyboardEvent(e) {
                if (this.coordinateList.length === 0) {
                    return
                }
                switch (e.key) {
                    case 'ArrowRight': {
                        if (this.layout !== 'horizontal') {
                            return
                        }
                        this.activeIndex = Math.min(
                            this.activeIndex + 1,
                            this.coordinateList.length - 1
                        )
                        this.spoofMouse()
                        break
                    }
                    case 'ArrowLeft': {
                        if (this.layout !== 'horizontal') {
                            return
                        }
                        this.activeIndex = Math.max(this.activeIndex - 1, 0)
                        this.spoofMouse()
                        break
                    }
                }
            }
        },
        {
            key: 'setIndex',
            value: function setIndex(newIndex) {
                this.activeIndex = newIndex
            }
        },
        {
            key: 'spoofMouse',
            value: function spoofMouse() {
                var _window, _window2
                if (this.layout !== 'horizontal') {
                    return
                }
                if (this.coordinateList.length === 0) {
                    return
                }
                var _this$container$getBo = this.container.getBoundingClientRect(),
                    x2 = _this$container$getBo.x,
                    y2 = _this$container$getBo.y,
                    height = _this$container$getBo.height
                var coordinate = this.coordinateList[this.activeIndex].coordinate
                var scrollOffsetX =
                    ((_window = window) === null || _window === void 0
                        ? void 0
                        : _window.scrollX) || 0
                var scrollOffsetY =
                    ((_window2 = window) === null || _window2 === void 0
                        ? void 0
                        : _window2.scrollY) || 0
                var pageX = x2 + coordinate + scrollOffsetX
                var pageY = y2 + this.offset.top + height / 2 + scrollOffsetY
                this.mouseHandlerCallback({
                    pageX,
                    pageY
                })
            }
        }
    ])
})()
function isDomainSpecifiedByUser(domain, allowDataOverflow, axisType) {
    if (axisType === 'number' && allowDataOverflow === true && Array.isArray(domain)) {
        var domainStart = domain === null || domain === void 0 ? void 0 : domain[0]
        var domainEnd = domain === null || domain === void 0 ? void 0 : domain[1]
        if (!!domainStart && !!domainEnd && isNumber(domainStart) && isNumber(domainEnd)) {
            return true
        }
    }
    return false
}
function getCursorRectangle(layout, activeCoordinate, offset, tooltipAxisBandSize) {
    var halfSize = tooltipAxisBandSize / 2
    return {
        stroke: 'none',
        fill: '#ccc',
        x: layout === 'horizontal' ? activeCoordinate.x - halfSize : offset.left + 0.5,
        y: layout === 'horizontal' ? offset.top + 0.5 : activeCoordinate.y - halfSize,
        width: layout === 'horizontal' ? tooltipAxisBandSize : offset.width - 1,
        height: layout === 'horizontal' ? offset.height - 1 : tooltipAxisBandSize
    }
}
function getRadialCursorPoints(activeCoordinate) {
    var cx = activeCoordinate.cx,
        cy = activeCoordinate.cy,
        radius = activeCoordinate.radius,
        startAngle = activeCoordinate.startAngle,
        endAngle = activeCoordinate.endAngle
    var startPoint = polarToCartesian(cx, cy, radius, startAngle)
    var endPoint = polarToCartesian(cx, cy, radius, endAngle)
    return {
        points: [startPoint, endPoint],
        cx,
        cy,
        radius,
        startAngle,
        endAngle
    }
}
function getCursorPoints(layout, activeCoordinate, offset) {
    var x1, y1, x2, y2
    if (layout === 'horizontal') {
        x1 = activeCoordinate.x
        x2 = x1
        y1 = offset.top
        y2 = offset.top + offset.height
    } else if (layout === 'vertical') {
        y1 = activeCoordinate.y
        y2 = y1
        x1 = offset.left
        x2 = offset.left + offset.width
    } else if (activeCoordinate.cx != null && activeCoordinate.cy != null) {
        if (layout === 'centric') {
            var cx = activeCoordinate.cx,
                cy = activeCoordinate.cy,
                innerRadius = activeCoordinate.innerRadius,
                outerRadius = activeCoordinate.outerRadius,
                angle = activeCoordinate.angle
            var innerPoint = polarToCartesian(cx, cy, innerRadius, angle)
            var outerPoint = polarToCartesian(cx, cy, outerRadius, angle)
            x1 = innerPoint.x
            y1 = innerPoint.y
            x2 = outerPoint.x
            y2 = outerPoint.y
        } else {
            return getRadialCursorPoints(activeCoordinate)
        }
    }
    return [
        {
            x: x1,
            y: y1
        },
        {
            x: x2,
            y: y2
        }
    ]
}
function _typeof$2(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$2 =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$2(o)
    )
}
function ownKeys$2(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread$1(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$2(Object(t), true).forEach(function (r3) {
                  _defineProperty$2(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$2(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _defineProperty$2(obj, key, value) {
    key = _toPropertyKey$1(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey$1(t) {
    var i = _toPrimitive$1(t, 'string')
    return 'symbol' == _typeof$2(i) ? i : i + ''
}
function _toPrimitive$1(t, r2) {
    if ('object' != _typeof$2(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$2(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function Cursor(props) {
    var _element$props$cursor, _defaultProps
    var element = props.element,
        tooltipEventType = props.tooltipEventType,
        isActive = props.isActive,
        activeCoordinate = props.activeCoordinate,
        activePayload = props.activePayload,
        offset = props.offset,
        activeTooltipIndex = props.activeTooltipIndex,
        tooltipAxisBandSize = props.tooltipAxisBandSize,
        layout = props.layout,
        chartName = props.chartName
    var elementPropsCursor =
        (_element$props$cursor = element.props.cursor) !== null && _element$props$cursor !== void 0
            ? _element$props$cursor
            : (_defaultProps = element.type.defaultProps) === null || _defaultProps === void 0
              ? void 0
              : _defaultProps.cursor
    if (
        !element ||
        !elementPropsCursor ||
        !isActive ||
        !activeCoordinate ||
        (chartName !== 'ScatterChart' && tooltipEventType !== 'axis')
    ) {
        return null
    }
    var restProps
    var cursorComp = Curve
    if (chartName === 'ScatterChart') {
        restProps = activeCoordinate
        cursorComp = Cross
    } else if (chartName === 'BarChart') {
        restProps = getCursorRectangle(layout, activeCoordinate, offset, tooltipAxisBandSize)
        cursorComp = Rectangle
    } else if (layout === 'radial') {
        var _getRadialCursorPoint = getRadialCursorPoints(activeCoordinate),
            cx = _getRadialCursorPoint.cx,
            cy = _getRadialCursorPoint.cy,
            radius = _getRadialCursorPoint.radius,
            startAngle = _getRadialCursorPoint.startAngle,
            endAngle = _getRadialCursorPoint.endAngle
        restProps = {
            cx,
            cy,
            startAngle,
            endAngle,
            innerRadius: radius,
            outerRadius: radius
        }
        cursorComp = Sector
    } else {
        restProps = {
            points: getCursorPoints(layout, activeCoordinate, offset)
        }
        cursorComp = Curve
    }
    var cursorProps = _objectSpread$1(
        _objectSpread$1(
            _objectSpread$1(
                _objectSpread$1(
                    {
                        stroke: '#ccc',
                        pointerEvents: 'none'
                    },
                    offset
                ),
                restProps
            ),
            filterProps(elementPropsCursor, false)
        ),
        {},
        {
            payload: activePayload,
            payloadIndex: activeTooltipIndex,
            className: clsx('recharts-tooltip-cursor', elementPropsCursor.className)
        }
    )
    return /* @__PURE__ */ reactExports.isValidElement(elementPropsCursor)
        ? /* @__PURE__ */ reactExports.cloneElement(elementPropsCursor, cursorProps)
        : /* @__PURE__ */ reactExports.createElement(cursorComp, cursorProps)
}
var _excluded$7 = ['item'],
    _excluded2$2 = ['children', 'className', 'width', 'height', 'style', 'compact', 'title', 'desc']
function _typeof$1(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof$1 =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof$1(o)
    )
}
function _extends() {
    _extends = Object.assign
        ? Object.assign.bind()
        : function (target) {
              for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i]
                  for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key]
                      }
                  }
              }
              return target
          }
    return _extends.apply(this, arguments)
}
function _slicedToArray$1(arr, i) {
    return (
        _arrayWithHoles$1(arr) ||
        _iterableToArrayLimit$1(arr, i) ||
        _unsupportedIterableToArray$1(arr, i) ||
        _nonIterableRest$1()
    )
}
function _nonIterableRest$1() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _iterableToArrayLimit$1(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l));
            else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r22) {
            ;(o = true), (n = r22)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayWithHoles$1(arr) {
    if (Array.isArray(arr)) return arr
}
function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i]
            if (excluded.indexOf(key) >= 0) continue
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
            target[key] = source[key]
        }
    }
    return target
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {}
    var target = {}
    for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (excluded.indexOf(key) >= 0) continue
            target[key] = source[key]
        }
    }
    return target
}
function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
    }
}
function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i]
        descriptor.enumerable = descriptor.enumerable || false
        descriptor.configurable = true
        if ('value' in descriptor) descriptor.writable = true
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor)
    }
}
function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps)
    Object.defineProperty(Constructor, 'prototype', { writable: false })
    return Constructor
}
function _callSuper(t, o, e) {
    return (
        (o = _getPrototypeOf$1(o)),
        _possibleConstructorReturn$1(
            t,
            _isNativeReflectConstruct$1()
                ? Reflect.construct(o, e || [], _getPrototypeOf$1(t).constructor)
                : o.apply(t, e)
        )
    )
}
function _possibleConstructorReturn$1(self2, call) {
    if (call && (_typeof$1(call) === 'object' || typeof call === 'function')) {
        return call
    } else if (call !== void 0) {
        throw new TypeError('Derived constructors may only return object or undefined')
    }
    return _assertThisInitialized(self2)
}
function _assertThisInitialized(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self2
}
function _isNativeReflectConstruct$1() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _getPrototypeOf$1(o) {
    _getPrototypeOf$1 = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2)
          }
    return _getPrototypeOf$1(o)
}
function _inherits$1(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    })
    Object.defineProperty(subClass, 'prototype', { writable: false })
    if (superClass) _setPrototypeOf(subClass, superClass)
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2
              return o2
          }
    return _setPrototypeOf(o, p)
}
function _toConsumableArray$1(arr) {
    return (
        _arrayWithoutHoles$1(arr) ||
        _iterableToArray$1(arr) ||
        _unsupportedIterableToArray$1(arr) ||
        _nonIterableSpread$1()
    )
}
function _nonIterableSpread$1() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray$1(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$1(o, minLen)
}
function _iterableToArray$1(iter) {
    if (
        (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
        iter['@@iterator'] != null
    )
        return Array.from(iter)
}
function _arrayWithoutHoles$1(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr)
}
function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
}
function ownKeys$1(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r22) {
                return Object.getOwnPropertyDescriptor(e, r22).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys$1(Object(t), true).forEach(function (r22) {
                  _defineProperty$1(e, r22, t[r22])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys$1(Object(t)).forEach(function (r22) {
                    Object.defineProperty(e, r22, Object.getOwnPropertyDescriptor(t, r22))
                })
    }
    return e
}
function _defineProperty$1(obj, key, value) {
    key = _toPropertyKey(key)
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}
function _toPropertyKey(t) {
    var i = _toPrimitive(t, 'string')
    return 'symbol' == _typeof$1(i) ? i : i + ''
}
function _toPrimitive(t, r2) {
    if ('object' != _typeof$1(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof$1(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
var ORIENT_MAP = {
    xAxis: ['bottom', 'top'],
    yAxis: ['left', 'right']
}
var FULL_WIDTH_AND_HEIGHT = {
    width: '100%',
    height: '100%'
}
var originCoordinate = {
    x: 0,
    y: 0
}
function renderAsIs(element) {
    return element
}
var calculateTooltipPos = function calculateTooltipPos2(rangeObj, layout) {
    if (layout === 'horizontal') {
        return rangeObj.x
    }
    if (layout === 'vertical') {
        return rangeObj.y
    }
    if (layout === 'centric') {
        return rangeObj.angle
    }
    return rangeObj.radius
}
var getActiveCoordinate = function getActiveCoordinate2(
    layout,
    tooltipTicks,
    activeIndex,
    rangeObj
) {
    var entry = tooltipTicks.find(function (tick) {
        return tick && tick.index === activeIndex
    })
    if (entry) {
        if (layout === 'horizontal') {
            return {
                x: entry.coordinate,
                y: rangeObj.y
            }
        }
        if (layout === 'vertical') {
            return {
                x: rangeObj.x,
                y: entry.coordinate
            }
        }
        if (layout === 'centric') {
            var _angle = entry.coordinate
            var _radius = rangeObj.radius
            return _objectSpread(
                _objectSpread(
                    _objectSpread({}, rangeObj),
                    polarToCartesian(rangeObj.cx, rangeObj.cy, _radius, _angle)
                ),
                {},
                {
                    angle: _angle,
                    radius: _radius
                }
            )
        }
        var radius = entry.coordinate
        var angle = rangeObj.angle
        return _objectSpread(
            _objectSpread(
                _objectSpread({}, rangeObj),
                polarToCartesian(rangeObj.cx, rangeObj.cy, radius, angle)
            ),
            {},
            {
                angle,
                radius
            }
        )
    }
    return originCoordinate
}
var getDisplayedData = function getDisplayedData2(data, _ref3) {
    var graphicalItems = _ref3.graphicalItems,
        dataStartIndex = _ref3.dataStartIndex,
        dataEndIndex = _ref3.dataEndIndex
    var itemsData = (
        graphicalItems !== null && graphicalItems !== void 0 ? graphicalItems : []
    ).reduce(function (result, child) {
        var itemData = child.props.data
        if (itemData && itemData.length) {
            return [].concat(_toConsumableArray$1(result), _toConsumableArray$1(itemData))
        }
        return result
    }, [])
    if (itemsData.length > 0) {
        return itemsData
    }
    if (data && data.length && isNumber(dataStartIndex) && isNumber(dataEndIndex)) {
        return data.slice(dataStartIndex, dataEndIndex + 1)
    }
    return []
}
function getDefaultDomainByAxisType(axisType) {
    return axisType === 'number' ? [0, 'auto'] : void 0
}
var getTooltipContent = function getTooltipContent2(state, chartData, activeIndex, activeLabel) {
    var graphicalItems = state.graphicalItems,
        tooltipAxis = state.tooltipAxis
    var displayedData = getDisplayedData(chartData, state)
    if (
        activeIndex < 0 ||
        !graphicalItems ||
        !graphicalItems.length ||
        activeIndex >= displayedData.length
    ) {
        return null
    }
    return graphicalItems.reduce(function (result, child) {
        var _child$props$data
        var data =
            (_child$props$data = child.props.data) !== null && _child$props$data !== void 0
                ? _child$props$data
                : chartData
        if (
            data &&
            state.dataStartIndex + state.dataEndIndex !== 0 && // https://github.com/recharts/recharts/issues/4717
            // The data is sliced only when the active index is within the start/end index range.
            state.dataEndIndex - state.dataStartIndex >= activeIndex
        ) {
            data = data.slice(state.dataStartIndex, state.dataEndIndex + 1)
        }
        var payload
        if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
            var entries = data === void 0 ? displayedData : data
            payload = findEntryInArray(entries, tooltipAxis.dataKey, activeLabel)
        } else {
            payload = (data && data[activeIndex]) || displayedData[activeIndex]
        }
        if (!payload) {
            return result
        }
        return [].concat(_toConsumableArray$1(result), [getTooltipItem(child, payload)])
    }, [])
}
var getTooltipData = function getTooltipData2(state, chartData, layout, rangeObj) {
    var rangeData = rangeObj || {
        x: state.chartX,
        y: state.chartY
    }
    var pos = calculateTooltipPos(rangeData, layout)
    var ticks2 = state.orderedTooltipTicks,
        axis = state.tooltipAxis,
        tooltipTicks = state.tooltipTicks
    var activeIndex = calculateActiveTickIndex(pos, ticks2, tooltipTicks, axis)
    if (activeIndex >= 0 && tooltipTicks) {
        var activeLabel = tooltipTicks[activeIndex] && tooltipTicks[activeIndex].value
        var activePayload = getTooltipContent(state, chartData, activeIndex, activeLabel)
        var activeCoordinate = getActiveCoordinate(layout, ticks2, activeIndex, rangeData)
        return {
            activeTooltipIndex: activeIndex,
            activeLabel,
            activePayload,
            activeCoordinate
        }
    }
    return null
}
var getAxisMapByAxes = function getAxisMapByAxes2(props, _ref22) {
    var axes = _ref22.axes,
        graphicalItems = _ref22.graphicalItems,
        axisType = _ref22.axisType,
        axisIdKey = _ref22.axisIdKey,
        stackGroups = _ref22.stackGroups,
        dataStartIndex = _ref22.dataStartIndex,
        dataEndIndex = _ref22.dataEndIndex
    var layout = props.layout,
        children = props.children,
        stackOffset = props.stackOffset
    var isCategorical = isCategoricalAxis(layout, axisType)
    return axes.reduce(function (result, child) {
        var _childProps$domain2
        var childProps =
            child.type.defaultProps !== void 0
                ? _objectSpread(_objectSpread({}, child.type.defaultProps), child.props)
                : child.props
        var type = childProps.type,
            dataKey = childProps.dataKey,
            allowDataOverflow = childProps.allowDataOverflow,
            allowDuplicatedCategory = childProps.allowDuplicatedCategory,
            scale = childProps.scale,
            ticks2 = childProps.ticks,
            includeHidden = childProps.includeHidden
        var axisId = childProps[axisIdKey]
        if (result[axisId]) {
            return result
        }
        var displayedData = getDisplayedData(props.data, {
            graphicalItems: graphicalItems.filter(function (item) {
                var _defaultProps
                var itemAxisId =
                    axisIdKey in item.props
                        ? item.props[axisIdKey]
                        : (_defaultProps = item.type.defaultProps) === null ||
                            _defaultProps === void 0
                          ? void 0
                          : _defaultProps[axisIdKey]
                return itemAxisId === axisId
            }),
            dataStartIndex,
            dataEndIndex
        })
        var len = displayedData.length
        var domain, duplicateDomain, categoricalDomain
        if (isDomainSpecifiedByUser(childProps.domain, allowDataOverflow, type)) {
            domain = parseSpecifiedDomain(childProps.domain, null, allowDataOverflow)
            if (isCategorical && (type === 'number' || scale !== 'auto')) {
                categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, 'category')
            }
        }
        var defaultDomain = getDefaultDomainByAxisType(type)
        if (!domain || domain.length === 0) {
            var _childProps$domain
            var childDomain =
                (_childProps$domain = childProps.domain) !== null && _childProps$domain !== void 0
                    ? _childProps$domain
                    : defaultDomain
            if (dataKey) {
                domain = getDomainOfDataByKey(displayedData, dataKey, type)
                if (type === 'category' && isCategorical) {
                    var duplicate = hasDuplicate(domain)
                    if (allowDuplicatedCategory && duplicate) {
                        duplicateDomain = domain
                        domain = range2(0, len)
                    } else if (!allowDuplicatedCategory) {
                        domain = parseDomainOfCategoryAxis(childDomain, domain, child).reduce(
                            function (finalDomain, entry) {
                                return finalDomain.indexOf(entry) >= 0
                                    ? finalDomain
                                    : [].concat(_toConsumableArray$1(finalDomain), [entry])
                            },
                            []
                        )
                    }
                } else if (type === 'category') {
                    if (!allowDuplicatedCategory) {
                        domain = parseDomainOfCategoryAxis(childDomain, domain, child).reduce(
                            function (finalDomain, entry) {
                                return finalDomain.indexOf(entry) >= 0 ||
                                    entry === '' ||
                                    isNil(entry)
                                    ? finalDomain
                                    : [].concat(_toConsumableArray$1(finalDomain), [entry])
                            },
                            []
                        )
                    } else {
                        domain = domain.filter(function (entry) {
                            return entry !== '' && !isNil(entry)
                        })
                    }
                } else if (type === 'number') {
                    var errorBarsDomain = parseErrorBarsOfAxis(
                        displayedData,
                        graphicalItems.filter(function (item) {
                            var _defaultProps2, _defaultProps3
                            var itemAxisId =
                                axisIdKey in item.props
                                    ? item.props[axisIdKey]
                                    : (_defaultProps2 = item.type.defaultProps) === null ||
                                        _defaultProps2 === void 0
                                      ? void 0
                                      : _defaultProps2[axisIdKey]
                            var itemHide =
                                'hide' in item.props
                                    ? item.props.hide
                                    : (_defaultProps3 = item.type.defaultProps) === null ||
                                        _defaultProps3 === void 0
                                      ? void 0
                                      : _defaultProps3.hide
                            return itemAxisId === axisId && (includeHidden || !itemHide)
                        }),
                        dataKey,
                        axisType,
                        layout
                    )
                    if (errorBarsDomain) {
                        domain = errorBarsDomain
                    }
                }
                if (isCategorical && (type === 'number' || scale !== 'auto')) {
                    categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, 'category')
                }
            } else if (isCategorical) {
                domain = range2(0, len)
            } else if (
                stackGroups &&
                stackGroups[axisId] &&
                stackGroups[axisId].hasStack &&
                type === 'number'
            ) {
                domain =
                    stackOffset === 'expand'
                        ? [0, 1]
                        : getDomainOfStackGroups(
                              stackGroups[axisId].stackGroups,
                              dataStartIndex,
                              dataEndIndex
                          )
            } else {
                domain = getDomainOfItemsWithSameAxis(
                    displayedData,
                    graphicalItems.filter(function (item) {
                        var itemAxisId =
                            axisIdKey in item.props
                                ? item.props[axisIdKey]
                                : item.type.defaultProps[axisIdKey]
                        var itemHide =
                            'hide' in item.props ? item.props.hide : item.type.defaultProps.hide
                        return itemAxisId === axisId && (includeHidden || !itemHide)
                    }),
                    type,
                    layout,
                    true
                )
            }
            if (type === 'number') {
                domain = detectReferenceElementsDomain(children, domain, axisId, axisType, ticks2)
                if (childDomain) {
                    domain = parseSpecifiedDomain(childDomain, domain, allowDataOverflow)
                }
            } else if (type === 'category' && childDomain) {
                var axisDomain = childDomain
                var isDomainValid = domain.every(function (entry) {
                    return axisDomain.indexOf(entry) >= 0
                })
                if (isDomainValid) {
                    domain = axisDomain
                }
            }
        }
        return _objectSpread(
            _objectSpread({}, result),
            {},
            _defineProperty$1(
                {},
                axisId,
                _objectSpread(
                    _objectSpread({}, childProps),
                    {},
                    {
                        axisType,
                        domain,
                        categoricalDomain,
                        duplicateDomain,
                        originalDomain:
                            (_childProps$domain2 = childProps.domain) !== null &&
                            _childProps$domain2 !== void 0
                                ? _childProps$domain2
                                : defaultDomain,
                        isCategorical,
                        layout
                    }
                )
            )
        )
    }, {})
}
var getAxisMapByItems = function getAxisMapByItems2(props, _ref3) {
    var graphicalItems = _ref3.graphicalItems,
        Axis = _ref3.Axis,
        axisType = _ref3.axisType,
        axisIdKey = _ref3.axisIdKey,
        stackGroups = _ref3.stackGroups,
        dataStartIndex = _ref3.dataStartIndex,
        dataEndIndex = _ref3.dataEndIndex
    var layout = props.layout,
        children = props.children
    var displayedData = getDisplayedData(props.data, {
        graphicalItems,
        dataStartIndex,
        dataEndIndex
    })
    var len = displayedData.length
    var isCategorical = isCategoricalAxis(layout, axisType)
    var index2 = -1
    return graphicalItems.reduce(function (result, child) {
        var childProps =
            child.type.defaultProps !== void 0
                ? _objectSpread(_objectSpread({}, child.type.defaultProps), child.props)
                : child.props
        var axisId = childProps[axisIdKey]
        var originalDomain = getDefaultDomainByAxisType('number')
        if (!result[axisId]) {
            index2++
            var domain
            if (isCategorical) {
                domain = range2(0, len)
            } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack) {
                domain = getDomainOfStackGroups(
                    stackGroups[axisId].stackGroups,
                    dataStartIndex,
                    dataEndIndex
                )
                domain = detectReferenceElementsDomain(children, domain, axisId, axisType)
            } else {
                domain = parseSpecifiedDomain(
                    originalDomain,
                    getDomainOfItemsWithSameAxis(
                        displayedData,
                        graphicalItems.filter(function (item) {
                            var _defaultProps4, _defaultProps5
                            var itemAxisId =
                                axisIdKey in item.props
                                    ? item.props[axisIdKey]
                                    : (_defaultProps4 = item.type.defaultProps) === null ||
                                        _defaultProps4 === void 0
                                      ? void 0
                                      : _defaultProps4[axisIdKey]
                            var itemHide =
                                'hide' in item.props
                                    ? item.props.hide
                                    : (_defaultProps5 = item.type.defaultProps) === null ||
                                        _defaultProps5 === void 0
                                      ? void 0
                                      : _defaultProps5.hide
                            return itemAxisId === axisId && !itemHide
                        }),
                        'number',
                        layout
                    ),
                    Axis.defaultProps.allowDataOverflow
                )
                domain = detectReferenceElementsDomain(children, domain, axisId, axisType)
            }
            return _objectSpread(
                _objectSpread({}, result),
                {},
                _defineProperty$1(
                    {},
                    axisId,
                    _objectSpread(
                        _objectSpread(
                            {
                                axisType
                            },
                            Axis.defaultProps
                        ),
                        {},
                        {
                            hide: true,
                            orientation: get(
                                ORIENT_MAP,
                                ''.concat(axisType, '.').concat(index2 % 2),
                                null
                            ),
                            domain,
                            originalDomain,
                            isCategorical,
                            layout
                            // specify scale when no Axis
                            // scale: isCategorical ? 'band' : 'linear',
                        }
                    )
                )
            )
        }
        return result
    }, {})
}
var getAxisMap = function getAxisMap2(props, _ref4) {
    var _ref4$axisType = _ref4.axisType,
        axisType = _ref4$axisType === void 0 ? 'xAxis' : _ref4$axisType,
        AxisComp = _ref4.AxisComp,
        graphicalItems = _ref4.graphicalItems,
        stackGroups = _ref4.stackGroups,
        dataStartIndex = _ref4.dataStartIndex,
        dataEndIndex = _ref4.dataEndIndex
    var children = props.children
    var axisIdKey = ''.concat(axisType, 'Id')
    var axes = findAllByType(children, AxisComp)
    var axisMap = {}
    if (axes && axes.length) {
        axisMap = getAxisMapByAxes(props, {
            axes,
            graphicalItems,
            axisType,
            axisIdKey,
            stackGroups,
            dataStartIndex,
            dataEndIndex
        })
    } else if (graphicalItems && graphicalItems.length) {
        axisMap = getAxisMapByItems(props, {
            Axis: AxisComp,
            graphicalItems,
            axisType,
            axisIdKey,
            stackGroups,
            dataStartIndex,
            dataEndIndex
        })
    }
    return axisMap
}
var tooltipTicksGenerator = function tooltipTicksGenerator2(axisMap) {
    var axis = getAnyElementOfObject(axisMap)
    var tooltipTicks = getTicksOfAxis(axis, false, true)
    return {
        tooltipTicks,
        orderedTooltipTicks: sortBy(tooltipTicks, function (o) {
            return o.coordinate
        }),
        tooltipAxis: axis,
        tooltipAxisBandSize: getBandSizeOfAxis(axis, tooltipTicks)
    }
}
var createDefaultState = function createDefaultState2(props) {
    var children = props.children,
        defaultShowTooltip = props.defaultShowTooltip
    var brushItem = findChildByType(children, Brush)
    var startIndex = 0
    var endIndex = 0
    if (props.data && props.data.length !== 0) {
        endIndex = props.data.length - 1
    }
    if (brushItem && brushItem.props) {
        if (brushItem.props.startIndex >= 0) {
            startIndex = brushItem.props.startIndex
        }
        if (brushItem.props.endIndex >= 0) {
            endIndex = brushItem.props.endIndex
        }
    }
    return {
        chartX: 0,
        chartY: 0,
        dataStartIndex: startIndex,
        dataEndIndex: endIndex,
        activeTooltipIndex: -1,
        isTooltipActive: Boolean(defaultShowTooltip)
    }
}
var hasGraphicalBarItem = function hasGraphicalBarItem2(graphicalItems) {
    if (!graphicalItems || !graphicalItems.length) {
        return false
    }
    return graphicalItems.some(function (item) {
        var name = getDisplayName(item && item.type)
        return name && name.indexOf('Bar') >= 0
    })
}
var getAxisNameByLayout = function getAxisNameByLayout2(layout) {
    if (layout === 'horizontal') {
        return {
            numericAxisName: 'yAxis',
            cateAxisName: 'xAxis'
        }
    }
    if (layout === 'vertical') {
        return {
            numericAxisName: 'xAxis',
            cateAxisName: 'yAxis'
        }
    }
    if (layout === 'centric') {
        return {
            numericAxisName: 'radiusAxis',
            cateAxisName: 'angleAxis'
        }
    }
    return {
        numericAxisName: 'angleAxis',
        cateAxisName: 'radiusAxis'
    }
}
var calculateOffset = function calculateOffset2(_ref5, prevLegendBBox) {
    var props = _ref5.props,
        graphicalItems = _ref5.graphicalItems,
        _ref5$xAxisMap = _ref5.xAxisMap,
        xAxisMap = _ref5$xAxisMap === void 0 ? {} : _ref5$xAxisMap,
        _ref5$yAxisMap = _ref5.yAxisMap,
        yAxisMap = _ref5$yAxisMap === void 0 ? {} : _ref5$yAxisMap
    var width = props.width,
        height = props.height,
        children = props.children
    var margin = props.margin || {}
    var brushItem = findChildByType(children, Brush)
    var legendItem = findChildByType(children, Legend)
    var offsetH = Object.keys(yAxisMap).reduce(
        function (result, id) {
            var entry = yAxisMap[id]
            var orientation = entry.orientation
            if (!entry.mirror && !entry.hide) {
                return _objectSpread(
                    _objectSpread({}, result),
                    {},
                    _defineProperty$1({}, orientation, result[orientation] + entry.width)
                )
            }
            return result
        },
        {
            left: margin.left || 0,
            right: margin.right || 0
        }
    )
    var offsetV = Object.keys(xAxisMap).reduce(
        function (result, id) {
            var entry = xAxisMap[id]
            var orientation = entry.orientation
            if (!entry.mirror && !entry.hide) {
                return _objectSpread(
                    _objectSpread({}, result),
                    {},
                    _defineProperty$1(
                        {},
                        orientation,
                        get(result, ''.concat(orientation)) + entry.height
                    )
                )
            }
            return result
        },
        {
            top: margin.top || 0,
            bottom: margin.bottom || 0
        }
    )
    var offset = _objectSpread(_objectSpread({}, offsetV), offsetH)
    var brushBottom = offset.bottom
    if (brushItem) {
        offset.bottom += brushItem.props.height || Brush.defaultProps.height
    }
    if (legendItem && prevLegendBBox) {
        offset = appendOffsetOfLegend(offset, graphicalItems, props, prevLegendBBox)
    }
    var offsetWidth = width - offset.left - offset.right
    var offsetHeight = height - offset.top - offset.bottom
    return _objectSpread(
        _objectSpread(
            {
                brushBottom
            },
            offset
        ),
        {},
        {
            // never return negative values for height and width
            width: Math.max(offsetWidth, 0),
            height: Math.max(offsetHeight, 0)
        }
    )
}
var getCartesianAxisSize = function getCartesianAxisSize2(axisObj, axisName) {
    if (axisName === 'xAxis') {
        return axisObj[axisName].width
    }
    if (axisName === 'yAxis') {
        return axisObj[axisName].height
    }
    return void 0
}
var generateCategoricalChart = function generateCategoricalChart2(_ref6) {
    var chartName = _ref6.chartName,
        GraphicalChild = _ref6.GraphicalChild,
        _ref6$defaultTooltipE = _ref6.defaultTooltipEventType,
        defaultTooltipEventType = _ref6$defaultTooltipE === void 0 ? 'axis' : _ref6$defaultTooltipE,
        _ref6$validateTooltip = _ref6.validateTooltipEventTypes,
        validateTooltipEventTypes =
            _ref6$validateTooltip === void 0 ? ['axis'] : _ref6$validateTooltip,
        axisComponents = _ref6.axisComponents,
        legendContent = _ref6.legendContent,
        formatAxisMap4 = _ref6.formatAxisMap,
        defaultProps2 = _ref6.defaultProps
    var getFormatItems = function getFormatItems2(props, currentState) {
        var graphicalItems = currentState.graphicalItems,
            stackGroups = currentState.stackGroups,
            offset = currentState.offset,
            updateId = currentState.updateId,
            dataStartIndex = currentState.dataStartIndex,
            dataEndIndex = currentState.dataEndIndex
        var barSize = props.barSize,
            layout = props.layout,
            barGap = props.barGap,
            barCategoryGap = props.barCategoryGap,
            globalMaxBarSize = props.maxBarSize
        var _getAxisNameByLayout = getAxisNameByLayout(layout),
            numericAxisName = _getAxisNameByLayout.numericAxisName,
            cateAxisName = _getAxisNameByLayout.cateAxisName
        var hasBar = hasGraphicalBarItem(graphicalItems)
        var formattedItems = []
        graphicalItems.forEach(function (item, index2) {
            var displayedData = getDisplayedData(props.data, {
                graphicalItems: [item],
                dataStartIndex,
                dataEndIndex
            })
            var itemProps =
                item.type.defaultProps !== void 0
                    ? _objectSpread(_objectSpread({}, item.type.defaultProps), item.props)
                    : item.props
            var dataKey = itemProps.dataKey,
                childMaxBarSize = itemProps.maxBarSize
            var numericAxisId = itemProps[''.concat(numericAxisName, 'Id')]
            var cateAxisId = itemProps[''.concat(cateAxisName, 'Id')]
            var axisObjInitialValue = {}
            var axisObj = axisComponents.reduce(function (result, entry) {
                var axisMap = currentState[''.concat(entry.axisType, 'Map')]
                var id = itemProps[''.concat(entry.axisType, 'Id')]
                !((axisMap && axisMap[id]) || entry.axisType === 'zAxis') ? invariant() : void 0
                var axis = axisMap[id]
                return _objectSpread(
                    _objectSpread({}, result),
                    {},
                    _defineProperty$1(
                        _defineProperty$1({}, entry.axisType, axis),
                        ''.concat(entry.axisType, 'Ticks'),
                        getTicksOfAxis(axis)
                    )
                )
            }, axisObjInitialValue)
            var cateAxis = axisObj[cateAxisName]
            var cateTicks = axisObj[''.concat(cateAxisName, 'Ticks')]
            var stackedData =
                stackGroups &&
                stackGroups[numericAxisId] &&
                stackGroups[numericAxisId].hasStack &&
                getStackedDataOfItem(item, stackGroups[numericAxisId].stackGroups)
            var itemIsBar = getDisplayName(item.type).indexOf('Bar') >= 0
            var bandSize = getBandSizeOfAxis(cateAxis, cateTicks)
            var barPosition = []
            var sizeList =
                hasBar &&
                getBarSizeList({
                    barSize,
                    stackGroups,
                    totalSize: getCartesianAxisSize(axisObj, cateAxisName)
                })
            if (itemIsBar) {
                var _ref7, _getBandSizeOfAxis
                var maxBarSize = isNil(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize
                var barBandSize =
                    (_ref7 =
                        (_getBandSizeOfAxis = getBandSizeOfAxis(cateAxis, cateTicks, true)) !==
                            null && _getBandSizeOfAxis !== void 0
                            ? _getBandSizeOfAxis
                            : maxBarSize) !== null && _ref7 !== void 0
                        ? _ref7
                        : 0
                barPosition = getBarPosition({
                    barGap,
                    barCategoryGap,
                    bandSize: barBandSize !== bandSize ? barBandSize : bandSize,
                    sizeList: sizeList[cateAxisId],
                    maxBarSize
                })
                if (barBandSize !== bandSize) {
                    barPosition = barPosition.map(function (pos) {
                        return _objectSpread(
                            _objectSpread({}, pos),
                            {},
                            {
                                position: _objectSpread(
                                    _objectSpread({}, pos.position),
                                    {},
                                    {
                                        offset: pos.position.offset - barBandSize / 2
                                    }
                                )
                            }
                        )
                    })
                }
            }
            var composedFn = item && item.type && item.type.getComposedData
            if (composedFn) {
                formattedItems.push({
                    props: _objectSpread(
                        _objectSpread(
                            {},
                            composedFn(
                                _objectSpread(
                                    _objectSpread({}, axisObj),
                                    {},
                                    {
                                        displayedData,
                                        props,
                                        dataKey,
                                        item,
                                        bandSize,
                                        barPosition,
                                        offset,
                                        stackedData,
                                        layout,
                                        dataStartIndex,
                                        dataEndIndex
                                    }
                                )
                            )
                        ),
                        {},
                        _defineProperty$1(
                            _defineProperty$1(
                                _defineProperty$1(
                                    {
                                        key: item.key || 'item-'.concat(index2)
                                    },
                                    numericAxisName,
                                    axisObj[numericAxisName]
                                ),
                                cateAxisName,
                                axisObj[cateAxisName]
                            ),
                            'animationId',
                            updateId
                        )
                    ),
                    childIndex: parseChildIndex(item, props.children),
                    item
                })
            }
        })
        return formattedItems
    }
    var updateStateOfAxisMapsOffsetAndStackGroups =
        function updateStateOfAxisMapsOffsetAndStackGroups2(_ref8, prevState) {
            var props = _ref8.props,
                dataStartIndex = _ref8.dataStartIndex,
                dataEndIndex = _ref8.dataEndIndex,
                updateId = _ref8.updateId
            if (
                !validateWidthHeight({
                    props
                })
            ) {
                return null
            }
            var children = props.children,
                layout = props.layout,
                stackOffset = props.stackOffset,
                data = props.data,
                reverseStackOrder = props.reverseStackOrder
            var _getAxisNameByLayout2 = getAxisNameByLayout(layout),
                numericAxisName = _getAxisNameByLayout2.numericAxisName,
                cateAxisName = _getAxisNameByLayout2.cateAxisName
            var graphicalItems = findAllByType(children, GraphicalChild)
            var stackGroups = getStackGroupsByAxisId(
                data,
                graphicalItems,
                ''.concat(numericAxisName, 'Id'),
                ''.concat(cateAxisName, 'Id'),
                stackOffset,
                reverseStackOrder
            )
            var axisObj = axisComponents.reduce(function (result, entry) {
                var name = ''.concat(entry.axisType, 'Map')
                return _objectSpread(
                    _objectSpread({}, result),
                    {},
                    _defineProperty$1(
                        {},
                        name,
                        getAxisMap(
                            props,
                            _objectSpread(
                                _objectSpread({}, entry),
                                {},
                                {
                                    graphicalItems,
                                    stackGroups: entry.axisType === numericAxisName && stackGroups,
                                    dataStartIndex,
                                    dataEndIndex
                                }
                            )
                        )
                    )
                )
            }, {})
            var offset = calculateOffset(
                _objectSpread(
                    _objectSpread({}, axisObj),
                    {},
                    {
                        props,
                        graphicalItems
                    }
                ),
                prevState === null || prevState === void 0 ? void 0 : prevState.legendBBox
            )
            Object.keys(axisObj).forEach(function (key) {
                axisObj[key] = formatAxisMap4(
                    props,
                    axisObj[key],
                    offset,
                    key.replace('Map', ''),
                    chartName
                )
            })
            var cateAxisMap = axisObj[''.concat(cateAxisName, 'Map')]
            var ticksObj = tooltipTicksGenerator(cateAxisMap)
            var formattedGraphicalItems = getFormatItems(
                props,
                _objectSpread(
                    _objectSpread({}, axisObj),
                    {},
                    {
                        dataStartIndex,
                        dataEndIndex,
                        updateId,
                        graphicalItems,
                        stackGroups,
                        offset
                    }
                )
            )
            return _objectSpread(
                _objectSpread(
                    {
                        formattedGraphicalItems,
                        graphicalItems,
                        offset,
                        stackGroups
                    },
                    ticksObj
                ),
                axisObj
            )
        }
    var CategoricalChartWrapper = /* @__PURE__ */ (function (_Component) {
        function CategoricalChartWrapper2(_props) {
            var _props$id, _props$throttleDelay
            var _this
            _classCallCheck$1(this, CategoricalChartWrapper2)
            _this = _callSuper(this, CategoricalChartWrapper2, [_props])
            _defineProperty$1(_this, 'eventEmitterSymbol', Symbol('rechartsEventEmitter'))
            _defineProperty$1(_this, 'accessibilityManager', new AccessibilityManager())
            _defineProperty$1(_this, 'handleLegendBBoxUpdate', function (box) {
                if (box) {
                    var _this$state = _this.state,
                        dataStartIndex = _this$state.dataStartIndex,
                        dataEndIndex = _this$state.dataEndIndex,
                        updateId = _this$state.updateId
                    _this.setState(
                        _objectSpread(
                            {
                                legendBBox: box
                            },
                            updateStateOfAxisMapsOffsetAndStackGroups(
                                {
                                    props: _this.props,
                                    dataStartIndex,
                                    dataEndIndex,
                                    updateId
                                },
                                _objectSpread(
                                    _objectSpread({}, _this.state),
                                    {},
                                    {
                                        legendBBox: box
                                    }
                                )
                            )
                        )
                    )
                }
            })
            _defineProperty$1(_this, 'handleReceiveSyncEvent', function (cId, data, emitter) {
                if (_this.props.syncId === cId) {
                    if (
                        emitter === _this.eventEmitterSymbol &&
                        typeof _this.props.syncMethod !== 'function'
                    ) {
                        return
                    }
                    _this.applySyncEvent(data)
                }
            })
            _defineProperty$1(_this, 'handleBrushChange', function (_ref9) {
                var startIndex = _ref9.startIndex,
                    endIndex = _ref9.endIndex
                if (
                    startIndex !== _this.state.dataStartIndex ||
                    endIndex !== _this.state.dataEndIndex
                ) {
                    var updateId = _this.state.updateId
                    _this.setState(function () {
                        return _objectSpread(
                            {
                                dataStartIndex: startIndex,
                                dataEndIndex: endIndex
                            },
                            updateStateOfAxisMapsOffsetAndStackGroups(
                                {
                                    props: _this.props,
                                    dataStartIndex: startIndex,
                                    dataEndIndex: endIndex,
                                    updateId
                                },
                                _this.state
                            )
                        )
                    })
                    _this.triggerSyncEvent({
                        dataStartIndex: startIndex,
                        dataEndIndex: endIndex
                    })
                }
            })
            _defineProperty$1(_this, 'handleMouseEnter', function (e) {
                var mouse = _this.getMouseInfo(e)
                if (mouse) {
                    var _nextState = _objectSpread(
                        _objectSpread({}, mouse),
                        {},
                        {
                            isTooltipActive: true
                        }
                    )
                    _this.setState(_nextState)
                    _this.triggerSyncEvent(_nextState)
                    var onMouseEnter = _this.props.onMouseEnter
                    if (isFunction(onMouseEnter)) {
                        onMouseEnter(_nextState, e)
                    }
                }
            })
            _defineProperty$1(_this, 'triggeredAfterMouseMove', function (e) {
                var mouse = _this.getMouseInfo(e)
                var nextState = mouse
                    ? _objectSpread(
                          _objectSpread({}, mouse),
                          {},
                          {
                              isTooltipActive: true
                          }
                      )
                    : {
                          isTooltipActive: false
                      }
                _this.setState(nextState)
                _this.triggerSyncEvent(nextState)
                var onMouseMove = _this.props.onMouseMove
                if (isFunction(onMouseMove)) {
                    onMouseMove(nextState, e)
                }
            })
            _defineProperty$1(_this, 'handleItemMouseEnter', function (el) {
                _this.setState(function () {
                    return {
                        isTooltipActive: true,
                        activeItem: el,
                        activePayload: el.tooltipPayload,
                        activeCoordinate: el.tooltipPosition || {
                            x: el.cx,
                            y: el.cy
                        }
                    }
                })
            })
            _defineProperty$1(_this, 'handleItemMouseLeave', function () {
                _this.setState(function () {
                    return {
                        isTooltipActive: false
                    }
                })
            })
            _defineProperty$1(_this, 'handleMouseMove', function (e) {
                e.persist()
                _this.throttleTriggeredAfterMouseMove(e)
            })
            _defineProperty$1(_this, 'handleMouseLeave', function (e) {
                _this.throttleTriggeredAfterMouseMove.cancel()
                var nextState = {
                    isTooltipActive: false
                }
                _this.setState(nextState)
                _this.triggerSyncEvent(nextState)
                var onMouseLeave = _this.props.onMouseLeave
                if (isFunction(onMouseLeave)) {
                    onMouseLeave(nextState, e)
                }
            })
            _defineProperty$1(_this, 'handleOuterEvent', function (e) {
                var eventName = getReactEventByType(e)
                var event = get(_this.props, ''.concat(eventName))
                if (eventName && isFunction(event)) {
                    var _mouse
                    var mouse
                    if (/.*touch.*/i.test(eventName)) {
                        mouse = _this.getMouseInfo(e.changedTouches[0])
                    } else {
                        mouse = _this.getMouseInfo(e)
                    }
                    event((_mouse = mouse) !== null && _mouse !== void 0 ? _mouse : {}, e)
                }
            })
            _defineProperty$1(_this, 'handleClick', function (e) {
                var mouse = _this.getMouseInfo(e)
                if (mouse) {
                    var _nextState2 = _objectSpread(
                        _objectSpread({}, mouse),
                        {},
                        {
                            isTooltipActive: true
                        }
                    )
                    _this.setState(_nextState2)
                    _this.triggerSyncEvent(_nextState2)
                    var onClick = _this.props.onClick
                    if (isFunction(onClick)) {
                        onClick(_nextState2, e)
                    }
                }
            })
            _defineProperty$1(_this, 'handleMouseDown', function (e) {
                var onMouseDown = _this.props.onMouseDown
                if (isFunction(onMouseDown)) {
                    var _nextState3 = _this.getMouseInfo(e)
                    onMouseDown(_nextState3, e)
                }
            })
            _defineProperty$1(_this, 'handleMouseUp', function (e) {
                var onMouseUp = _this.props.onMouseUp
                if (isFunction(onMouseUp)) {
                    var _nextState4 = _this.getMouseInfo(e)
                    onMouseUp(_nextState4, e)
                }
            })
            _defineProperty$1(_this, 'handleTouchMove', function (e) {
                if (e.changedTouches != null && e.changedTouches.length > 0) {
                    _this.throttleTriggeredAfterMouseMove(e.changedTouches[0])
                }
            })
            _defineProperty$1(_this, 'handleTouchStart', function (e) {
                if (e.changedTouches != null && e.changedTouches.length > 0) {
                    _this.handleMouseDown(e.changedTouches[0])
                }
            })
            _defineProperty$1(_this, 'handleTouchEnd', function (e) {
                if (e.changedTouches != null && e.changedTouches.length > 0) {
                    _this.handleMouseUp(e.changedTouches[0])
                }
            })
            _defineProperty$1(_this, 'handleDoubleClick', function (e) {
                var onDoubleClick = _this.props.onDoubleClick
                if (isFunction(onDoubleClick)) {
                    var _nextState5 = _this.getMouseInfo(e)
                    onDoubleClick(_nextState5, e)
                }
            })
            _defineProperty$1(_this, 'handleContextMenu', function (e) {
                var onContextMenu = _this.props.onContextMenu
                if (isFunction(onContextMenu)) {
                    var _nextState6 = _this.getMouseInfo(e)
                    onContextMenu(_nextState6, e)
                }
            })
            _defineProperty$1(_this, 'triggerSyncEvent', function (data) {
                if (_this.props.syncId !== void 0) {
                    eventCenter.emit(SYNC_EVENT, _this.props.syncId, data, _this.eventEmitterSymbol)
                }
            })
            _defineProperty$1(_this, 'applySyncEvent', function (data) {
                var _this$props = _this.props,
                    layout = _this$props.layout,
                    syncMethod = _this$props.syncMethod
                var updateId = _this.state.updateId
                var dataStartIndex = data.dataStartIndex,
                    dataEndIndex = data.dataEndIndex
                if (data.dataStartIndex !== void 0 || data.dataEndIndex !== void 0) {
                    _this.setState(
                        _objectSpread(
                            {
                                dataStartIndex,
                                dataEndIndex
                            },
                            updateStateOfAxisMapsOffsetAndStackGroups(
                                {
                                    props: _this.props,
                                    dataStartIndex,
                                    dataEndIndex,
                                    updateId
                                },
                                _this.state
                            )
                        )
                    )
                } else if (data.activeTooltipIndex !== void 0) {
                    var chartX = data.chartX,
                        chartY = data.chartY
                    var activeTooltipIndex = data.activeTooltipIndex
                    var _this$state2 = _this.state,
                        offset = _this$state2.offset,
                        tooltipTicks = _this$state2.tooltipTicks
                    if (!offset) {
                        return
                    }
                    if (typeof syncMethod === 'function') {
                        activeTooltipIndex = syncMethod(tooltipTicks, data)
                    } else if (syncMethod === 'value') {
                        activeTooltipIndex = -1
                        for (var i = 0; i < tooltipTicks.length; i++) {
                            if (tooltipTicks[i].value === data.activeLabel) {
                                activeTooltipIndex = i
                                break
                            }
                        }
                    }
                    var viewBox = _objectSpread(
                        _objectSpread({}, offset),
                        {},
                        {
                            x: offset.left,
                            y: offset.top
                        }
                    )
                    var validateChartX = Math.min(chartX, viewBox.x + viewBox.width)
                    var validateChartY = Math.min(chartY, viewBox.y + viewBox.height)
                    var activeLabel =
                        tooltipTicks[activeTooltipIndex] && tooltipTicks[activeTooltipIndex].value
                    var activePayload = getTooltipContent(
                        _this.state,
                        _this.props.data,
                        activeTooltipIndex
                    )
                    var activeCoordinate = tooltipTicks[activeTooltipIndex]
                        ? {
                              x:
                                  layout === 'horizontal'
                                      ? tooltipTicks[activeTooltipIndex].coordinate
                                      : validateChartX,
                              y:
                                  layout === 'horizontal'
                                      ? validateChartY
                                      : tooltipTicks[activeTooltipIndex].coordinate
                          }
                        : originCoordinate
                    _this.setState(
                        _objectSpread(
                            _objectSpread({}, data),
                            {},
                            {
                                activeLabel,
                                activeCoordinate,
                                activePayload,
                                activeTooltipIndex
                            }
                        )
                    )
                } else {
                    _this.setState(data)
                }
            })
            _defineProperty$1(_this, 'renderCursor', function (element) {
                var _element$props$active
                var _this$state3 = _this.state,
                    isTooltipActive = _this$state3.isTooltipActive,
                    activeCoordinate = _this$state3.activeCoordinate,
                    activePayload = _this$state3.activePayload,
                    offset = _this$state3.offset,
                    activeTooltipIndex = _this$state3.activeTooltipIndex,
                    tooltipAxisBandSize = _this$state3.tooltipAxisBandSize
                var tooltipEventType = _this.getTooltipEventType()
                var isActive =
                    (_element$props$active = element.props.active) !== null &&
                    _element$props$active !== void 0
                        ? _element$props$active
                        : isTooltipActive
                var layout = _this.props.layout
                var key = element.key || '_recharts-cursor'
                return /* @__PURE__ */ React.createElement(Cursor, {
                    key,
                    activeCoordinate,
                    activePayload,
                    activeTooltipIndex,
                    chartName,
                    element,
                    isActive,
                    layout,
                    offset,
                    tooltipAxisBandSize,
                    tooltipEventType
                })
            })
            _defineProperty$1(_this, 'renderPolarAxis', function (element, displayName, index2) {
                var axisType = get(element, 'type.axisType')
                var axisMap = get(_this.state, ''.concat(axisType, 'Map'))
                var elementDefaultProps = element.type.defaultProps
                var elementProps =
                    elementDefaultProps !== void 0
                        ? _objectSpread(_objectSpread({}, elementDefaultProps), element.props)
                        : element.props
                var axisOption = axisMap && axisMap[elementProps[''.concat(axisType, 'Id')]]
                return /* @__PURE__ */ reactExports.cloneElement(
                    element,
                    _objectSpread(
                        _objectSpread({}, axisOption),
                        {},
                        {
                            className: clsx(axisType, axisOption.className),
                            key: element.key || ''.concat(displayName, '-').concat(index2),
                            ticks: getTicksOfAxis(axisOption, true)
                        }
                    )
                )
            })
            _defineProperty$1(_this, 'renderPolarGrid', function (element) {
                var _element$props = element.props,
                    radialLines = _element$props.radialLines,
                    polarAngles = _element$props.polarAngles,
                    polarRadius = _element$props.polarRadius
                var _this$state4 = _this.state,
                    radiusAxisMap = _this$state4.radiusAxisMap,
                    angleAxisMap = _this$state4.angleAxisMap
                var radiusAxis = getAnyElementOfObject(radiusAxisMap)
                var angleAxis = getAnyElementOfObject(angleAxisMap)
                var cx = angleAxis.cx,
                    cy = angleAxis.cy,
                    innerRadius = angleAxis.innerRadius,
                    outerRadius = angleAxis.outerRadius
                return /* @__PURE__ */ reactExports.cloneElement(element, {
                    polarAngles: Array.isArray(polarAngles)
                        ? polarAngles
                        : getTicksOfAxis(angleAxis, true).map(function (entry) {
                              return entry.coordinate
                          }),
                    polarRadius: Array.isArray(polarRadius)
                        ? polarRadius
                        : getTicksOfAxis(radiusAxis, true).map(function (entry) {
                              return entry.coordinate
                          }),
                    cx,
                    cy,
                    innerRadius,
                    outerRadius,
                    key: element.key || 'polar-grid',
                    radialLines
                })
            })
            _defineProperty$1(_this, 'renderLegend', function () {
                var formattedGraphicalItems = _this.state.formattedGraphicalItems
                var _this$props2 = _this.props,
                    children = _this$props2.children,
                    width = _this$props2.width,
                    height = _this$props2.height
                var margin = _this.props.margin || {}
                var legendWidth = width - (margin.left || 0) - (margin.right || 0)
                var props = getLegendProps({
                    children,
                    formattedGraphicalItems,
                    legendWidth,
                    legendContent
                })
                if (!props) {
                    return null
                }
                var item = props.item,
                    otherProps = _objectWithoutProperties$1(props, _excluded$7)
                return /* @__PURE__ */ reactExports.cloneElement(
                    item,
                    _objectSpread(
                        _objectSpread({}, otherProps),
                        {},
                        {
                            chartWidth: width,
                            chartHeight: height,
                            margin,
                            onBBoxUpdate: _this.handleLegendBBoxUpdate
                        }
                    )
                )
            })
            _defineProperty$1(_this, 'renderTooltip', function () {
                var _tooltipItem$props$ac
                var _this$props3 = _this.props,
                    children = _this$props3.children,
                    accessibilityLayer = _this$props3.accessibilityLayer
                var tooltipItem = findChildByType(children, Tooltip)
                if (!tooltipItem) {
                    return null
                }
                var _this$state5 = _this.state,
                    isTooltipActive = _this$state5.isTooltipActive,
                    activeCoordinate = _this$state5.activeCoordinate,
                    activePayload = _this$state5.activePayload,
                    activeLabel = _this$state5.activeLabel,
                    offset = _this$state5.offset
                var isActive =
                    (_tooltipItem$props$ac = tooltipItem.props.active) !== null &&
                    _tooltipItem$props$ac !== void 0
                        ? _tooltipItem$props$ac
                        : isTooltipActive
                return /* @__PURE__ */ reactExports.cloneElement(tooltipItem, {
                    viewBox: _objectSpread(
                        _objectSpread({}, offset),
                        {},
                        {
                            x: offset.left,
                            y: offset.top
                        }
                    ),
                    active: isActive,
                    label: activeLabel,
                    payload: isActive ? activePayload : [],
                    coordinate: activeCoordinate,
                    accessibilityLayer
                })
            })
            _defineProperty$1(_this, 'renderBrush', function (element) {
                var _this$props4 = _this.props,
                    margin = _this$props4.margin,
                    data = _this$props4.data
                var _this$state6 = _this.state,
                    offset = _this$state6.offset,
                    dataStartIndex = _this$state6.dataStartIndex,
                    dataEndIndex = _this$state6.dataEndIndex,
                    updateId = _this$state6.updateId
                return /* @__PURE__ */ reactExports.cloneElement(element, {
                    key: element.key || '_recharts-brush',
                    onChange: combineEventHandlers(_this.handleBrushChange, element.props.onChange),
                    data,
                    x: isNumber(element.props.x) ? element.props.x : offset.left,
                    y: isNumber(element.props.y)
                        ? element.props.y
                        : offset.top + offset.height + offset.brushBottom - (margin.bottom || 0),
                    width: isNumber(element.props.width) ? element.props.width : offset.width,
                    startIndex: dataStartIndex,
                    endIndex: dataEndIndex,
                    updateId: 'brush-'.concat(updateId)
                })
            })
            _defineProperty$1(
                _this,
                'renderReferenceElement',
                function (element, displayName, index2) {
                    if (!element) {
                        return null
                    }
                    var _this2 = _this,
                        clipPathId = _this2.clipPathId
                    var _this$state7 = _this.state,
                        xAxisMap = _this$state7.xAxisMap,
                        yAxisMap = _this$state7.yAxisMap,
                        offset = _this$state7.offset
                    var elementDefaultProps = element.type.defaultProps || {}
                    var _element$props2 = element.props,
                        _element$props2$xAxis = _element$props2.xAxisId,
                        xAxisId =
                            _element$props2$xAxis === void 0
                                ? elementDefaultProps.xAxisId
                                : _element$props2$xAxis,
                        _element$props2$yAxis = _element$props2.yAxisId,
                        yAxisId =
                            _element$props2$yAxis === void 0
                                ? elementDefaultProps.yAxisId
                                : _element$props2$yAxis
                    return /* @__PURE__ */ reactExports.cloneElement(element, {
                        key: element.key || ''.concat(displayName, '-').concat(index2),
                        xAxis: xAxisMap[xAxisId],
                        yAxis: yAxisMap[yAxisId],
                        viewBox: {
                            x: offset.left,
                            y: offset.top,
                            width: offset.width,
                            height: offset.height
                        },
                        clipPathId
                    })
                }
            )
            _defineProperty$1(_this, 'renderActivePoints', function (_ref10) {
                var item = _ref10.item,
                    activePoint = _ref10.activePoint,
                    basePoint = _ref10.basePoint,
                    childIndex = _ref10.childIndex,
                    isRange = _ref10.isRange
                var result = []
                var key = item.props.key
                var itemItemProps =
                    item.item.type.defaultProps !== void 0
                        ? _objectSpread(
                              _objectSpread({}, item.item.type.defaultProps),
                              item.item.props
                          )
                        : item.item.props
                var activeDot = itemItemProps.activeDot,
                    dataKey = itemItemProps.dataKey
                var dotProps = _objectSpread(
                    _objectSpread(
                        {
                            index: childIndex,
                            dataKey,
                            cx: activePoint.x,
                            cy: activePoint.y,
                            r: 4,
                            fill: getMainColorOfGraphicItem(item.item),
                            strokeWidth: 2,
                            stroke: '#fff',
                            payload: activePoint.payload,
                            value: activePoint.value
                        },
                        filterProps(activeDot, false)
                    ),
                    adaptEventHandlers(activeDot)
                )
                result.push(
                    CategoricalChartWrapper2.renderActiveDot(
                        activeDot,
                        dotProps,
                        ''.concat(key, '-activePoint-').concat(childIndex)
                    )
                )
                if (basePoint) {
                    result.push(
                        CategoricalChartWrapper2.renderActiveDot(
                            activeDot,
                            _objectSpread(
                                _objectSpread({}, dotProps),
                                {},
                                {
                                    cx: basePoint.x,
                                    cy: basePoint.y
                                }
                            ),
                            ''.concat(key, '-basePoint-').concat(childIndex)
                        )
                    )
                } else if (isRange) {
                    result.push(null)
                }
                return result
            })
            _defineProperty$1(_this, 'renderGraphicChild', function (element, displayName, index2) {
                var item = _this.filterFormatItem(element, displayName, index2)
                if (!item) {
                    return null
                }
                var tooltipEventType = _this.getTooltipEventType()
                var _this$state8 = _this.state,
                    isTooltipActive = _this$state8.isTooltipActive,
                    tooltipAxis = _this$state8.tooltipAxis,
                    activeTooltipIndex = _this$state8.activeTooltipIndex,
                    activeLabel = _this$state8.activeLabel
                var children = _this.props.children
                var tooltipItem = findChildByType(children, Tooltip)
                var _item$props = item.props,
                    points = _item$props.points,
                    isRange = _item$props.isRange,
                    baseLine = _item$props.baseLine
                var itemItemProps =
                    item.item.type.defaultProps !== void 0
                        ? _objectSpread(
                              _objectSpread({}, item.item.type.defaultProps),
                              item.item.props
                          )
                        : item.item.props
                var activeDot = itemItemProps.activeDot,
                    hide = itemItemProps.hide,
                    activeBar = itemItemProps.activeBar,
                    activeShape = itemItemProps.activeShape
                var hasActive = Boolean(
                    !hide &&
                        isTooltipActive &&
                        tooltipItem &&
                        (activeDot || activeBar || activeShape)
                )
                var itemEvents = {}
                if (
                    tooltipEventType !== 'axis' &&
                    tooltipItem &&
                    tooltipItem.props.trigger === 'click'
                ) {
                    itemEvents = {
                        onClick: combineEventHandlers(
                            _this.handleItemMouseEnter,
                            element.props.onClick
                        )
                    }
                } else if (tooltipEventType !== 'axis') {
                    itemEvents = {
                        onMouseLeave: combineEventHandlers(
                            _this.handleItemMouseLeave,
                            element.props.onMouseLeave
                        ),
                        onMouseEnter: combineEventHandlers(
                            _this.handleItemMouseEnter,
                            element.props.onMouseEnter
                        )
                    }
                }
                var graphicalItem = /* @__PURE__ */ reactExports.cloneElement(
                    element,
                    _objectSpread(_objectSpread({}, item.props), itemEvents)
                )
                function findWithPayload(entry) {
                    return typeof tooltipAxis.dataKey === 'function'
                        ? tooltipAxis.dataKey(entry.payload)
                        : null
                }
                if (hasActive) {
                    if (activeTooltipIndex >= 0) {
                        var activePoint, basePoint
                        if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
                            var specifiedKey =
                                typeof tooltipAxis.dataKey === 'function'
                                    ? findWithPayload
                                    : 'payload.'.concat(tooltipAxis.dataKey.toString())
                            activePoint = findEntryInArray(points, specifiedKey, activeLabel)
                            basePoint =
                                isRange &&
                                baseLine &&
                                findEntryInArray(baseLine, specifiedKey, activeLabel)
                        } else {
                            activePoint =
                                points === null || points === void 0
                                    ? void 0
                                    : points[activeTooltipIndex]
                            basePoint = isRange && baseLine && baseLine[activeTooltipIndex]
                        }
                        if (activeShape || activeBar) {
                            var activeIndex =
                                element.props.activeIndex !== void 0
                                    ? element.props.activeIndex
                                    : activeTooltipIndex
                            return [
                                /* @__PURE__ */ reactExports.cloneElement(
                                    element,
                                    _objectSpread(
                                        _objectSpread(_objectSpread({}, item.props), itemEvents),
                                        {},
                                        {
                                            activeIndex
                                        }
                                    )
                                ),
                                null,
                                null
                            ]
                        }
                        if (!isNil(activePoint)) {
                            return [graphicalItem].concat(
                                _toConsumableArray$1(
                                    _this.renderActivePoints({
                                        item,
                                        activePoint,
                                        basePoint,
                                        childIndex: activeTooltipIndex,
                                        isRange
                                    })
                                )
                            )
                        }
                    } else {
                        var _this$getItemByXY
                        var _ref11 =
                                (_this$getItemByXY = _this.getItemByXY(
                                    _this.state.activeCoordinate
                                )) !== null && _this$getItemByXY !== void 0
                                    ? _this$getItemByXY
                                    : {
                                          graphicalItem
                                      },
                            _ref11$graphicalItem = _ref11.graphicalItem,
                            _ref11$graphicalItem$ = _ref11$graphicalItem.item,
                            xyItem =
                                _ref11$graphicalItem$ === void 0 ? element : _ref11$graphicalItem$,
                            childIndex = _ref11$graphicalItem.childIndex
                        var elementProps = _objectSpread(
                            _objectSpread(_objectSpread({}, item.props), itemEvents),
                            {},
                            {
                                activeIndex: childIndex
                            }
                        )
                        return [
                            /* @__PURE__ */ reactExports.cloneElement(xyItem, elementProps),
                            null,
                            null
                        ]
                    }
                }
                if (isRange) {
                    return [graphicalItem, null, null]
                }
                return [graphicalItem, null]
            })
            _defineProperty$1(_this, 'renderCustomized', function (element, displayName, index2) {
                return /* @__PURE__ */ reactExports.cloneElement(
                    element,
                    _objectSpread(
                        _objectSpread(
                            {
                                key: 'recharts-customized-'.concat(index2)
                            },
                            _this.props
                        ),
                        _this.state
                    )
                )
            })
            _defineProperty$1(_this, 'renderMap', {
                CartesianGrid: {
                    handler: renderAsIs,
                    once: true
                },
                ReferenceArea: {
                    handler: _this.renderReferenceElement
                },
                ReferenceLine: {
                    handler: renderAsIs
                },
                ReferenceDot: {
                    handler: _this.renderReferenceElement
                },
                XAxis: {
                    handler: renderAsIs
                },
                YAxis: {
                    handler: renderAsIs
                },
                Brush: {
                    handler: _this.renderBrush,
                    once: true
                },
                Bar: {
                    handler: _this.renderGraphicChild
                },
                Line: {
                    handler: _this.renderGraphicChild
                },
                Area: {
                    handler: _this.renderGraphicChild
                },
                Radar: {
                    handler: _this.renderGraphicChild
                },
                RadialBar: {
                    handler: _this.renderGraphicChild
                },
                Scatter: {
                    handler: _this.renderGraphicChild
                },
                Pie: {
                    handler: _this.renderGraphicChild
                },
                Funnel: {
                    handler: _this.renderGraphicChild
                },
                Tooltip: {
                    handler: _this.renderCursor,
                    once: true
                },
                PolarGrid: {
                    handler: _this.renderPolarGrid,
                    once: true
                },
                PolarAngleAxis: {
                    handler: _this.renderPolarAxis
                },
                PolarRadiusAxis: {
                    handler: _this.renderPolarAxis
                },
                Customized: {
                    handler: _this.renderCustomized
                }
            })
            _this.clipPathId = ''.concat(
                (_props$id = _props.id) !== null && _props$id !== void 0
                    ? _props$id
                    : uniqueId('recharts'),
                '-clip'
            )
            _this.throttleTriggeredAfterMouseMove = throttle(
                _this.triggeredAfterMouseMove,
                (_props$throttleDelay = _props.throttleDelay) !== null &&
                    _props$throttleDelay !== void 0
                    ? _props$throttleDelay
                    : 1e3 / 60
            )
            _this.state = {}
            return _this
        }
        _inherits$1(CategoricalChartWrapper2, _Component)
        return _createClass$1(CategoricalChartWrapper2, [
            {
                key: 'componentDidMount',
                value: function componentDidMount() {
                    var _this$props$margin$le, _this$props$margin$to
                    this.addListener()
                    this.accessibilityManager.setDetails({
                        container: this.container,
                        offset: {
                            left:
                                (_this$props$margin$le = this.props.margin.left) !== null &&
                                _this$props$margin$le !== void 0
                                    ? _this$props$margin$le
                                    : 0,
                            top:
                                (_this$props$margin$to = this.props.margin.top) !== null &&
                                _this$props$margin$to !== void 0
                                    ? _this$props$margin$to
                                    : 0
                        },
                        coordinateList: this.state.tooltipTicks,
                        mouseHandlerCallback: this.triggeredAfterMouseMove,
                        layout: this.props.layout
                    })
                    this.displayDefaultTooltip()
                }
            },
            {
                key: 'displayDefaultTooltip',
                value: function displayDefaultTooltip() {
                    var _this$props5 = this.props,
                        children = _this$props5.children,
                        data = _this$props5.data,
                        height = _this$props5.height,
                        layout = _this$props5.layout
                    var tooltipElem = findChildByType(children, Tooltip)
                    if (!tooltipElem) {
                        return
                    }
                    var defaultIndex = tooltipElem.props.defaultIndex
                    if (
                        typeof defaultIndex !== 'number' ||
                        defaultIndex < 0 ||
                        defaultIndex > this.state.tooltipTicks.length - 1
                    ) {
                        return
                    }
                    var activeLabel =
                        this.state.tooltipTicks[defaultIndex] &&
                        this.state.tooltipTicks[defaultIndex].value
                    var activePayload = getTooltipContent(
                        this.state,
                        data,
                        defaultIndex,
                        activeLabel
                    )
                    var independentAxisCoord = this.state.tooltipTicks[defaultIndex].coordinate
                    var dependentAxisCoord = (this.state.offset.top + height) / 2
                    var isHorizontal = layout === 'horizontal'
                    var activeCoordinate = isHorizontal
                        ? {
                              x: independentAxisCoord,
                              y: dependentAxisCoord
                          }
                        : {
                              y: independentAxisCoord,
                              x: dependentAxisCoord
                          }
                    var scatterPlotElement = this.state.formattedGraphicalItems.find(
                        function (_ref12) {
                            var item = _ref12.item
                            return item.type.name === 'Scatter'
                        }
                    )
                    if (scatterPlotElement) {
                        activeCoordinate = _objectSpread(
                            _objectSpread({}, activeCoordinate),
                            scatterPlotElement.props.points[defaultIndex].tooltipPosition
                        )
                        activePayload = scatterPlotElement.props.points[defaultIndex].tooltipPayload
                    }
                    var nextState = {
                        activeTooltipIndex: defaultIndex,
                        isTooltipActive: true,
                        activeLabel,
                        activePayload,
                        activeCoordinate
                    }
                    this.setState(nextState)
                    this.renderCursor(tooltipElem)
                    this.accessibilityManager.setIndex(defaultIndex)
                }
            },
            {
                key: 'getSnapshotBeforeUpdate',
                value: function getSnapshotBeforeUpdate(prevProps, prevState) {
                    if (!this.props.accessibilityLayer) {
                        return null
                    }
                    if (this.state.tooltipTicks !== prevState.tooltipTicks) {
                        this.accessibilityManager.setDetails({
                            coordinateList: this.state.tooltipTicks
                        })
                    }
                    if (this.props.layout !== prevProps.layout) {
                        this.accessibilityManager.setDetails({
                            layout: this.props.layout
                        })
                    }
                    if (this.props.margin !== prevProps.margin) {
                        var _this$props$margin$le2, _this$props$margin$to2
                        this.accessibilityManager.setDetails({
                            offset: {
                                left:
                                    (_this$props$margin$le2 = this.props.margin.left) !== null &&
                                    _this$props$margin$le2 !== void 0
                                        ? _this$props$margin$le2
                                        : 0,
                                top:
                                    (_this$props$margin$to2 = this.props.margin.top) !== null &&
                                    _this$props$margin$to2 !== void 0
                                        ? _this$props$margin$to2
                                        : 0
                            }
                        })
                    }
                    return null
                }
            },
            {
                key: 'componentDidUpdate',
                value: function componentDidUpdate(prevProps) {
                    if (
                        !isChildrenEqual(
                            [findChildByType(prevProps.children, Tooltip)],
                            [findChildByType(this.props.children, Tooltip)]
                        )
                    ) {
                        this.displayDefaultTooltip()
                    }
                }
            },
            {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                    this.removeListener()
                    this.throttleTriggeredAfterMouseMove.cancel()
                }
            },
            {
                key: 'getTooltipEventType',
                value: function getTooltipEventType() {
                    var tooltipItem = findChildByType(this.props.children, Tooltip)
                    if (tooltipItem && typeof tooltipItem.props.shared === 'boolean') {
                        var eventType = tooltipItem.props.shared ? 'axis' : 'item'
                        return validateTooltipEventTypes.indexOf(eventType) >= 0
                            ? eventType
                            : defaultTooltipEventType
                    }
                    return defaultTooltipEventType
                }
                /**
                 * Get the information of mouse in chart, return null when the mouse is not in the chart
                 * @param  {MousePointer} event    The event object
                 * @return {Object}          Mouse data
                 */
            },
            {
                key: 'getMouseInfo',
                value: function getMouseInfo(event) {
                    if (!this.container) {
                        return null
                    }
                    var element = this.container
                    var boundingRect = element.getBoundingClientRect()
                    var containerOffset = getOffset(boundingRect)
                    var e = {
                        chartX: Math.round(event.pageX - containerOffset.left),
                        chartY: Math.round(event.pageY - containerOffset.top)
                    }
                    var scale = boundingRect.width / element.offsetWidth || 1
                    var rangeObj = this.inRange(e.chartX, e.chartY, scale)
                    if (!rangeObj) {
                        return null
                    }
                    var _this$state9 = this.state,
                        xAxisMap = _this$state9.xAxisMap,
                        yAxisMap = _this$state9.yAxisMap
                    var tooltipEventType = this.getTooltipEventType()
                    var toolTipData = getTooltipData(
                        this.state,
                        this.props.data,
                        this.props.layout,
                        rangeObj
                    )
                    if (tooltipEventType !== 'axis' && xAxisMap && yAxisMap) {
                        var xScale = getAnyElementOfObject(xAxisMap).scale
                        var yScale = getAnyElementOfObject(yAxisMap).scale
                        var xValue = xScale && xScale.invert ? xScale.invert(e.chartX) : null
                        var yValue = yScale && yScale.invert ? yScale.invert(e.chartY) : null
                        return _objectSpread(
                            _objectSpread({}, e),
                            {},
                            {
                                xValue,
                                yValue
                            },
                            toolTipData
                        )
                    }
                    if (toolTipData) {
                        return _objectSpread(_objectSpread({}, e), toolTipData)
                    }
                    return null
                }
            },
            {
                key: 'inRange',
                value: function inRange(x2, y2) {
                    var scale = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1
                    var layout = this.props.layout
                    var scaledX = x2 / scale,
                        scaledY = y2 / scale
                    if (layout === 'horizontal' || layout === 'vertical') {
                        var offset = this.state.offset
                        var isInRange =
                            scaledX >= offset.left &&
                            scaledX <= offset.left + offset.width &&
                            scaledY >= offset.top &&
                            scaledY <= offset.top + offset.height
                        return isInRange
                            ? {
                                  x: scaledX,
                                  y: scaledY
                              }
                            : null
                    }
                    var _this$state10 = this.state,
                        angleAxisMap = _this$state10.angleAxisMap,
                        radiusAxisMap = _this$state10.radiusAxisMap
                    if (angleAxisMap && radiusAxisMap) {
                        var angleAxis = getAnyElementOfObject(angleAxisMap)
                        return inRangeOfSector(
                            {
                                x: scaledX,
                                y: scaledY
                            },
                            angleAxis
                        )
                    }
                    return null
                }
            },
            {
                key: 'parseEventsOfWrapper',
                value: function parseEventsOfWrapper() {
                    var children = this.props.children
                    var tooltipEventType = this.getTooltipEventType()
                    var tooltipItem = findChildByType(children, Tooltip)
                    var tooltipEvents = {}
                    if (tooltipItem && tooltipEventType === 'axis') {
                        if (tooltipItem.props.trigger === 'click') {
                            tooltipEvents = {
                                onClick: this.handleClick
                            }
                        } else {
                            tooltipEvents = {
                                onMouseEnter: this.handleMouseEnter,
                                onDoubleClick: this.handleDoubleClick,
                                onMouseMove: this.handleMouseMove,
                                onMouseLeave: this.handleMouseLeave,
                                onTouchMove: this.handleTouchMove,
                                onTouchStart: this.handleTouchStart,
                                onTouchEnd: this.handleTouchEnd,
                                onContextMenu: this.handleContextMenu
                            }
                        }
                    }
                    var outerEvents = adaptEventHandlers(this.props, this.handleOuterEvent)
                    return _objectSpread(_objectSpread({}, outerEvents), tooltipEvents)
                }
            },
            {
                key: 'addListener',
                value: function addListener() {
                    eventCenter.on(SYNC_EVENT, this.handleReceiveSyncEvent)
                }
            },
            {
                key: 'removeListener',
                value: function removeListener() {
                    eventCenter.removeListener(SYNC_EVENT, this.handleReceiveSyncEvent)
                }
            },
            {
                key: 'filterFormatItem',
                value: function filterFormatItem(item, displayName, childIndex) {
                    var formattedGraphicalItems = this.state.formattedGraphicalItems
                    for (var i = 0, len = formattedGraphicalItems.length; i < len; i++) {
                        var entry = formattedGraphicalItems[i]
                        if (
                            entry.item === item ||
                            entry.props.key === item.key ||
                            (displayName === getDisplayName(entry.item.type) &&
                                childIndex === entry.childIndex)
                        ) {
                            return entry
                        }
                    }
                    return null
                }
            },
            {
                key: 'renderClipPath',
                value: function renderClipPath() {
                    var clipPathId = this.clipPathId
                    var _this$state$offset = this.state.offset,
                        left = _this$state$offset.left,
                        top = _this$state$offset.top,
                        height = _this$state$offset.height,
                        width = _this$state$offset.width
                    return /* @__PURE__ */ React.createElement(
                        'defs',
                        null,
                        /* @__PURE__ */ React.createElement(
                            'clipPath',
                            {
                                id: clipPathId
                            },
                            /* @__PURE__ */ React.createElement('rect', {
                                x: left,
                                y: top,
                                height,
                                width
                            })
                        )
                    )
                }
            },
            {
                key: 'getXScales',
                value: function getXScales() {
                    var xAxisMap = this.state.xAxisMap
                    return xAxisMap
                        ? Object.entries(xAxisMap).reduce(function (res, _ref13) {
                              var _ref14 = _slicedToArray$1(_ref13, 2),
                                  axisId = _ref14[0],
                                  axisProps = _ref14[1]
                              return _objectSpread(
                                  _objectSpread({}, res),
                                  {},
                                  _defineProperty$1({}, axisId, axisProps.scale)
                              )
                          }, {})
                        : null
                }
            },
            {
                key: 'getYScales',
                value: function getYScales() {
                    var yAxisMap = this.state.yAxisMap
                    return yAxisMap
                        ? Object.entries(yAxisMap).reduce(function (res, _ref15) {
                              var _ref16 = _slicedToArray$1(_ref15, 2),
                                  axisId = _ref16[0],
                                  axisProps = _ref16[1]
                              return _objectSpread(
                                  _objectSpread({}, res),
                                  {},
                                  _defineProperty$1({}, axisId, axisProps.scale)
                              )
                          }, {})
                        : null
                }
            },
            {
                key: 'getXScaleByAxisId',
                value: function getXScaleByAxisId(axisId) {
                    var _this$state$xAxisMap
                    return (_this$state$xAxisMap = this.state.xAxisMap) === null ||
                        _this$state$xAxisMap === void 0 ||
                        (_this$state$xAxisMap = _this$state$xAxisMap[axisId]) === null ||
                        _this$state$xAxisMap === void 0
                        ? void 0
                        : _this$state$xAxisMap.scale
                }
            },
            {
                key: 'getYScaleByAxisId',
                value: function getYScaleByAxisId(axisId) {
                    var _this$state$yAxisMap
                    return (_this$state$yAxisMap = this.state.yAxisMap) === null ||
                        _this$state$yAxisMap === void 0 ||
                        (_this$state$yAxisMap = _this$state$yAxisMap[axisId]) === null ||
                        _this$state$yAxisMap === void 0
                        ? void 0
                        : _this$state$yAxisMap.scale
                }
            },
            {
                key: 'getItemByXY',
                value: function getItemByXY(chartXY) {
                    var _this$state11 = this.state,
                        formattedGraphicalItems = _this$state11.formattedGraphicalItems,
                        activeItem = _this$state11.activeItem
                    if (formattedGraphicalItems && formattedGraphicalItems.length) {
                        for (var i = 0, len = formattedGraphicalItems.length; i < len; i++) {
                            var graphicalItem = formattedGraphicalItems[i]
                            var props = graphicalItem.props,
                                item = graphicalItem.item
                            var itemProps =
                                item.type.defaultProps !== void 0
                                    ? _objectSpread(
                                          _objectSpread({}, item.type.defaultProps),
                                          item.props
                                      )
                                    : item.props
                            var itemDisplayName = getDisplayName(item.type)
                            if (itemDisplayName === 'Bar') {
                                var activeBarItem = (props.data || []).find(function (entry) {
                                    return isInRectangle(chartXY, entry)
                                })
                                if (activeBarItem) {
                                    return {
                                        graphicalItem,
                                        payload: activeBarItem
                                    }
                                }
                            } else if (itemDisplayName === 'RadialBar') {
                                var _activeBarItem = (props.data || []).find(function (entry) {
                                    return inRangeOfSector(chartXY, entry)
                                })
                                if (_activeBarItem) {
                                    return {
                                        graphicalItem,
                                        payload: _activeBarItem
                                    }
                                }
                            } else if (
                                isFunnel(graphicalItem, activeItem) ||
                                isPie(graphicalItem, activeItem) ||
                                isScatter(graphicalItem, activeItem)
                            ) {
                                var activeIndex = getActiveShapeIndexForTooltip({
                                    graphicalItem,
                                    activeTooltipItem: activeItem,
                                    itemData: itemProps.data
                                })
                                var childIndex =
                                    itemProps.activeIndex === void 0
                                        ? activeIndex
                                        : itemProps.activeIndex
                                return {
                                    graphicalItem: _objectSpread(
                                        _objectSpread({}, graphicalItem),
                                        {},
                                        {
                                            childIndex
                                        }
                                    ),
                                    payload: isScatter(graphicalItem, activeItem)
                                        ? itemProps.data[activeIndex]
                                        : graphicalItem.props.data[activeIndex]
                                }
                            }
                        }
                    }
                    return null
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _this3 = this
                    if (!validateWidthHeight(this)) {
                        return null
                    }
                    var _this$props6 = this.props,
                        children = _this$props6.children,
                        className = _this$props6.className,
                        width = _this$props6.width,
                        height = _this$props6.height,
                        style = _this$props6.style,
                        compact = _this$props6.compact,
                        title = _this$props6.title,
                        desc = _this$props6.desc,
                        others = _objectWithoutProperties$1(_this$props6, _excluded2$2)
                    var attrs = filterProps(others, false)
                    if (compact) {
                        return /* @__PURE__ */ React.createElement(
                            ChartLayoutContextProvider,
                            {
                                state: this.state,
                                width: this.props.width,
                                height: this.props.height,
                                clipPathId: this.clipPathId
                            },
                            /* @__PURE__ */ React.createElement(
                                Surface,
                                _extends({}, attrs, {
                                    width,
                                    height,
                                    title,
                                    desc
                                }),
                                this.renderClipPath(),
                                renderByOrder(children, this.renderMap)
                            )
                        )
                    }
                    if (this.props.accessibilityLayer) {
                        var _this$props$tabIndex, _this$props$role
                        attrs.tabIndex =
                            (_this$props$tabIndex = this.props.tabIndex) !== null &&
                            _this$props$tabIndex !== void 0
                                ? _this$props$tabIndex
                                : 0
                        attrs.role =
                            (_this$props$role = this.props.role) !== null &&
                            _this$props$role !== void 0
                                ? _this$props$role
                                : 'application'
                        attrs.onKeyDown = function (e) {
                            _this3.accessibilityManager.keyboardEvent(e)
                        }
                        attrs.onFocus = function () {
                            _this3.accessibilityManager.focus()
                        }
                    }
                    var events = this.parseEventsOfWrapper()
                    return /* @__PURE__ */ React.createElement(
                        ChartLayoutContextProvider,
                        {
                            state: this.state,
                            width: this.props.width,
                            height: this.props.height,
                            clipPathId: this.clipPathId
                        },
                        /* @__PURE__ */ React.createElement(
                            'div',
                            _extends(
                                {
                                    className: clsx('recharts-wrapper', className),
                                    style: _objectSpread(
                                        {
                                            position: 'relative',
                                            cursor: 'default',
                                            width,
                                            height
                                        },
                                        style
                                    )
                                },
                                events,
                                {
                                    ref: function ref(node2) {
                                        _this3.container = node2
                                    }
                                }
                            ),
                            /* @__PURE__ */ React.createElement(
                                Surface,
                                _extends({}, attrs, {
                                    width,
                                    height,
                                    title,
                                    desc,
                                    style: FULL_WIDTH_AND_HEIGHT
                                }),
                                this.renderClipPath(),
                                renderByOrder(children, this.renderMap)
                            ),
                            this.renderLegend(),
                            this.renderTooltip()
                        )
                    )
                }
            }
        ])
    })(reactExports.Component)
    _defineProperty$1(CategoricalChartWrapper, 'displayName', chartName)
    _defineProperty$1(
        CategoricalChartWrapper,
        'defaultProps',
        _objectSpread(
            {
                layout: 'horizontal',
                stackOffset: 'none',
                barCategoryGap: '10%',
                barGap: 4,
                margin: {
                    top: 5,
                    right: 5,
                    bottom: 5,
                    left: 5
                },
                reverseStackOrder: false,
                syncMethod: 'index'
            },
            defaultProps2
        )
    )
    _defineProperty$1(
        CategoricalChartWrapper,
        'getDerivedStateFromProps',
        function (nextProps, prevState) {
            var dataKey = nextProps.dataKey,
                data = nextProps.data,
                children = nextProps.children,
                width = nextProps.width,
                height = nextProps.height,
                layout = nextProps.layout,
                stackOffset = nextProps.stackOffset,
                margin = nextProps.margin
            var dataStartIndex = prevState.dataStartIndex,
                dataEndIndex = prevState.dataEndIndex
            if (prevState.updateId === void 0) {
                var defaultState = createDefaultState(nextProps)
                return _objectSpread(
                    _objectSpread(
                        _objectSpread({}, defaultState),
                        {},
                        {
                            updateId: 0
                        },
                        updateStateOfAxisMapsOffsetAndStackGroups(
                            _objectSpread(
                                _objectSpread(
                                    {
                                        props: nextProps
                                    },
                                    defaultState
                                ),
                                {},
                                {
                                    updateId: 0
                                }
                            ),
                            prevState
                        )
                    ),
                    {},
                    {
                        prevDataKey: dataKey,
                        prevData: data,
                        prevWidth: width,
                        prevHeight: height,
                        prevLayout: layout,
                        prevStackOffset: stackOffset,
                        prevMargin: margin,
                        prevChildren: children
                    }
                )
            }
            if (
                dataKey !== prevState.prevDataKey ||
                data !== prevState.prevData ||
                width !== prevState.prevWidth ||
                height !== prevState.prevHeight ||
                layout !== prevState.prevLayout ||
                stackOffset !== prevState.prevStackOffset ||
                !shallowEqual(margin, prevState.prevMargin)
            ) {
                var _defaultState = createDefaultState(nextProps)
                var keepFromPrevState = {
                    // (chartX, chartY) are (0,0) in default state, but we want to keep the last mouse position to avoid
                    // any flickering
                    chartX: prevState.chartX,
                    chartY: prevState.chartY,
                    // The tooltip should stay active when it was active in the previous render. If this is not
                    // the case, the tooltip disappears and immediately re-appears, causing a flickering effect
                    isTooltipActive: prevState.isTooltipActive
                }
                var updatesToState = _objectSpread(
                    _objectSpread({}, getTooltipData(prevState, data, layout)),
                    {},
                    {
                        updateId: prevState.updateId + 1
                    }
                )
                var newState = _objectSpread(
                    _objectSpread(_objectSpread({}, _defaultState), keepFromPrevState),
                    updatesToState
                )
                return _objectSpread(
                    _objectSpread(
                        _objectSpread({}, newState),
                        updateStateOfAxisMapsOffsetAndStackGroups(
                            _objectSpread(
                                {
                                    props: nextProps
                                },
                                newState
                            ),
                            prevState
                        )
                    ),
                    {},
                    {
                        prevDataKey: dataKey,
                        prevData: data,
                        prevWidth: width,
                        prevHeight: height,
                        prevLayout: layout,
                        prevStackOffset: stackOffset,
                        prevMargin: margin,
                        prevChildren: children
                    }
                )
            }
            if (!isChildrenEqual(children, prevState.prevChildren)) {
                var _brush$props$startInd, _brush$props, _brush$props$endIndex, _brush$props2
                var brush = findChildByType(children, Brush)
                var startIndex = brush
                    ? (_brush$props$startInd =
                          (_brush$props = brush.props) === null || _brush$props === void 0
                              ? void 0
                              : _brush$props.startIndex) !== null &&
                      _brush$props$startInd !== void 0
                        ? _brush$props$startInd
                        : dataStartIndex
                    : dataStartIndex
                var endIndex = brush
                    ? (_brush$props$endIndex =
                          (_brush$props2 = brush.props) === null || _brush$props2 === void 0
                              ? void 0
                              : _brush$props2.endIndex) !== null && _brush$props$endIndex !== void 0
                        ? _brush$props$endIndex
                        : dataEndIndex
                    : dataEndIndex
                var hasDifferentStartOrEndIndex =
                    startIndex !== dataStartIndex || endIndex !== dataEndIndex
                var hasGlobalData = !isNil(data)
                var newUpdateId =
                    hasGlobalData && !hasDifferentStartOrEndIndex
                        ? prevState.updateId
                        : prevState.updateId + 1
                return _objectSpread(
                    _objectSpread(
                        {
                            updateId: newUpdateId
                        },
                        updateStateOfAxisMapsOffsetAndStackGroups(
                            _objectSpread(
                                _objectSpread(
                                    {
                                        props: nextProps
                                    },
                                    prevState
                                ),
                                {},
                                {
                                    updateId: newUpdateId,
                                    dataStartIndex: startIndex,
                                    dataEndIndex: endIndex
                                }
                            ),
                            prevState
                        )
                    ),
                    {},
                    {
                        prevChildren: children,
                        dataStartIndex: startIndex,
                        dataEndIndex: endIndex
                    }
                )
            }
            return null
        }
    )
    _defineProperty$1(CategoricalChartWrapper, 'renderActiveDot', function (option, props, key) {
        var dot
        if (/* @__PURE__ */ reactExports.isValidElement(option)) {
            dot = /* @__PURE__ */ reactExports.cloneElement(option, props)
        } else if (isFunction(option)) {
            dot = option(props)
        } else {
            dot = /* @__PURE__ */ React.createElement(Dot, props)
        }
        return /* @__PURE__ */ React.createElement(
            Layer,
            {
                className: 'recharts-active-dot',
                key
            },
            dot
        )
    })
    var CategoricalChart = /* @__PURE__ */ reactExports.forwardRef(
        function CategoricalChart2(props, ref) {
            return /* @__PURE__ */ React.createElement(
                CategoricalChartWrapper,
                _extends({}, props, {
                    ref
                })
            )
        }
    )
    CategoricalChart.displayName = CategoricalChartWrapper.displayName
    return CategoricalChart
}
var LineChart = generateCategoricalChart({
    chartName: 'LineChart',
    GraphicalChild: Line,
    axisComponents: [
        {
            axisType: 'xAxis',
            AxisComp: XAxis
        },
        {
            axisType: 'yAxis',
            AxisComp: YAxis
        }
    ],
    formatAxisMap: formatAxisMap2
})
var BarChart = generateCategoricalChart({
    chartName: 'BarChart',
    GraphicalChild: Bar,
    defaultTooltipEventType: 'axis',
    validateTooltipEventTypes: ['axis', 'item'],
    axisComponents: [
        {
            axisType: 'xAxis',
            AxisComp: XAxis
        },
        {
            axisType: 'yAxis',
            AxisComp: YAxis
        }
    ],
    formatAxisMap: formatAxisMap2
})
var PieChart = generateCategoricalChart({
    chartName: 'PieChart',
    GraphicalChild: Pie,
    validateTooltipEventTypes: ['item'],
    defaultTooltipEventType: 'item',
    legendContent: 'children',
    axisComponents: [
        {
            axisType: 'angleAxis',
            AxisComp: PolarAngleAxis
        },
        {
            axisType: 'radiusAxis',
            AxisComp: PolarRadiusAxis
        }
    ],
    formatAxisMap: formatAxisMap$1,
    defaultProps: {
        layout: 'centric',
        startAngle: 0,
        endAngle: 360,
        cx: '50%',
        cy: '50%',
        innerRadius: 0,
        outerRadius: '80%'
    }
})
var RadarChart = generateCategoricalChart({
    chartName: 'RadarChart',
    GraphicalChild: Radar,
    axisComponents: [
        {
            axisType: 'angleAxis',
            AxisComp: PolarAngleAxis
        },
        {
            axisType: 'radiusAxis',
            AxisComp: PolarRadiusAxis
        }
    ],
    formatAxisMap: formatAxisMap$1,
    defaultProps: {
        layout: 'centric',
        startAngle: 90,
        endAngle: -270,
        cx: '50%',
        cy: '50%',
        innerRadius: 0,
        outerRadius: '80%'
    }
})
var AreaChart = generateCategoricalChart({
    chartName: 'AreaChart',
    GraphicalChild: Area,
    axisComponents: [
        {
            axisType: 'xAxis',
            AxisComp: XAxis
        },
        {
            axisType: 'yAxis',
            AxisComp: YAxis
        }
    ],
    formatAxisMap: formatAxisMap2
})
const COLORS = [
    '#00C853',
    // Green
    '#00B8D4',
    // Blue
    '#FFAB00',
    // Yellow
    '#D50000',
    // Red
    '#000000'
    // Primary
]
const hexToRgba = (hex2, alpha3) => {
    const r2 = parseInt(hex2.slice(1, 3), 16)
    const g = parseInt(hex2.slice(3, 5), 16)
    const b = parseInt(hex2.slice(5, 7), 16)
    return `rgba(${r2}, ${g}, ${b}, ${alpha3})`
}
const selectStyles = (isValid, required = true) => ({
    control: (provided, state) => {
        const showError = required && !isValid
        return {
            ...provided,
            borderColor: showError
                ? hexToRgba(COLORS[3], 1)
                : state.isFocused
                  ? hexToRgba(COLORS[4], 0.5)
                  : '#ced4da',
            boxShadow: state.isFocused
                ? showError
                    ? `0 0 0 0.25rem ${hexToRgba(COLORS[3], 0.25)}`
                    : `0 0 0 0.25rem ${hexToRgba(COLORS[4], 0.25)}`
                : null,
            '&:hover': {
                backgroundColor: '#f7f8f9'
            },
            borderRadius: '0.375rem',
            minHeight: '38px'
        }
    },
    option: (provided, state) => ({
        ...provided,
        backgroundColor: state.isSelected
            ? COLORS[4]
            : state.isFocused
              ? hexToRgba(COLORS[4], 0.1)
              : null,
        color: state.isSelected ? '#fff' : '#212529'
    }),
    singleValue: (provided) => ({
        ...provided,
        color: '#212529'
    }),
    placeholder: (provided) => ({
        ...provided,
        color: '#6c757d'
    }),
    menuPortal: (base) => ({
        ...base,
        zIndex: 9999
    })
})
function formatMinutesVerbose(minutes) {
    if (minutes === null || minutes === void 0 || minutes === 0) return '0 min'
    minutes = Math.abs(minutes)
    let seconds = 0
    if (minutes < 1) {
        seconds = Math.round(minutes * 60)
    }
    const totalMinutes = minutes >= 1 ? Math.round(minutes) : 0
    const hours = Math.floor(totalMinutes / 60)
    const remainingMinutes = totalMinutes % 60
    const parts = []
    if (hours > 0) {
        parts.push(`${hours} hr${hours !== 1 ? 's' : ''}`)
    }
    if (remainingMinutes > 0 || (hours === 0 && seconds === 0)) {
        parts.push(`${remainingMinutes} min${remainingMinutes !== 1 ? 's' : ''}`)
    }
    if (seconds > 0) {
        parts.push(`${seconds} sec${seconds !== 1 ? 's' : ''}`)
    }
    return parts.join(' ')
}
function CustomBarChart({ data, hasFilter = false }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'w-100',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, {
            width: '100%',
            height: 350,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(BarChart, {
                data,
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, {
                        strokeDasharray: '3 3'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, {
                        dataKey: 'name',
                        tick: { fontSize: '12px' }
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {
                        contentStyle: {
                            fontSize: '14px',
                            fontWeight: 'bold',
                            borderRadius: '10px',
                            color: '#333'
                        },
                        labelFormatter: (label) => label,
                        formatter: (value, name) => [
                            formatMinutesVerbose(value),
                            name.replace(/_/g, ' ').replace(/\b\w/g, (c2) => c2.toUpperCase())
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {
                        formatter: (value) =>
                            value.replace(/_/g, ' ').replace(/\b\w/g, (c2) => c2.toUpperCase())
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, {
                        dataKey: 'previous_resolution_time',
                        name: 'Previous Resolution Time',
                        fill: COLORS[2],
                        barSize: 30,
                        radius: [10, 10, 0, 0],
                        activeBar: /* @__PURE__ */ jsxRuntimeExports.jsx(Rectangle, {
                            stroke: '#000000'
                        })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, {
                        dataKey: 'current_resolution_time',
                        name: 'Current Resolution Time',
                        fill: COLORS[0],
                        barSize: 30,
                        radius: [10, 10, 0, 0],
                        activeBar: /* @__PURE__ */ jsxRuntimeExports.jsx(Rectangle, {
                            stroke: '#000000'
                        })
                    })
                ]
            })
        })
    })
}
const getFilteredData = (data, filter2) => {
    const now = /* @__PURE__ */ new Date()
    return data.filter((item) => {
        const itemDate = new Date(item.date)
        switch (filter2) {
            case 'weekly': {
                const oneWeekAgo = new Date(now)
                oneWeekAgo.setDate(now.getDate() - 7)
                return itemDate >= oneWeekAgo
            }
            case 'monthly': {
                const oneMonthAgo = new Date(now)
                oneMonthAgo.setMonth(now.getMonth() - 1)
                return itemDate >= oneMonthAgo
            }
            case 'quarterly': {
                const threeMonthsAgo = new Date(now)
                threeMonthsAgo.setMonth(now.getMonth() - 3)
                return itemDate >= threeMonthsAgo
            }
            case 'yearly': {
                const oneYearAgo = new Date(now)
                oneYearAgo.setFullYear(now.getFullYear() - 1)
                return itemDate >= oneYearAgo
            }
            default:
                return true
        }
    })
}
function CustomLineChart({ data, hasFilter = false }) {
    const [filter2, setFilter] = reactExports.useState('monthly')
    const filteredData = reactExports.useMemo(() => getFilteredData(data, filter2), [data, filter2])
    const lineKeys =
        filteredData.length > 0
            ? Object.keys(filteredData[0]).filter((key) => key !== 'name' && key !== 'date')
            : []
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className: 'w-100',
        children: [
            hasFilter &&
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'mb-2 d-flex justify-content-center',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                            htmlFor: 'chartFilter',
                            className: 'form-label me-2 mb-0 align-self-center',
                            children: 'Filter:'
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('select', {
                            id: 'chartFilter',
                            className: 'form-select form-select-sm w-auto',
                            value: filter2,
                            onChange: (e) => setFilter(e.target.value),
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                    value: 'weekly',
                                    children: 'Last 7 Days'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                    value: 'monthly',
                                    children: 'Last 30 Days'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                    value: 'quarterly',
                                    children: 'Last 90 Days'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                    value: 'yearly',
                                    children: 'Last Year'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                    value: 'all',
                                    children: 'All'
                                })
                            ]
                        })
                    ]
                }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, {
                width: '100%',
                height: 350,
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs(LineChart, {
                    data: filteredData,
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, {
                            strokeDasharray: '3 3'
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, {
                            dataKey: 'name',
                            padding: { left: 10, right: 10 }
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {
                            contentStyle: {
                                fontSize: '14px',
                                fontWeight: 'bold',
                                borderRadius: '10px',
                                color: '#333'
                            }
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {}),
                        lineKeys.map((key, index2) =>
                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                Line,
                                {
                                    type: 'monotone',
                                    dataKey: key,
                                    stroke: COLORS[index2 % COLORS.length],
                                    strokeWidth: 2,
                                    dot: { r: 5, fill: COLORS[index2 % COLORS.length] },
                                    activeDot: { r: 8 }
                                },
                                key
                            )
                        )
                    ]
                })
            })
        ]
    })
}
function MyOverview() {
    const { getData } = useAPI()
    const [statistics, setStatisticsStats] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/statistics', setStatisticsStats, setLoading, setError)
    }, [])
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'card bg-light-subtle shadow text-center w-100 mb-5',
            id: 'overview',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-header bg-primary text-light text-uppercase fs-3 fw-semibold',
                    children: 'My Overview'
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'row card-body',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-xl-12 m-0 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'row bg-light-subtle border m-0 p-3 rounded-4 shadow',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-xl-12 d-flex flex-column p-3 my-auto',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('h2', {
                                            className: 'fw-bold mb-0',
                                            children: [
                                                'My Tickets',
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                    className:
                                                        'text-success bi bi-ticket-detailed-fill ms-2'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            children:
                                                'Stay updated on your ticket progress in real time.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Total Tickets Assigned',
                                    value: statistics.current?.myAllTickets,
                                    delta: statistics.delta?.myAllTicketsDelta,
                                    iconClass: 'bi-ticket-perforated',
                                    loading,
                                    redirectTo: '/servicedesk/tickets/all',
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Open Tickets',
                                    value: statistics.current?.myOpenTickets,
                                    delta: statistics.delta?.myOpenTicketsDelta,
                                    iconClass: 'bi-ticket-perforated',
                                    loading,
                                    redirectTo: '/servicedesk/tickets/open',
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'In Progress Tickets',
                                    value: statistics.current?.myInProgressTickets,
                                    delta: statistics.delta?.myInProgressTicketsDelta,
                                    iconClass: 'bi-hourglass-split',
                                    loading,
                                    redirectTo: '/servicedesk/tickets/inprogress',
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Overdue Tickets',
                                    value: statistics.current?.myOverdueTickets,
                                    delta: statistics.delta?.myOverdueTicketsDelta,
                                    iconClass: 'bi-exclamation-triangle-fill',
                                    loading,
                                    reverseDelta: true,
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('hr', { className: 'mt-3' }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-xl-12 d-flex flex-column p-3 my-auto',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('h2', {
                                            className: 'fw-bold mb-0',
                                            children: [
                                                'My Performance ',
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                    className: 'text-warning bi bi-stars ms-2'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            children:
                                                'Monitor your achievements and improve continuously.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Closed Tickets',
                                    value: statistics.current?.myClosedTickets,
                                    delta: statistics.delta?.myClosedTicketsDelta,
                                    iconClass: 'bi-check-circle-fill',
                                    loading,
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'SLA Compliance',
                                    value: statistics.current?.mySlaCompliance,
                                    delta: statistics.delta?.mySlaComplianceDelta,
                                    iconClass: 'bi-shield-check',
                                    unit: '%',
                                    loading,
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Resolution Time',
                                    value: statistics.current?.myResolutionTime,
                                    delta: statistics.delta?.myResolutionTimeDelta,
                                    iconClass: 'bi-lightning-fill',
                                    loading,
                                    isTime: true,
                                    reverseDelta: true,
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Failed Tickets',
                                    value: statistics.current?.myFailedTickets,
                                    delta: statistics.delta?.myFailedTicketsDelta,
                                    iconClass: 'bi-x-circle-fill',
                                    loading,
                                    reverseDelta: true,
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('hr', { className: 'mt-3' }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Ticket Trends Over Time'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.myVolumeTrends?.some(
                                                            (e) => e.Created > 0
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomLineChart,
                                                            {
                                                                data: statistics?.myVolumeTrends,
                                                                hasFilter: true
                                                            }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Department-Wise Resolution Time'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamDepartmentTimes?.some(
                                                            (e) =>
                                                                e.current_resolution_time > 0 &&
                                                                e.previous_resolution_time
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomBarChart,
                                                            {
                                                                data: statistics?.teamDepartmentTimes,
                                                                datakey: 'resolution_time',
                                                                display: 'Average Resolution Time'
                                                            }
                                                        )
                                            })
                                        ]
                                    })
                                })
                            ]
                        })
                    })
                })
            ]
        })
    })
}
function MyReports() {
    const columnsEmployeesPerformance = [
        {
            header: 'Employee',
            accessorKey: 'employee'
        },
        {
            header: 'Tickets Resolved',
            accessorKey: 'ticketsResolved'
        },
        {
            header: 'Avg. Response Time',
            accessorKey: 'avgResponseTime'
        },
        {
            header: 'SLA Compliance',
            accessorKey: 'slaCompliance'
        },
        {
            header: 'Escalations',
            accessorKey: 'escalations'
        },
        {
            header: 'Performance Score',
            accessorKey: 'performanceScore'
        }
    ]
    const dataEmployeesPerformance = [
        {
            employee: 'John Doe',
            ticketsResolved: 42,
            avgResponseTime: '1h 10m',
            slaCompliance: '95%',
            escalations: 1,
            performanceScore: '⭐⭐⭐⭐☆ (4.5/5)'
        },
        {
            employee: 'Jane Smith',
            ticketsResolved: 38,
            avgResponseTime: '1h 30m',
            slaCompliance: '90%',
            escalations: 2,
            performanceScore: '⭐⭐⭐⭐☆ (4.3/5)'
        },
        {
            employee: 'Mark Lee',
            ticketsResolved: 45,
            avgResponseTime: '2h 05m',
            slaCompliance: '85%',
            escalations: 4,
            performanceScore: '⭐⭐⭐☆ (3.8/5)'
        },
        {
            employee: 'Sarah Kim',
            ticketsResolved: 50,
            avgResponseTime: '1h 20m',
            slaCompliance: '98%',
            escalations: 0,
            performanceScore: '⭐⭐⭐⭐⭐ (5/5)'
        },
        {
            employee: 'David Brown',
            ticketsResolved: 30,
            avgResponseTime: '2h 45m',
            slaCompliance: '80%',
            escalations: 3,
            performanceScore: '⭐⭐⭐☆ (3.6/5)'
        },
        {
            employee: 'Emily White',
            ticketsResolved: 55,
            avgResponseTime: '50m',
            slaCompliance: '99%',
            escalations: 0,
            performanceScore: '⭐⭐⭐⭐⭐ (5/5)'
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'card bg-light-subtle shadow text-center w-100 mb-5',
            id: 'reports',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-header bg-primary text-light text-uppercase fs-3 fw-semibold',
                    children: 'My Reports'
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'row card-body',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-xl-12 m-0 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'row',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                                    className: 'text-start fw-semibold',
                                    children: 'Weekly Performance Report'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-3 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-header text-uppercase fw-semibold',
                                                children: 'Total Tickets Closed'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className:
                                                    'd-flex flex-column card-body align-items-center justify-content-center',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                                        className:
                                                            'card-text display-3 m-0 fw-bold',
                                                        children: '3'
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                                        className: 'text-success fs-5 fw-bold',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-arrow-up-short'
                                                                }
                                                            ),
                                                            '5',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-ticket-perforated ms-2'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                        style: { fontSize: '0.8rem' },
                                                        className: 'text-muted',
                                                        children: 'vs previews 7 days'
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-3 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-header text-uppercase fw-semibold',
                                                children: 'Avg. Resolution Time'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className:
                                                    'd-flex flex-column card-body align-items-center justify-content-center',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                        className:
                                                            'card-text display-3 m-0 fw-bold',
                                                        children: [
                                                            '10',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'span',
                                                                {
                                                                    className: 'fs-5',
                                                                    children: 'mins'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                                        className: 'text-danger fs-5 fw-bold',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-arrow-down-short'
                                                                }
                                                            ),
                                                            '2 mins',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-lightning-fill ms-2'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                        style: { fontSize: '0.8rem' },
                                                        className: 'text-muted',
                                                        children: 'vs previews 7 days'
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-3 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-header text-uppercase fw-semibold',
                                                children: 'SLA Compliance'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className:
                                                    'd-flex flex-column card-body align-items-center justify-content-center',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                        className:
                                                            'card-text display-3 m-0 fw-bold',
                                                        children: [
                                                            '98',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'span',
                                                                { className: 'fs-5', children: '%' }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                                        className: 'text-success fs-5 fw-bold',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-arrow-up-short'
                                                                }
                                                            ),
                                                            '8%',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-shield-check ms-2'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                        style: { fontSize: '0.8rem' },
                                                        className: 'text-muted',
                                                        children: 'vs previews 7 days'
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-3 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-header text-uppercase fw-semibold',
                                                children: 'Employee Satisfaction'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className:
                                                    'd-flex flex-column card-body align-items-center justify-content-center',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                        className:
                                                            'card-text display-3 m-0 fw-bold',
                                                        children: [
                                                            '99',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'span',
                                                                { className: 'fs-5', children: '%' }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                                        className: 'text-success fs-5 fw-bold',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-arrow-up-short'
                                                                }
                                                            ),
                                                            '1%',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-emoji-smile-fill ms-2'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                        style: { fontSize: '0.8rem' },
                                                        className: 'text-muted',
                                                        children: 'vs previews 7 days'
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-xl-12 p-3',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                                            className: 'text-start fw-semibold',
                                            children: 'Weekly Employee’s Performance'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                            columns: columnsEmployeesPerformance,
                                            data: dataEmployeesPerformance
                                        })
                                    ]
                                })
                            ]
                        })
                    })
                })
            ]
        })
    })
}
function AddEmployeeModal({ id, refreshList }) {
    const { postData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [departments, setDepartments] = reactExports.useState([])
    const [roles, setRoles] = reactExports.useState([])
    const [copied, setCopied] = reactExports.useState(false)
    const [showPassword, setShowPassword] = reactExports.useState(false)
    const [saved, setSaved] = reactExports.useState(false)
    const rfidRef = reactExports.useRef(null)
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    const [employeeData, setEmployeeData] = reactExports.useState({
        rfid: '',
        name: '',
        role: '',
        department_id: ''
    })
    const [newEmployeeData, setNewEmployeeData] = reactExports.useState({
        rfid: '',
        username: '',
        password: ''
    })
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setEmployeeData((prevData) => ({
            ...prevData,
            [name]: value
        }))
    }
    const resetForm = () => {
        setEmployeeData({
            rfid: '',
            name: '',
            role: '',
            department_id: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    reactExports.useEffect(() => {
        const modalEl = modalRef.current
        if (!modalEl) return
        const handleShown = () => {
            rfidRef.current?.focus()
        }
        modalEl.addEventListener('shown.bs.modal', handleShown)
        return () => {
            modalEl.removeEventListener('shown.bs.modal', handleShown)
        }
    }, [])
    reactExports.useEffect(() => {
        getData('/departments', setDepartments, () => {}, setError)
        getData('/roles', setRoles, () => {}, setError)
    }, [])
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        const response = await postData(
            '/users',
            employeeData,
            setEmployeeData,
            setLoading,
            setError
        )
        if (response) {
            setNewEmployeeData(response?.user)
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className: 'btn btn-primary text-nowrap border me-4',
                'data-bs-toggle': 'modal',
                'data-bs-target': `#${id}`,
                children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, {}), ' New Employee']
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal fade',
                id,
                'data-bs-backdrop': 'static',
                'data-bs-keyboard': 'false',
                tabIndex: '-1',
                ref: modalRef,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                        className: 'modal-title fw-semibold text-uppercase',
                                        children: 'Add New Employee'
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-body p-3',
                                children: [
                                    !newEmployeeData?.username
                                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                                              className: 'row g-3 needs-validation p-3',
                                              noValidate: true,
                                              onSubmit: handleSubmit,
                                              ref: formRef,
                                              children: [
                                                  error &&
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                          className:
                                                              'alert alert-danger text-center py-2',
                                                          children: error
                                                      }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                      className: 'col-md-12',
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'label',
                                                              {
                                                                  htmlFor: 'employeeRfid',
                                                                  className: 'form-label',
                                                                  children: 'RFID'
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'input',
                                                              {
                                                                  type: 'number',
                                                                  className: 'form-control',
                                                                  id: 'employeeRfid',
                                                                  name: 'rfid',
                                                                  value: employeeData.rfid,
                                                                  onChange: handleInputChange,
                                                                  ref: rfidRef,
                                                                  required: true
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'div',
                                                              {
                                                                  className: 'invalid-feedback',
                                                                  children: 'Please enter RFID.'
                                                              }
                                                          )
                                                      ]
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                      className: 'col-md-12',
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'label',
                                                              {
                                                                  htmlFor: 'employeeName',
                                                                  className: 'form-label',
                                                                  children: 'Name'
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'input',
                                                              {
                                                                  type: 'text',
                                                                  className: 'form-control',
                                                                  id: 'employeeName',
                                                                  name: 'name',
                                                                  value: employeeData.name,
                                                                  onChange: handleInputChange,
                                                                  required: true
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'div',
                                                              {
                                                                  className: 'invalid-feedback',
                                                                  children: 'Please enter a name.'
                                                              }
                                                          )
                                                      ]
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                      className: 'col-md-6',
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'label',
                                                              {
                                                                  htmlFor: 'employeeRole',
                                                                  className: 'form-label',
                                                                  children: 'Role'
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              'select',
                                                              {
                                                                  className:
                                                                      'form-select text-capitalize',
                                                                  id: 'employeeRole',
                                                                  name: 'role',
                                                                  value: employeeData.role,
                                                                  onChange: handleInputChange,
                                                                  required: true,
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'option',
                                                                          {
                                                                              value: '',
                                                                              disabled: true,
                                                                              children:
                                                                                  'Select Role'
                                                                          }
                                                                      ),
                                                                      roles.map((role) =>
                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                              'option',
                                                                              {
                                                                                  value: role.name,
                                                                                  children:
                                                                                      role.name
                                                                              },
                                                                              role.id
                                                                          )
                                                                      )
                                                                  ]
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'div',
                                                              {
                                                                  className: 'invalid-feedback',
                                                                  children: 'Please select a role.'
                                                              }
                                                          )
                                                      ]
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                      className: 'col-md-6',
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'label',
                                                              {
                                                                  htmlFor: 'employeeDepartment',
                                                                  className: 'form-label',
                                                                  children: 'Department'
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              'select',
                                                              {
                                                                  className:
                                                                      'form-select text-capitalize',
                                                                  id: 'employeeDepartment',
                                                                  name: 'department_id',
                                                                  value: employeeData.department_id,
                                                                  onChange: handleInputChange,
                                                                  required: true,
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'option',
                                                                          {
                                                                              value: '',
                                                                              disabled: true,
                                                                              children:
                                                                                  'Select Department'
                                                                          }
                                                                      ),
                                                                      departments.map((dept) =>
                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                              'option',
                                                                              {
                                                                                  value: dept.id,
                                                                                  children:
                                                                                      dept.name
                                                                              },
                                                                              dept.id
                                                                          )
                                                                      )
                                                                  ]
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'div',
                                                              {
                                                                  className: 'invalid-feedback',
                                                                  children:
                                                                      'Please choose a department.'
                                                              }
                                                          )
                                                      ]
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                      className: 'modal-footer',
                                                      children:
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'button',
                                                              {
                                                                  type: 'submit',
                                                                  className:
                                                                      'btn btn-primary w-100',
                                                                  disabled: loading,
                                                                  children: loading
                                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                            jsxRuntimeExports.Fragment,
                                                                            {
                                                                                children: [
                                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                        'span',
                                                                                        {
                                                                                            className:
                                                                                                'spinner-grow spinner-grow-sm me-2',
                                                                                            role: 'status'
                                                                                        }
                                                                                    ),
                                                                                    'Submitting...'
                                                                                ]
                                                                            }
                                                                        )
                                                                      : 'Add Employee'
                                                              }
                                                          )
                                                  })
                                              ]
                                          })
                                        : /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                              className: 'modal-body p-4 text-center',
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                                      className:
                                                          'fw-semibold text-secondary text-uppercase mb-2',
                                                      children: 'Employee Credentials Created'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                      className:
                                                          'bg-light border rounded px-3 py-2 mb-2 text-break small text-start',
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              'div',
                                                              {
                                                                  className:
                                                                      'd-flex align-items-center',
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'strong',
                                                                          {
                                                                              className: 'me-2',
                                                                              children: 'Username:'
                                                                          }
                                                                      ),
                                                                      newEmployeeData.username
                                                                  ]
                                                              }
                                                          ),
                                                          /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              'div',
                                                              {
                                                                  className:
                                                                      'd-flex align-items-center',
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'strong',
                                                                          {
                                                                              className: 'me-2',
                                                                              children: 'Password:'
                                                                          }
                                                                      ),
                                                                      showPassword
                                                                          ? newEmployeeData.password
                                                                          : '••••••••••',
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'button',
                                                                          {
                                                                              className:
                                                                                  'btn btn-sm border-1 btn-primary ms-auto',
                                                                              onClick: () =>
                                                                                  setShowPassword(
                                                                                      !showPassword
                                                                                  ),
                                                                              children: showPassword
                                                                                  ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                                        jsxRuntimeExports.Fragment,
                                                                                        {
                                                                                            children:
                                                                                                [
                                                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                        FaEyeSlash,
                                                                                                        {
                                                                                                            className:
                                                                                                                'me-1',
                                                                                                            size: 14
                                                                                                        }
                                                                                                    ),
                                                                                                    'Show'
                                                                                                ]
                                                                                        }
                                                                                    )
                                                                                  : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                                        jsxRuntimeExports.Fragment,
                                                                                        {
                                                                                            children:
                                                                                                [
                                                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                                        FaEye,
                                                                                                        {
                                                                                                            className:
                                                                                                                'me-1',
                                                                                                            size: 14
                                                                                                        }
                                                                                                    ),
                                                                                                    'Hide'
                                                                                                ]
                                                                                        }
                                                                                    )
                                                                          }
                                                                      )
                                                                  ]
                                                              }
                                                          )
                                                      ]
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                                      className:
                                                          'btn btn-outline-secondary btn-sm d-flex align-items-center mx-auto mb-2',
                                                      onClick: () => {
                                                          const text2 = `Username: ${newEmployeeData.username}
Password: ${newEmployeeData.password}`
                                                          navigator.clipboard.writeText(text2)
                                                          setCopied(true)
                                                          setTimeout(() => setCopied(false), 2e3)
                                                          setSaved(true)
                                                      },
                                                      children: copied
                                                          ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                jsxRuntimeExports.Fragment,
                                                                {
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            FaCheckCircle,
                                                                            {
                                                                                className: 'me-2',
                                                                                size: 16
                                                                            }
                                                                        ),
                                                                        'Copied!'
                                                                    ]
                                                                }
                                                            )
                                                          : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                jsxRuntimeExports.Fragment,
                                                                {
                                                                    children: [
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            FaClipboard,
                                                                            {
                                                                                className: 'me-2',
                                                                                size: 16
                                                                            }
                                                                        ),
                                                                        'Copy to Clipboard'
                                                                    ]
                                                                }
                                                            )
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('small', {
                                                      className: 'd-block text-danger mb-4',
                                                      children:
                                                          'Please save this information securely.'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                                      className:
                                                          'btn btn-primary w-100 d-flex justify-content-center align-items-center gap-2',
                                                      onClick: () => {
                                                          bootstrap_bundle_minExports.Modal.getInstance(
                                                              modalRef.current
                                                          ).hide()
                                                          resetForm()
                                                          refreshList?.()
                                                      },
                                                      disabled: !saved,
                                                      children: 'I’ve Saved This'
                                                  })
                                              ]
                                          }),
                                    console.log(newEmployeeData)
                                ]
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function ViewEmployeeDetailsModal({ id, employee }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        tabIndex: '-1',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title',
                                children: 'View Employee'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-4',
                        children: employee
                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                  className: 'text-center',
                                  children: [
                                      employee?.profile_picture
                                          ? /* @__PURE__ */ jsxRuntimeExports.jsx('img', {
                                                src: employee.profile_picture,
                                                alt: 'Profile',
                                                className: 'rounded-circle mb-3',
                                                width: '100',
                                                height: '100'
                                            })
                                          : /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'bg-secondary text-white rounded-circle d-inline-flex align-items-center justify-content-center mb-3',
                                                style: { width: '100px', height: '100px' },
                                                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    'span',
                                                    {
                                                        className: 'fs-4',
                                                        children: employee.name?.[0]
                                                    }
                                                )
                                            }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                          className: 'text-start p-3',
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                  children: [
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          'strong',
                                                          { className: 'me-2', children: 'Name:' }
                                                      ),
                                                      ' ',
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          'span',
                                                          {
                                                              className: 'text-uppercase',
                                                              children: employee.name || 'N/A'
                                                          }
                                                      )
                                                  ]
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                  children: [
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          'strong',
                                                          {
                                                              className: 'me-2',
                                                              children: 'Department:'
                                                          }
                                                      ),
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          'span',
                                                          {
                                                              className: 'text-uppercase',
                                                              children:
                                                                  employee.department?.name || 'N/A'
                                                          }
                                                      )
                                                  ]
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                  children: [
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          'strong',
                                                          { className: 'me-2', children: 'Role:' }
                                                      ),
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          'span',
                                                          {
                                                              className: 'text-uppercase',
                                                              children:
                                                                  employee.roles?.[0]?.name || 'N/A'
                                                          }
                                                      )
                                                  ]
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                  children: [
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          'strong',
                                                          { children: 'Status:' }
                                                      ),
                                                      ' ',
                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          'span',
                                                          {
                                                              className: `text-uppercase text-nowrap text-light fw-semibold rounded-pill px-3 text-center ${employee?.status === 'active' ? 'bg-success' : employee?.status === 'locked' ? 'bg-danger' : 'bg-secondary'}`,
                                                              children:
                                                                  employee?.status || 'Unknown'
                                                          }
                                                      )
                                                  ]
                                              })
                                          ]
                                      })
                                  ]
                              })
                            : /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                  className: 'text-muted',
                                  children: 'No data available.'
                              })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-footer',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            type: 'button',
                            className: 'btn btn-secondary',
                            'data-bs-dismiss': 'modal',
                            children: 'Close'
                        })
                    })
                ]
            })
        })
    })
}
function NewPasswordModal({ id, newPassword }) {
    const [copied, setCopied] = reactExports.useState(false)
    const [disabled, setDisabled] = reactExports.useState(true)
    const modalRef = reactExports.useRef(null)
    const handleCopy = () => {
        navigator.clipboard.writeText(newPassword).then(() => {
            setCopied(true)
            setDisabled(false)
            setTimeout(() => setCopied(false), 2e3)
        })
    }
    reactExports.useEffect(() => {
        const modalEl = document.getElementById(id)
        modalRef.current = modalEl
        const handleHidden = () => {
            setDisabled(true)
            setCopied(false)
        }
        if (modalEl) {
            modalEl.addEventListener('hidden.bs.modal', handleHidden)
        }
        return () => {
            if (modalRef.current) {
                modalRef.current.removeEventListener('hidden.bs.modal', handleHidden)
            }
        }
    }, [id])
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        tabIndex: '-1',
        id,
        'aria-labelledby': 'newPasswordModalLabel',
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title',
                                id: 'newPasswordModalLabel',
                                children: 'Password Reset Successful'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal',
                                'aria-label': 'Close'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-body text-center pt-3',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                className: 'mb-2',
                                children: 'The new password is:'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'alert alert-primary fw-bold fs-5',
                                children: newPassword
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                className:
                                    'btn btn-outline-secondary btn-sm d-flex align-items-center mx-auto mb-2',
                                onClick: handleCopy,
                                children: copied
                                    ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          jsxRuntimeExports.Fragment,
                                          {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                      FaCheckCircle,
                                                      { className: 'me-2', size: 16 }
                                                  ),
                                                  'Copied!'
                                              ]
                                          }
                                      )
                                    : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          jsxRuntimeExports.Fragment,
                                          {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                      FaClipboard,
                                                      { className: 'me-2', size: 16 }
                                                  ),
                                                  'Copy to Clipboard'
                                              ]
                                          }
                                      )
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                className: 'text-muted small',
                                children: 'Please copy and share this password securely.'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-footer',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            type: 'button',
                            className: 'btn btn-secondary',
                            'data-bs-dismiss': 'modal',
                            disabled,
                            children: 'Close'
                        })
                    })
                ]
            })
        })
    })
}
function AllEmployees() {
    const { patchData, getData } = useAPI()
    const [employees, setEmployees] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const [selectedEmployee, setSelectedEmployee] = reactExports.useState(null)
    const [newPassword, setNewPassword] = reactExports.useState(null)
    const [resettingPassword, setResettingPassword] = reactExports.useState(null)
    const refreshList = () => {
        getData('/users', setEmployees, setLoading, setError)
    }
    reactExports.useEffect(() => {
        refreshList()
    }, [])
    const handleLockUnlockUser = (employee) => {
        patchData(
            `/users/${employee?.id}/lock`,
            () => {},
            () => {},
            () => {},
            setError
        )
        refreshList()
    }
    const handleSuspendReinstateUser = (employee) => {
        patchData(
            `/users/${employee?.id}/suspend`,
            () => {},
            () => {},
            () => {},
            setError
        )
        refreshList()
    }
    const handleResetPassword = async (employee) => {
        setResettingPassword(true)
        try {
            const response = await patchData(
                `/users/${employee.id}/reset-password`,
                () => {},
                () => {},
                () => {},
                setError
            )
            if (response) {
                setNewPassword(response.new_password)
                const modal = new bootstrap_bundle_minExports.Modal(
                    document.getElementById('NewPasswordModal')
                )
                modal.show()
                refreshList()
            }
        } finally {
            setResettingPassword(false)
        }
    }
    const handleDeactivateActivateUser = (employee) => {
        patchData(
            `/users/${employee?.id}/suspend`,
            () => {},
            () => {},
            () => {},
            setError
        )
        refreshList()
    }
    const columns = [
        {
            header: 'Picture',
            accessorKey: 'profile_picture',
            cell: ({ row }) => {
                const profilePicture = row.original.profile_picture
                if (profilePicture) {
                    return /* @__PURE__ */ jsxRuntimeExports.jsx('img', {
                        src: profilePicture,
                        alt: 'Profile',
                        width: 50,
                        className: 'rounded-circle object-cover'
                    })
                } else {
                    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'bg-secondary text-white rounded-circle d-inline-flex align-items-center justify-content-center',
                        style: { width: '50px', height: '50px', fontSize: '1rem' },
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                            children: row.original.name?.[0] || '?'
                        })
                    })
                }
            }
        },
        { header: 'Name', accessorKey: 'name' },
        {
            header: 'Department',
            accessorFn: (row) => row.department?.name || '',
            id: 'userDepartment',
            filterFn: 'includesString',
            cell: ({ row }) => {
                return row.original.department ? row.original.department.name : 'N/A'
            }
        },
        {
            header: 'Role',
            accessorKey: 'role',
            cell: ({ row }) => row.original.roles[0]?.name || 'N/A'
        },
        { header: 'Status', accessorKey: 'status' },
        {
            header: 'Actions',
            accessorKey: 'action',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#employeeDetailsModal',
                                        onClick: () => setSelectedEmployee(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#lockUnlockUserConfirmModal',
                                        onClick: () => setSelectedEmployee(row.original),
                                        disabled:
                                            row.original?.status !== 'active' &&
                                            row.original?.status !== 'locked',
                                        children:
                                            row.original?.status === 'locked'
                                                ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                      jsxRuntimeExports.Fragment,
                                                      {
                                                          children: [
                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  FaUnlock,
                                                                  {}
                                                              ),
                                                              ' Unlock'
                                                          ]
                                                      }
                                                  )
                                                : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                      jsxRuntimeExports.Fragment,
                                                      {
                                                          children: [
                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  FaLock,
                                                                  {}
                                                              ),
                                                              ' Lock'
                                                          ]
                                                      }
                                                  )
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#suspendReinstateUserConfirmModal',
                                        onClick: () => setSelectedEmployee(row.original),
                                        disabled:
                                            row.original?.status !== 'active' &&
                                            row.original?.status !== 'suspended',
                                        children:
                                            row.original?.status === 'suspended'
                                                ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                      jsxRuntimeExports.Fragment,
                                                      {
                                                          children: [
                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  FaUser,
                                                                  {}
                                                              ),
                                                              ' Reinstate'
                                                          ]
                                                      }
                                                  )
                                                : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                      jsxRuntimeExports.Fragment,
                                                      {
                                                          children: [
                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  FaUserSlash,
                                                                  {}
                                                              ),
                                                              ' Suspend'
                                                          ]
                                                      }
                                                  )
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#resetPasswordConfirmModal',
                                        onClick: () => setSelectedEmployee(row.original),
                                        disabled: row.original?.status !== 'active',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaRedoAlt, {}),
                                            ' Reset Password'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#activateDeactivateUserConfirmModal',
                                        onClick: () => setSelectedEmployee(row.original),
                                        disabled:
                                            row.original?.status !== 'active' &&
                                            row.original?.status !== 'inactive',
                                        children:
                                            row.original?.status === 'active'
                                                ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                      jsxRuntimeExports.Fragment,
                                                      {
                                                          children: [
                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  FaUserLock,
                                                                  {}
                                                              ),
                                                              ' Deactivate'
                                                          ]
                                                      }
                                                  )
                                                : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                      jsxRuntimeExports.Fragment,
                                                      {
                                                          children: [
                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  FaUserCheck,
                                                                  {}
                                                              ),
                                                              ' Activate'
                                                          ]
                                                      }
                                                  )
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            resettingPassword &&
                /* @__PURE__ */ jsxRuntimeExports.jsx(FullScreenLoader, {
                    title: 'Resetting Password',
                    message: 'Please wait while we reset the password.'
                }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                        children: 'All Employees'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddEmployeeModal,
                                    {
                                        id: 'AddEmployeeModal',
                                        refreshList
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: employees
                            })
                        })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(ViewEmployeeDetailsModal, {
                        id: 'employeeDetailsModal',
                        employee: selectedEmployee
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                        id: 'lockUnlockUserConfirmModal',
                        title: `${selectedEmployee?.status === 'active' ? 'Lock' : 'Unlock'} Employee`,
                        message: `Are you sure you want to ${selectedEmployee?.status === 'active' ? 'Lock' : 'Unlock'} Employee ${selectedEmployee?.name} ?`,
                        confirmLabel: selectedEmployee?.status === 'active' ? 'Lock' : 'Unlock',
                        confirmClass:
                            selectedEmployee?.status === 'active'
                                ? 'btn-danger text-light'
                                : 'btn-success text-light',
                        cancelLabel: 'Cancel',
                        onConfirm: () => handleLockUnlockUser(selectedEmployee)
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                        id: 'suspendReinstateUserConfirmModal',
                        title: `${selectedEmployee?.status === 'active' ? 'Suspend' : 'Reinstate'} Employee`,
                        message: `Are you sure you want to ${selectedEmployee?.status === 'active' ? 'Suspend' : 'Reinstate'} Employee ${selectedEmployee?.name} ?`,
                        confirmLabel:
                            selectedEmployee?.status === 'active' ? 'Suspend' : 'Reinstate',
                        confirmClass:
                            selectedEmployee?.status === 'active'
                                ? 'btn-danger text-light'
                                : 'btn-success text-light',
                        cancelLabel: 'Cancel',
                        onConfirm: () => handleSuspendReinstateUser(selectedEmployee)
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                        id: 'resetPasswordConfirmModal',
                        title: 'Force Reset Password',
                        message: 'Are you sure you want to Reset Password?',
                        confirmLabel: 'Reset Password',
                        confirmClass: 'btn-danger text-light',
                        cancelLabel: 'Cancel',
                        onConfirm: () => handleResetPassword(selectedEmployee)
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                        id: 'activateDeactivateUserConfirmModal',
                        title: `${selectedEmployee?.status === 'active' ? 'Deactivate' : 'Activate'} Employee`,
                        message: `Are you sure you want to ${selectedEmployee?.status === 'active' ? 'Deactivate' : 'Activate'} Employee ${selectedEmployee?.name} ?`,
                        confirmLabel:
                            selectedEmployee?.status === 'active' ? 'Deactivate' : 'Activate',
                        confirmClass:
                            selectedEmployee?.status === 'active'
                                ? 'btn-danger text-light'
                                : 'btn-success text-light',
                        cancelLabel: 'Cancel',
                        onConfirm: () => handleDeactivateActivateUser(selectedEmployee)
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(NewPasswordModal, {
                        id: 'NewPasswordModal',
                        newPassword
                    })
                ]
            })
        ]
    })
}
function AddRoleModal() {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className: 'btn btn-primary text-nowrap border me-4',
                'data-bs-toggle': 'modal',
                'data-bs-target': '#AddTicketModal',
                children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, {}), ' Add Role']
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal fade',
                id: 'AddTicketModal',
                tabIndex: '-1',
                role: 'dialog',
                'aria-labelledby': 'modalTitleId',
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered',
                    role: 'document',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                        className: 'modal-title',
                                        id: 'modalTitleId',
                                        children: 'Notification!'
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-body',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx('h1', {
                                    className: 'text-center fw-bold text-uppercase',
                                    children: 'Hello Kupal'
                                })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-footer',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                    type: 'button',
                                    className: 'btn btn-secondary',
                                    'data-bs-dismiss': 'modal',
                                    children: 'Close'
                                })
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function RolesPermissions() {
    const { getData } = useAPI()
    const [roles, setRoles] = reactExports.useState([])
    const [selectedRole, setSelectedRole] = reactExports.useState(null)
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/roles', setRoles, setLoading, setError)
    }, [])
    const columns = [
        { header: 'No.', accessorKey: 'id' },
        { header: 'Role Name', accessorKey: 'name' },
        {
            header: 'Permissions',
            accessorKey: 'permissions_count',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [row.original.permissions?.length ?? 0, ' Permissions']
                })
        },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#permissionsModal',
                                        onClick: () => setSelectedRole(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEdit, {}),
                                            ' Edit'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaTrash, {}),
                                            ' Delete'
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    const topContent = /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
        className: 'btn btn-primary me-4',
        children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, {}), ' Add Role']
    })
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                        children: 'Roles & Permissions'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddRoleModal,
                                    {}
                                ),
                                isloading: loading,
                                topContent,
                                columns,
                                data: roles
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal fade',
                id: 'permissionsModal',
                tabIndex: '-1',
                'aria-labelledby': 'permissionsModalLabel',
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered modal-dialog-scrollable',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('h5', {
                                        className: 'modal-title',
                                        id: 'permissionsModalLabel',
                                        children: ['Permissions for ', selectedRole?.name]
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-body text-center p-3',
                                children:
                                    selectedRole?.permissions?.length > 0
                                        ? /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                                              className: 'list-group',
                                              children: selectedRole.permissions.map((perm) =>
                                                  /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                      'li',
                                                      {
                                                          className: 'list-group-item',
                                                          children: ['Can ', perm.name]
                                                      },
                                                      perm.id
                                                  )
                                              )
                                          })
                                        : /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                              className: 'text-muted',
                                              children: 'No permissions assigned.'
                                          })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-footer',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                    type: 'button',
                                    className: 'btn btn-danger',
                                    'data-bs-dismiss': 'modal',
                                    children: 'Close'
                                })
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function ActivityLog() {
    const { getData } = useAPI()
    const [logs, setLogs] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/logs', setLogs, setLoading, setError)
    }, [])
    const columns = [
        {
            header: 'User',
            accessorFn: (row) => row.user?.name || '',
            id: 'userName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.name || 'N/A'
        },
        { header: 'Category', accessorKey: 'category' },
        { header: 'Action', accessorKey: 'action' },
        { header: 'Details', accessorKey: 'details' },
        { header: 'IP Address', accessorKey: 'ip_address' },
        { header: 'PC Name', accessorKey: 'pc_name' },
        { header: 'Date', accessorKey: 'formatted_date' },
        { header: 'Time', accessorKey: 'formatted_time' }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'card shadow w-100',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className:
                        'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                    children: 'Activity Log'
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-body',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-12 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                            isloading: loading,
                            columns,
                            data: logs
                        })
                    })
                })
            ]
        })
    })
}
function _typeof(o) {
    '@babel/helpers - typeof'
    return (
        (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? function (o2) {
                      return typeof o2
                  }
                : function (o2) {
                      return o2 &&
                          'function' == typeof Symbol &&
                          o2.constructor === Symbol &&
                          o2 !== Symbol.prototype
                          ? 'symbol'
                          : typeof o2
                  }),
        _typeof(o)
    )
}
function toPrimitive(t, r2) {
    if ('object' != _typeof(t) || !t) return t
    var e = t[Symbol.toPrimitive]
    if (void 0 !== e) {
        var i = e.call(t, r2)
        if ('object' != _typeof(i)) return i
        throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return ('string' === r2 ? String : Number)(t)
}
function toPropertyKey(t) {
    var i = toPrimitive(t, 'string')
    return 'symbol' == _typeof(i) ? i : i + ''
}
function _defineProperty(e, r2, t) {
    return (
        (r2 = toPropertyKey(r2)) in e
            ? Object.defineProperty(e, r2, {
                  value: t,
                  enumerable: true,
                  configurable: true,
                  writable: true
              })
            : (e[r2] = t),
        e
    )
}
function ownKeys(e, r2) {
    var t = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e)
        r2 &&
            (o = o.filter(function (r3) {
                return Object.getOwnPropertyDescriptor(e, r3).enumerable
            })),
            t.push.apply(t, o)
    }
    return t
}
function _objectSpread2(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {}
        r2 % 2
            ? ownKeys(Object(t), true).forEach(function (r3) {
                  _defineProperty(e, r3, t[r3])
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
              : ownKeys(Object(t)).forEach(function (r3) {
                    Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3))
                })
    }
    return e
}
function _arrayWithHoles(r2) {
    if (Array.isArray(r2)) return r2
}
function _iterableToArrayLimit(r2, l) {
    var t =
        null == r2
            ? null
            : ('undefined' != typeof Symbol && r2[Symbol.iterator]) || r2['@@iterator']
    if (null != t) {
        var e,
            n,
            i,
            u,
            a2 = [],
            f = true,
            o = false
        try {
            if (((i = (t = t.call(r2)).next), 0 === l)) {
                if (Object(t) !== t) return
                f = false
            } else
                for (
                    ;
                    !(f = (e = i.call(t)).done) && (a2.push(e.value), a2.length !== l);
                    f = true
                );
        } catch (r3) {
            ;(o = true), (n = r3)
        } finally {
            try {
                if (!f && null != t['return'] && ((u = t['return']()), Object(u) !== u)) return
            } finally {
                if (o) throw n
            }
        }
        return a2
    }
}
function _arrayLikeToArray(r2, a2) {
    ;(null == a2 || a2 > r2.length) && (a2 = r2.length)
    for (var e = 0, n = Array(a2); e < a2; e++) n[e] = r2[e]
    return n
}
function _unsupportedIterableToArray(r2, a2) {
    if (r2) {
        if ('string' == typeof r2) return _arrayLikeToArray(r2, a2)
        var t = {}.toString.call(r2).slice(8, -1)
        return (
            'Object' === t && r2.constructor && (t = r2.constructor.name),
            'Map' === t || 'Set' === t
                ? Array.from(r2)
                : 'Arguments' === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                  ? _arrayLikeToArray(r2, a2)
                  : void 0
        )
    }
}
function _nonIterableRest() {
    throw new TypeError(
        'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _slicedToArray(r2, e) {
    return (
        _arrayWithHoles(r2) ||
        _iterableToArrayLimit(r2, e) ||
        _unsupportedIterableToArray(r2, e) ||
        _nonIterableRest()
    )
}
function _objectWithoutProperties(e, t) {
    if (null == e) return {}
    var o,
        r2,
        i = _objectWithoutPropertiesLoose$d(e, t)
    if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(e)
        for (r2 = 0; r2 < n.length; r2++)
            (o = n[r2]), -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o])
    }
    return i
}
var _excluded$6 = [
    'defaultInputValue',
    'defaultMenuIsOpen',
    'defaultValue',
    'inputValue',
    'menuIsOpen',
    'onChange',
    'onInputChange',
    'onMenuClose',
    'onMenuOpen',
    'value'
]
function useStateManager(_ref3) {
    var _ref$defaultInputValu = _ref3.defaultInputValue,
        defaultInputValue = _ref$defaultInputValu === void 0 ? '' : _ref$defaultInputValu,
        _ref$defaultMenuIsOpe = _ref3.defaultMenuIsOpen,
        defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe,
        _ref$defaultValue = _ref3.defaultValue,
        defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,
        propsInputValue = _ref3.inputValue,
        propsMenuIsOpen = _ref3.menuIsOpen,
        propsOnChange = _ref3.onChange,
        propsOnInputChange = _ref3.onInputChange,
        propsOnMenuClose = _ref3.onMenuClose,
        propsOnMenuOpen = _ref3.onMenuOpen,
        propsValue = _ref3.value,
        restSelectProps = _objectWithoutProperties(_ref3, _excluded$6)
    var _useState = reactExports.useState(
            propsInputValue !== void 0 ? propsInputValue : defaultInputValue
        ),
        _useState2 = _slicedToArray(_useState, 2),
        stateInputValue = _useState2[0],
        setStateInputValue = _useState2[1]
    var _useState3 = reactExports.useState(
            propsMenuIsOpen !== void 0 ? propsMenuIsOpen : defaultMenuIsOpen
        ),
        _useState4 = _slicedToArray(_useState3, 2),
        stateMenuIsOpen = _useState4[0],
        setStateMenuIsOpen = _useState4[1]
    var _useState5 = reactExports.useState(propsValue !== void 0 ? propsValue : defaultValue),
        _useState6 = _slicedToArray(_useState5, 2),
        stateValue = _useState6[0],
        setStateValue = _useState6[1]
    var onChange2 = reactExports.useCallback(
        function (value2, actionMeta) {
            if (typeof propsOnChange === 'function') {
                propsOnChange(value2, actionMeta)
            }
            setStateValue(value2)
        },
        [propsOnChange]
    )
    var onInputChange = reactExports.useCallback(
        function (value2, actionMeta) {
            var newValue
            if (typeof propsOnInputChange === 'function') {
                newValue = propsOnInputChange(value2, actionMeta)
            }
            setStateInputValue(newValue !== void 0 ? newValue : value2)
        },
        [propsOnInputChange]
    )
    var onMenuOpen = reactExports.useCallback(
        function () {
            if (typeof propsOnMenuOpen === 'function') {
                propsOnMenuOpen()
            }
            setStateMenuIsOpen(true)
        },
        [propsOnMenuOpen]
    )
    var onMenuClose = reactExports.useCallback(
        function () {
            if (typeof propsOnMenuClose === 'function') {
                propsOnMenuClose()
            }
            setStateMenuIsOpen(false)
        },
        [propsOnMenuClose]
    )
    var inputValue = propsInputValue !== void 0 ? propsInputValue : stateInputValue
    var menuIsOpen = propsMenuIsOpen !== void 0 ? propsMenuIsOpen : stateMenuIsOpen
    var value = propsValue !== void 0 ? propsValue : stateValue
    return _objectSpread2(
        _objectSpread2({}, restSelectProps),
        {},
        {
            inputValue,
            menuIsOpen,
            onChange: onChange2,
            onInputChange,
            onMenuClose,
            onMenuOpen,
            value
        }
    )
}
function _classCallCheck(a2, n) {
    if (!(a2 instanceof n)) throw new TypeError('Cannot call a class as a function')
}
function _defineProperties(e, r2) {
    for (var t = 0; t < r2.length; t++) {
        var o = r2[t]
        ;(o.enumerable = o.enumerable || false),
            (o.configurable = true),
            'value' in o && (o.writable = true),
            Object.defineProperty(e, toPropertyKey(o.key), o)
    }
}
function _createClass(e, r2, t) {
    return (
        r2 && _defineProperties(e.prototype, r2),
        t && _defineProperties(e, t),
        Object.defineProperty(e, 'prototype', {
            writable: false
        }),
        e
    )
}
function _inherits(t, e) {
    if ('function' != typeof e && null !== e)
        throw new TypeError('Super expression must either be null or a function')
    ;(t.prototype = Object.create(e && e.prototype, {
        constructor: {
            value: t,
            writable: true,
            configurable: true
        }
    })),
        Object.defineProperty(t, 'prototype', {
            writable: false
        }),
        e && _setPrototypeOf$f(t, e)
}
function _getPrototypeOf(t) {
    return (
        (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf.bind()
            : function (t2) {
                  return t2.__proto__ || Object.getPrototypeOf(t2)
              }),
        _getPrototypeOf(t)
    )
}
function _isNativeReflectConstruct() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}))
    } catch (t2) {}
    return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t
    })()
}
function _possibleConstructorReturn(t, e) {
    if (e && ('object' == _typeof(e) || 'function' == typeof e)) return e
    if (void 0 !== e)
        throw new TypeError('Derived constructors may only return object or undefined')
    return _assertThisInitialized$f(t)
}
function _createSuper(t) {
    var r2 = _isNativeReflectConstruct()
    return function () {
        var e,
            o = _getPrototypeOf(t)
        if (r2) {
            var s2 = _getPrototypeOf(this).constructor
            e = Reflect.construct(o, arguments, s2)
        } else e = o.apply(this, arguments)
        return _possibleConstructorReturn(this, e)
    }
}
function _arrayWithoutHoles(r2) {
    if (Array.isArray(r2)) return _arrayLikeToArray(r2)
}
function _iterableToArray(r2) {
    if (('undefined' != typeof Symbol && null != r2[Symbol.iterator]) || null != r2['@@iterator'])
        return Array.from(r2)
}
function _nonIterableSpread() {
    throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
}
function _toConsumableArray(r2) {
    return (
        _arrayWithoutHoles(r2) ||
        _iterableToArray(r2) ||
        _unsupportedIterableToArray(r2) ||
        _nonIterableSpread()
    )
}
function sheetForTag(tag) {
    if (tag.sheet) {
        return tag.sheet
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
        if (document.styleSheets[i].ownerNode === tag) {
            return document.styleSheets[i]
        }
    }
    return void 0
}
function createStyleElement(options2) {
    var tag = document.createElement('style')
    tag.setAttribute('data-emotion', options2.key)
    if (options2.nonce !== void 0) {
        tag.setAttribute('nonce', options2.nonce)
    }
    tag.appendChild(document.createTextNode(''))
    tag.setAttribute('data-s', '')
    return tag
}
var StyleSheet = /* @__PURE__ */ (function () {
    function StyleSheet2(options2) {
        var _this = this
        this._insertTag = function (tag) {
            var before
            if (_this.tags.length === 0) {
                if (_this.insertionPoint) {
                    before = _this.insertionPoint.nextSibling
                } else if (_this.prepend) {
                    before = _this.container.firstChild
                } else {
                    before = _this.before
                }
            } else {
                before = _this.tags[_this.tags.length - 1].nextSibling
            }
            _this.container.insertBefore(tag, before)
            _this.tags.push(tag)
        }
        this.isSpeedy = options2.speedy === void 0 ? true : options2.speedy
        this.tags = []
        this.ctr = 0
        this.nonce = options2.nonce
        this.key = options2.key
        this.container = options2.container
        this.prepend = options2.prepend
        this.insertionPoint = options2.insertionPoint
        this.before = null
    }
    var _proto = StyleSheet2.prototype
    _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag)
    }
    _proto.insert = function insert(rule) {
        if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this))
        }
        var tag = this.tags[this.tags.length - 1]
        if (this.isSpeedy) {
            var sheet = sheetForTag(tag)
            try {
                sheet.insertRule(rule, sheet.cssRules.length)
            } catch (e) {}
        } else {
            tag.appendChild(document.createTextNode(rule))
        }
        this.ctr++
    }
    _proto.flush = function flush() {
        this.tags.forEach(function (tag) {
            var _tag$parentNode
            return (_tag$parentNode = tag.parentNode) == null
                ? void 0
                : _tag$parentNode.removeChild(tag)
        })
        this.tags = []
        this.ctr = 0
    }
    return StyleSheet2
})()
var MS = '-ms-'
var MOZ = '-moz-'
var WEBKIT = '-webkit-'
var COMMENT = 'comm'
var RULESET = 'rule'
var DECLARATION = 'decl'
var IMPORT = '@import'
var KEYFRAMES = '@keyframes'
var LAYER = '@layer'
var abs = Math.abs
var from = String.fromCharCode
var assign = Object.assign
function hash(value, length2) {
    return charat(value, 0) ^ 45
        ? (((((((length2 << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^
              charat(value, 2)) <<
              2) ^
              charat(value, 3)
        : 0
}
function trim(value) {
    return value.trim()
}
function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value
}
function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement)
}
function indexof(value, search) {
    return value.indexOf(search)
}
function charat(value, index2) {
    return value.charCodeAt(index2) | 0
}
function substr(value, begin, end) {
    return value.slice(begin, end)
}
function strlen(value) {
    return value.length
}
function sizeof(value) {
    return value.length
}
function append2(value, array2) {
    return array2.push(value), value
}
function combine(array2, callback) {
    return array2.map(callback).join('')
}
var line = 1
var column = 1
var length = 0
var position = 0
var character = 0
var characters = ''
function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: '' }
}
function copy(root, props) {
    return assign(node('', null, null, '', null, null, 0), root, { length: -root.length }, props)
}
function char() {
    return character
}
function prev() {
    character = position > 0 ? charat(characters, --position) : 0
    if ((column--, character === 10)) (column = 1), line--
    return character
}
function next() {
    character = position < length ? charat(characters, position++) : 0
    if ((column++, character === 10)) (column = 1), line++
    return character
}
function peek() {
    return charat(characters, position)
}
function caret() {
    return position
}
function slice(begin, end) {
    return substr(characters, begin, end)
}
function token(type) {
    switch (type) {
        // \0 \t \n \r \s whitespace token
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
            return 5
        // ! + , / > @ ~ isolate token
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        // ; { } breakpoint token
        case 59:
        case 123:
        case 125:
            return 4
        // : accompanied token
        case 58:
            return 3
        // " ' ( [ opening delimit token
        case 34:
        case 39:
        case 40:
        case 91:
            return 2
        // ) ] closing delimit token
        case 41:
        case 93:
            return 1
    }
    return 0
}
function alloc(value) {
    return (line = column = 1), (length = strlen((characters = value))), (position = 0), []
}
function dealloc(value) {
    return (characters = ''), value
}
function delimit(type) {
    return trim(
        slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type))
    )
}
function whitespace(type) {
    while ((character = peek()))
        if (character < 33) next()
        else break
    return token(type) > 2 || token(character) > 3 ? '' : ' '
}
function escaping(index2, count2) {
    while (--count2 && next())
        if (
            character < 48 ||
            character > 102 ||
            (character > 57 && character < 65) ||
            (character > 70 && character < 97)
        )
            break
    return slice(index2, caret() + (count2 < 6 && peek() == 32 && next() == 32))
}
function delimiter(type) {
    while (next())
        switch (character) {
            // ] ) " '
            case type:
                return position
            // " '
            case 34:
            case 39:
                if (type !== 34 && type !== 39) delimiter(character)
                break
            // (
            case 40:
                if (type === 41) delimiter(type)
                break
            // \
            case 92:
                next()
                break
        }
    return position
}
function commenter(type, index2) {
    while (next())
        if (type + character === 47 + 10) break
        else if (type + character === 42 + 42 && peek() === 47) break
    return '/*' + slice(index2, position - 1) + '*' + from(type === 47 ? type : next())
}
function identifier(index2) {
    while (!token(peek())) next()
    return slice(index2, position)
}
function compile(value) {
    return dealloc(parse('', null, null, null, [''], (value = alloc(value)), 0, [0], value))
}
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index2 = 0
    var offset = 0
    var length2 = pseudo
    var atrule = 0
    var property = 0
    var previous = 0
    var variable = 1
    var scanning = 1
    var ampersand = 1
    var character2 = 0
    var type = ''
    var props = rules
    var children = rulesets
    var reference = rule
    var characters2 = type
    while (scanning)
        switch (((previous = character2), (character2 = next()))) {
            // (
            case 40:
                if (previous != 108 && charat(characters2, length2 - 1) == 58) {
                    if (
                        indexof((characters2 += replace(delimit(character2), '&', '&\f')), '&\f') !=
                        -1
                    )
                        ampersand = -1
                    break
                }
            // " ' [
            case 34:
            case 39:
            case 91:
                characters2 += delimit(character2)
                break
            // \t \n \r \s
            case 9:
            case 10:
            case 13:
            case 32:
                characters2 += whitespace(previous)
                break
            // \
            case 92:
                characters2 += escaping(caret() - 1, 7)
                continue
            // /
            case 47:
                switch (peek()) {
                    case 42:
                    case 47:
                        append2(comment(commenter(next(), caret()), root, parent), declarations)
                        break
                    default:
                        characters2 += '/'
                }
                break
            // {
            case 123 * variable:
                points[index2++] = strlen(characters2) * ampersand
            // } ; \0
            case 125 * variable:
            case 59:
            case 0:
                switch (character2) {
                    // \0 }
                    case 0:
                    case 125:
                        scanning = 0
                    // ;
                    case 59 + offset:
                        if (ampersand == -1) characters2 = replace(characters2, /\f/g, '')
                        if (property > 0 && strlen(characters2) - length2)
                            append2(
                                property > 32
                                    ? declaration(characters2 + ';', rule, parent, length2 - 1)
                                    : declaration(
                                          replace(characters2, ' ', '') + ';',
                                          rule,
                                          parent,
                                          length2 - 2
                                      ),
                                declarations
                            )
                        break
                    // @ ;
                    case 59:
                        characters2 += ';'
                    // { rule/at-rule
                    default:
                        append2(
                            (reference = ruleset(
                                characters2,
                                root,
                                parent,
                                index2,
                                offset,
                                rules,
                                points,
                                type,
                                (props = []),
                                (children = []),
                                length2
                            )),
                            rulesets
                        )
                        if (character2 === 123)
                            if (offset === 0)
                                parse(
                                    characters2,
                                    root,
                                    reference,
                                    reference,
                                    props,
                                    rulesets,
                                    length2,
                                    points,
                                    children
                                )
                            else
                                switch (
                                    atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule
                                ) {
                                    // d l m s
                                    case 100:
                                    case 108:
                                    case 109:
                                    case 115:
                                        parse(
                                            value,
                                            reference,
                                            reference,
                                            rule &&
                                                append2(
                                                    ruleset(
                                                        value,
                                                        reference,
                                                        reference,
                                                        0,
                                                        0,
                                                        rules,
                                                        points,
                                                        type,
                                                        rules,
                                                        (props = []),
                                                        length2
                                                    ),
                                                    children
                                                ),
                                            rules,
                                            children,
                                            length2,
                                            points,
                                            rule ? props : children
                                        )
                                        break
                                    default:
                                        parse(
                                            characters2,
                                            reference,
                                            reference,
                                            reference,
                                            [''],
                                            children,
                                            0,
                                            points,
                                            children
                                        )
                                }
                }
                ;(index2 = offset = property = 0),
                    (variable = ampersand = 1),
                    (type = characters2 = ''),
                    (length2 = pseudo)
                break
            // :
            case 58:
                ;(length2 = 1 + strlen(characters2)), (property = previous)
            default:
                if (variable < 1) {
                    if (character2 == 123) --variable
                    else if (character2 == 125 && variable++ == 0 && prev() == 125) continue
                }
                switch (((characters2 += from(character2)), character2 * variable)) {
                    // &
                    case 38:
                        ampersand = offset > 0 ? 1 : ((characters2 += '\f'), -1)
                        break
                    // ,
                    case 44:
                        ;(points[index2++] = (strlen(characters2) - 1) * ampersand), (ampersand = 1)
                        break
                    // @
                    case 64:
                        if (peek() === 45) characters2 += delimit(next())
                        ;(atrule = peek()),
                            (offset = length2 =
                                strlen((type = characters2 += identifier(caret())))),
                            character2++
                        break
                    // -
                    case 45:
                        if (previous === 45 && strlen(characters2) == 2) variable = 0
                }
        }
    return rulesets
}
function ruleset(
    value,
    root,
    parent,
    index2,
    offset,
    rules,
    points,
    type,
    props,
    children,
    length2
) {
    var post = offset - 1
    var rule = offset === 0 ? rules : ['']
    var size = sizeof(rule)
    for (var i = 0, j = 0, k2 = 0; i < index2; ++i)
        for (
            var x2 = 0, y2 = substr(value, post + 1, (post = abs((j = points[i])))), z = value;
            x2 < size;
            ++x2
        )
            if ((z = trim(j > 0 ? rule[x2] + ' ' + y2 : replace(y2, /&\f/g, rule[x2]))))
                props[k2++] = z
    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2)
}
function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)
}
function declaration(value, root, parent, length2) {
    return node(
        value,
        root,
        parent,
        DECLARATION,
        substr(value, 0, length2),
        substr(value, length2 + 1, -1),
        length2
    )
}
function serialize(children, callback) {
    var output = ''
    var length2 = sizeof(children)
    for (var i = 0; i < length2; i++) output += callback(children[i], i, children, callback) || ''
    return output
}
function stringify(element, index2, children, callback) {
    switch (element.type) {
        case LAYER:
            if (element.children.length) break
        case IMPORT:
        case DECLARATION:
            return (element.return = element.return || element.value)
        case COMMENT:
            return ''
        case KEYFRAMES:
            return (element.return =
                element.value + '{' + serialize(element.children, callback) + '}')
        case RULESET:
            element.value = element.props.join(',')
    }
    return strlen((children = serialize(element.children, callback)))
        ? (element.return = element.value + '{' + children + '}')
        : ''
}
function middleware(collection) {
    var length2 = sizeof(collection)
    return function (element, index2, children, callback) {
        var output = ''
        for (var i = 0; i < length2; i++)
            output += collection[i](element, index2, children, callback) || ''
        return output
    }
}
function rulesheet(callback) {
    return function (element) {
        if (!element.root) {
            if ((element = element.return)) callback(element)
        }
    }
}
function memoize2(fn) {
    var cache = /* @__PURE__ */ Object.create(null)
    return function (arg) {
        if (cache[arg] === void 0) cache[arg] = fn(arg)
        return cache[arg]
    }
}
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
    var previous = 0
    var character2 = 0
    while (true) {
        previous = character2
        character2 = peek()
        if (previous === 38 && character2 === 12) {
            points[index2] = 1
        }
        if (token(character2)) {
            break
        }
        next()
    }
    return slice(begin, position)
}
var toRules = function toRules2(parsed, points) {
    var index2 = -1
    var character2 = 44
    do {
        switch (token(character2)) {
            case 0:
                if (character2 === 38 && peek() === 12) {
                    points[index2] = 1
                }
                parsed[index2] += identifierWithPointTracking(position - 1, points, index2)
                break
            case 2:
                parsed[index2] += delimit(character2)
                break
            case 4:
                if (character2 === 44) {
                    parsed[++index2] = peek() === 58 ? '&\f' : ''
                    points[index2] = parsed[index2].length
                    break
                }
            // fallthrough
            default:
                parsed[index2] += from(character2)
        }
    } while ((character2 = next()))
    return parsed
}
var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points))
}
var fixedElements = /* @__PURE__ */ new WeakMap()
var compat = function compat2(element) {
    if (
        element.type !== 'rule' ||
        !element.parent || // positive .length indicates that this rule contains pseudo
        // negative .length indicates that this rule has been already prefixed
        element.length < 1
    ) {
        return
    }
    var value = element.value
    var parent = element.parent
    var isImplicitRule = element.column === parent.column && element.line === parent.line
    while (parent.type !== 'rule') {
        parent = parent.parent
        if (!parent) return
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
        return
    }
    if (isImplicitRule) {
        return
    }
    fixedElements.set(element, true)
    var points = []
    var rules = getRules(value, points)
    var parentRules = parent.props
    for (var i = 0, k2 = 0; i < rules.length; i++) {
        for (var j = 0; j < parentRules.length; j++, k2++) {
            element.props[k2] = points[i]
                ? rules[i].replace(/&\f/g, parentRules[j])
                : parentRules[j] + ' ' + rules[i]
        }
    }
}
var removeLabel = function removeLabel2(element) {
    if (element.type === 'decl') {
        var value = element.value
        if (
            // charcode for l
            value.charCodeAt(0) === 108 && // charcode for b
            value.charCodeAt(2) === 98
        ) {
            element['return'] = ''
            element.value = ''
        }
    }
}
function prefix(value, length2) {
    switch (hash(value, length2)) {
        // color-adjust
        case 5103:
            return WEBKIT + 'print-' + value + value
        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return WEBKIT + value + value
        // appearance, user-select, transform, hyphens, text-size-adjust
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return WEBKIT + value + MOZ + value + MS + value + value
        // flex, flex-direction
        case 6828:
        case 4268:
            return WEBKIT + value + MS + value + value
        // order
        case 6165:
            return WEBKIT + value + MS + 'flex-' + value + value
        // align-items
        case 5187:
            return (
                WEBKIT +
                value +
                replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') +
                value
            )
        // align-self
        case 5443:
            return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value
        // align-content
        case 4675:
            return (
                WEBKIT +
                value +
                MS +
                'flex-line-pack' +
                replace(value, /align-content|flex-|-self/, '') +
                value
            )
        // flex-shrink
        case 5548:
            return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value
        // flex-basis
        case 5292:
            return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value
        // flex-grow
        case 6060:
            return (
                WEBKIT +
                'box-' +
                replace(value, '-grow', '') +
                WEBKIT +
                value +
                MS +
                replace(value, 'grow', 'positive') +
                value
            )
        // transition
        case 4554:
            return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value
        // cursor
        case 6187:
            return (
                replace(
                    replace(
                        replace(value, /(zoom-|grab)/, WEBKIT + '$1'),
                        /(image-set)/,
                        WEBKIT + '$1'
                    ),
                    value,
                    ''
                ) + value
            )
        // background, background-image
        case 5495:
        case 3959:
            return replace(value, /(image-set\([^]*)/, WEBKIT + '$1$`$1')
        // justify-content
        case 4968:
            return (
                replace(
                    replace(
                        value,
                        /(.+:)(flex-)?(.*)/,
                        WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'
                    ),
                    /s.+-b[^;]+/,
                    'justify'
                ) +
                WEBKIT +
                value +
                value
            )
        // (margin|padding)-inline-(start|end)
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value
        // (min|max)?(width|height|inline-size|block-size)
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            if (strlen(value) - 1 - length2 > 6)
                switch (charat(value, length2 + 1)) {
                    // (m)ax-content, (m)in-content
                    case 109:
                        if (charat(value, length2 + 4) !== 45) break
                    // (f)ill-available, (f)it-content
                    case 102:
                        return (
                            replace(
                                value,
                                /(.+:)(.+)-([^]+)/,
                                '$1' +
                                    WEBKIT +
                                    '$2-$3$1' +
                                    MOZ +
                                    (charat(value, length2 + 3) == 108 ? '$3' : '$2-$3')
                            ) + value
                        )
                    // (s)tretch
                    case 115:
                        return ~indexof(value, 'stretch')
                            ? prefix(replace(value, 'stretch', 'fill-available'), length2) + value
                            : value
                }
            break
        // position: sticky
        case 4949:
            if (charat(value, length2 + 1) !== 115) break
        // display: (flex|inline-flex)
        case 6444:
            switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
                // stic(k)y
                case 107:
                    return replace(value, ':', ':' + WEBKIT) + value
                // (inline-)?fl(e)x
                case 101:
                    return (
                        replace(
                            value,
                            /(.+:)([^;!]+)(;|!.+)?/,
                            '$1' +
                                WEBKIT +
                                (charat(value, 14) === 45 ? 'inline-' : '') +
                                'box$3$1' +
                                WEBKIT +
                                '$2$3$1' +
                                MS +
                                '$2box$3'
                        ) + value
                    )
            }
            break
        // writing-mode
        case 5936:
            switch (charat(value, length2 + 11)) {
                // vertical-l(r)
                case 114:
                    return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value
                // vertical-r(l)
                case 108:
                    return (
                        WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value
                    )
                // horizontal(-)tb
                case 45:
                    return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value
            }
            return WEBKIT + value + MS + value + value
    }
    return value
}
var prefixer = function prefixer2(element, index2, children, callback) {
    if (element.length > -1) {
        if (!element['return'])
            switch (element.type) {
                case DECLARATION:
                    element['return'] = prefix(element.value, element.length)
                    break
                case KEYFRAMES:
                    return serialize(
                        [
                            copy(element, {
                                value: replace(element.value, '@', '@' + WEBKIT)
                            })
                        ],
                        callback
                    )
                case RULESET:
                    if (element.length)
                        return combine(element.props, function (value) {
                            switch (match(value, /(::plac\w+|:read-\w+)/)) {
                                // :read-(only|write)
                                case ':read-only':
                                case ':read-write':
                                    return serialize(
                                        [
                                            copy(element, {
                                                props: [
                                                    replace(value, /:(read-\w+)/, ':' + MOZ + '$1')
                                                ]
                                            })
                                        ],
                                        callback
                                    )
                                // :placeholder
                                case '::placeholder':
                                    return serialize(
                                        [
                                            copy(element, {
                                                props: [
                                                    replace(
                                                        value,
                                                        /:(plac\w+)/,
                                                        ':' + WEBKIT + 'input-$1'
                                                    )
                                                ]
                                            }),
                                            copy(element, {
                                                props: [
                                                    replace(value, /:(plac\w+)/, ':' + MOZ + '$1')
                                                ]
                                            }),
                                            copy(element, {
                                                props: [
                                                    replace(value, /:(plac\w+)/, MS + 'input-$1')
                                                ]
                                            })
                                        ],
                                        callback
                                    )
                            }
                            return ''
                        })
            }
    }
}
var defaultStylisPlugins = [prefixer]
var createCache = function createCache2(options2) {
    var key = options2.key
    if (key === 'css') {
        var ssrStyles = document.querySelectorAll('style[data-emotion]:not([data-s])')
        Array.prototype.forEach.call(ssrStyles, function (node2) {
            var dataEmotionAttribute = node2.getAttribute('data-emotion')
            if (dataEmotionAttribute.indexOf(' ') === -1) {
                return
            }
            document.head.appendChild(node2)
            node2.setAttribute('data-s', '')
        })
    }
    var stylisPlugins = options2.stylisPlugins || defaultStylisPlugins
    var inserted = {}
    var container
    var nodesToHydrate = []
    {
        container = options2.container || document.head
        Array.prototype.forEach.call(
            // this means we will ignore elements which don't have a space in them which
            // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
            function (node2) {
                var attrib = node2.getAttribute('data-emotion').split(' ')
                for (var i = 1; i < attrib.length; i++) {
                    inserted[attrib[i]] = true
                }
                nodesToHydrate.push(node2)
            }
        )
    }
    var _insert
    var omnipresentPlugins = [compat, removeLabel]
    {
        var currentSheet
        var finalizingPlugins = [
            stringify,
            rulesheet(function (rule) {
                currentSheet.insert(rule)
            })
        ]
        var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins))
        var stylis = function stylis2(styles) {
            return serialize(compile(styles), serializer)
        }
        _insert = function insert(selector, serialized, sheet, shouldCache) {
            currentSheet = sheet
            stylis(selector ? selector + '{' + serialized.styles + '}' : serialized.styles)
            if (shouldCache) {
                cache.inserted[serialized.name] = true
            }
        }
    }
    var cache = {
        key,
        sheet: new StyleSheet({
            key,
            container,
            nonce: options2.nonce,
            speedy: options2.speedy,
            prepend: options2.prepend,
            insertionPoint: options2.insertionPoint
        }),
        nonce: options2.nonce,
        inserted,
        registered: {},
        insert: _insert
    }
    cache.sheet.hydrate(nodesToHydrate)
    return cache
}
var reactIs = { exports: {} }
var reactIs_production_min = {}
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production_min
function requireReactIs_production_min() {
    if (hasRequiredReactIs_production_min) return reactIs_production_min
    hasRequiredReactIs_production_min = 1
    var b = 'function' === typeof Symbol && Symbol.for,
        c2 = b ? Symbol.for('react.element') : 60103,
        d = b ? Symbol.for('react.portal') : 60106,
        e = b ? Symbol.for('react.fragment') : 60107,
        f = b ? Symbol.for('react.strict_mode') : 60108,
        g = b ? Symbol.for('react.profiler') : 60114,
        h = b ? Symbol.for('react.provider') : 60109,
        k2 = b ? Symbol.for('react.context') : 60110,
        l = b ? Symbol.for('react.async_mode') : 60111,
        m = b ? Symbol.for('react.concurrent_mode') : 60111,
        n = b ? Symbol.for('react.forward_ref') : 60112,
        p = b ? Symbol.for('react.suspense') : 60113,
        q = b ? Symbol.for('react.suspense_list') : 60120,
        r2 = b ? Symbol.for('react.memo') : 60115,
        t = b ? Symbol.for('react.lazy') : 60116,
        v = b ? Symbol.for('react.block') : 60121,
        w2 = b ? Symbol.for('react.fundamental') : 60117,
        x2 = b ? Symbol.for('react.responder') : 60118,
        y2 = b ? Symbol.for('react.scope') : 60119
    function z(a2) {
        if ('object' === typeof a2 && null !== a2) {
            var u = a2.$$typeof
            switch (u) {
                case c2:
                    switch (((a2 = a2.type), a2)) {
                        case l:
                        case m:
                        case e:
                        case g:
                        case f:
                        case p:
                            return a2
                        default:
                            switch (((a2 = a2 && a2.$$typeof), a2)) {
                                case k2:
                                case n:
                                case t:
                                case r2:
                                case h:
                                    return a2
                                default:
                                    return u
                            }
                    }
                case d:
                    return u
            }
        }
    }
    function A(a2) {
        return z(a2) === m
    }
    reactIs_production_min.AsyncMode = l
    reactIs_production_min.ConcurrentMode = m
    reactIs_production_min.ContextConsumer = k2
    reactIs_production_min.ContextProvider = h
    reactIs_production_min.Element = c2
    reactIs_production_min.ForwardRef = n
    reactIs_production_min.Fragment = e
    reactIs_production_min.Lazy = t
    reactIs_production_min.Memo = r2
    reactIs_production_min.Portal = d
    reactIs_production_min.Profiler = g
    reactIs_production_min.StrictMode = f
    reactIs_production_min.Suspense = p
    reactIs_production_min.isAsyncMode = function (a2) {
        return A(a2) || z(a2) === l
    }
    reactIs_production_min.isConcurrentMode = A
    reactIs_production_min.isContextConsumer = function (a2) {
        return z(a2) === k2
    }
    reactIs_production_min.isContextProvider = function (a2) {
        return z(a2) === h
    }
    reactIs_production_min.isElement = function (a2) {
        return 'object' === typeof a2 && null !== a2 && a2.$$typeof === c2
    }
    reactIs_production_min.isForwardRef = function (a2) {
        return z(a2) === n
    }
    reactIs_production_min.isFragment = function (a2) {
        return z(a2) === e
    }
    reactIs_production_min.isLazy = function (a2) {
        return z(a2) === t
    }
    reactIs_production_min.isMemo = function (a2) {
        return z(a2) === r2
    }
    reactIs_production_min.isPortal = function (a2) {
        return z(a2) === d
    }
    reactIs_production_min.isProfiler = function (a2) {
        return z(a2) === g
    }
    reactIs_production_min.isStrictMode = function (a2) {
        return z(a2) === f
    }
    reactIs_production_min.isSuspense = function (a2) {
        return z(a2) === p
    }
    reactIs_production_min.isValidElementType = function (a2) {
        return (
            'string' === typeof a2 ||
            'function' === typeof a2 ||
            a2 === e ||
            a2 === m ||
            a2 === g ||
            a2 === f ||
            a2 === p ||
            a2 === q ||
            ('object' === typeof a2 &&
                null !== a2 &&
                (a2.$$typeof === t ||
                    a2.$$typeof === r2 ||
                    a2.$$typeof === h ||
                    a2.$$typeof === k2 ||
                    a2.$$typeof === n ||
                    a2.$$typeof === w2 ||
                    a2.$$typeof === x2 ||
                    a2.$$typeof === y2 ||
                    a2.$$typeof === v))
        )
    }
    reactIs_production_min.typeOf = z
    return reactIs_production_min
}
var hasRequiredReactIs
function requireReactIs() {
    if (hasRequiredReactIs) return reactIs.exports
    hasRequiredReactIs = 1
    {
        reactIs.exports = requireReactIs_production_min()
    }
    return reactIs.exports
}
var hoistNonReactStatics_cjs
var hasRequiredHoistNonReactStatics_cjs
function requireHoistNonReactStatics_cjs() {
    if (hasRequiredHoistNonReactStatics_cjs) return hoistNonReactStatics_cjs
    hasRequiredHoistNonReactStatics_cjs = 1
    var reactIs2 = requireReactIs()
    var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
    }
    var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
    }
    var FORWARD_REF_STATICS = {
        $$typeof: true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
    }
    var MEMO_STATICS = {
        $$typeof: true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
    }
    var TYPE_STATICS = {}
    TYPE_STATICS[reactIs2.ForwardRef] = FORWARD_REF_STATICS
    TYPE_STATICS[reactIs2.Memo] = MEMO_STATICS
    function getStatics(component) {
        if (reactIs2.isMemo(component)) {
            return MEMO_STATICS
        }
        return TYPE_STATICS[component['$$typeof']] || REACT_STATICS
    }
    var defineProperty = Object.defineProperty
    var getOwnPropertyNames2 = Object.getOwnPropertyNames
    var getOwnPropertySymbols2 = Object.getOwnPropertySymbols
    var getOwnPropertyDescriptor2 = Object.getOwnPropertyDescriptor
    var getPrototypeOf2 = Object.getPrototypeOf
    var objectPrototype = Object.prototype
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
            if (objectPrototype) {
                var inheritedComponent = getPrototypeOf2(sourceComponent)
                if (inheritedComponent && inheritedComponent !== objectPrototype) {
                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist)
                }
            }
            var keys2 = getOwnPropertyNames2(sourceComponent)
            if (getOwnPropertySymbols2) {
                keys2 = keys2.concat(getOwnPropertySymbols2(sourceComponent))
            }
            var targetStatics = getStatics(targetComponent)
            var sourceStatics = getStatics(sourceComponent)
            for (var i = 0; i < keys2.length; ++i) {
                var key = keys2[i]
                if (
                    !KNOWN_STATICS[key] &&
                    !(blacklist && blacklist[key]) &&
                    !(sourceStatics && sourceStatics[key]) &&
                    !(targetStatics && targetStatics[key])
                ) {
                    var descriptor = getOwnPropertyDescriptor2(sourceComponent, key)
                    try {
                        defineProperty(targetComponent, key, descriptor)
                    } catch (e) {}
                }
            }
        }
        return targetComponent
    }
    hoistNonReactStatics_cjs = hoistNonReactStatics
    return hoistNonReactStatics_cjs
}
requireHoistNonReactStatics_cjs()
var isBrowser = true
function getRegisteredStyles(registered, registeredStyles, classNames2) {
    var rawClassName = ''
    classNames2.split(' ').forEach(function (className) {
        if (registered[className] !== void 0) {
            registeredStyles.push(registered[className] + ';')
        } else if (className) {
            rawClassName += className + ' '
        }
    })
    return rawClassName
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
    var className = cache.key + '-' + serialized.name
    if (
        // we only need to add the styles to the registered cache if the
        // class name could be used further down
        // the tree but if it's a string tag, we know it won't
        // so we don't have to add it to registered cache.
        // this improves memory usage since we can avoid storing the whole style string
        (isStringTag === false || // we need to always store it if we're in compat mode and
            // in node since emotion-server relies on whether a style is in
            // the registered cache to know whether a style is global or not
            // also, note that this check will be dead code eliminated in the browser
            isBrowser === false) &&
        cache.registered[className] === void 0
    ) {
        cache.registered[className] = serialized.styles
    }
}
var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
    registerStyles(cache, serialized, isStringTag)
    var className = cache.key + '-' + serialized.name
    if (cache.inserted[serialized.name] === void 0) {
        var current = serialized
        do {
            cache.insert(serialized === current ? '.' + className : '', current, cache.sheet, true)
            current = current.next
        } while (current !== void 0)
    }
}
function murmur2(str) {
    var h = 0
    var k2,
        i = 0,
        len = str.length
    for (; len >= 4; ++i, len -= 4) {
        k2 =
            (str.charCodeAt(i) & 255) |
            ((str.charCodeAt(++i) & 255) << 8) |
            ((str.charCodeAt(++i) & 255) << 16) |
            ((str.charCodeAt(++i) & 255) << 24)
        k2 = /* Math.imul(k, m): */ (k2 & 65535) * 1540483477 + (((k2 >>> 16) * 59797) << 16)
        k2 ^= /* k >>> r: */ k2 >>> 24
        h =
            /* Math.imul(k, m): */
            ((k2 & 65535) * 1540483477 + (((k2 >>> 16) * 59797) << 16)) /* Math.imul(h, m): */ ^
            ((h & 65535) * 1540483477 + (((h >>> 16) * 59797) << 16))
    }
    switch (len) {
        case 3:
            h ^= (str.charCodeAt(i + 2) & 255) << 16
        case 2:
            h ^= (str.charCodeAt(i + 1) & 255) << 8
        case 1:
            h ^= str.charCodeAt(i) & 255
            h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + (((h >>> 16) * 59797) << 16)
    }
    h ^= h >>> 13
    h = /* Math.imul(h, m): */ (h & 65535) * 1540483477 + (((h >>> 16) * 59797) << 16)
    return ((h ^ (h >>> 15)) >>> 0).toString(36)
}
var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    scale: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
}
var hyphenateRegex = /[A-Z]|^ms/g
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g
var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45
}
var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== 'boolean'
}
var processStyleName = /* @__PURE__ */ memoize2(function (styleName) {
    return isCustomProperty(styleName)
        ? styleName
        : styleName.replace(hyphenateRegex, '-$&').toLowerCase()
})
var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
        case 'animation':
        case 'animationName': {
            if (typeof value === 'string') {
                return value.replace(animationRegex, function (match2, p1, p2) {
                    cursor = {
                        name: p1,
                        styles: p2,
                        next: cursor
                    }
                    return p1
                })
            }
        }
    }
    if (
        unitlessKeys[key] !== 1 &&
        !isCustomProperty(key) &&
        typeof value === 'number' &&
        value !== 0
    ) {
        return value + 'px'
    }
    return value
}
function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
        return ''
    }
    var componentSelector = interpolation
    if (componentSelector.__emotion_styles !== void 0) {
        return componentSelector
    }
    switch (typeof interpolation) {
        case 'boolean': {
            return ''
        }
        case 'object': {
            var keyframes2 = interpolation
            if (keyframes2.anim === 1) {
                cursor = {
                    name: keyframes2.name,
                    styles: keyframes2.styles,
                    next: cursor
                }
                return keyframes2.name
            }
            var serializedStyles = interpolation
            if (serializedStyles.styles !== void 0) {
                var next2 = serializedStyles.next
                if (next2 !== void 0) {
                    while (next2 !== void 0) {
                        cursor = {
                            name: next2.name,
                            styles: next2.styles,
                            next: cursor
                        }
                        next2 = next2.next
                    }
                }
                var styles = serializedStyles.styles + ';'
                return styles
            }
            return createStringFromObject(mergedProps, registered, interpolation)
        }
        case 'function': {
            if (mergedProps !== void 0) {
                var previousCursor = cursor
                var result = interpolation(mergedProps)
                cursor = previousCursor
                return handleInterpolation(mergedProps, registered, result)
            }
            break
        }
    }
    var asString = interpolation
    {
        return asString
    }
}
function createStringFromObject(mergedProps, registered, obj) {
    var string2 = ''
    if (Array.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
            string2 += handleInterpolation(mergedProps, registered, obj[i]) + ';'
        }
    } else {
        for (var key in obj) {
            var value = obj[key]
            if (typeof value !== 'object') {
                var asString = value
                if (isProcessableValue(asString)) {
                    string2 += processStyleName(key) + ':' + processStyleValue(key, asString) + ';'
                }
            } else {
                if (Array.isArray(value) && typeof value[0] === 'string' && registered == null) {
                    for (var _i = 0; _i < value.length; _i++) {
                        if (isProcessableValue(value[_i])) {
                            string2 +=
                                processStyleName(key) +
                                ':' +
                                processStyleValue(key, value[_i]) +
                                ';'
                        }
                    }
                } else {
                    var interpolated = handleInterpolation(mergedProps, registered, value)
                    switch (key) {
                        case 'animation':
                        case 'animationName': {
                            string2 += processStyleName(key) + ':' + interpolated + ';'
                            break
                        }
                        default: {
                            string2 += key + '{' + interpolated + '}'
                        }
                    }
                }
            }
        }
    }
    return string2
}
var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g
var cursor
function serializeStyles(args, registered, mergedProps) {
    if (
        args.length === 1 &&
        typeof args[0] === 'object' &&
        args[0] !== null &&
        args[0].styles !== void 0
    ) {
        return args[0]
    }
    var stringMode = true
    var styles = ''
    cursor = void 0
    var strings = args[0]
    if (strings == null || strings.raw === void 0) {
        stringMode = false
        styles += handleInterpolation(mergedProps, registered, strings)
    } else {
        var asTemplateStringsArr = strings
        styles += asTemplateStringsArr[0]
    }
    for (var i = 1; i < args.length; i++) {
        styles += handleInterpolation(mergedProps, registered, args[i])
        if (stringMode) {
            var templateStringsArr = strings
            styles += templateStringsArr[i]
        }
    }
    labelPattern.lastIndex = 0
    var identifierName = ''
    var match2
    while ((match2 = labelPattern.exec(styles)) !== null) {
        identifierName += '-' + match2[1]
    }
    var name = murmur2(styles) + identifierName
    return {
        name,
        styles,
        next: cursor
    }
}
var syncFallback = function syncFallback2(create) {
    return create()
}
var useInsertionEffect = React$1['useInsertionEffect'] ? React$1['useInsertionEffect'] : false
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback
var EmotionCacheContext = /* @__PURE__ */ reactExports.createContext(
    // we're doing this to avoid preconstruct's dead code elimination in this one case
    // because this module is primarily intended for the browser and node
    // but it's also required in react native and similar environments sometimes
    // and we could have a special build just for that
    // but this is much easier and the native packages
    // might use a different theme context in the future anyway
    typeof HTMLElement !== 'undefined'
        ? /* @__PURE__ */ createCache({
              key: 'css'
          })
        : null
)
EmotionCacheContext.Provider
var withEmotionCache = function withEmotionCache2(func) {
    return /* @__PURE__ */ reactExports.forwardRef(function (props, ref) {
        var cache = reactExports.useContext(EmotionCacheContext)
        return func(props, cache, ref)
    })
}
var ThemeContext = /* @__PURE__ */ reactExports.createContext({})
var hasOwn = {}.hasOwnProperty
var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__'
var createEmotionProps = function createEmotionProps2(type, props) {
    var newProps = {}
    for (var _key in props) {
        if (hasOwn.call(props, _key)) {
            newProps[_key] = props[_key]
        }
    }
    newProps[typePropName] = type
    return newProps
}
var Insertion = function Insertion2(_ref3) {
    var cache = _ref3.cache,
        serialized = _ref3.serialized,
        isStringTag = _ref3.isStringTag
    registerStyles(cache, serialized, isStringTag)
    useInsertionEffectAlwaysWithSyncFallback(function () {
        return insertStyles(cache, serialized, isStringTag)
    })
    return null
}
var Emotion = /* @__PURE__ */ withEmotionCache(function (props, cache, ref) {
    var cssProp = props.css
    if (typeof cssProp === 'string' && cache.registered[cssProp] !== void 0) {
        cssProp = cache.registered[cssProp]
    }
    var WrappedComponent = props[typePropName]
    var registeredStyles = [cssProp]
    var className = ''
    if (typeof props.className === 'string') {
        className = getRegisteredStyles(cache.registered, registeredStyles, props.className)
    } else if (props.className != null) {
        className = props.className + ' '
    }
    var serialized = serializeStyles(
        registeredStyles,
        void 0,
        reactExports.useContext(ThemeContext)
    )
    className += cache.key + '-' + serialized.name
    var newProps = {}
    for (var _key2 in props) {
        if (hasOwn.call(props, _key2) && _key2 !== 'css' && _key2 !== typePropName && true) {
            newProps[_key2] = props[_key2]
        }
    }
    newProps.className = className
    if (ref) {
        newProps.ref = ref
    }
    return /* @__PURE__ */ reactExports.createElement(
        reactExports.Fragment,
        null,
        /* @__PURE__ */ reactExports.createElement(Insertion, {
            cache,
            serialized,
            isStringTag: typeof WrappedComponent === 'string'
        }),
        /* @__PURE__ */ reactExports.createElement(WrappedComponent, newProps)
    )
})
var Emotion$1 = Emotion
var jsx = function jsx2(type, props) {
    var args = arguments
    if (props == null || !hasOwn.call(props, 'css')) {
        return reactExports.createElement.apply(void 0, args)
    }
    var argsLength = args.length
    var createElementArgArray = new Array(argsLength)
    createElementArgArray[0] = Emotion$1
    createElementArgArray[1] = createEmotionProps(type, props)
    for (var i = 2; i < argsLength; i++) {
        createElementArgArray[i] = args[i]
    }
    return reactExports.createElement.apply(null, createElementArgArray)
}
;(function (_jsx) {
    var JSX
        /* @__PURE__ */
    ;(function (_JSX) {})(JSX || (JSX = _jsx.JSX || (_jsx.JSX = {})))
})(jsx || (jsx = {}))
function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key]
    }
    return serializeStyles(args)
}
function keyframes() {
    var insertable = css.apply(void 0, arguments)
    var name = 'animation-' + insertable.name
    return {
        name,
        styles: '@keyframes ' + name + '{' + insertable.styles + '}',
        anim: 1,
        toString: function toString3() {
            return '_EMO_' + this.name + '_' + this.styles + '_EMO_'
        }
    }
}
function _taggedTemplateLiteral(e, t) {
    return (
        t || (t = e.slice(0)),
        Object.freeze(
            Object.defineProperties(e, {
                raw: {
                    value: Object.freeze(t)
                }
            })
        )
    )
}
const min = Math.min
const max = Math.max
const round = Math.round
const floor = Math.floor
const createCoords = (v) => ({
    x: v,
    y: v
})
function rectToClientRect(rect) {
    const { x: x2, y: y2, width, height } = rect
    return {
        width,
        height,
        top: y2,
        left: x2,
        right: x2 + width,
        bottom: y2 + height,
        x: x2,
        y: y2
    }
}
function hasWindow() {
    return typeof window !== 'undefined'
}
function getNodeName(node2) {
    if (isNode(node2)) {
        return (node2.nodeName || '').toLowerCase()
    }
    return '#document'
}
function getWindow(node2) {
    var _node$ownerDocument
    return (
        (node2 == null || (_node$ownerDocument = node2.ownerDocument) == null
            ? void 0
            : _node$ownerDocument.defaultView) || window
    )
}
function getDocumentElement(node2) {
    var _ref3
    return (_ref3 = (isNode(node2) ? node2.ownerDocument : node2.document) || window.document) ==
        null
        ? void 0
        : _ref3.documentElement
}
function isNode(value) {
    if (!hasWindow()) {
        return false
    }
    return value instanceof Node || value instanceof getWindow(value).Node
}
function isElement(value) {
    if (!hasWindow()) {
        return false
    }
    return value instanceof Element || value instanceof getWindow(value).Element
}
function isHTMLElement(value) {
    if (!hasWindow()) {
        return false
    }
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement
}
function isShadowRoot(value) {
    if (!hasWindow() || typeof ShadowRoot === 'undefined') {
        return false
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot
}
function isOverflowElement(element) {
    const { overflow, overflowX, overflowY, display } = getComputedStyle$1(element)
    return (
        /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) &&
        !['inline', 'contents'].includes(display)
    )
}
function isWebKit() {
    if (typeof CSS === 'undefined' || !CSS.supports) return false
    return CSS.supports('-webkit-backdrop-filter', 'none')
}
function isLastTraversableNode(node2) {
    return ['html', 'body', '#document'].includes(getNodeName(node2))
}
function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element)
}
function getParentNode(node2) {
    if (getNodeName(node2) === 'html') {
        return node2
    }
    const result =
        // Step into the shadow DOM of the parent of a slotted node.
        node2.assignedSlot || // DOM Element detected.
        node2.parentNode || // ShadowRoot detected.
        (isShadowRoot(node2) && node2.host) || // Fallback.
        getDocumentElement(node2)
    return isShadowRoot(result) ? result.host : result
}
function getNearestOverflowAncestor(node2) {
    const parentNode = getParentNode(node2)
    if (isLastTraversableNode(parentNode)) {
        return node2.ownerDocument ? node2.ownerDocument.body : node2.body
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
        return parentNode
    }
    return getNearestOverflowAncestor(parentNode)
}
function getOverflowAncestors(node2, list, traverseIframes) {
    var _node$ownerDocument2
    if (list === void 0) {
        list = []
    }
    if (traverseIframes === void 0) {
        traverseIframes = true
    }
    const scrollableAncestor = getNearestOverflowAncestor(node2)
    const isBody =
        scrollableAncestor ===
        ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body)
    const win = getWindow(scrollableAncestor)
    if (isBody) {
        const frameElement = getFrameElement(win)
        return list.concat(
            win,
            win.visualViewport || [],
            isOverflowElement(scrollableAncestor) ? scrollableAncestor : [],
            frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []
        )
    }
    return list.concat(
        scrollableAncestor,
        getOverflowAncestors(scrollableAncestor, [], traverseIframes)
    )
}
function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null
}
function getCssDimensions(element) {
    const css4 = getComputedStyle$1(element)
    let width = parseFloat(css4.width) || 0
    let height = parseFloat(css4.height) || 0
    const hasOffset = isHTMLElement(element)
    const offsetWidth = hasOffset ? element.offsetWidth : width
    const offsetHeight = hasOffset ? element.offsetHeight : height
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight
    if (shouldFallback) {
        width = offsetWidth
        height = offsetHeight
    }
    return {
        width,
        height,
        $: shouldFallback
    }
}
function unwrapElement(element) {
    return !isElement(element) ? element.contextElement : element
}
function getScale(element) {
    const domElement = unwrapElement(element)
    if (!isHTMLElement(domElement)) {
        return createCoords(1)
    }
    const rect = domElement.getBoundingClientRect()
    const { width, height, $ } = getCssDimensions(domElement)
    let x2 = ($ ? round(rect.width) : rect.width) / width
    let y2 = ($ ? round(rect.height) : rect.height) / height
    if (!x2 || !Number.isFinite(x2)) {
        x2 = 1
    }
    if (!y2 || !Number.isFinite(y2)) {
        y2 = 1
    }
    return {
        x: x2,
        y: y2
    }
}
const noOffsets = /* @__PURE__ */ createCoords(0)
function getVisualOffsets(element) {
    const win = getWindow(element)
    if (!isWebKit() || !win.visualViewport) {
        return noOffsets
    }
    return {
        x: win.visualViewport.offsetLeft,
        y: win.visualViewport.offsetTop
    }
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    {
        return false
    }
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
        includeScale = false
    }
    const clientRect = element.getBoundingClientRect()
    const domElement = unwrapElement(element)
    let scale = createCoords(1)
    if (includeScale) {
        {
            scale = getScale(element)
        }
    }
    const visualOffsets = shouldAddVisualOffsets() ? getVisualOffsets(domElement) : createCoords(0)
    let x2 = (clientRect.left + visualOffsets.x) / scale.x
    let y2 = (clientRect.top + visualOffsets.y) / scale.y
    let width = clientRect.width / scale.x
    let height = clientRect.height / scale.y
    if (domElement) {
        const win = getWindow(domElement)
        const offsetWin = offsetParent
        let currentWin = win
        let currentIFrame = getFrameElement(currentWin)
        while (currentIFrame && offsetParent && offsetWin !== currentWin) {
            const iframeScale = getScale(currentIFrame)
            const iframeRect = currentIFrame.getBoundingClientRect()
            const css4 = getComputedStyle$1(currentIFrame)
            const left =
                iframeRect.left +
                (currentIFrame.clientLeft + parseFloat(css4.paddingLeft)) * iframeScale.x
            const top =
                iframeRect.top +
                (currentIFrame.clientTop + parseFloat(css4.paddingTop)) * iframeScale.y
            x2 *= iframeScale.x
            y2 *= iframeScale.y
            width *= iframeScale.x
            height *= iframeScale.y
            x2 += left
            y2 += top
            currentWin = getWindow(currentIFrame)
            currentIFrame = getFrameElement(currentWin)
        }
    }
    return rectToClientRect({
        width,
        height,
        x: x2,
        y: y2
    })
}
function rectsAreEqual(a2, b) {
    return a2.x === b.x && a2.y === b.y && a2.width === b.width && a2.height === b.height
}
function observeMove(element, onMove) {
    let io = null
    let timeoutId
    const root = getDocumentElement(element)
    function cleanup() {
        var _io
        clearTimeout(timeoutId)
        ;(_io = io) == null || _io.disconnect()
        io = null
    }
    function refresh(skip, threshold2) {
        if (skip === void 0) {
            skip = false
        }
        if (threshold2 === void 0) {
            threshold2 = 1
        }
        cleanup()
        const elementRectForRootMargin = element.getBoundingClientRect()
        const { left, top, width, height } = elementRectForRootMargin
        if (!skip) {
            onMove()
        }
        if (!width || !height) {
            return
        }
        const insetTop = floor(top)
        const insetRight = floor(root.clientWidth - (left + width))
        const insetBottom = floor(root.clientHeight - (top + height))
        const insetLeft = floor(left)
        const rootMargin =
            -insetTop + 'px ' + -insetRight + 'px ' + -insetBottom + 'px ' + -insetLeft + 'px'
        const options2 = {
            rootMargin,
            threshold: max(0, min(1, threshold2)) || 1
        }
        let isFirstUpdate = true
        function handleObserve(entries) {
            const ratio = entries[0].intersectionRatio
            if (ratio !== threshold2) {
                if (!isFirstUpdate) {
                    return refresh()
                }
                if (!ratio) {
                    timeoutId = setTimeout(() => {
                        refresh(false, 1e-7)
                    }, 1e3)
                } else {
                    refresh(false, ratio)
                }
            }
            if (
                ratio === 1 &&
                !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())
            ) {
                refresh()
            }
            isFirstUpdate = false
        }
        try {
            io = new IntersectionObserver(handleObserve, {
                ...options2,
                // Handle <iframe>s
                root: root.ownerDocument
            })
        } catch (_e) {
            io = new IntersectionObserver(handleObserve, options2)
        }
        io.observe(element)
    }
    refresh(true)
    return cleanup
}
function autoUpdate(reference, floating, update, options2) {
    if (options2 === void 0) {
        options2 = {}
    }
    const {
        ancestorScroll = true,
        ancestorResize = true,
        elementResize = typeof ResizeObserver === 'function',
        layoutShift = typeof IntersectionObserver === 'function',
        animationFrame = false
    } = options2
    const referenceEl = unwrapElement(reference)
    const ancestors =
        ancestorScroll || ancestorResize
            ? [
                  ...(referenceEl ? getOverflowAncestors(referenceEl) : []),
                  ...getOverflowAncestors(floating)
              ]
            : []
    ancestors.forEach((ancestor) => {
        ancestorScroll &&
            ancestor.addEventListener('scroll', update, {
                passive: true
            })
        ancestorResize && ancestor.addEventListener('resize', update)
    })
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null
    let reobserveFrame = -1
    let resizeObserver = null
    if (elementResize) {
        resizeObserver = new ResizeObserver((_ref3) => {
            let [firstEntry] = _ref3
            if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
                resizeObserver.unobserve(floating)
                cancelAnimationFrame(reobserveFrame)
                reobserveFrame = requestAnimationFrame(() => {
                    var _resizeObserver
                    ;(_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating)
                })
            }
            update()
        })
        if (referenceEl && !animationFrame) {
            resizeObserver.observe(referenceEl)
        }
        resizeObserver.observe(floating)
    }
    let frameId
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null
    if (animationFrame) {
        frameLoop()
    }
    function frameLoop() {
        const nextRefRect = getBoundingClientRect(reference)
        if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
            update()
        }
        prevRefRect = nextRefRect
        frameId = requestAnimationFrame(frameLoop)
    }
    update()
    return () => {
        var _resizeObserver2
        ancestors.forEach((ancestor) => {
            ancestorScroll && ancestor.removeEventListener('scroll', update)
            ancestorResize && ancestor.removeEventListener('resize', update)
        })
        cleanupIo == null || cleanupIo()
        ;(_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect()
        resizeObserver = null
        if (animationFrame) {
            cancelAnimationFrame(frameId)
        }
    }
}
var index = reactExports.useLayoutEffect
var _excluded$4 = [
    'className',
    'clearValue',
    'cx',
    'getStyles',
    'getClassNames',
    'getValue',
    'hasValue',
    'isMulti',
    'isRtl',
    'options',
    'selectOption',
    'selectProps',
    'setValue',
    'theme'
]
var noop = function noop2() {}
function applyPrefixToName(prefix2, name) {
    if (!name) {
        return prefix2
    } else if (name[0] === '-') {
        return prefix2 + name
    } else {
        return prefix2 + '__' + name
    }
}
function classNames(prefix2, state) {
    for (
        var _len = arguments.length, classNameList = new Array(_len > 2 ? _len - 2 : 0), _key = 2;
        _key < _len;
        _key++
    ) {
        classNameList[_key - 2] = arguments[_key]
    }
    var arr = [].concat(classNameList)
    if (state && prefix2) {
        for (var key in state) {
            if (state.hasOwnProperty(key) && state[key]) {
                arr.push(''.concat(applyPrefixToName(prefix2, key)))
            }
        }
    }
    return arr
        .filter(function (i) {
            return i
        })
        .map(function (i) {
            return String(i).trim()
        })
        .join(' ')
}
var cleanValue = function cleanValue2(value) {
    if (isArray(value)) return value.filter(Boolean)
    if (_typeof(value) === 'object' && value !== null) return [value]
    return []
}
var cleanCommonProps = function cleanCommonProps2(props) {
    props.className
    props.clearValue
    props.cx
    props.getStyles
    props.getClassNames
    props.getValue
    props.hasValue
    props.isMulti
    props.isRtl
    props.options
    props.selectOption
    props.selectProps
    props.setValue
    props.theme
    var innerProps = _objectWithoutProperties(props, _excluded$4)
    return _objectSpread2({}, innerProps)
}
var getStyleProps = function getStyleProps2(props, name, classNamesState) {
    var cx = props.cx,
        getStyles = props.getStyles,
        getClassNames = props.getClassNames,
        className = props.className
    return {
        css: getStyles(name, props),
        className: cx(
            classNamesState !== null && classNamesState !== void 0 ? classNamesState : {},
            getClassNames(name, props),
            className
        )
    }
}
function isDocumentElement(el) {
    return [document.documentElement, document.body, window].indexOf(el) > -1
}
function normalizedHeight(el) {
    if (isDocumentElement(el)) {
        return window.innerHeight
    }
    return el.clientHeight
}
function getScrollTop(el) {
    if (isDocumentElement(el)) {
        return window.pageYOffset
    }
    return el.scrollTop
}
function scrollTo(el, top) {
    if (isDocumentElement(el)) {
        window.scrollTo(0, top)
        return
    }
    el.scrollTop = top
}
function getScrollParent(element) {
    var style = getComputedStyle(element)
    var excludeStaticParent = style.position === 'absolute'
    var overflowRx = /(auto|scroll)/
    if (style.position === 'fixed') return document.documentElement
    for (var parent = element; (parent = parent.parentElement); ) {
        style = getComputedStyle(parent)
        if (excludeStaticParent && style.position === 'static') {
            continue
        }
        if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
            return parent
        }
    }
    return document.documentElement
}
function easeOutCubic(t, b, c2, d) {
    return c2 * ((t = t / d - 1) * t * t + 1) + b
}
function animatedScrollTo(element, to) {
    var duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 200
    var callback = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : noop
    var start = getScrollTop(element)
    var change = to - start
    var increment = 10
    var currentTime = 0
    function animateScroll() {
        currentTime += increment
        var val = easeOutCubic(currentTime, start, change, duration)
        scrollTo(element, val)
        if (currentTime < duration) {
            window.requestAnimationFrame(animateScroll)
        } else {
            callback(element)
        }
    }
    animateScroll()
}
function scrollIntoView(menuEl, focusedEl) {
    var menuRect = menuEl.getBoundingClientRect()
    var focusedRect = focusedEl.getBoundingClientRect()
    var overScroll = focusedEl.offsetHeight / 3
    if (focusedRect.bottom + overScroll > menuRect.bottom) {
        scrollTo(
            menuEl,
            Math.min(
                focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll,
                menuEl.scrollHeight
            )
        )
    } else if (focusedRect.top - overScroll < menuRect.top) {
        scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0))
    }
}
function getBoundingClientObj(element) {
    var rect = element.getBoundingClientRect()
    return {
        bottom: rect.bottom,
        height: rect.height,
        left: rect.left,
        right: rect.right,
        top: rect.top,
        width: rect.width
    }
}
function isTouchCapable() {
    try {
        document.createEvent('TouchEvent')
        return true
    } catch (e) {
        return false
    }
}
function isMobileDevice() {
    try {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
            navigator.userAgent
        )
    } catch (e) {
        return false
    }
}
var passiveOptionAccessed = false
var options = {
    get passive() {
        return (passiveOptionAccessed = true)
    }
}
var w = typeof window !== 'undefined' ? window : {}
if (w.addEventListener && w.removeEventListener) {
    w.addEventListener('p', noop, options)
    w.removeEventListener('p', noop, false)
}
var supportsPassiveEvents = passiveOptionAccessed
function notNullish(item) {
    return item != null
}
function isArray(arg) {
    return Array.isArray(arg)
}
function valueTernary(isMulti, multiValue, singleValue) {
    return isMulti ? multiValue : singleValue
}
function singleValueAsValue(singleValue) {
    return singleValue
}
function multiValueAsValue(multiValue) {
    return multiValue
}
var removeProps = function removeProps2(propsObj) {
    for (
        var _len2 = arguments.length, properties = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;
        _key2 < _len2;
        _key2++
    ) {
        properties[_key2 - 1] = arguments[_key2]
    }
    var propsMap = Object.entries(propsObj).filter(function (_ref3) {
        var _ref22 = _slicedToArray(_ref3, 1),
            key = _ref22[0]
        return !properties.includes(key)
    })
    return propsMap.reduce(function (newProps, _ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            key = _ref4[0],
            val = _ref4[1]
        newProps[key] = val
        return newProps
    }, {})
}
var _excluded$3 = ['children', 'innerProps'],
    _excluded2$1 = ['children', 'innerProps']
function getMenuPlacement(_ref3) {
    var preferredMaxHeight = _ref3.maxHeight,
        menuEl = _ref3.menuEl,
        minHeight = _ref3.minHeight,
        preferredPlacement = _ref3.placement,
        shouldScroll = _ref3.shouldScroll,
        isFixedPosition = _ref3.isFixedPosition,
        controlHeight2 = _ref3.controlHeight
    var scrollParent = getScrollParent(menuEl)
    var defaultState = {
        placement: 'bottom',
        maxHeight: preferredMaxHeight
    }
    if (!menuEl || !menuEl.offsetParent) return defaultState
    var _scrollParent$getBoun = scrollParent.getBoundingClientRect(),
        scrollHeight = _scrollParent$getBoun.height
    var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(),
        menuBottom = _menuEl$getBoundingCl.bottom,
        menuHeight = _menuEl$getBoundingCl.height,
        menuTop = _menuEl$getBoundingCl.top
    var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(),
        containerTop = _menuEl$offsetParent$.top
    var viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent)
    var scrollTop = getScrollTop(scrollParent)
    var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10)
    var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10)
    var viewSpaceAbove = containerTop - marginTop
    var viewSpaceBelow = viewHeight - menuTop
    var scrollSpaceAbove = viewSpaceAbove + scrollTop
    var scrollSpaceBelow = scrollHeight - scrollTop - menuTop
    var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom
    var scrollUp = scrollTop + menuTop - marginTop
    var scrollDuration = 160
    switch (preferredPlacement) {
        case 'auto':
        case 'bottom':
            if (viewSpaceBelow >= menuHeight) {
                return {
                    placement: 'bottom',
                    maxHeight: preferredMaxHeight
                }
            }
            if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
                if (shouldScroll) {
                    animatedScrollTo(scrollParent, scrollDown, scrollDuration)
                }
                return {
                    placement: 'bottom',
                    maxHeight: preferredMaxHeight
                }
            }
            if (
                (!isFixedPosition && scrollSpaceBelow >= minHeight) ||
                (isFixedPosition && viewSpaceBelow >= minHeight)
            ) {
                if (shouldScroll) {
                    animatedScrollTo(scrollParent, scrollDown, scrollDuration)
                }
                var constrainedHeight = isFixedPosition
                    ? viewSpaceBelow - marginBottom
                    : scrollSpaceBelow - marginBottom
                return {
                    placement: 'bottom',
                    maxHeight: constrainedHeight
                }
            }
            if (preferredPlacement === 'auto' || isFixedPosition) {
                var _constrainedHeight = preferredMaxHeight
                var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove
                if (spaceAbove >= minHeight) {
                    _constrainedHeight = Math.min(
                        spaceAbove - marginBottom - controlHeight2,
                        preferredMaxHeight
                    )
                }
                return {
                    placement: 'top',
                    maxHeight: _constrainedHeight
                }
            }
            if (preferredPlacement === 'bottom') {
                if (shouldScroll) {
                    scrollTo(scrollParent, scrollDown)
                }
                return {
                    placement: 'bottom',
                    maxHeight: preferredMaxHeight
                }
            }
            break
        case 'top':
            if (viewSpaceAbove >= menuHeight) {
                return {
                    placement: 'top',
                    maxHeight: preferredMaxHeight
                }
            }
            if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
                if (shouldScroll) {
                    animatedScrollTo(scrollParent, scrollUp, scrollDuration)
                }
                return {
                    placement: 'top',
                    maxHeight: preferredMaxHeight
                }
            }
            if (
                (!isFixedPosition && scrollSpaceAbove >= minHeight) ||
                (isFixedPosition && viewSpaceAbove >= minHeight)
            ) {
                var _constrainedHeight2 = preferredMaxHeight
                if (
                    (!isFixedPosition && scrollSpaceAbove >= minHeight) ||
                    (isFixedPosition && viewSpaceAbove >= minHeight)
                ) {
                    _constrainedHeight2 = isFixedPosition
                        ? viewSpaceAbove - marginTop
                        : scrollSpaceAbove - marginTop
                }
                if (shouldScroll) {
                    animatedScrollTo(scrollParent, scrollUp, scrollDuration)
                }
                return {
                    placement: 'top',
                    maxHeight: _constrainedHeight2
                }
            }
            return {
                placement: 'bottom',
                maxHeight: preferredMaxHeight
            }
        default:
            throw new Error('Invalid placement provided "'.concat(preferredPlacement, '".'))
    }
    return defaultState
}
function alignToControl(placement) {
    var placementToCSSProp = {
        bottom: 'top',
        top: 'bottom'
    }
    return placement ? placementToCSSProp[placement] : 'bottom'
}
var coercePlacement = function coercePlacement2(p) {
    return p === 'auto' ? 'bottom' : p
}
var menuCSS = function menuCSS2(_ref22, unstyled) {
    var _objectSpread2$1
    var placement = _ref22.placement,
        _ref2$theme = _ref22.theme,
        borderRadius2 = _ref2$theme.borderRadius,
        spacing2 = _ref2$theme.spacing,
        colors2 = _ref2$theme.colors
    return _objectSpread2(
        ((_objectSpread2$1 = {
            label: 'menu'
        }),
        _defineProperty(_objectSpread2$1, alignToControl(placement), '100%'),
        _defineProperty(_objectSpread2$1, 'position', 'absolute'),
        _defineProperty(_objectSpread2$1, 'width', '100%'),
        _defineProperty(_objectSpread2$1, 'zIndex', 1),
        _objectSpread2$1),
        unstyled
            ? {}
            : {
                  backgroundColor: colors2.neutral0,
                  borderRadius: borderRadius2,
                  boxShadow: '0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)',
                  marginBottom: spacing2.menuGutter,
                  marginTop: spacing2.menuGutter
              }
    )
}
var PortalPlacementContext = /* @__PURE__ */ reactExports.createContext(null)
var MenuPlacer = function MenuPlacer2(props) {
    var children = props.children,
        minMenuHeight = props.minMenuHeight,
        maxMenuHeight = props.maxMenuHeight,
        menuPlacement = props.menuPlacement,
        menuPosition = props.menuPosition,
        menuShouldScrollIntoView = props.menuShouldScrollIntoView,
        theme = props.theme
    var _ref3 = reactExports.useContext(PortalPlacementContext) || {},
        setPortalPlacement = _ref3.setPortalPlacement
    var ref = reactExports.useRef(null)
    var _useState = reactExports.useState(maxMenuHeight),
        _useState2 = _slicedToArray(_useState, 2),
        maxHeight = _useState2[0],
        setMaxHeight = _useState2[1]
    var _useState3 = reactExports.useState(null),
        _useState4 = _slicedToArray(_useState3, 2),
        placement = _useState4[0],
        setPlacement = _useState4[1]
    var controlHeight2 = theme.spacing.controlHeight
    index(
        function () {
            var menuEl = ref.current
            if (!menuEl) return
            var isFixedPosition = menuPosition === 'fixed'
            var shouldScroll = menuShouldScrollIntoView && !isFixedPosition
            var state = getMenuPlacement({
                maxHeight: maxMenuHeight,
                menuEl,
                minHeight: minMenuHeight,
                placement: menuPlacement,
                shouldScroll,
                isFixedPosition,
                controlHeight: controlHeight2
            })
            setMaxHeight(state.maxHeight)
            setPlacement(state.placement)
            setPortalPlacement === null || setPortalPlacement === void 0
                ? void 0
                : setPortalPlacement(state.placement)
        },
        [
            maxMenuHeight,
            menuPlacement,
            menuPosition,
            menuShouldScrollIntoView,
            minMenuHeight,
            setPortalPlacement,
            controlHeight2
        ]
    )
    return children({
        ref,
        placerProps: _objectSpread2(
            _objectSpread2({}, props),
            {},
            {
                placement: placement || coercePlacement(menuPlacement),
                maxHeight
            }
        )
    })
}
var Menu = function Menu2(props) {
    var children = props.children,
        innerRef = props.innerRef,
        innerProps = props.innerProps
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'menu', {
                menu: true
            }),
            {
                ref: innerRef
            },
            innerProps
        ),
        children
    )
}
var Menu$1 = Menu
var menuListCSS = function menuListCSS2(_ref4, unstyled) {
    var maxHeight = _ref4.maxHeight,
        baseUnit2 = _ref4.theme.spacing.baseUnit
    return _objectSpread2(
        {
            maxHeight,
            overflowY: 'auto',
            position: 'relative',
            // required for offset[Height, Top] > keyboard scroll
            WebkitOverflowScrolling: 'touch'
        },
        unstyled
            ? {}
            : {
                  paddingBottom: baseUnit2,
                  paddingTop: baseUnit2
              }
    )
}
var MenuList = function MenuList2(props) {
    var children = props.children,
        innerProps = props.innerProps,
        innerRef = props.innerRef,
        isMulti = props.isMulti
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'menuList', {
                'menu-list': true,
                'menu-list--is-multi': isMulti
            }),
            {
                ref: innerRef
            },
            innerProps
        ),
        children
    )
}
var noticeCSS = function noticeCSS2(_ref5, unstyled) {
    var _ref5$theme = _ref5.theme,
        baseUnit2 = _ref5$theme.spacing.baseUnit,
        colors2 = _ref5$theme.colors
    return _objectSpread2(
        {
            textAlign: 'center'
        },
        unstyled
            ? {}
            : {
                  color: colors2.neutral40,
                  padding: ''.concat(baseUnit2 * 2, 'px ').concat(baseUnit2 * 3, 'px')
              }
    )
}
var noOptionsMessageCSS = noticeCSS
var loadingMessageCSS = noticeCSS
var NoOptionsMessage = function NoOptionsMessage2(_ref6) {
    var _ref6$children = _ref6.children,
        children = _ref6$children === void 0 ? 'No options' : _ref6$children,
        innerProps = _ref6.innerProps,
        restProps = _objectWithoutProperties(_ref6, _excluded$3)
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(
                _objectSpread2(
                    _objectSpread2({}, restProps),
                    {},
                    {
                        children,
                        innerProps
                    }
                ),
                'noOptionsMessage',
                {
                    'menu-notice': true,
                    'menu-notice--no-options': true
                }
            ),
            innerProps
        ),
        children
    )
}
var LoadingMessage = function LoadingMessage2(_ref7) {
    var _ref7$children = _ref7.children,
        children = _ref7$children === void 0 ? 'Loading...' : _ref7$children,
        innerProps = _ref7.innerProps,
        restProps = _objectWithoutProperties(_ref7, _excluded2$1)
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(
                _objectSpread2(
                    _objectSpread2({}, restProps),
                    {},
                    {
                        children,
                        innerProps
                    }
                ),
                'loadingMessage',
                {
                    'menu-notice': true,
                    'menu-notice--loading': true
                }
            ),
            innerProps
        ),
        children
    )
}
var menuPortalCSS = function menuPortalCSS2(_ref8) {
    var rect = _ref8.rect,
        offset = _ref8.offset,
        position2 = _ref8.position
    return {
        left: rect.left,
        position: position2,
        top: offset,
        width: rect.width,
        zIndex: 1
    }
}
var MenuPortal = function MenuPortal2(props) {
    var appendTo = props.appendTo,
        children = props.children,
        controlElement = props.controlElement,
        innerProps = props.innerProps,
        menuPlacement = props.menuPlacement,
        menuPosition = props.menuPosition
    var menuPortalRef = reactExports.useRef(null)
    var cleanupRef = reactExports.useRef(null)
    var _useState5 = reactExports.useState(coercePlacement(menuPlacement)),
        _useState6 = _slicedToArray(_useState5, 2),
        placement = _useState6[0],
        setPortalPlacement = _useState6[1]
    var portalPlacementContext = reactExports.useMemo(function () {
        return {
            setPortalPlacement
        }
    }, [])
    var _useState7 = reactExports.useState(null),
        _useState8 = _slicedToArray(_useState7, 2),
        computedPosition = _useState8[0],
        setComputedPosition = _useState8[1]
    var updateComputedPosition = reactExports.useCallback(
        function () {
            if (!controlElement) return
            var rect = getBoundingClientObj(controlElement)
            var scrollDistance = menuPosition === 'fixed' ? 0 : window.pageYOffset
            var offset = rect[placement] + scrollDistance
            if (
                offset !==
                    (computedPosition === null || computedPosition === void 0
                        ? void 0
                        : computedPosition.offset) ||
                rect.left !==
                    (computedPosition === null || computedPosition === void 0
                        ? void 0
                        : computedPosition.rect.left) ||
                rect.width !==
                    (computedPosition === null || computedPosition === void 0
                        ? void 0
                        : computedPosition.rect.width)
            ) {
                setComputedPosition({
                    offset,
                    rect
                })
            }
        },
        [
            controlElement,
            menuPosition,
            placement,
            computedPosition === null || computedPosition === void 0
                ? void 0
                : computedPosition.offset,
            computedPosition === null || computedPosition === void 0
                ? void 0
                : computedPosition.rect.left,
            computedPosition === null || computedPosition === void 0
                ? void 0
                : computedPosition.rect.width
        ]
    )
    index(
        function () {
            updateComputedPosition()
        },
        [updateComputedPosition]
    )
    var runAutoUpdate = reactExports.useCallback(
        function () {
            if (typeof cleanupRef.current === 'function') {
                cleanupRef.current()
                cleanupRef.current = null
            }
            if (controlElement && menuPortalRef.current) {
                cleanupRef.current = autoUpdate(
                    controlElement,
                    menuPortalRef.current,
                    updateComputedPosition,
                    {
                        elementResize: 'ResizeObserver' in window
                    }
                )
            }
        },
        [controlElement, updateComputedPosition]
    )
    index(
        function () {
            runAutoUpdate()
        },
        [runAutoUpdate]
    )
    var setMenuPortalElement = reactExports.useCallback(
        function (menuPortalElement) {
            menuPortalRef.current = menuPortalElement
            runAutoUpdate()
        },
        [runAutoUpdate]
    )
    if ((!appendTo && menuPosition !== 'fixed') || !computedPosition) return null
    var menuWrapper = jsx(
        'div',
        _extends$n(
            {
                ref: setMenuPortalElement
            },
            getStyleProps(
                _objectSpread2(
                    _objectSpread2({}, props),
                    {},
                    {
                        offset: computedPosition.offset,
                        position: menuPosition,
                        rect: computedPosition.rect
                    }
                ),
                'menuPortal',
                {
                    'menu-portal': true
                }
            ),
            innerProps
        ),
        children
    )
    return jsx(
        PortalPlacementContext.Provider,
        {
            value: portalPlacementContext
        },
        appendTo ? /* @__PURE__ */ reactDomExports.createPortal(menuWrapper, appendTo) : menuWrapper
    )
}
var containerCSS = function containerCSS2(_ref3) {
    var isDisabled = _ref3.isDisabled,
        isRtl = _ref3.isRtl
    return {
        label: 'container',
        direction: isRtl ? 'rtl' : void 0,
        pointerEvents: isDisabled ? 'none' : void 0,
        // cancel mouse events when disabled
        position: 'relative'
    }
}
var SelectContainer = function SelectContainer2(props) {
    var children = props.children,
        innerProps = props.innerProps,
        isDisabled = props.isDisabled,
        isRtl = props.isRtl
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'container', {
                '--is-disabled': isDisabled,
                '--is-rtl': isRtl
            }),
            innerProps
        ),
        children
    )
}
var valueContainerCSS = function valueContainerCSS2(_ref22, unstyled) {
    var spacing2 = _ref22.theme.spacing,
        isMulti = _ref22.isMulti,
        hasValue = _ref22.hasValue,
        controlShouldRenderValue = _ref22.selectProps.controlShouldRenderValue
    return _objectSpread2(
        {
            alignItems: 'center',
            display: isMulti && hasValue && controlShouldRenderValue ? 'flex' : 'grid',
            flex: 1,
            flexWrap: 'wrap',
            WebkitOverflowScrolling: 'touch',
            position: 'relative',
            overflow: 'hidden'
        },
        unstyled
            ? {}
            : {
                  padding: ''
                      .concat(spacing2.baseUnit / 2, 'px ')
                      .concat(spacing2.baseUnit * 2, 'px')
              }
    )
}
var ValueContainer = function ValueContainer2(props) {
    var children = props.children,
        innerProps = props.innerProps,
        isMulti = props.isMulti,
        hasValue = props.hasValue
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'valueContainer', {
                'value-container': true,
                'value-container--is-multi': isMulti,
                'value-container--has-value': hasValue
            }),
            innerProps
        ),
        children
    )
}
var indicatorsContainerCSS = function indicatorsContainerCSS2() {
    return {
        alignItems: 'center',
        alignSelf: 'stretch',
        display: 'flex',
        flexShrink: 0
    }
}
var IndicatorsContainer = function IndicatorsContainer2(props) {
    var children = props.children,
        innerProps = props.innerProps
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'indicatorsContainer', {
                indicators: true
            }),
            innerProps
        ),
        children
    )
}
var _templateObject
var _excluded$2 = ['size'],
    _excluded2 = ['innerProps', 'isRtl', 'size']
var _ref2$2 = {
    name: '8mmkcg',
    styles: 'display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0'
}
var Svg = function Svg2(_ref3) {
    var size = _ref3.size,
        props = _objectWithoutProperties(_ref3, _excluded$2)
    return jsx(
        'svg',
        _extends$n(
            {
                height: size,
                width: size,
                viewBox: '0 0 20 20',
                'aria-hidden': 'true',
                focusable: 'false',
                css: _ref2$2
            },
            props
        )
    )
}
var CrossIcon = function CrossIcon2(props) {
    return jsx(
        Svg,
        _extends$n(
            {
                size: 20
            },
            props
        ),
        jsx('path', {
            d: 'M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z'
        })
    )
}
var DownChevron = function DownChevron2(props) {
    return jsx(
        Svg,
        _extends$n(
            {
                size: 20
            },
            props
        ),
        jsx('path', {
            d: 'M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z'
        })
    )
}
var baseCSS = function baseCSS2(_ref3, unstyled) {
    var isFocused = _ref3.isFocused,
        _ref3$theme = _ref3.theme,
        baseUnit2 = _ref3$theme.spacing.baseUnit,
        colors2 = _ref3$theme.colors
    return _objectSpread2(
        {
            label: 'indicatorContainer',
            display: 'flex',
            transition: 'color 150ms'
        },
        unstyled
            ? {}
            : {
                  color: isFocused ? colors2.neutral60 : colors2.neutral20,
                  padding: baseUnit2 * 2,
                  ':hover': {
                      color: isFocused ? colors2.neutral80 : colors2.neutral40
                  }
              }
    )
}
var dropdownIndicatorCSS = baseCSS
var DropdownIndicator = function DropdownIndicator2(props) {
    var children = props.children,
        innerProps = props.innerProps
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'dropdownIndicator', {
                indicator: true,
                'dropdown-indicator': true
            }),
            innerProps
        ),
        children || jsx(DownChevron, null)
    )
}
var clearIndicatorCSS = baseCSS
var ClearIndicator = function ClearIndicator2(props) {
    var children = props.children,
        innerProps = props.innerProps
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'clearIndicator', {
                indicator: true,
                'clear-indicator': true
            }),
            innerProps
        ),
        children || jsx(CrossIcon, null)
    )
}
var indicatorSeparatorCSS = function indicatorSeparatorCSS2(_ref4, unstyled) {
    var isDisabled = _ref4.isDisabled,
        _ref4$theme = _ref4.theme,
        baseUnit2 = _ref4$theme.spacing.baseUnit,
        colors2 = _ref4$theme.colors
    return _objectSpread2(
        {
            label: 'indicatorSeparator',
            alignSelf: 'stretch',
            width: 1
        },
        unstyled
            ? {}
            : {
                  backgroundColor: isDisabled ? colors2.neutral10 : colors2.neutral20,
                  marginBottom: baseUnit2 * 2,
                  marginTop: baseUnit2 * 2
              }
    )
}
var IndicatorSeparator = function IndicatorSeparator2(props) {
    var innerProps = props.innerProps
    return jsx(
        'span',
        _extends$n(
            {},
            innerProps,
            getStyleProps(props, 'indicatorSeparator', {
                'indicator-separator': true
            })
        )
    )
}
var loadingDotAnimations = keyframes(
    _templateObject ||
        (_templateObject = _taggedTemplateLiteral([
            '\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n'
        ]))
)
var loadingIndicatorCSS = function loadingIndicatorCSS2(_ref5, unstyled) {
    var isFocused = _ref5.isFocused,
        size = _ref5.size,
        _ref5$theme = _ref5.theme,
        colors2 = _ref5$theme.colors,
        baseUnit2 = _ref5$theme.spacing.baseUnit
    return _objectSpread2(
        {
            label: 'loadingIndicator',
            display: 'flex',
            transition: 'color 150ms',
            alignSelf: 'center',
            fontSize: size,
            lineHeight: 1,
            marginRight: size,
            textAlign: 'center',
            verticalAlign: 'middle'
        },
        unstyled
            ? {}
            : {
                  color: isFocused ? colors2.neutral60 : colors2.neutral20,
                  padding: baseUnit2 * 2
              }
    )
}
var LoadingDot = function LoadingDot2(_ref6) {
    var delay = _ref6.delay,
        offset = _ref6.offset
    return jsx('span', {
        css: /* @__PURE__ */ css(
            {
                animation: ''
                    .concat(loadingDotAnimations, ' 1s ease-in-out ')
                    .concat(delay, 'ms infinite;'),
                backgroundColor: 'currentColor',
                borderRadius: '1em',
                display: 'inline-block',
                marginLeft: offset ? '1em' : void 0,
                height: '1em',
                verticalAlign: 'top',
                width: '1em'
            },
            '',
            ''
        )
    })
}
var LoadingIndicator = function LoadingIndicator2(_ref7) {
    var innerProps = _ref7.innerProps,
        isRtl = _ref7.isRtl,
        _ref7$size = _ref7.size,
        size = _ref7$size === void 0 ? 4 : _ref7$size,
        restProps = _objectWithoutProperties(_ref7, _excluded2)
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(
                _objectSpread2(
                    _objectSpread2({}, restProps),
                    {},
                    {
                        innerProps,
                        isRtl,
                        size
                    }
                ),
                'loadingIndicator',
                {
                    indicator: true,
                    'loading-indicator': true
                }
            ),
            innerProps
        ),
        jsx(LoadingDot, {
            delay: 0,
            offset: isRtl
        }),
        jsx(LoadingDot, {
            delay: 160,
            offset: true
        }),
        jsx(LoadingDot, {
            delay: 320,
            offset: !isRtl
        })
    )
}
var css$1 = function css2(_ref3, unstyled) {
    var isDisabled = _ref3.isDisabled,
        isFocused = _ref3.isFocused,
        _ref$theme = _ref3.theme,
        colors2 = _ref$theme.colors,
        borderRadius2 = _ref$theme.borderRadius,
        spacing2 = _ref$theme.spacing
    return _objectSpread2(
        {
            label: 'control',
            alignItems: 'center',
            cursor: 'default',
            display: 'flex',
            flexWrap: 'wrap',
            justifyContent: 'space-between',
            minHeight: spacing2.controlHeight,
            outline: '0 !important',
            position: 'relative',
            transition: 'all 100ms'
        },
        unstyled
            ? {}
            : {
                  backgroundColor: isDisabled ? colors2.neutral5 : colors2.neutral0,
                  borderColor: isDisabled
                      ? colors2.neutral10
                      : isFocused
                        ? colors2.primary
                        : colors2.neutral20,
                  borderRadius: borderRadius2,
                  borderStyle: 'solid',
                  borderWidth: 1,
                  boxShadow: isFocused ? '0 0 0 1px '.concat(colors2.primary) : void 0,
                  '&:hover': {
                      borderColor: isFocused ? colors2.primary : colors2.neutral30
                  }
              }
    )
}
var Control = function Control2(props) {
    var children = props.children,
        isDisabled = props.isDisabled,
        isFocused = props.isFocused,
        innerRef = props.innerRef,
        innerProps = props.innerProps,
        menuIsOpen = props.menuIsOpen
    return jsx(
        'div',
        _extends$n(
            {
                ref: innerRef
            },
            getStyleProps(props, 'control', {
                control: true,
                'control--is-disabled': isDisabled,
                'control--is-focused': isFocused,
                'control--menu-is-open': menuIsOpen
            }),
            innerProps,
            {
                'aria-disabled': isDisabled || void 0
            }
        ),
        children
    )
}
var Control$1 = Control
var _excluded$1 = ['data']
var groupCSS = function groupCSS2(_ref3, unstyled) {
    var spacing2 = _ref3.theme.spacing
    return unstyled
        ? {}
        : {
              paddingBottom: spacing2.baseUnit * 2,
              paddingTop: spacing2.baseUnit * 2
          }
}
var Group = function Group2(props) {
    var children = props.children,
        cx = props.cx,
        getStyles = props.getStyles,
        getClassNames = props.getClassNames,
        Heading = props.Heading,
        headingProps = props.headingProps,
        innerProps = props.innerProps,
        label = props.label,
        theme = props.theme,
        selectProps = props.selectProps
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'group', {
                group: true
            }),
            innerProps
        ),
        jsx(
            Heading,
            _extends$n({}, headingProps, {
                selectProps,
                theme,
                getStyles,
                getClassNames,
                cx
            }),
            label
        ),
        jsx('div', null, children)
    )
}
var groupHeadingCSS = function groupHeadingCSS2(_ref22, unstyled) {
    var _ref2$theme = _ref22.theme,
        colors2 = _ref2$theme.colors,
        spacing2 = _ref2$theme.spacing
    return _objectSpread2(
        {
            label: 'group',
            cursor: 'default',
            display: 'block'
        },
        unstyled
            ? {}
            : {
                  color: colors2.neutral40,
                  fontSize: '75%',
                  fontWeight: 500,
                  marginBottom: '0.25em',
                  paddingLeft: spacing2.baseUnit * 3,
                  paddingRight: spacing2.baseUnit * 3,
                  textTransform: 'uppercase'
              }
    )
}
var GroupHeading = function GroupHeading2(props) {
    var _cleanCommonProps = cleanCommonProps(props)
    _cleanCommonProps.data
    var innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded$1)
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'groupHeading', {
                'group-heading': true
            }),
            innerProps
        )
    )
}
var Group$1 = Group
var _excluded$5 = ['innerRef', 'isDisabled', 'isHidden', 'inputClassName']
var inputCSS = function inputCSS2(_ref3, unstyled) {
    var isDisabled = _ref3.isDisabled,
        value = _ref3.value,
        _ref$theme = _ref3.theme,
        spacing2 = _ref$theme.spacing,
        colors2 = _ref$theme.colors
    return _objectSpread2(
        _objectSpread2(
            {
                visibility: isDisabled ? 'hidden' : 'visible',
                // force css to recompute when value change due to @emotion bug.
                // We can remove it whenever the bug is fixed.
                transform: value ? 'translateZ(0)' : ''
            },
            containerStyle
        ),
        unstyled
            ? {}
            : {
                  margin: spacing2.baseUnit / 2,
                  paddingBottom: spacing2.baseUnit / 2,
                  paddingTop: spacing2.baseUnit / 2,
                  color: colors2.neutral80
              }
    )
}
var spacingStyle = {
    gridArea: '1 / 2',
    font: 'inherit',
    minWidth: '2px',
    border: 0,
    margin: 0,
    outline: 0,
    padding: 0
}
var containerStyle = {
    flex: '1 1 auto',
    display: 'inline-grid',
    gridArea: '1 / 1 / 2 / 3',
    gridTemplateColumns: '0 min-content',
    '&:after': _objectSpread2(
        {
            content: 'attr(data-value) " "',
            visibility: 'hidden',
            whiteSpace: 'pre'
        },
        spacingStyle
    )
}
var inputStyle = function inputStyle2(isHidden) {
    return _objectSpread2(
        {
            label: 'input',
            color: 'inherit',
            background: 0,
            opacity: isHidden ? 0 : 1,
            width: '100%'
        },
        spacingStyle
    )
}
var Input = function Input2(props) {
    var cx = props.cx,
        value = props.value
    var _cleanCommonProps = cleanCommonProps(props),
        innerRef = _cleanCommonProps.innerRef,
        isDisabled = _cleanCommonProps.isDisabled,
        isHidden = _cleanCommonProps.isHidden,
        inputClassName = _cleanCommonProps.inputClassName,
        innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded$5)
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'input', {
                'input-container': true
            }),
            {
                'data-value': value || ''
            }
        ),
        jsx(
            'input',
            _extends$n(
                {
                    className: cx(
                        {
                            input: true
                        },
                        inputClassName
                    ),
                    ref: innerRef,
                    style: inputStyle(isHidden),
                    disabled: isDisabled
                },
                innerProps
            )
        )
    )
}
var Input$1 = Input
var multiValueCSS = function multiValueCSS2(_ref3, unstyled) {
    var _ref$theme = _ref3.theme,
        spacing2 = _ref$theme.spacing,
        borderRadius2 = _ref$theme.borderRadius,
        colors2 = _ref$theme.colors
    return _objectSpread2(
        {
            label: 'multiValue',
            display: 'flex',
            minWidth: 0
        },
        unstyled
            ? {}
            : {
                  backgroundColor: colors2.neutral10,
                  borderRadius: borderRadius2 / 2,
                  margin: spacing2.baseUnit / 2
              }
    )
}
var multiValueLabelCSS = function multiValueLabelCSS2(_ref22, unstyled) {
    var _ref2$theme = _ref22.theme,
        borderRadius2 = _ref2$theme.borderRadius,
        colors2 = _ref2$theme.colors,
        cropWithEllipsis = _ref22.cropWithEllipsis
    return _objectSpread2(
        {
            overflow: 'hidden',
            textOverflow: cropWithEllipsis || cropWithEllipsis === void 0 ? 'ellipsis' : void 0,
            whiteSpace: 'nowrap'
        },
        unstyled
            ? {}
            : {
                  borderRadius: borderRadius2 / 2,
                  color: colors2.neutral80,
                  fontSize: '85%',
                  padding: 3,
                  paddingLeft: 6
              }
    )
}
var multiValueRemoveCSS = function multiValueRemoveCSS2(_ref3, unstyled) {
    var _ref3$theme = _ref3.theme,
        spacing2 = _ref3$theme.spacing,
        borderRadius2 = _ref3$theme.borderRadius,
        colors2 = _ref3$theme.colors,
        isFocused = _ref3.isFocused
    return _objectSpread2(
        {
            alignItems: 'center',
            display: 'flex'
        },
        unstyled
            ? {}
            : {
                  borderRadius: borderRadius2 / 2,
                  backgroundColor: isFocused ? colors2.dangerLight : void 0,
                  paddingLeft: spacing2.baseUnit,
                  paddingRight: spacing2.baseUnit,
                  ':hover': {
                      backgroundColor: colors2.dangerLight,
                      color: colors2.danger
                  }
              }
    )
}
var MultiValueGeneric = function MultiValueGeneric2(_ref4) {
    var children = _ref4.children,
        innerProps = _ref4.innerProps
    return jsx('div', innerProps, children)
}
var MultiValueContainer = MultiValueGeneric
var MultiValueLabel = MultiValueGeneric
function MultiValueRemove(_ref5) {
    var children = _ref5.children,
        innerProps = _ref5.innerProps
    return jsx(
        'div',
        _extends$n(
            {
                role: 'button'
            },
            innerProps
        ),
        children ||
            jsx(CrossIcon, {
                size: 14
            })
    )
}
var MultiValue = function MultiValue2(props) {
    var children = props.children,
        components2 = props.components,
        data = props.data,
        innerProps = props.innerProps,
        isDisabled = props.isDisabled,
        removeProps3 = props.removeProps,
        selectProps = props.selectProps
    var Container = components2.Container,
        Label2 = components2.Label,
        Remove = components2.Remove
    return jsx(
        Container,
        {
            data,
            innerProps: _objectSpread2(
                _objectSpread2(
                    {},
                    getStyleProps(props, 'multiValue', {
                        'multi-value': true,
                        'multi-value--is-disabled': isDisabled
                    })
                ),
                innerProps
            ),
            selectProps
        },
        jsx(
            Label2,
            {
                data,
                innerProps: _objectSpread2(
                    {},
                    getStyleProps(props, 'multiValueLabel', {
                        'multi-value__label': true
                    })
                ),
                selectProps
            },
            children
        ),
        jsx(Remove, {
            data,
            innerProps: _objectSpread2(
                _objectSpread2(
                    {},
                    getStyleProps(props, 'multiValueRemove', {
                        'multi-value__remove': true
                    })
                ),
                {},
                {
                    'aria-label': 'Remove '.concat(children || 'option')
                },
                removeProps3
            ),
            selectProps
        })
    )
}
var MultiValue$1 = MultiValue
var optionCSS = function optionCSS2(_ref3, unstyled) {
    var isDisabled = _ref3.isDisabled,
        isFocused = _ref3.isFocused,
        isSelected = _ref3.isSelected,
        _ref$theme = _ref3.theme,
        spacing2 = _ref$theme.spacing,
        colors2 = _ref$theme.colors
    return _objectSpread2(
        {
            label: 'option',
            cursor: 'default',
            display: 'block',
            fontSize: 'inherit',
            width: '100%',
            userSelect: 'none',
            WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)'
        },
        unstyled
            ? {}
            : {
                  backgroundColor: isSelected
                      ? colors2.primary
                      : isFocused
                        ? colors2.primary25
                        : 'transparent',
                  color: isDisabled ? colors2.neutral20 : isSelected ? colors2.neutral0 : 'inherit',
                  padding: ''
                      .concat(spacing2.baseUnit * 2, 'px ')
                      .concat(spacing2.baseUnit * 3, 'px'),
                  // provide some affordance on touch devices
                  ':active': {
                      backgroundColor: !isDisabled
                          ? isSelected
                              ? colors2.primary
                              : colors2.primary50
                          : void 0
                  }
              }
    )
}
var Option = function Option2(props) {
    var children = props.children,
        isDisabled = props.isDisabled,
        isFocused = props.isFocused,
        isSelected = props.isSelected,
        innerRef = props.innerRef,
        innerProps = props.innerProps
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'option', {
                option: true,
                'option--is-disabled': isDisabled,
                'option--is-focused': isFocused,
                'option--is-selected': isSelected
            }),
            {
                ref: innerRef,
                'aria-disabled': isDisabled
            },
            innerProps
        ),
        children
    )
}
var Option$1 = Option
var placeholderCSS = function placeholderCSS2(_ref3, unstyled) {
    var _ref$theme = _ref3.theme,
        spacing2 = _ref$theme.spacing,
        colors2 = _ref$theme.colors
    return _objectSpread2(
        {
            label: 'placeholder',
            gridArea: '1 / 1 / 2 / 3'
        },
        unstyled
            ? {}
            : {
                  color: colors2.neutral50,
                  marginLeft: spacing2.baseUnit / 2,
                  marginRight: spacing2.baseUnit / 2
              }
    )
}
var Placeholder = function Placeholder2(props) {
    var children = props.children,
        innerProps = props.innerProps
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'placeholder', {
                placeholder: true
            }),
            innerProps
        ),
        children
    )
}
var Placeholder$1 = Placeholder
var css22 = function css3(_ref3, unstyled) {
    var isDisabled = _ref3.isDisabled,
        _ref$theme = _ref3.theme,
        spacing2 = _ref$theme.spacing,
        colors2 = _ref$theme.colors
    return _objectSpread2(
        {
            label: 'singleValue',
            gridArea: '1 / 1 / 2 / 3',
            maxWidth: '100%',
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap'
        },
        unstyled
            ? {}
            : {
                  color: isDisabled ? colors2.neutral40 : colors2.neutral80,
                  marginLeft: spacing2.baseUnit / 2,
                  marginRight: spacing2.baseUnit / 2
              }
    )
}
var SingleValue = function SingleValue2(props) {
    var children = props.children,
        isDisabled = props.isDisabled,
        innerProps = props.innerProps
    return jsx(
        'div',
        _extends$n(
            {},
            getStyleProps(props, 'singleValue', {
                'single-value': true,
                'single-value--is-disabled': isDisabled
            }),
            innerProps
        ),
        children
    )
}
var SingleValue$1 = SingleValue
var components = {
    ClearIndicator,
    Control: Control$1,
    DropdownIndicator,
    DownChevron,
    CrossIcon,
    Group: Group$1,
    GroupHeading,
    IndicatorsContainer,
    IndicatorSeparator,
    Input: Input$1,
    LoadingIndicator,
    Menu: Menu$1,
    MenuList,
    MenuPortal,
    LoadingMessage,
    NoOptionsMessage,
    MultiValue: MultiValue$1,
    MultiValueContainer,
    MultiValueLabel,
    MultiValueRemove,
    Option: Option$1,
    Placeholder: Placeholder$1,
    SelectContainer,
    SingleValue: SingleValue$1,
    ValueContainer
}
var defaultComponents = function defaultComponents2(props) {
    return _objectSpread2(_objectSpread2({}, components), props.components)
}
var safeIsNaN =
    Number.isNaN ||
    function ponyfill(value) {
        return typeof value === 'number' && value !== value
    }
function isEqual(first2, second2) {
    if (first2 === second2) {
        return true
    }
    if (safeIsNaN(first2) && safeIsNaN(second2)) {
        return true
    }
    return false
}
function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
        return false
    }
    for (var i = 0; i < newInputs.length; i++) {
        if (!isEqual(newInputs[i], lastInputs[i])) {
            return false
        }
    }
    return true
}
function memoizeOne(resultFn, isEqual2) {
    if (isEqual2 === void 0) {
        isEqual2 = areInputsEqual
    }
    var cache = null
    function memoized() {
        var newArgs = []
        for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i]
        }
        if (cache && cache.lastThis === this && isEqual2(newArgs, cache.lastArgs)) {
            return cache.lastResult
        }
        var lastResult2 = resultFn.apply(this, newArgs)
        cache = {
            lastResult: lastResult2,
            lastArgs: newArgs,
            lastThis: this
        }
        return lastResult2
    }
    memoized.clear = function clear() {
        cache = null
    }
    return memoized
}
var _ref = {
    name: '7pg0cj-a11yText',
    styles: 'label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap'
}
var A11yText = function A11yText2(props) {
    return jsx(
        'span',
        _extends$n(
            {
                css: _ref
            },
            props
        )
    )
}
var A11yText$1 = A11yText
var defaultAriaLiveMessages = {
    guidance: function guidance(props) {
        var isSearchable = props.isSearchable,
            isMulti = props.isMulti,
            tabSelectsValue = props.tabSelectsValue,
            context = props.context,
            isInitialFocus = props.isInitialFocus
        switch (context) {
            case 'menu':
                return 'Use Up and Down to choose options, press Enter to select the currently focused option, press Escape to exit the menu'.concat(
                    tabSelectsValue ? ', press Tab to select the option and exit the menu' : '',
                    '.'
                )
            case 'input':
                return isInitialFocus
                    ? ''
                          .concat(props['aria-label'] || 'Select', ' is focused ')
                          .concat(
                              isSearchable ? ',type to refine list' : '',
                              ', press Down to open the menu, '
                          )
                          .concat(isMulti ? ' press left to focus selected values' : '')
                    : ''
            case 'value':
                return 'Use left and right to toggle between focused values, press Backspace to remove the currently focused value'
            default:
                return ''
        }
    },
    onChange: function onChange(props) {
        var action = props.action,
            _props$label = props.label,
            label = _props$label === void 0 ? '' : _props$label,
            labels = props.labels,
            isDisabled = props.isDisabled
        switch (action) {
            case 'deselect-option':
            case 'pop-value':
            case 'remove-value':
                return 'option '.concat(label, ', deselected.')
            case 'clear':
                return 'All selected options have been cleared.'
            case 'initial-input-focus':
                return 'option'
                    .concat(labels.length > 1 ? 's' : '', ' ')
                    .concat(labels.join(','), ', selected.')
            case 'select-option':
                return isDisabled
                    ? 'option '.concat(label, ' is disabled. Select another option.')
                    : 'option '.concat(label, ', selected.')
            default:
                return ''
        }
    },
    onFocus: function onFocus(props) {
        var context = props.context,
            focused = props.focused,
            options2 = props.options,
            _props$label2 = props.label,
            label = _props$label2 === void 0 ? '' : _props$label2,
            selectValue = props.selectValue,
            isDisabled = props.isDisabled,
            isSelected = props.isSelected,
            isAppleDevice2 = props.isAppleDevice
        var getArrayIndex = function getArrayIndex2(arr, item) {
            return arr && arr.length
                ? ''.concat(arr.indexOf(item) + 1, ' of ').concat(arr.length)
                : ''
        }
        if (context === 'value' && selectValue) {
            return 'value '
                .concat(label, ' focused, ')
                .concat(getArrayIndex(selectValue, focused), '.')
        }
        if (context === 'menu' && isAppleDevice2) {
            var disabled = isDisabled ? ' disabled' : ''
            var status = ''.concat(isSelected ? ' selected' : '').concat(disabled)
            return ''
                .concat(label)
                .concat(status, ', ')
                .concat(getArrayIndex(options2, focused), '.')
        }
        return ''
    },
    onFilter: function onFilter(props) {
        var inputValue = props.inputValue,
            resultsMessage = props.resultsMessage
        return ''
            .concat(resultsMessage)
            .concat(inputValue ? ' for search term ' + inputValue : '', '.')
    }
}
var LiveRegion = function LiveRegion2(props) {
    var ariaSelection = props.ariaSelection,
        focusedOption = props.focusedOption,
        focusedValue = props.focusedValue,
        focusableOptions = props.focusableOptions,
        isFocused = props.isFocused,
        selectValue = props.selectValue,
        selectProps = props.selectProps,
        id = props.id,
        isAppleDevice2 = props.isAppleDevice
    var ariaLiveMessages = selectProps.ariaLiveMessages,
        getOptionLabel4 = selectProps.getOptionLabel,
        inputValue = selectProps.inputValue,
        isMulti = selectProps.isMulti,
        isOptionDisabled3 = selectProps.isOptionDisabled,
        isSearchable = selectProps.isSearchable,
        menuIsOpen = selectProps.menuIsOpen,
        options2 = selectProps.options,
        screenReaderStatus2 = selectProps.screenReaderStatus,
        tabSelectsValue = selectProps.tabSelectsValue,
        isLoading = selectProps.isLoading
    var ariaLabel = selectProps['aria-label']
    var ariaLive = selectProps['aria-live']
    var messages = reactExports.useMemo(
        function () {
            return _objectSpread2(
                _objectSpread2({}, defaultAriaLiveMessages),
                ariaLiveMessages || {}
            )
        },
        [ariaLiveMessages]
    )
    var ariaSelected = reactExports.useMemo(
        function () {
            var message = ''
            if (ariaSelection && messages.onChange) {
                var option = ariaSelection.option,
                    selectedOptions = ariaSelection.options,
                    removedValue = ariaSelection.removedValue,
                    removedValues = ariaSelection.removedValues,
                    value = ariaSelection.value
                var asOption = function asOption2(val) {
                    return !Array.isArray(val) ? val : null
                }
                var selected = removedValue || option || asOption(value)
                var label = selected ? getOptionLabel4(selected) : ''
                var multiSelected = selectedOptions || removedValues || void 0
                var labels = multiSelected ? multiSelected.map(getOptionLabel4) : []
                var onChangeProps = _objectSpread2(
                    {
                        // multiSelected items are usually items that have already been selected
                        // or set by the user as a default value so we assume they are not disabled
                        isDisabled: selected && isOptionDisabled3(selected, selectValue),
                        label,
                        labels
                    },
                    ariaSelection
                )
                message = messages.onChange(onChangeProps)
            }
            return message
        },
        [ariaSelection, messages, isOptionDisabled3, selectValue, getOptionLabel4]
    )
    var ariaFocused = reactExports.useMemo(
        function () {
            var focusMsg = ''
            var focused = focusedOption || focusedValue
            var isSelected = !!(focusedOption && selectValue && selectValue.includes(focusedOption))
            if (focused && messages.onFocus) {
                var onFocusProps = {
                    focused,
                    label: getOptionLabel4(focused),
                    isDisabled: isOptionDisabled3(focused, selectValue),
                    isSelected,
                    options: focusableOptions,
                    context: focused === focusedOption ? 'menu' : 'value',
                    selectValue,
                    isAppleDevice: isAppleDevice2
                }
                focusMsg = messages.onFocus(onFocusProps)
            }
            return focusMsg
        },
        [
            focusedOption,
            focusedValue,
            getOptionLabel4,
            isOptionDisabled3,
            messages,
            focusableOptions,
            selectValue,
            isAppleDevice2
        ]
    )
    var ariaResults = reactExports.useMemo(
        function () {
            var resultsMsg = ''
            if (menuIsOpen && options2.length && !isLoading && messages.onFilter) {
                var resultsMessage = screenReaderStatus2({
                    count: focusableOptions.length
                })
                resultsMsg = messages.onFilter({
                    inputValue,
                    resultsMessage
                })
            }
            return resultsMsg
        },
        [
            focusableOptions,
            inputValue,
            menuIsOpen,
            messages,
            options2,
            screenReaderStatus2,
            isLoading
        ]
    )
    var isInitialFocus =
        (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) ===
        'initial-input-focus'
    var ariaGuidance = reactExports.useMemo(
        function () {
            var guidanceMsg = ''
            if (messages.guidance) {
                var context = focusedValue ? 'value' : menuIsOpen ? 'menu' : 'input'
                guidanceMsg = messages.guidance({
                    'aria-label': ariaLabel,
                    context,
                    isDisabled: focusedOption && isOptionDisabled3(focusedOption, selectValue),
                    isMulti,
                    isSearchable,
                    tabSelectsValue,
                    isInitialFocus
                })
            }
            return guidanceMsg
        },
        [
            ariaLabel,
            focusedOption,
            focusedValue,
            isMulti,
            isOptionDisabled3,
            isSearchable,
            menuIsOpen,
            messages,
            selectValue,
            tabSelectsValue,
            isInitialFocus
        ]
    )
    var ScreenReaderText = jsx(
        reactExports.Fragment,
        null,
        jsx(
            'span',
            {
                id: 'aria-selection'
            },
            ariaSelected
        ),
        jsx(
            'span',
            {
                id: 'aria-focused'
            },
            ariaFocused
        ),
        jsx(
            'span',
            {
                id: 'aria-results'
            },
            ariaResults
        ),
        jsx(
            'span',
            {
                id: 'aria-guidance'
            },
            ariaGuidance
        )
    )
    return jsx(
        reactExports.Fragment,
        null,
        jsx(
            A11yText$1,
            {
                id
            },
            isInitialFocus && ScreenReaderText
        ),
        jsx(
            A11yText$1,
            {
                'aria-live': ariaLive,
                'aria-atomic': 'false',
                'aria-relevant': 'additions text',
                role: 'log'
            },
            isFocused && !isInitialFocus && ScreenReaderText
        )
    )
}
var LiveRegion$1 = LiveRegion
var diacritics = [
    {
        base: 'A',
        letters: 'AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ'
    },
    {
        base: 'AA',
        letters: 'Ꜳ'
    },
    {
        base: 'AE',
        letters: 'ÆǼǢ'
    },
    {
        base: 'AO',
        letters: 'Ꜵ'
    },
    {
        base: 'AU',
        letters: 'Ꜷ'
    },
    {
        base: 'AV',
        letters: 'ꜸꜺ'
    },
    {
        base: 'AY',
        letters: 'Ꜽ'
    },
    {
        base: 'B',
        letters: 'BⒷＢḂḄḆɃƂƁ'
    },
    {
        base: 'C',
        letters: 'CⒸＣĆĈĊČÇḈƇȻꜾ'
    },
    {
        base: 'D',
        letters: 'DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ'
    },
    {
        base: 'DZ',
        letters: 'ǱǄ'
    },
    {
        base: 'Dz',
        letters: 'ǲǅ'
    },
    {
        base: 'E',
        letters: 'EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ'
    },
    {
        base: 'F',
        letters: 'FⒻＦḞƑꝻ'
    },
    {
        base: 'G',
        letters: 'GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ'
    },
    {
        base: 'H',
        letters: 'HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ'
    },
    {
        base: 'I',
        letters: 'IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ'
    },
    {
        base: 'J',
        letters: 'JⒿＪĴɈ'
    },
    {
        base: 'K',
        letters: 'KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ'
    },
    {
        base: 'L',
        letters: 'LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ'
    },
    {
        base: 'LJ',
        letters: 'Ǉ'
    },
    {
        base: 'Lj',
        letters: 'ǈ'
    },
    {
        base: 'M',
        letters: 'MⓂＭḾṀṂⱮƜ'
    },
    {
        base: 'N',
        letters: 'NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ'
    },
    {
        base: 'NJ',
        letters: 'Ǌ'
    },
    {
        base: 'Nj',
        letters: 'ǋ'
    },
    {
        base: 'O',
        letters: 'OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ'
    },
    {
        base: 'OI',
        letters: 'Ƣ'
    },
    {
        base: 'OO',
        letters: 'Ꝏ'
    },
    {
        base: 'OU',
        letters: 'Ȣ'
    },
    {
        base: 'P',
        letters: 'PⓅＰṔṖƤⱣꝐꝒꝔ'
    },
    {
        base: 'Q',
        letters: 'QⓆＱꝖꝘɊ'
    },
    {
        base: 'R',
        letters: 'RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ'
    },
    {
        base: 'S',
        letters: 'SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ'
    },
    {
        base: 'T',
        letters: 'TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ'
    },
    {
        base: 'TZ',
        letters: 'Ꜩ'
    },
    {
        base: 'U',
        letters: 'UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ'
    },
    {
        base: 'V',
        letters: 'VⓋＶṼṾƲꝞɅ'
    },
    {
        base: 'VY',
        letters: 'Ꝡ'
    },
    {
        base: 'W',
        letters: 'WⓌＷẀẂŴẆẄẈⱲ'
    },
    {
        base: 'X',
        letters: 'XⓍＸẊẌ'
    },
    {
        base: 'Y',
        letters: 'YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ'
    },
    {
        base: 'Z',
        letters: 'ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ'
    },
    {
        base: 'a',
        letters: 'aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ'
    },
    {
        base: 'aa',
        letters: 'ꜳ'
    },
    {
        base: 'ae',
        letters: 'æǽǣ'
    },
    {
        base: 'ao',
        letters: 'ꜵ'
    },
    {
        base: 'au',
        letters: 'ꜷ'
    },
    {
        base: 'av',
        letters: 'ꜹꜻ'
    },
    {
        base: 'ay',
        letters: 'ꜽ'
    },
    {
        base: 'b',
        letters: 'bⓑｂḃḅḇƀƃɓ'
    },
    {
        base: 'c',
        letters: 'cⓒｃćĉċčçḉƈȼꜿↄ'
    },
    {
        base: 'd',
        letters: 'dⓓｄḋďḍḑḓḏđƌɖɗꝺ'
    },
    {
        base: 'dz',
        letters: 'ǳǆ'
    },
    {
        base: 'e',
        letters: 'eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ'
    },
    {
        base: 'f',
        letters: 'fⓕｆḟƒꝼ'
    },
    {
        base: 'g',
        letters: 'gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ'
    },
    {
        base: 'h',
        letters: 'hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ'
    },
    {
        base: 'hv',
        letters: 'ƕ'
    },
    {
        base: 'i',
        letters: 'iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı'
    },
    {
        base: 'j',
        letters: 'jⓙｊĵǰɉ'
    },
    {
        base: 'k',
        letters: 'kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ'
    },
    {
        base: 'l',
        letters: 'lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ'
    },
    {
        base: 'lj',
        letters: 'ǉ'
    },
    {
        base: 'm',
        letters: 'mⓜｍḿṁṃɱɯ'
    },
    {
        base: 'n',
        letters: 'nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ'
    },
    {
        base: 'nj',
        letters: 'ǌ'
    },
    {
        base: 'o',
        letters: 'oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ'
    },
    {
        base: 'oi',
        letters: 'ƣ'
    },
    {
        base: 'ou',
        letters: 'ȣ'
    },
    {
        base: 'oo',
        letters: 'ꝏ'
    },
    {
        base: 'p',
        letters: 'pⓟｐṕṗƥᵽꝑꝓꝕ'
    },
    {
        base: 'q',
        letters: 'qⓠｑɋꝗꝙ'
    },
    {
        base: 'r',
        letters: 'rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ'
    },
    {
        base: 's',
        letters: 'sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ'
    },
    {
        base: 't',
        letters: 'tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ'
    },
    {
        base: 'tz',
        letters: 'ꜩ'
    },
    {
        base: 'u',
        letters: 'uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ'
    },
    {
        base: 'v',
        letters: 'vⓥｖṽṿʋꝟʌ'
    },
    {
        base: 'vy',
        letters: 'ꝡ'
    },
    {
        base: 'w',
        letters: 'wⓦｗẁẃŵẇẅẘẉⱳ'
    },
    {
        base: 'x',
        letters: 'xⓧｘẋẍ'
    },
    {
        base: 'y',
        letters: 'yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ'
    },
    {
        base: 'z',
        letters: 'zⓩｚźẑżžẓẕƶȥɀⱬꝣ'
    }
]
var anyDiacritic = new RegExp(
    '[' +
        diacritics
            .map(function (d) {
                return d.letters
            })
            .join('') +
        ']',
    'g'
)
var diacriticToBase = {}
for (var i = 0; i < diacritics.length; i++) {
    var diacritic = diacritics[i]
    for (var j = 0; j < diacritic.letters.length; j++) {
        diacriticToBase[diacritic.letters[j]] = diacritic.base
    }
}
var stripDiacritics = function stripDiacritics2(str) {
    return str.replace(anyDiacritic, function (match2) {
        return diacriticToBase[match2]
    })
}
var memoizedStripDiacriticsForInput = memoizeOne(stripDiacritics)
var trimString = function trimString2(str) {
    return str.replace(/^\s+|\s+$/g, '')
}
var defaultStringify = function defaultStringify2(option) {
    return ''.concat(option.label, ' ').concat(option.value)
}
var createFilter = function createFilter2(config2) {
    return function (option, rawInput) {
        if (option.data.__isNew__) return true
        var _ignoreCase$ignoreAcc = _objectSpread2(
                {
                    ignoreCase: true,
                    ignoreAccents: true,
                    stringify: defaultStringify,
                    trim: true,
                    matchFrom: 'any'
                },
                config2
            ),
            ignoreCase = _ignoreCase$ignoreAcc.ignoreCase,
            ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents,
            stringify2 = _ignoreCase$ignoreAcc.stringify,
            trim2 = _ignoreCase$ignoreAcc.trim,
            matchFrom = _ignoreCase$ignoreAcc.matchFrom
        var input = trim2 ? trimString(rawInput) : rawInput
        var candidate = trim2 ? trimString(stringify2(option)) : stringify2(option)
        if (ignoreCase) {
            input = input.toLowerCase()
            candidate = candidate.toLowerCase()
        }
        if (ignoreAccents) {
            input = memoizedStripDiacriticsForInput(input)
            candidate = stripDiacritics(candidate)
        }
        return matchFrom === 'start'
            ? candidate.substr(0, input.length) === input
            : candidate.indexOf(input) > -1
    }
}
var _excluded = ['innerRef']
function DummyInput(_ref3) {
    var innerRef = _ref3.innerRef,
        props = _objectWithoutProperties(_ref3, _excluded)
    var filteredProps = removeProps(props, 'onExited', 'in', 'enter', 'exit', 'appear')
    return jsx(
        'input',
        _extends$n(
            {
                ref: innerRef
            },
            filteredProps,
            {
                css: /* @__PURE__ */ css(
                    {
                        label: 'dummyInput',
                        // get rid of any default styles
                        background: 0,
                        border: 0,
                        // important! this hides the flashing cursor
                        caretColor: 'transparent',
                        fontSize: 'inherit',
                        gridArea: '1 / 1 / 2 / 3',
                        outline: 0,
                        padding: 0,
                        // important! without `width` browsers won't allow focus
                        width: 1,
                        // remove cursor on desktop
                        color: 'transparent',
                        // remove cursor on mobile whilst maintaining "scroll into view" behaviour
                        left: -100,
                        opacity: 0,
                        position: 'relative',
                        transform: 'scale(.01)'
                    },
                    '',
                    ''
                )
            }
        )
    )
}
var cancelScroll = function cancelScroll2(event) {
    if (event.cancelable) event.preventDefault()
    event.stopPropagation()
}
function useScrollCapture(_ref3) {
    var isEnabled = _ref3.isEnabled,
        onBottomArrive = _ref3.onBottomArrive,
        onBottomLeave = _ref3.onBottomLeave,
        onTopArrive = _ref3.onTopArrive,
        onTopLeave = _ref3.onTopLeave
    var isBottom = reactExports.useRef(false)
    var isTop = reactExports.useRef(false)
    var touchStart = reactExports.useRef(0)
    var scrollTarget = reactExports.useRef(null)
    var handleEventDelta = reactExports.useCallback(
        function (event, delta) {
            if (scrollTarget.current === null) return
            var _scrollTarget$current = scrollTarget.current,
                scrollTop = _scrollTarget$current.scrollTop,
                scrollHeight = _scrollTarget$current.scrollHeight,
                clientHeight = _scrollTarget$current.clientHeight
            var target = scrollTarget.current
            var isDeltaPositive = delta > 0
            var availableScroll = scrollHeight - clientHeight - scrollTop
            var shouldCancelScroll = false
            if (availableScroll > delta && isBottom.current) {
                if (onBottomLeave) onBottomLeave(event)
                isBottom.current = false
            }
            if (isDeltaPositive && isTop.current) {
                if (onTopLeave) onTopLeave(event)
                isTop.current = false
            }
            if (isDeltaPositive && delta > availableScroll) {
                if (onBottomArrive && !isBottom.current) {
                    onBottomArrive(event)
                }
                target.scrollTop = scrollHeight
                shouldCancelScroll = true
                isBottom.current = true
            } else if (!isDeltaPositive && -delta > scrollTop) {
                if (onTopArrive && !isTop.current) {
                    onTopArrive(event)
                }
                target.scrollTop = 0
                shouldCancelScroll = true
                isTop.current = true
            }
            if (shouldCancelScroll) {
                cancelScroll(event)
            }
        },
        [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]
    )
    var onWheel = reactExports.useCallback(
        function (event) {
            handleEventDelta(event, event.deltaY)
        },
        [handleEventDelta]
    )
    var onTouchStart = reactExports.useCallback(function (event) {
        touchStart.current = event.changedTouches[0].clientY
    }, [])
    var onTouchMove = reactExports.useCallback(
        function (event) {
            var deltaY = touchStart.current - event.changedTouches[0].clientY
            handleEventDelta(event, deltaY)
        },
        [handleEventDelta]
    )
    var startListening = reactExports.useCallback(
        function (el) {
            if (!el) return
            var notPassive = supportsPassiveEvents
                ? {
                      passive: false
                  }
                : false
            el.addEventListener('wheel', onWheel, notPassive)
            el.addEventListener('touchstart', onTouchStart, notPassive)
            el.addEventListener('touchmove', onTouchMove, notPassive)
        },
        [onTouchMove, onTouchStart, onWheel]
    )
    var stopListening = reactExports.useCallback(
        function (el) {
            if (!el) return
            el.removeEventListener('wheel', onWheel, false)
            el.removeEventListener('touchstart', onTouchStart, false)
            el.removeEventListener('touchmove', onTouchMove, false)
        },
        [onTouchMove, onTouchStart, onWheel]
    )
    reactExports.useEffect(
        function () {
            if (!isEnabled) return
            var element = scrollTarget.current
            startListening(element)
            return function () {
                stopListening(element)
            }
        },
        [isEnabled, startListening, stopListening]
    )
    return function (element) {
        scrollTarget.current = element
    }
}
var STYLE_KEYS = ['boxSizing', 'height', 'overflow', 'paddingRight', 'position']
var LOCK_STYLES = {
    boxSizing: 'border-box',
    // account for possible declaration `width: 100%;` on body
    overflow: 'hidden',
    position: 'relative',
    height: '100%'
}
function preventTouchMove(e) {
    if (e.cancelable) e.preventDefault()
}
function allowTouchMove(e) {
    e.stopPropagation()
}
function preventInertiaScroll() {
    var top = this.scrollTop
    var totalScroll = this.scrollHeight
    var currentScroll = top + this.offsetHeight
    if (top === 0) {
        this.scrollTop = 1
    } else if (currentScroll === totalScroll) {
        this.scrollTop = top - 1
    }
}
function isTouchDevice() {
    return 'ontouchstart' in window || navigator.maxTouchPoints
}
var canUseDOM = !!(
    typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement
)
var activeScrollLocks = 0
var listenerOptions = {
    capture: false,
    passive: false
}
function useScrollLock(_ref3) {
    var isEnabled = _ref3.isEnabled,
        _ref$accountForScroll = _ref3.accountForScrollbars,
        accountForScrollbars = _ref$accountForScroll === void 0 ? true : _ref$accountForScroll
    var originalStyles = reactExports.useRef({})
    var scrollTarget = reactExports.useRef(null)
    var addScrollLock = reactExports.useCallback(
        function (touchScrollTarget) {
            if (!canUseDOM) return
            var target = document.body
            var targetStyle = target && target.style
            if (accountForScrollbars) {
                STYLE_KEYS.forEach(function (key) {
                    var val = targetStyle && targetStyle[key]
                    originalStyles.current[key] = val
                })
            }
            if (accountForScrollbars && activeScrollLocks < 1) {
                var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0
                var clientWidth = document.body ? document.body.clientWidth : 0
                var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0
                Object.keys(LOCK_STYLES).forEach(function (key) {
                    var val = LOCK_STYLES[key]
                    if (targetStyle) {
                        targetStyle[key] = val
                    }
                })
                if (targetStyle) {
                    targetStyle.paddingRight = ''.concat(adjustedPadding, 'px')
                }
            }
            if (target && isTouchDevice()) {
                target.addEventListener('touchmove', preventTouchMove, listenerOptions)
                if (touchScrollTarget) {
                    touchScrollTarget.addEventListener(
                        'touchstart',
                        preventInertiaScroll,
                        listenerOptions
                    )
                    touchScrollTarget.addEventListener('touchmove', allowTouchMove, listenerOptions)
                }
            }
            activeScrollLocks += 1
        },
        [accountForScrollbars]
    )
    var removeScrollLock = reactExports.useCallback(
        function (touchScrollTarget) {
            if (!canUseDOM) return
            var target = document.body
            var targetStyle = target && target.style
            activeScrollLocks = Math.max(activeScrollLocks - 1, 0)
            if (accountForScrollbars && activeScrollLocks < 1) {
                STYLE_KEYS.forEach(function (key) {
                    var val = originalStyles.current[key]
                    if (targetStyle) {
                        targetStyle[key] = val
                    }
                })
            }
            if (target && isTouchDevice()) {
                target.removeEventListener('touchmove', preventTouchMove, listenerOptions)
                if (touchScrollTarget) {
                    touchScrollTarget.removeEventListener(
                        'touchstart',
                        preventInertiaScroll,
                        listenerOptions
                    )
                    touchScrollTarget.removeEventListener(
                        'touchmove',
                        allowTouchMove,
                        listenerOptions
                    )
                }
            }
        },
        [accountForScrollbars]
    )
    reactExports.useEffect(
        function () {
            if (!isEnabled) return
            var element = scrollTarget.current
            addScrollLock(element)
            return function () {
                removeScrollLock(element)
            }
        },
        [isEnabled, addScrollLock, removeScrollLock]
    )
    return function (element) {
        scrollTarget.current = element
    }
}
var blurSelectInput = function blurSelectInput2(event) {
    var element = event.target
    return element.ownerDocument.activeElement && element.ownerDocument.activeElement.blur()
}
var _ref2$1 = {
    name: '1kfdb0e',
    styles: 'position:fixed;left:0;bottom:0;right:0;top:0'
}
function ScrollManager(_ref3) {
    var children = _ref3.children,
        lockEnabled = _ref3.lockEnabled,
        _ref$captureEnabled = _ref3.captureEnabled,
        captureEnabled = _ref$captureEnabled === void 0 ? true : _ref$captureEnabled,
        onBottomArrive = _ref3.onBottomArrive,
        onBottomLeave = _ref3.onBottomLeave,
        onTopArrive = _ref3.onTopArrive,
        onTopLeave = _ref3.onTopLeave
    var setScrollCaptureTarget = useScrollCapture({
        isEnabled: captureEnabled,
        onBottomArrive,
        onBottomLeave,
        onTopArrive,
        onTopLeave
    })
    var setScrollLockTarget = useScrollLock({
        isEnabled: lockEnabled
    })
    var targetRef = function targetRef2(element) {
        setScrollCaptureTarget(element)
        setScrollLockTarget(element)
    }
    return jsx(
        reactExports.Fragment,
        null,
        lockEnabled &&
            jsx('div', {
                onClick: blurSelectInput,
                css: _ref2$1
            }),
        children(targetRef)
    )
}
var _ref2 = {
    name: '1a0ro4n-requiredInput',
    styles: 'label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%'
}
var RequiredInput = function RequiredInput2(_ref3) {
    var name = _ref3.name,
        onFocus2 = _ref3.onFocus
    return jsx('input', {
        required: true,
        name,
        tabIndex: -1,
        'aria-hidden': 'true',
        onFocus: onFocus2,
        css: _ref2,
        value: '',
        onChange: function onChange2() {}
    })
}
var RequiredInput$1 = RequiredInput
function testPlatform(re2) {
    var _window$navigator$use
    return typeof window !== 'undefined' && window.navigator != null
        ? re2.test(
              ((_window$navigator$use = window.navigator['userAgentData']) === null ||
              _window$navigator$use === void 0
                  ? void 0
                  : _window$navigator$use.platform) || window.navigator.platform
          )
        : false
}
function isIPhone() {
    return testPlatform(/^iPhone/i)
}
function isMac() {
    return testPlatform(/^Mac/i)
}
function isIPad() {
    return (
        testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
        (isMac() && navigator.maxTouchPoints > 1)
    )
}
function isIOS() {
    return isIPhone() || isIPad()
}
function isAppleDevice() {
    return isMac() || isIOS()
}
var formatGroupLabel = function formatGroupLabel2(group) {
    return group.label
}
var getOptionLabel$1 = function getOptionLabel(option) {
    return option.label
}
var getOptionValue$1 = function getOptionValue(option) {
    return option.value
}
var isOptionDisabled = function isOptionDisabled2(option) {
    return !!option.isDisabled
}
var defaultStyles = {
    clearIndicator: clearIndicatorCSS,
    container: containerCSS,
    control: css$1,
    dropdownIndicator: dropdownIndicatorCSS,
    group: groupCSS,
    groupHeading: groupHeadingCSS,
    indicatorsContainer: indicatorsContainerCSS,
    indicatorSeparator: indicatorSeparatorCSS,
    input: inputCSS,
    loadingIndicator: loadingIndicatorCSS,
    loadingMessage: loadingMessageCSS,
    menu: menuCSS,
    menuList: menuListCSS,
    menuPortal: menuPortalCSS,
    multiValue: multiValueCSS,
    multiValueLabel: multiValueLabelCSS,
    multiValueRemove: multiValueRemoveCSS,
    noOptionsMessage: noOptionsMessageCSS,
    option: optionCSS,
    placeholder: placeholderCSS,
    singleValue: css22,
    valueContainer: valueContainerCSS
}
var colors = {
    primary: '#2684FF',
    primary75: '#4C9AFF',
    primary50: '#B2D4FF',
    primary25: '#DEEBFF',
    danger: '#DE350B',
    dangerLight: '#FFBDAD',
    neutral0: 'hsl(0, 0%, 100%)',
    neutral5: 'hsl(0, 0%, 95%)',
    neutral10: 'hsl(0, 0%, 90%)',
    neutral20: 'hsl(0, 0%, 80%)',
    neutral30: 'hsl(0, 0%, 70%)',
    neutral40: 'hsl(0, 0%, 60%)',
    neutral50: 'hsl(0, 0%, 50%)',
    neutral60: 'hsl(0, 0%, 40%)',
    neutral70: 'hsl(0, 0%, 30%)',
    neutral80: 'hsl(0, 0%, 20%)',
    neutral90: 'hsl(0, 0%, 10%)'
}
var borderRadius = 4
var baseUnit = 4
var controlHeight = 38
var menuGutter = baseUnit * 2
var spacing = {
    baseUnit,
    controlHeight,
    menuGutter
}
var defaultTheme = {
    borderRadius,
    colors,
    spacing
}
var defaultProps = {
    'aria-live': 'polite',
    backspaceRemovesValue: true,
    blurInputOnSelect: isTouchCapable(),
    captureMenuScroll: !isTouchCapable(),
    classNames: {},
    closeMenuOnSelect: true,
    closeMenuOnScroll: false,
    components: {},
    controlShouldRenderValue: true,
    escapeClearsValue: false,
    filterOption: createFilter(),
    formatGroupLabel,
    getOptionLabel: getOptionLabel$1,
    getOptionValue: getOptionValue$1,
    isDisabled: false,
    isLoading: false,
    isMulti: false,
    isRtl: false,
    isSearchable: true,
    isOptionDisabled,
    loadingMessage: function loadingMessage() {
        return 'Loading...'
    },
    maxMenuHeight: 300,
    minMenuHeight: 140,
    menuIsOpen: false,
    menuPlacement: 'bottom',
    menuPosition: 'absolute',
    menuShouldBlockScroll: false,
    menuShouldScrollIntoView: !isMobileDevice(),
    noOptionsMessage: function noOptionsMessage() {
        return 'No options'
    },
    openMenuOnFocus: false,
    openMenuOnClick: true,
    options: [],
    pageSize: 5,
    placeholder: 'Select...',
    screenReaderStatus: function screenReaderStatus(_ref3) {
        var count2 = _ref3.count
        return ''.concat(count2, ' result').concat(count2 !== 1 ? 's' : '', ' available')
    },
    styles: {},
    tabIndex: 0,
    tabSelectsValue: true,
    unstyled: false
}
function toCategorizedOption(props, option, selectValue, index2) {
    var isDisabled = _isOptionDisabled(props, option, selectValue)
    var isSelected = _isOptionSelected(props, option, selectValue)
    var label = getOptionLabel2(props, option)
    var value = getOptionValue2(props, option)
    return {
        type: 'option',
        data: option,
        isDisabled,
        isSelected,
        label,
        value,
        index: index2
    }
}
function buildCategorizedOptions(props, selectValue) {
    return props.options
        .map(function (groupOrOption, groupOrOptionIndex) {
            if ('options' in groupOrOption) {
                var categorizedOptions = groupOrOption.options
                    .map(function (option, optionIndex) {
                        return toCategorizedOption(props, option, selectValue, optionIndex)
                    })
                    .filter(function (categorizedOption2) {
                        return isFocusable(props, categorizedOption2)
                    })
                return categorizedOptions.length > 0
                    ? {
                          type: 'group',
                          data: groupOrOption,
                          options: categorizedOptions,
                          index: groupOrOptionIndex
                      }
                    : void 0
            }
            var categorizedOption = toCategorizedOption(
                props,
                groupOrOption,
                selectValue,
                groupOrOptionIndex
            )
            return isFocusable(props, categorizedOption) ? categorizedOption : void 0
        })
        .filter(notNullish)
}
function buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {
    return categorizedOptions.reduce(function (optionsAccumulator, categorizedOption) {
        if (categorizedOption.type === 'group') {
            optionsAccumulator.push.apply(
                optionsAccumulator,
                _toConsumableArray(
                    categorizedOption.options.map(function (option) {
                        return option.data
                    })
                )
            )
        } else {
            optionsAccumulator.push(categorizedOption.data)
        }
        return optionsAccumulator
    }, [])
}
function buildFocusableOptionsWithIds(categorizedOptions, optionId) {
    return categorizedOptions.reduce(function (optionsAccumulator, categorizedOption) {
        if (categorizedOption.type === 'group') {
            optionsAccumulator.push.apply(
                optionsAccumulator,
                _toConsumableArray(
                    categorizedOption.options.map(function (option) {
                        return {
                            data: option.data,
                            id: ''
                                .concat(optionId, '-')
                                .concat(categorizedOption.index, '-')
                                .concat(option.index)
                        }
                    })
                )
            )
        } else {
            optionsAccumulator.push({
                data: categorizedOption.data,
                id: ''.concat(optionId, '-').concat(categorizedOption.index)
            })
        }
        return optionsAccumulator
    }, [])
}
function buildFocusableOptions(props, selectValue) {
    return buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue))
}
function isFocusable(props, categorizedOption) {
    var _props$inputValue = props.inputValue,
        inputValue = _props$inputValue === void 0 ? '' : _props$inputValue
    var data = categorizedOption.data,
        isSelected = categorizedOption.isSelected,
        label = categorizedOption.label,
        value = categorizedOption.value
    return (
        (!shouldHideSelectedOptions(props) || !isSelected) &&
        _filterOption(
            props,
            {
                label,
                value,
                data
            },
            inputValue
        )
    )
}
function getNextFocusedValue(state, nextSelectValue) {
    var focusedValue = state.focusedValue,
        lastSelectValue = state.selectValue
    var lastFocusedIndex = lastSelectValue.indexOf(focusedValue)
    if (lastFocusedIndex > -1) {
        var nextFocusedIndex = nextSelectValue.indexOf(focusedValue)
        if (nextFocusedIndex > -1) {
            return focusedValue
        } else if (lastFocusedIndex < nextSelectValue.length) {
            return nextSelectValue[lastFocusedIndex]
        }
    }
    return null
}
function getNextFocusedOption(state, options2) {
    var lastFocusedOption = state.focusedOption
    return lastFocusedOption && options2.indexOf(lastFocusedOption) > -1
        ? lastFocusedOption
        : options2[0]
}
var getFocusedOptionId = function getFocusedOptionId2(focusableOptionsWithIds, focusedOption) {
    var _focusableOptionsWith
    var focusedOptionId =
        (_focusableOptionsWith = focusableOptionsWithIds.find(function (option) {
            return option.data === focusedOption
        })) === null || _focusableOptionsWith === void 0
            ? void 0
            : _focusableOptionsWith.id
    return focusedOptionId || null
}
var getOptionLabel2 = function getOptionLabel3(props, data) {
    return props.getOptionLabel(data)
}
var getOptionValue2 = function getOptionValue3(props, data) {
    return props.getOptionValue(data)
}
function _isOptionDisabled(props, option, selectValue) {
    return typeof props.isOptionDisabled === 'function'
        ? props.isOptionDisabled(option, selectValue)
        : false
}
function _isOptionSelected(props, option, selectValue) {
    if (selectValue.indexOf(option) > -1) return true
    if (typeof props.isOptionSelected === 'function') {
        return props.isOptionSelected(option, selectValue)
    }
    var candidate = getOptionValue2(props, option)
    return selectValue.some(function (i) {
        return getOptionValue2(props, i) === candidate
    })
}
function _filterOption(props, option, inputValue) {
    return props.filterOption ? props.filterOption(option, inputValue) : true
}
var shouldHideSelectedOptions = function shouldHideSelectedOptions2(props) {
    var hideSelectedOptions = props.hideSelectedOptions,
        isMulti = props.isMulti
    if (hideSelectedOptions === void 0) return isMulti
    return hideSelectedOptions
}
var instanceId = 1
var Select = /* @__PURE__ */ (function (_Component) {
    _inherits(Select2, _Component)
    var _super = _createSuper(Select2)
    function Select2(_props) {
        var _this
        _classCallCheck(this, Select2)
        _this = _super.call(this, _props)
        _this.state = {
            ariaSelection: null,
            focusedOption: null,
            focusedOptionId: null,
            focusableOptionsWithIds: [],
            focusedValue: null,
            inputIsHidden: false,
            isFocused: false,
            selectValue: [],
            clearFocusValueOnUpdate: false,
            prevWasFocused: false,
            inputIsHiddenAfterUpdate: void 0,
            prevProps: void 0,
            instancePrefix: ''
        }
        _this.blockOptionHover = false
        _this.isComposing = false
        _this.commonProps = void 0
        _this.initialTouchX = 0
        _this.initialTouchY = 0
        _this.openAfterFocus = false
        _this.scrollToFocusedOptionOnUpdate = false
        _this.userIsDragging = void 0
        _this.isAppleDevice = isAppleDevice()
        _this.controlRef = null
        _this.getControlRef = function (ref) {
            _this.controlRef = ref
        }
        _this.focusedOptionRef = null
        _this.getFocusedOptionRef = function (ref) {
            _this.focusedOptionRef = ref
        }
        _this.menuListRef = null
        _this.getMenuListRef = function (ref) {
            _this.menuListRef = ref
        }
        _this.inputRef = null
        _this.getInputRef = function (ref) {
            _this.inputRef = ref
        }
        _this.focus = _this.focusInput
        _this.blur = _this.blurInput
        _this.onChange = function (newValue, actionMeta) {
            var _this$props = _this.props,
                onChange2 = _this$props.onChange,
                name = _this$props.name
            actionMeta.name = name
            _this.ariaOnChange(newValue, actionMeta)
            onChange2(newValue, actionMeta)
        }
        _this.setValue = function (newValue, action, option) {
            var _this$props2 = _this.props,
                closeMenuOnSelect = _this$props2.closeMenuOnSelect,
                isMulti = _this$props2.isMulti,
                inputValue = _this$props2.inputValue
            _this.onInputChange('', {
                action: 'set-value',
                prevInputValue: inputValue
            })
            if (closeMenuOnSelect) {
                _this.setState({
                    inputIsHiddenAfterUpdate: !isMulti
                })
                _this.onMenuClose()
            }
            _this.setState({
                clearFocusValueOnUpdate: true
            })
            _this.onChange(newValue, {
                action,
                option
            })
        }
        _this.selectOption = function (newValue) {
            var _this$props3 = _this.props,
                blurInputOnSelect = _this$props3.blurInputOnSelect,
                isMulti = _this$props3.isMulti,
                name = _this$props3.name
            var selectValue = _this.state.selectValue
            var deselected = isMulti && _this.isOptionSelected(newValue, selectValue)
            var isDisabled = _this.isOptionDisabled(newValue, selectValue)
            if (deselected) {
                var candidate = _this.getOptionValue(newValue)
                _this.setValue(
                    multiValueAsValue(
                        selectValue.filter(function (i) {
                            return _this.getOptionValue(i) !== candidate
                        })
                    ),
                    'deselect-option',
                    newValue
                )
            } else if (!isDisabled) {
                if (isMulti) {
                    _this.setValue(
                        multiValueAsValue([].concat(_toConsumableArray(selectValue), [newValue])),
                        'select-option',
                        newValue
                    )
                } else {
                    _this.setValue(singleValueAsValue(newValue), 'select-option')
                }
            } else {
                _this.ariaOnChange(singleValueAsValue(newValue), {
                    action: 'select-option',
                    option: newValue,
                    name
                })
                return
            }
            if (blurInputOnSelect) {
                _this.blurInput()
            }
        }
        _this.removeValue = function (removedValue) {
            var isMulti = _this.props.isMulti
            var selectValue = _this.state.selectValue
            var candidate = _this.getOptionValue(removedValue)
            var newValueArray = selectValue.filter(function (i) {
                return _this.getOptionValue(i) !== candidate
            })
            var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null)
            _this.onChange(newValue, {
                action: 'remove-value',
                removedValue
            })
            _this.focusInput()
        }
        _this.clearValue = function () {
            var selectValue = _this.state.selectValue
            _this.onChange(valueTernary(_this.props.isMulti, [], null), {
                action: 'clear',
                removedValues: selectValue
            })
        }
        _this.popValue = function () {
            var isMulti = _this.props.isMulti
            var selectValue = _this.state.selectValue
            var lastSelectedValue = selectValue[selectValue.length - 1]
            var newValueArray = selectValue.slice(0, selectValue.length - 1)
            var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null)
            if (lastSelectedValue) {
                _this.onChange(newValue, {
                    action: 'pop-value',
                    removedValue: lastSelectedValue
                })
            }
        }
        _this.getFocusedOptionId = function (focusedOption) {
            return getFocusedOptionId(_this.state.focusableOptionsWithIds, focusedOption)
        }
        _this.getFocusableOptionsWithIds = function () {
            return buildFocusableOptionsWithIds(
                buildCategorizedOptions(_this.props, _this.state.selectValue),
                _this.getElementId('option')
            )
        }
        _this.getValue = function () {
            return _this.state.selectValue
        }
        _this.cx = function () {
            for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
            ) {
                args[_key] = arguments[_key]
            }
            return classNames.apply(void 0, [_this.props.classNamePrefix].concat(args))
        }
        _this.getOptionLabel = function (data) {
            return getOptionLabel2(_this.props, data)
        }
        _this.getOptionValue = function (data) {
            return getOptionValue2(_this.props, data)
        }
        _this.getStyles = function (key, props) {
            var unstyled = _this.props.unstyled
            var base = defaultStyles[key](props, unstyled)
            base.boxSizing = 'border-box'
            var custom = _this.props.styles[key]
            return custom ? custom(base, props) : base
        }
        _this.getClassNames = function (key, props) {
            var _this$props$className, _this$props$className2
            return (_this$props$className = (_this$props$className2 = _this.props.classNames)[
                key
            ]) === null || _this$props$className === void 0
                ? void 0
                : _this$props$className.call(_this$props$className2, props)
        }
        _this.getElementId = function (element) {
            return ''.concat(_this.state.instancePrefix, '-').concat(element)
        }
        _this.getComponents = function () {
            return defaultComponents(_this.props)
        }
        _this.buildCategorizedOptions = function () {
            return buildCategorizedOptions(_this.props, _this.state.selectValue)
        }
        _this.getCategorizedOptions = function () {
            return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : []
        }
        _this.buildFocusableOptions = function () {
            return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions())
        }
        _this.getFocusableOptions = function () {
            return _this.props.menuIsOpen ? _this.buildFocusableOptions() : []
        }
        _this.ariaOnChange = function (value, actionMeta) {
            _this.setState({
                ariaSelection: _objectSpread2(
                    {
                        value
                    },
                    actionMeta
                )
            })
        }
        _this.onMenuMouseDown = function (event) {
            if (event.button !== 0) {
                return
            }
            event.stopPropagation()
            event.preventDefault()
            _this.focusInput()
        }
        _this.onMenuMouseMove = function (event) {
            _this.blockOptionHover = false
        }
        _this.onControlMouseDown = function (event) {
            if (event.defaultPrevented) {
                return
            }
            var openMenuOnClick = _this.props.openMenuOnClick
            if (!_this.state.isFocused) {
                if (openMenuOnClick) {
                    _this.openAfterFocus = true
                }
                _this.focusInput()
            } else if (!_this.props.menuIsOpen) {
                if (openMenuOnClick) {
                    _this.openMenu('first')
                }
            } else {
                if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {
                    _this.onMenuClose()
                }
            }
            if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {
                event.preventDefault()
            }
        }
        _this.onDropdownIndicatorMouseDown = function (event) {
            if (event && event.type === 'mousedown' && event.button !== 0) {
                return
            }
            if (_this.props.isDisabled) return
            var _this$props4 = _this.props,
                isMulti = _this$props4.isMulti,
                menuIsOpen = _this$props4.menuIsOpen
            _this.focusInput()
            if (menuIsOpen) {
                _this.setState({
                    inputIsHiddenAfterUpdate: !isMulti
                })
                _this.onMenuClose()
            } else {
                _this.openMenu('first')
            }
            event.preventDefault()
        }
        _this.onClearIndicatorMouseDown = function (event) {
            if (event && event.type === 'mousedown' && event.button !== 0) {
                return
            }
            _this.clearValue()
            event.preventDefault()
            _this.openAfterFocus = false
            if (event.type === 'touchend') {
                _this.focusInput()
            } else {
                setTimeout(function () {
                    return _this.focusInput()
                })
            }
        }
        _this.onScroll = function (event) {
            if (typeof _this.props.closeMenuOnScroll === 'boolean') {
                if (event.target instanceof HTMLElement && isDocumentElement(event.target)) {
                    _this.props.onMenuClose()
                }
            } else if (typeof _this.props.closeMenuOnScroll === 'function') {
                if (_this.props.closeMenuOnScroll(event)) {
                    _this.props.onMenuClose()
                }
            }
        }
        _this.onCompositionStart = function () {
            _this.isComposing = true
        }
        _this.onCompositionEnd = function () {
            _this.isComposing = false
        }
        _this.onTouchStart = function (_ref22) {
            var touches = _ref22.touches
            var touch = touches && touches.item(0)
            if (!touch) {
                return
            }
            _this.initialTouchX = touch.clientX
            _this.initialTouchY = touch.clientY
            _this.userIsDragging = false
        }
        _this.onTouchMove = function (_ref3) {
            var touches = _ref3.touches
            var touch = touches && touches.item(0)
            if (!touch) {
                return
            }
            var deltaX = Math.abs(touch.clientX - _this.initialTouchX)
            var deltaY = Math.abs(touch.clientY - _this.initialTouchY)
            var moveThreshold = 5
            _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold
        }
        _this.onTouchEnd = function (event) {
            if (_this.userIsDragging) return
            if (
                _this.controlRef &&
                !_this.controlRef.contains(event.target) &&
                _this.menuListRef &&
                !_this.menuListRef.contains(event.target)
            ) {
                _this.blurInput()
            }
            _this.initialTouchX = 0
            _this.initialTouchY = 0
        }
        _this.onControlTouchEnd = function (event) {
            if (_this.userIsDragging) return
            _this.onControlMouseDown(event)
        }
        _this.onClearIndicatorTouchEnd = function (event) {
            if (_this.userIsDragging) return
            _this.onClearIndicatorMouseDown(event)
        }
        _this.onDropdownIndicatorTouchEnd = function (event) {
            if (_this.userIsDragging) return
            _this.onDropdownIndicatorMouseDown(event)
        }
        _this.handleInputChange = function (event) {
            var prevInputValue = _this.props.inputValue
            var inputValue = event.currentTarget.value
            _this.setState({
                inputIsHiddenAfterUpdate: false
            })
            _this.onInputChange(inputValue, {
                action: 'input-change',
                prevInputValue
            })
            if (!_this.props.menuIsOpen) {
                _this.onMenuOpen()
            }
        }
        _this.onInputFocus = function (event) {
            if (_this.props.onFocus) {
                _this.props.onFocus(event)
            }
            _this.setState({
                inputIsHiddenAfterUpdate: false,
                isFocused: true
            })
            if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
                _this.openMenu('first')
            }
            _this.openAfterFocus = false
        }
        _this.onInputBlur = function (event) {
            var prevInputValue = _this.props.inputValue
            if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
                _this.inputRef.focus()
                return
            }
            if (_this.props.onBlur) {
                _this.props.onBlur(event)
            }
            _this.onInputChange('', {
                action: 'input-blur',
                prevInputValue
            })
            _this.onMenuClose()
            _this.setState({
                focusedValue: null,
                isFocused: false
            })
        }
        _this.onOptionHover = function (focusedOption) {
            if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
                return
            }
            var options2 = _this.getFocusableOptions()
            var focusedOptionIndex = options2.indexOf(focusedOption)
            _this.setState({
                focusedOption,
                focusedOptionId:
                    focusedOptionIndex > -1 ? _this.getFocusedOptionId(focusedOption) : null
            })
        }
        _this.shouldHideSelectedOptions = function () {
            return shouldHideSelectedOptions(_this.props)
        }
        _this.onValueInputFocus = function (e) {
            e.preventDefault()
            e.stopPropagation()
            _this.focus()
        }
        _this.onKeyDown = function (event) {
            var _this$props5 = _this.props,
                isMulti = _this$props5.isMulti,
                backspaceRemovesValue = _this$props5.backspaceRemovesValue,
                escapeClearsValue = _this$props5.escapeClearsValue,
                inputValue = _this$props5.inputValue,
                isClearable = _this$props5.isClearable,
                isDisabled = _this$props5.isDisabled,
                menuIsOpen = _this$props5.menuIsOpen,
                onKeyDown = _this$props5.onKeyDown,
                tabSelectsValue = _this$props5.tabSelectsValue,
                openMenuOnFocus = _this$props5.openMenuOnFocus
            var _this$state = _this.state,
                focusedOption = _this$state.focusedOption,
                focusedValue = _this$state.focusedValue,
                selectValue = _this$state.selectValue
            if (isDisabled) return
            if (typeof onKeyDown === 'function') {
                onKeyDown(event)
                if (event.defaultPrevented) {
                    return
                }
            }
            _this.blockOptionHover = true
            switch (event.key) {
                case 'ArrowLeft':
                    if (!isMulti || inputValue) return
                    _this.focusValue('previous')
                    break
                case 'ArrowRight':
                    if (!isMulti || inputValue) return
                    _this.focusValue('next')
                    break
                case 'Delete':
                case 'Backspace':
                    if (inputValue) return
                    if (focusedValue) {
                        _this.removeValue(focusedValue)
                    } else {
                        if (!backspaceRemovesValue) return
                        if (isMulti) {
                            _this.popValue()
                        } else if (isClearable) {
                            _this.clearValue()
                        }
                    }
                    break
                case 'Tab':
                    if (_this.isComposing) return
                    if (
                        event.shiftKey ||
                        !menuIsOpen ||
                        !tabSelectsValue ||
                        !focusedOption || // don't capture the event if the menu opens on focus and the focused
                        // option is already selected; it breaks the flow of navigation
                        (openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue))
                    ) {
                        return
                    }
                    _this.selectOption(focusedOption)
                    break
                case 'Enter':
                    if (event.keyCode === 229) {
                        break
                    }
                    if (menuIsOpen) {
                        if (!focusedOption) return
                        if (_this.isComposing) return
                        _this.selectOption(focusedOption)
                        break
                    }
                    return
                case 'Escape':
                    if (menuIsOpen) {
                        _this.setState({
                            inputIsHiddenAfterUpdate: false
                        })
                        _this.onInputChange('', {
                            action: 'menu-close',
                            prevInputValue: inputValue
                        })
                        _this.onMenuClose()
                    } else if (isClearable && escapeClearsValue) {
                        _this.clearValue()
                    }
                    break
                case ' ':
                    if (inputValue) {
                        return
                    }
                    if (!menuIsOpen) {
                        _this.openMenu('first')
                        break
                    }
                    if (!focusedOption) return
                    _this.selectOption(focusedOption)
                    break
                case 'ArrowUp':
                    if (menuIsOpen) {
                        _this.focusOption('up')
                    } else {
                        _this.openMenu('last')
                    }
                    break
                case 'ArrowDown':
                    if (menuIsOpen) {
                        _this.focusOption('down')
                    } else {
                        _this.openMenu('first')
                    }
                    break
                case 'PageUp':
                    if (!menuIsOpen) return
                    _this.focusOption('pageup')
                    break
                case 'PageDown':
                    if (!menuIsOpen) return
                    _this.focusOption('pagedown')
                    break
                case 'Home':
                    if (!menuIsOpen) return
                    _this.focusOption('first')
                    break
                case 'End':
                    if (!menuIsOpen) return
                    _this.focusOption('last')
                    break
                default:
                    return
            }
            event.preventDefault()
        }
        _this.state.instancePrefix = 'react-select-' + (_this.props.instanceId || ++instanceId)
        _this.state.selectValue = cleanValue(_props.value)
        if (_props.menuIsOpen && _this.state.selectValue.length) {
            var focusableOptionsWithIds = _this.getFocusableOptionsWithIds()
            var focusableOptions = _this.buildFocusableOptions()
            var optionIndex = focusableOptions.indexOf(_this.state.selectValue[0])
            _this.state.focusableOptionsWithIds = focusableOptionsWithIds
            _this.state.focusedOption = focusableOptions[optionIndex]
            _this.state.focusedOptionId = getFocusedOptionId(
                focusableOptionsWithIds,
                focusableOptions[optionIndex]
            )
        }
        return _this
    }
    _createClass(
        Select2,
        [
            {
                key: 'componentDidMount',
                value: function componentDidMount() {
                    this.startListeningComposition()
                    this.startListeningToTouch()
                    if (this.props.closeMenuOnScroll && document && document.addEventListener) {
                        document.addEventListener('scroll', this.onScroll, true)
                    }
                    if (this.props.autoFocus) {
                        this.focusInput()
                    }
                    if (
                        this.props.menuIsOpen &&
                        this.state.focusedOption &&
                        this.menuListRef &&
                        this.focusedOptionRef
                    ) {
                        scrollIntoView(this.menuListRef, this.focusedOptionRef)
                    }
                }
            },
            {
                key: 'componentDidUpdate',
                value: function componentDidUpdate(prevProps) {
                    var _this$props6 = this.props,
                        isDisabled = _this$props6.isDisabled,
                        menuIsOpen = _this$props6.menuIsOpen
                    var isFocused = this.state.isFocused
                    if (
                        // ensure focus is restored correctly when the control becomes enabled
                        (isFocused && !isDisabled && prevProps.isDisabled) || // ensure focus is on the Input when the menu opens
                        (isFocused && menuIsOpen && !prevProps.menuIsOpen)
                    ) {
                        this.focusInput()
                    }
                    if (isFocused && isDisabled && !prevProps.isDisabled) {
                        this.setState(
                            {
                                isFocused: false
                            },
                            this.onMenuClose
                        )
                    } else if (
                        !isFocused &&
                        !isDisabled &&
                        prevProps.isDisabled &&
                        this.inputRef === document.activeElement
                    ) {
                        this.setState({
                            isFocused: true
                        })
                    }
                    if (
                        this.menuListRef &&
                        this.focusedOptionRef &&
                        this.scrollToFocusedOptionOnUpdate
                    ) {
                        scrollIntoView(this.menuListRef, this.focusedOptionRef)
                        this.scrollToFocusedOptionOnUpdate = false
                    }
                }
            },
            {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                    this.stopListeningComposition()
                    this.stopListeningToTouch()
                    document.removeEventListener('scroll', this.onScroll, true)
                }
                // ==============================
                // Consumer Handlers
                // ==============================
            },
            {
                key: 'onMenuOpen',
                value: function onMenuOpen() {
                    this.props.onMenuOpen()
                }
            },
            {
                key: 'onMenuClose',
                value: function onMenuClose() {
                    this.onInputChange('', {
                        action: 'menu-close',
                        prevInputValue: this.props.inputValue
                    })
                    this.props.onMenuClose()
                }
            },
            {
                key: 'onInputChange',
                value: function onInputChange(newValue, actionMeta) {
                    this.props.onInputChange(newValue, actionMeta)
                }
                // ==============================
                // Methods
                // ==============================
            },
            {
                key: 'focusInput',
                value: function focusInput() {
                    if (!this.inputRef) return
                    this.inputRef.focus()
                }
            },
            {
                key: 'blurInput',
                value: function blurInput() {
                    if (!this.inputRef) return
                    this.inputRef.blur()
                }
                // aliased for consumers
            },
            {
                key: 'openMenu',
                value: function openMenu(focusOption) {
                    var _this2 = this
                    var _this$state2 = this.state,
                        selectValue = _this$state2.selectValue,
                        isFocused = _this$state2.isFocused
                    var focusableOptions = this.buildFocusableOptions()
                    var openAtIndex = focusOption === 'first' ? 0 : focusableOptions.length - 1
                    if (!this.props.isMulti) {
                        var selectedIndex = focusableOptions.indexOf(selectValue[0])
                        if (selectedIndex > -1) {
                            openAtIndex = selectedIndex
                        }
                    }
                    this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef)
                    this.setState(
                        {
                            inputIsHiddenAfterUpdate: false,
                            focusedValue: null,
                            focusedOption: focusableOptions[openAtIndex],
                            focusedOptionId: this.getFocusedOptionId(focusableOptions[openAtIndex])
                        },
                        function () {
                            return _this2.onMenuOpen()
                        }
                    )
                }
            },
            {
                key: 'focusValue',
                value: function focusValue(direction) {
                    var _this$state3 = this.state,
                        selectValue = _this$state3.selectValue,
                        focusedValue = _this$state3.focusedValue
                    if (!this.props.isMulti) return
                    this.setState({
                        focusedOption: null
                    })
                    var focusedIndex = selectValue.indexOf(focusedValue)
                    if (!focusedValue) {
                        focusedIndex = -1
                    }
                    var lastIndex = selectValue.length - 1
                    var nextFocus = -1
                    if (!selectValue.length) return
                    switch (direction) {
                        case 'previous':
                            if (focusedIndex === 0) {
                                nextFocus = 0
                            } else if (focusedIndex === -1) {
                                nextFocus = lastIndex
                            } else {
                                nextFocus = focusedIndex - 1
                            }
                            break
                        case 'next':
                            if (focusedIndex > -1 && focusedIndex < lastIndex) {
                                nextFocus = focusedIndex + 1
                            }
                            break
                    }
                    this.setState({
                        inputIsHidden: nextFocus !== -1,
                        focusedValue: selectValue[nextFocus]
                    })
                }
            },
            {
                key: 'focusOption',
                value: function focusOption() {
                    var direction =
                        arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'first'
                    var pageSize = this.props.pageSize
                    var focusedOption = this.state.focusedOption
                    var options2 = this.getFocusableOptions()
                    if (!options2.length) return
                    var nextFocus = 0
                    var focusedIndex = options2.indexOf(focusedOption)
                    if (!focusedOption) {
                        focusedIndex = -1
                    }
                    if (direction === 'up') {
                        nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options2.length - 1
                    } else if (direction === 'down') {
                        nextFocus = (focusedIndex + 1) % options2.length
                    } else if (direction === 'pageup') {
                        nextFocus = focusedIndex - pageSize
                        if (nextFocus < 0) nextFocus = 0
                    } else if (direction === 'pagedown') {
                        nextFocus = focusedIndex + pageSize
                        if (nextFocus > options2.length - 1) nextFocus = options2.length - 1
                    } else if (direction === 'last') {
                        nextFocus = options2.length - 1
                    }
                    this.scrollToFocusedOptionOnUpdate = true
                    this.setState({
                        focusedOption: options2[nextFocus],
                        focusedValue: null,
                        focusedOptionId: this.getFocusedOptionId(options2[nextFocus])
                    })
                }
            },
            {
                key: 'getTheme',
                value:
                    // ==============================
                    // Getters
                    // ==============================
                    function getTheme() {
                        if (!this.props.theme) {
                            return defaultTheme
                        }
                        if (typeof this.props.theme === 'function') {
                            return this.props.theme(defaultTheme)
                        }
                        return _objectSpread2(_objectSpread2({}, defaultTheme), this.props.theme)
                    }
            },
            {
                key: 'getCommonProps',
                value: function getCommonProps() {
                    var clearValue = this.clearValue,
                        cx = this.cx,
                        getStyles = this.getStyles,
                        getClassNames = this.getClassNames,
                        getValue = this.getValue,
                        selectOption = this.selectOption,
                        setValue = this.setValue,
                        props = this.props
                    var isMulti = props.isMulti,
                        isRtl = props.isRtl,
                        options2 = props.options
                    var hasValue = this.hasValue()
                    return {
                        clearValue,
                        cx,
                        getStyles,
                        getClassNames,
                        getValue,
                        hasValue,
                        isMulti,
                        isRtl,
                        options: options2,
                        selectOption,
                        selectProps: props,
                        setValue,
                        theme: this.getTheme()
                    }
                }
            },
            {
                key: 'hasValue',
                value: function hasValue() {
                    var selectValue = this.state.selectValue
                    return selectValue.length > 0
                }
            },
            {
                key: 'hasOptions',
                value: function hasOptions() {
                    return !!this.getFocusableOptions().length
                }
            },
            {
                key: 'isClearable',
                value: function isClearable() {
                    var _this$props7 = this.props,
                        isClearable2 = _this$props7.isClearable,
                        isMulti = _this$props7.isMulti
                    if (isClearable2 === void 0) return isMulti
                    return isClearable2
                }
            },
            {
                key: 'isOptionDisabled',
                value: function isOptionDisabled3(option, selectValue) {
                    return _isOptionDisabled(this.props, option, selectValue)
                }
            },
            {
                key: 'isOptionSelected',
                value: function isOptionSelected(option, selectValue) {
                    return _isOptionSelected(this.props, option, selectValue)
                }
            },
            {
                key: 'filterOption',
                value: function filterOption(option, inputValue) {
                    return _filterOption(this.props, option, inputValue)
                }
            },
            {
                key: 'formatOptionLabel',
                value: function formatOptionLabel(data, context) {
                    if (typeof this.props.formatOptionLabel === 'function') {
                        var _inputValue = this.props.inputValue
                        var _selectValue = this.state.selectValue
                        return this.props.formatOptionLabel(data, {
                            context,
                            inputValue: _inputValue,
                            selectValue: _selectValue
                        })
                    } else {
                        return this.getOptionLabel(data)
                    }
                }
            },
            {
                key: 'formatGroupLabel',
                value: function formatGroupLabel3(data) {
                    return this.props.formatGroupLabel(data)
                }
                // ==============================
                // Mouse Handlers
                // ==============================
            },
            {
                key: 'startListeningComposition',
                value:
                    // ==============================
                    // Composition Handlers
                    // ==============================
                    function startListeningComposition() {
                        if (document && document.addEventListener) {
                            document.addEventListener(
                                'compositionstart',
                                this.onCompositionStart,
                                false
                            )
                            document.addEventListener(
                                'compositionend',
                                this.onCompositionEnd,
                                false
                            )
                        }
                    }
            },
            {
                key: 'stopListeningComposition',
                value: function stopListeningComposition() {
                    if (document && document.removeEventListener) {
                        document.removeEventListener('compositionstart', this.onCompositionStart)
                        document.removeEventListener('compositionend', this.onCompositionEnd)
                    }
                }
            },
            {
                key: 'startListeningToTouch',
                value:
                    // ==============================
                    // Touch Handlers
                    // ==============================
                    function startListeningToTouch() {
                        if (document && document.addEventListener) {
                            document.addEventListener('touchstart', this.onTouchStart, false)
                            document.addEventListener('touchmove', this.onTouchMove, false)
                            document.addEventListener('touchend', this.onTouchEnd, false)
                        }
                    }
            },
            {
                key: 'stopListeningToTouch',
                value: function stopListeningToTouch() {
                    if (document && document.removeEventListener) {
                        document.removeEventListener('touchstart', this.onTouchStart)
                        document.removeEventListener('touchmove', this.onTouchMove)
                        document.removeEventListener('touchend', this.onTouchEnd)
                    }
                }
            },
            {
                key: 'renderInput',
                value:
                    // ==============================
                    // Renderers
                    // ==============================
                    function renderInput() {
                        var _this$props8 = this.props,
                            isDisabled = _this$props8.isDisabled,
                            isSearchable = _this$props8.isSearchable,
                            inputId = _this$props8.inputId,
                            inputValue = _this$props8.inputValue,
                            tabIndex = _this$props8.tabIndex,
                            form = _this$props8.form,
                            menuIsOpen = _this$props8.menuIsOpen,
                            required = _this$props8.required
                        var _this$getComponents = this.getComponents(),
                            Input3 = _this$getComponents.Input
                        var _this$state4 = this.state,
                            inputIsHidden = _this$state4.inputIsHidden,
                            ariaSelection = _this$state4.ariaSelection
                        var commonProps = this.commonProps
                        var id = inputId || this.getElementId('input')
                        var ariaAttributes = _objectSpread2(
                            _objectSpread2(
                                _objectSpread2(
                                    {
                                        'aria-autocomplete': 'list',
                                        'aria-expanded': menuIsOpen,
                                        'aria-haspopup': true,
                                        'aria-errormessage': this.props['aria-errormessage'],
                                        'aria-invalid': this.props['aria-invalid'],
                                        'aria-label': this.props['aria-label'],
                                        'aria-labelledby': this.props['aria-labelledby'],
                                        'aria-required': required,
                                        role: 'combobox',
                                        'aria-activedescendant': this.isAppleDevice
                                            ? void 0
                                            : this.state.focusedOptionId || ''
                                    },
                                    menuIsOpen && {
                                        'aria-controls': this.getElementId('listbox')
                                    }
                                ),
                                !isSearchable && {
                                    'aria-readonly': true
                                }
                            ),
                            this.hasValue()
                                ? (ariaSelection === null || ariaSelection === void 0
                                      ? void 0
                                      : ariaSelection.action) === 'initial-input-focus' && {
                                      'aria-describedby': this.getElementId('live-region')
                                  }
                                : {
                                      'aria-describedby': this.getElementId('placeholder')
                                  }
                        )
                        if (!isSearchable) {
                            return /* @__PURE__ */ reactExports.createElement(
                                DummyInput,
                                _extends$n(
                                    {
                                        id,
                                        innerRef: this.getInputRef,
                                        onBlur: this.onInputBlur,
                                        onChange: noop,
                                        onFocus: this.onInputFocus,
                                        disabled: isDisabled,
                                        tabIndex,
                                        inputMode: 'none',
                                        form,
                                        value: ''
                                    },
                                    ariaAttributes
                                )
                            )
                        }
                        return /* @__PURE__ */ reactExports.createElement(
                            Input3,
                            _extends$n(
                                {},
                                commonProps,
                                {
                                    autoCapitalize: 'none',
                                    autoComplete: 'off',
                                    autoCorrect: 'off',
                                    id,
                                    innerRef: this.getInputRef,
                                    isDisabled,
                                    isHidden: inputIsHidden,
                                    onBlur: this.onInputBlur,
                                    onChange: this.handleInputChange,
                                    onFocus: this.onInputFocus,
                                    spellCheck: 'false',
                                    tabIndex,
                                    form,
                                    type: 'text',
                                    value: inputValue
                                },
                                ariaAttributes
                            )
                        )
                    }
            },
            {
                key: 'renderPlaceholderOrValue',
                value: function renderPlaceholderOrValue() {
                    var _this3 = this
                    var _this$getComponents2 = this.getComponents(),
                        MultiValue3 = _this$getComponents2.MultiValue,
                        MultiValueContainer2 = _this$getComponents2.MultiValueContainer,
                        MultiValueLabel2 = _this$getComponents2.MultiValueLabel,
                        MultiValueRemove2 = _this$getComponents2.MultiValueRemove,
                        SingleValue3 = _this$getComponents2.SingleValue,
                        Placeholder3 = _this$getComponents2.Placeholder
                    var commonProps = this.commonProps
                    var _this$props9 = this.props,
                        controlShouldRenderValue = _this$props9.controlShouldRenderValue,
                        isDisabled = _this$props9.isDisabled,
                        isMulti = _this$props9.isMulti,
                        inputValue = _this$props9.inputValue,
                        placeholder = _this$props9.placeholder
                    var _this$state5 = this.state,
                        selectValue = _this$state5.selectValue,
                        focusedValue = _this$state5.focusedValue,
                        isFocused = _this$state5.isFocused
                    if (!this.hasValue() || !controlShouldRenderValue) {
                        return inputValue
                            ? null
                            : /* @__PURE__ */ reactExports.createElement(
                                  Placeholder3,
                                  _extends$n({}, commonProps, {
                                      key: 'placeholder',
                                      isDisabled,
                                      isFocused,
                                      innerProps: {
                                          id: this.getElementId('placeholder')
                                      }
                                  }),
                                  placeholder
                              )
                    }
                    if (isMulti) {
                        return selectValue.map(function (opt, index2) {
                            var isOptionFocused = opt === focusedValue
                            var key = ''
                                .concat(_this3.getOptionLabel(opt), '-')
                                .concat(_this3.getOptionValue(opt))
                            return /* @__PURE__ */ reactExports.createElement(
                                MultiValue3,
                                _extends$n({}, commonProps, {
                                    components: {
                                        Container: MultiValueContainer2,
                                        Label: MultiValueLabel2,
                                        Remove: MultiValueRemove2
                                    },
                                    isFocused: isOptionFocused,
                                    isDisabled,
                                    key,
                                    index: index2,
                                    removeProps: {
                                        onClick: function onClick() {
                                            return _this3.removeValue(opt)
                                        },
                                        onTouchEnd: function onTouchEnd() {
                                            return _this3.removeValue(opt)
                                        },
                                        onMouseDown: function onMouseDown(e) {
                                            e.preventDefault()
                                        }
                                    },
                                    data: opt
                                }),
                                _this3.formatOptionLabel(opt, 'value')
                            )
                        })
                    }
                    if (inputValue) {
                        return null
                    }
                    var singleValue = selectValue[0]
                    return /* @__PURE__ */ reactExports.createElement(
                        SingleValue3,
                        _extends$n({}, commonProps, {
                            data: singleValue,
                            isDisabled
                        }),
                        this.formatOptionLabel(singleValue, 'value')
                    )
                }
            },
            {
                key: 'renderClearIndicator',
                value: function renderClearIndicator() {
                    var _this$getComponents3 = this.getComponents(),
                        ClearIndicator3 = _this$getComponents3.ClearIndicator
                    var commonProps = this.commonProps
                    var _this$props10 = this.props,
                        isDisabled = _this$props10.isDisabled,
                        isLoading = _this$props10.isLoading
                    var isFocused = this.state.isFocused
                    if (
                        !this.isClearable() ||
                        !ClearIndicator3 ||
                        isDisabled ||
                        !this.hasValue() ||
                        isLoading
                    ) {
                        return null
                    }
                    var innerProps = {
                        onMouseDown: this.onClearIndicatorMouseDown,
                        onTouchEnd: this.onClearIndicatorTouchEnd,
                        'aria-hidden': 'true'
                    }
                    return /* @__PURE__ */ reactExports.createElement(
                        ClearIndicator3,
                        _extends$n({}, commonProps, {
                            innerProps,
                            isFocused
                        })
                    )
                }
            },
            {
                key: 'renderLoadingIndicator',
                value: function renderLoadingIndicator() {
                    var _this$getComponents4 = this.getComponents(),
                        LoadingIndicator3 = _this$getComponents4.LoadingIndicator
                    var commonProps = this.commonProps
                    var _this$props11 = this.props,
                        isDisabled = _this$props11.isDisabled,
                        isLoading = _this$props11.isLoading
                    var isFocused = this.state.isFocused
                    if (!LoadingIndicator3 || !isLoading) return null
                    var innerProps = {
                        'aria-hidden': 'true'
                    }
                    return /* @__PURE__ */ reactExports.createElement(
                        LoadingIndicator3,
                        _extends$n({}, commonProps, {
                            innerProps,
                            isDisabled,
                            isFocused
                        })
                    )
                }
            },
            {
                key: 'renderIndicatorSeparator',
                value: function renderIndicatorSeparator() {
                    var _this$getComponents5 = this.getComponents(),
                        DropdownIndicator3 = _this$getComponents5.DropdownIndicator,
                        IndicatorSeparator3 = _this$getComponents5.IndicatorSeparator
                    if (!DropdownIndicator3 || !IndicatorSeparator3) return null
                    var commonProps = this.commonProps
                    var isDisabled = this.props.isDisabled
                    var isFocused = this.state.isFocused
                    return /* @__PURE__ */ reactExports.createElement(
                        IndicatorSeparator3,
                        _extends$n({}, commonProps, {
                            isDisabled,
                            isFocused
                        })
                    )
                }
            },
            {
                key: 'renderDropdownIndicator',
                value: function renderDropdownIndicator() {
                    var _this$getComponents6 = this.getComponents(),
                        DropdownIndicator3 = _this$getComponents6.DropdownIndicator
                    if (!DropdownIndicator3) return null
                    var commonProps = this.commonProps
                    var isDisabled = this.props.isDisabled
                    var isFocused = this.state.isFocused
                    var innerProps = {
                        onMouseDown: this.onDropdownIndicatorMouseDown,
                        onTouchEnd: this.onDropdownIndicatorTouchEnd,
                        'aria-hidden': 'true'
                    }
                    return /* @__PURE__ */ reactExports.createElement(
                        DropdownIndicator3,
                        _extends$n({}, commonProps, {
                            innerProps,
                            isDisabled,
                            isFocused
                        })
                    )
                }
            },
            {
                key: 'renderMenu',
                value: function renderMenu() {
                    var _this4 = this
                    var _this$getComponents7 = this.getComponents(),
                        Group3 = _this$getComponents7.Group,
                        GroupHeading3 = _this$getComponents7.GroupHeading,
                        Menu3 = _this$getComponents7.Menu,
                        MenuList3 = _this$getComponents7.MenuList,
                        MenuPortal3 = _this$getComponents7.MenuPortal,
                        LoadingMessage3 = _this$getComponents7.LoadingMessage,
                        NoOptionsMessage3 = _this$getComponents7.NoOptionsMessage,
                        Option3 = _this$getComponents7.Option
                    var commonProps = this.commonProps
                    var focusedOption = this.state.focusedOption
                    var _this$props12 = this.props,
                        captureMenuScroll = _this$props12.captureMenuScroll,
                        inputValue = _this$props12.inputValue,
                        isLoading = _this$props12.isLoading,
                        loadingMessage2 = _this$props12.loadingMessage,
                        minMenuHeight = _this$props12.minMenuHeight,
                        maxMenuHeight = _this$props12.maxMenuHeight,
                        menuIsOpen = _this$props12.menuIsOpen,
                        menuPlacement = _this$props12.menuPlacement,
                        menuPosition = _this$props12.menuPosition,
                        menuPortalTarget = _this$props12.menuPortalTarget,
                        menuShouldBlockScroll = _this$props12.menuShouldBlockScroll,
                        menuShouldScrollIntoView = _this$props12.menuShouldScrollIntoView,
                        noOptionsMessage2 = _this$props12.noOptionsMessage,
                        onMenuScrollToTop = _this$props12.onMenuScrollToTop,
                        onMenuScrollToBottom = _this$props12.onMenuScrollToBottom
                    if (!menuIsOpen) return null
                    var render = function render2(props, id) {
                        var type = props.type,
                            data = props.data,
                            isDisabled = props.isDisabled,
                            isSelected = props.isSelected,
                            label = props.label,
                            value = props.value
                        var isFocused = focusedOption === data
                        var onHover = isDisabled
                            ? void 0
                            : function () {
                                  return _this4.onOptionHover(data)
                              }
                        var onSelect = isDisabled
                            ? void 0
                            : function () {
                                  return _this4.selectOption(data)
                              }
                        var optionId = ''.concat(_this4.getElementId('option'), '-').concat(id)
                        var innerProps = {
                            id: optionId,
                            onClick: onSelect,
                            onMouseMove: onHover,
                            onMouseOver: onHover,
                            tabIndex: -1,
                            role: 'option',
                            'aria-selected': _this4.isAppleDevice ? void 0 : isSelected
                            // is not supported on Apple devices
                        }
                        return /* @__PURE__ */ reactExports.createElement(
                            Option3,
                            _extends$n({}, commonProps, {
                                innerProps,
                                data,
                                isDisabled,
                                isSelected,
                                key: optionId,
                                label,
                                type,
                                value,
                                isFocused,
                                innerRef: isFocused ? _this4.getFocusedOptionRef : void 0
                            }),
                            _this4.formatOptionLabel(props.data, 'menu')
                        )
                    }
                    var menuUI
                    if (this.hasOptions()) {
                        menuUI = this.getCategorizedOptions().map(function (item) {
                            if (item.type === 'group') {
                                var _data = item.data,
                                    options2 = item.options,
                                    groupIndex = item.index
                                var groupId = ''
                                    .concat(_this4.getElementId('group'), '-')
                                    .concat(groupIndex)
                                var headingId = ''.concat(groupId, '-heading')
                                return /* @__PURE__ */ reactExports.createElement(
                                    Group3,
                                    _extends$n({}, commonProps, {
                                        key: groupId,
                                        data: _data,
                                        options: options2,
                                        Heading: GroupHeading3,
                                        headingProps: {
                                            id: headingId,
                                            data: item.data
                                        },
                                        label: _this4.formatGroupLabel(item.data)
                                    }),
                                    item.options.map(function (option) {
                                        return render(
                                            option,
                                            ''.concat(groupIndex, '-').concat(option.index)
                                        )
                                    })
                                )
                            } else if (item.type === 'option') {
                                return render(item, ''.concat(item.index))
                            }
                        })
                    } else if (isLoading) {
                        var message = loadingMessage2({
                            inputValue
                        })
                        if (message === null) return null
                        menuUI = /* @__PURE__ */ reactExports.createElement(
                            LoadingMessage3,
                            commonProps,
                            message
                        )
                    } else {
                        var _message = noOptionsMessage2({
                            inputValue
                        })
                        if (_message === null) return null
                        menuUI = /* @__PURE__ */ reactExports.createElement(
                            NoOptionsMessage3,
                            commonProps,
                            _message
                        )
                    }
                    var menuPlacementProps = {
                        minMenuHeight,
                        maxMenuHeight,
                        menuPlacement,
                        menuPosition,
                        menuShouldScrollIntoView
                    }
                    var menuElement = /* @__PURE__ */ reactExports.createElement(
                        MenuPlacer,
                        _extends$n({}, commonProps, menuPlacementProps),
                        function (_ref4) {
                            var ref = _ref4.ref,
                                _ref4$placerProps = _ref4.placerProps,
                                placement = _ref4$placerProps.placement,
                                maxHeight = _ref4$placerProps.maxHeight
                            return /* @__PURE__ */ reactExports.createElement(
                                Menu3,
                                _extends$n({}, commonProps, menuPlacementProps, {
                                    innerRef: ref,
                                    innerProps: {
                                        onMouseDown: _this4.onMenuMouseDown,
                                        onMouseMove: _this4.onMenuMouseMove
                                    },
                                    isLoading,
                                    placement
                                }),
                                /* @__PURE__ */ reactExports.createElement(
                                    ScrollManager,
                                    {
                                        captureEnabled: captureMenuScroll,
                                        onTopArrive: onMenuScrollToTop,
                                        onBottomArrive: onMenuScrollToBottom,
                                        lockEnabled: menuShouldBlockScroll
                                    },
                                    function (scrollTargetRef) {
                                        return /* @__PURE__ */ reactExports.createElement(
                                            MenuList3,
                                            _extends$n({}, commonProps, {
                                                innerRef: function innerRef(instance) {
                                                    _this4.getMenuListRef(instance)
                                                    scrollTargetRef(instance)
                                                },
                                                innerProps: {
                                                    role: 'listbox',
                                                    'aria-multiselectable': commonProps.isMulti,
                                                    id: _this4.getElementId('listbox')
                                                },
                                                isLoading,
                                                maxHeight,
                                                focusedOption
                                            }),
                                            menuUI
                                        )
                                    }
                                )
                            )
                        }
                    )
                    return menuPortalTarget || menuPosition === 'fixed'
                        ? /* @__PURE__ */ reactExports.createElement(
                              MenuPortal3,
                              _extends$n({}, commonProps, {
                                  appendTo: menuPortalTarget,
                                  controlElement: this.controlRef,
                                  menuPlacement,
                                  menuPosition
                              }),
                              menuElement
                          )
                        : menuElement
                }
            },
            {
                key: 'renderFormField',
                value: function renderFormField() {
                    var _this5 = this
                    var _this$props13 = this.props,
                        delimiter2 = _this$props13.delimiter,
                        isDisabled = _this$props13.isDisabled,
                        isMulti = _this$props13.isMulti,
                        name = _this$props13.name,
                        required = _this$props13.required
                    var selectValue = this.state.selectValue
                    if (required && !this.hasValue() && !isDisabled) {
                        return /* @__PURE__ */ reactExports.createElement(RequiredInput$1, {
                            name,
                            onFocus: this.onValueInputFocus
                        })
                    }
                    if (!name || isDisabled) return
                    if (isMulti) {
                        if (delimiter2) {
                            var value = selectValue
                                .map(function (opt) {
                                    return _this5.getOptionValue(opt)
                                })
                                .join(delimiter2)
                            return /* @__PURE__ */ reactExports.createElement('input', {
                                name,
                                type: 'hidden',
                                value
                            })
                        } else {
                            var input =
                                selectValue.length > 0
                                    ? selectValue.map(function (opt, i) {
                                          return /* @__PURE__ */ reactExports.createElement(
                                              'input',
                                              {
                                                  key: 'i-'.concat(i),
                                                  name,
                                                  type: 'hidden',
                                                  value: _this5.getOptionValue(opt)
                                              }
                                          )
                                      })
                                    : /* @__PURE__ */ reactExports.createElement('input', {
                                          name,
                                          type: 'hidden',
                                          value: ''
                                      })
                            return /* @__PURE__ */ reactExports.createElement('div', null, input)
                        }
                    } else {
                        var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : ''
                        return /* @__PURE__ */ reactExports.createElement('input', {
                            name,
                            type: 'hidden',
                            value: _value
                        })
                    }
                }
            },
            {
                key: 'renderLiveRegion',
                value: function renderLiveRegion() {
                    var commonProps = this.commonProps
                    var _this$state6 = this.state,
                        ariaSelection = _this$state6.ariaSelection,
                        focusedOption = _this$state6.focusedOption,
                        focusedValue = _this$state6.focusedValue,
                        isFocused = _this$state6.isFocused,
                        selectValue = _this$state6.selectValue
                    var focusableOptions = this.getFocusableOptions()
                    return /* @__PURE__ */ reactExports.createElement(
                        LiveRegion$1,
                        _extends$n({}, commonProps, {
                            id: this.getElementId('live-region'),
                            ariaSelection,
                            focusedOption,
                            focusedValue,
                            isFocused,
                            selectValue,
                            focusableOptions,
                            isAppleDevice: this.isAppleDevice
                        })
                    )
                }
            },
            {
                key: 'render',
                value: function render() {
                    var _this$getComponents8 = this.getComponents(),
                        Control3 = _this$getComponents8.Control,
                        IndicatorsContainer3 = _this$getComponents8.IndicatorsContainer,
                        SelectContainer3 = _this$getComponents8.SelectContainer,
                        ValueContainer3 = _this$getComponents8.ValueContainer
                    var _this$props14 = this.props,
                        className = _this$props14.className,
                        id = _this$props14.id,
                        isDisabled = _this$props14.isDisabled,
                        menuIsOpen = _this$props14.menuIsOpen
                    var isFocused = this.state.isFocused
                    var commonProps = (this.commonProps = this.getCommonProps())
                    return /* @__PURE__ */ reactExports.createElement(
                        SelectContainer3,
                        _extends$n({}, commonProps, {
                            className,
                            innerProps: {
                                id,
                                onKeyDown: this.onKeyDown
                            },
                            isDisabled,
                            isFocused
                        }),
                        this.renderLiveRegion(),
                        /* @__PURE__ */ reactExports.createElement(
                            Control3,
                            _extends$n({}, commonProps, {
                                innerRef: this.getControlRef,
                                innerProps: {
                                    onMouseDown: this.onControlMouseDown,
                                    onTouchEnd: this.onControlTouchEnd
                                },
                                isDisabled,
                                isFocused,
                                menuIsOpen
                            }),
                            /* @__PURE__ */ reactExports.createElement(
                                ValueContainer3,
                                _extends$n({}, commonProps, {
                                    isDisabled
                                }),
                                this.renderPlaceholderOrValue(),
                                this.renderInput()
                            ),
                            /* @__PURE__ */ reactExports.createElement(
                                IndicatorsContainer3,
                                _extends$n({}, commonProps, {
                                    isDisabled
                                }),
                                this.renderClearIndicator(),
                                this.renderLoadingIndicator(),
                                this.renderIndicatorSeparator(),
                                this.renderDropdownIndicator()
                            )
                        ),
                        this.renderMenu(),
                        this.renderFormField()
                    )
                }
            }
        ],
        [
            {
                key: 'getDerivedStateFromProps',
                value: function getDerivedStateFromProps(props, state) {
                    var prevProps = state.prevProps,
                        clearFocusValueOnUpdate = state.clearFocusValueOnUpdate,
                        inputIsHiddenAfterUpdate = state.inputIsHiddenAfterUpdate,
                        ariaSelection = state.ariaSelection,
                        isFocused = state.isFocused,
                        prevWasFocused = state.prevWasFocused,
                        instancePrefix = state.instancePrefix
                    var options2 = props.options,
                        value = props.value,
                        menuIsOpen = props.menuIsOpen,
                        inputValue = props.inputValue,
                        isMulti = props.isMulti
                    var selectValue = cleanValue(value)
                    var newMenuOptionsState = {}
                    if (
                        prevProps &&
                        (value !== prevProps.value ||
                            options2 !== prevProps.options ||
                            menuIsOpen !== prevProps.menuIsOpen ||
                            inputValue !== prevProps.inputValue)
                    ) {
                        var focusableOptions = menuIsOpen
                            ? buildFocusableOptions(props, selectValue)
                            : []
                        var focusableOptionsWithIds = menuIsOpen
                            ? buildFocusableOptionsWithIds(
                                  buildCategorizedOptions(props, selectValue),
                                  ''.concat(instancePrefix, '-option')
                              )
                            : []
                        var focusedValue = clearFocusValueOnUpdate
                            ? getNextFocusedValue(state, selectValue)
                            : null
                        var focusedOption = getNextFocusedOption(state, focusableOptions)
                        var focusedOptionId = getFocusedOptionId(
                            focusableOptionsWithIds,
                            focusedOption
                        )
                        newMenuOptionsState = {
                            selectValue,
                            focusedOption,
                            focusedOptionId,
                            focusableOptionsWithIds,
                            focusedValue,
                            clearFocusValueOnUpdate: false
                        }
                    }
                    var newInputIsHiddenState =
                        inputIsHiddenAfterUpdate != null && props !== prevProps
                            ? {
                                  inputIsHidden: inputIsHiddenAfterUpdate,
                                  inputIsHiddenAfterUpdate: void 0
                              }
                            : {}
                    var newAriaSelection = ariaSelection
                    var hasKeptFocus = isFocused && prevWasFocused
                    if (isFocused && !hasKeptFocus) {
                        newAriaSelection = {
                            value: valueTernary(isMulti, selectValue, selectValue[0] || null),
                            options: selectValue,
                            action: 'initial-input-focus'
                        }
                        hasKeptFocus = !prevWasFocused
                    }
                    if (
                        (ariaSelection === null || ariaSelection === void 0
                            ? void 0
                            : ariaSelection.action) === 'initial-input-focus'
                    ) {
                        newAriaSelection = null
                    }
                    return _objectSpread2(
                        _objectSpread2(
                            _objectSpread2({}, newMenuOptionsState),
                            newInputIsHiddenState
                        ),
                        {},
                        {
                            prevProps: props,
                            ariaSelection: newAriaSelection,
                            prevWasFocused: hasKeptFocus
                        }
                    )
                }
            }
        ]
    )
    return Select2
})(reactExports.Component)
Select.defaultProps = defaultProps
var StateManagedSelect = /* @__PURE__ */ reactExports.forwardRef(function (props, ref) {
    var baseSelectProps = useStateManager(props)
    return /* @__PURE__ */ reactExports.createElement(
        Select,
        _extends$n(
            {
                ref
            },
            baseSelectProps
        )
    )
})
var StateManagedSelect$1 = StateManagedSelect
function AddDepartmentModal({ id, refreshList }) {
    const { postData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const [departments, setDepartments] = reactExports.useState([])
    const [departmentData, setDepartmentData] = reactExports.useState({
        name: '',
        parent_id: ''
    })
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    reactExports.useEffect(() => {
        getData('/departments', setDepartments, () => {}, setError)
    }, [])
    const parentOptions = departments.map((dept) => ({
        value: dept.id,
        label: dept.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setDepartmentData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setDepartmentData({
            name: '',
            parent_id: ''
        })
        setError('')
        setIsSubmitted(false)
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        const response = await postData(
            '/departments',
            departmentData,
            () => {},
            setLoading,
            setError
        )
        if (response) {
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className: 'btn btn-primary text-nowrap border me-4',
                'data-bs-toggle': 'modal',
                'data-bs-target': `#${id}`,
                children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, {}), ' New Department']
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal fade',
                id,
                'data-bs-backdrop': 'static',
                'data-bs-keyboard': 'false',
                tabIndex: '-1',
                ref: modalRef,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                        className: 'modal-title fw-semibold text-uppercase',
                                        children: 'Add New Department'
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-body p-3',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                                    ref: formRef,
                                    className: 'row g-3 needs-validation p-3',
                                    noValidate: true,
                                    onSubmit: handleSubmit,
                                    children: [
                                        error &&
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'alert alert-danger text-center py-2',
                                                children: error
                                            }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'departmentName',
                                                    className: 'form-label',
                                                    children: 'Department Name'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'departmentName',
                                                    name: 'name',
                                                    value: departmentData.name,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter a department name.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'parentDepartment',
                                                    className: 'form-label',
                                                    children: 'Parent Department (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    StateManagedSelect$1,
                                                    {
                                                        inputId: 'parent_id',
                                                        name: 'parent_id',
                                                        options: parentOptions,
                                                        value: parentOptions.find(
                                                            (opt) =>
                                                                opt.value ===
                                                                departmentData.parent_id
                                                        ),
                                                        onChange: (selected) =>
                                                            setDepartmentData((prev2) => ({
                                                                ...prev2,
                                                                parent_id: selected?.value || ''
                                                            })),
                                                        styles: selectStyles(
                                                            !!departmentData?.parent_id ||
                                                                !isSubmitted ||
                                                                '',
                                                            false
                                                        ),
                                                        classNamePrefix: 'react-select',
                                                        isClearable: true,
                                                        className: 'form-control p-0 border-0 z-3'
                                                    }
                                                )
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'modal-footer',
                                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                'button',
                                                {
                                                    type: 'submit',
                                                    className: 'btn btn-primary w-100',
                                                    disabled: loading,
                                                    children: loading
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              jsxRuntimeExports.Fragment,
                                                              {
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'span',
                                                                          {
                                                                              className:
                                                                                  'spinner-grow spinner-grow-sm me-2',
                                                                              role: 'status'
                                                                          }
                                                                      ),
                                                                      'Submitting...'
                                                                  ]
                                                              }
                                                          )
                                                        : 'Add Department'
                                                }
                                            )
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function Department() {
    const { getData } = useAPI()
    const [departments, setDepartments] = reactExports.useState([])
    const [mainDepartments, setMainDepartments] = reactExports.useState([])
    const [loadingDepartments, setLoadingDepartments] = reactExports.useState(true)
    const [loadingMainDepartments, setLoadingMainDepartments] = reactExports.useState(true)
    const [selectedDepartment, setSelectedDepartment] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const refreshList = () => {
        getData('/departments', setDepartments, setLoadingDepartments, setError)
        getData('/departments?main', setMainDepartments, setLoadingMainDepartments, setError)
    }
    reactExports.useEffect(() => {
        refreshList()
    }, [])
    const departmentColumns = [
        { header: 'No.', accessorKey: 'id' },
        { header: 'Department', accessorKey: 'name' },
        {
            header: 'Parent Department',
            accessorFn: (row) => row.parent?.name || '',
            id: 'parentDepartment',
            filterFn: 'includesString',
            cell: ({ row }) => row.original?.parent?.name || 'N/A'
        },
        // {
        //     header: 'Supervisor',
        //     accessorFn: (row) => row.user?.name || '',
        //     id: 'supervisor',
        //     filterFn: 'includesString',
        //     cell: ({ row }) => row.original?.user?.name || 'N/A'
        // },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                    className:
                                        'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                    'data-bs-toggle': 'modal',
                                    'data-bs-target': '#',
                                    onClick: () => setSelectedDepartment(row.original),
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                        ' View'
                                    ]
                                })
                            })
                        })
                    ]
                })
        }
    ]
    const mainDepartmentColumns = [
        {
            header: 'Department',
            accessorKey: 'name',
            cell: ({ row }) => row.original?.name || 'N/A'
        },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                    className:
                                        'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                    'data-bs-toggle': 'modal',
                                    'data-bs-target': '#',
                                    onClick: () => setSelectedDepartment(row.original),
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                        ' View'
                                    ]
                                })
                            })
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className: 'card shadow w-100',
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className:
                    'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                children: 'Departments'
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'card-body',
                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'col-xl-12 p-3',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                            className: 'text-start fw-semibold',
                            children: 'Main Departments'
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                            topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                AddDepartmentModal,
                                {
                                    id: 'AddDepartmentModal',
                                    refreshList
                                }
                            ),
                            isloading: loadingMainDepartments,
                            columns: mainDepartmentColumns,
                            data: mainDepartments
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('hr', {}),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                            className: 'text-start fw-semibold',
                            children: 'All Departments'
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                            isloading: loadingDepartments,
                            columns: departmentColumns,
                            data: departments
                        })
                    ]
                })
            })
        ]
    })
}
function AddTelephoneModal({ id, refreshList }) {
    const { postData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    const [users, setUsers] = reactExports.useState([])
    const [telephoneData, setTelephoneData] = reactExports.useState({
        user_id: '',
        number: '',
        cable_code: '',
        location: '',
        description: ''
    })
    reactExports.useEffect(() => {
        getData('/users', setUsers, () => {}, setError)
    }, [])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setTelephoneData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setTelephoneData({
            user_id: '',
            number: '',
            cable_code: '',
            location: '',
            description: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        const response = await postData(
            '/telephones',
            telephoneData,
            () => {},
            setLoading,
            setError
        )
        if (response) {
            setIsSubmitted(false)
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className: 'btn btn-primary text-nowrap border me-4',
                'data-bs-toggle': 'modal',
                'data-bs-target': `#${id}`,
                children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, {}), ' New Telephone']
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal fade',
                id,
                'data-bs-backdrop': 'static',
                'data-bs-keyboard': 'false',
                tabIndex: '-1',
                ref: modalRef,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                        className: 'modal-title fw-semibold text-uppercase',
                                        children: 'Add New Telephone'
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-body p-3',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                                    ref: formRef,
                                    className: 'row g-3 needs-validation p-3',
                                    noValidate: true,
                                    onSubmit: handleSubmit,
                                    children: [
                                        error &&
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'alert alert-danger text-center py-2',
                                                children: error
                                            }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'user',
                                                    className: 'form-label',
                                                    children: 'User'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    StateManagedSelect$1,
                                                    {
                                                        inputId: 'user_id',
                                                        name: 'user_id',
                                                        options: userOptions,
                                                        value: userOptions.find(
                                                            (option) =>
                                                                option.value ===
                                                                telephoneData.user_id
                                                        ),
                                                        onChange: (selected) =>
                                                            setTelephoneData((prev2) => ({
                                                                ...prev2,
                                                                user_id: selected?.value || ''
                                                            })),
                                                        styles: selectStyles(
                                                            !!telephoneData?.user_id ||
                                                                !isSubmitted ||
                                                                ''
                                                        ),
                                                        classNamePrefix: 'react-select',
                                                        isClearable: true,
                                                        className: `form-control p-0 border-0 z-3 ${!telephoneData?.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                                    }
                                                ),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please select a user.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'telephoneNumber',
                                                    className: 'form-label',
                                                    children: 'Telephone Number'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'number',
                                                    className: 'form-control',
                                                    id: 'telephoneNumber',
                                                    name: 'number',
                                                    value: telephoneData.number,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children:
                                                        'Please enter a unique telephone number.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'cableCode',
                                                    className: 'form-label',
                                                    children: 'Cable Code'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'cableCode',
                                                    name: 'cable_code',
                                                    value: telephoneData.cable_code,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter a unique cable code.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'location',
                                                    className: 'form-label',
                                                    children: 'Location (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'location',
                                                    name: 'location',
                                                    value: telephoneData.location,
                                                    onChange: handleInputChange
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'description',
                                                    className: 'form-label',
                                                    children: 'Description (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                                    className: 'form-control',
                                                    id: 'description',
                                                    name: 'description',
                                                    rows: '2',
                                                    value: telephoneData.description,
                                                    onChange: handleInputChange
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'modal-footer',
                                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                'button',
                                                {
                                                    type: 'submit',
                                                    className: 'btn btn-primary w-100',
                                                    disabled: loading,
                                                    children: loading
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              jsxRuntimeExports.Fragment,
                                                              {
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'span',
                                                                          {
                                                                              className:
                                                                                  'spinner-grow spinner-grow-sm me-2',
                                                                              role: 'status'
                                                                          }
                                                                      ),
                                                                      'Submitting...'
                                                                  ]
                                                              }
                                                          )
                                                        : 'Add Telephone'
                                                }
                                            )
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function ViewTelephoneDetailsModal({ id, telephone }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        tabIndex: '-1',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title',
                                children: 'View telephone'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-4',
                        children: telephone
                            ? /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                  className: 'text-center',
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                      className: 'text-start p-3',
                                      children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Number:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: telephone.number || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'User:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: telephone?.user?.name || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Department:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children:
                                                          telephone?.user?.department?.name || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Cable Code:'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: telephone.cable_code || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Location:'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: telephone.location || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Description:'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: telephone.description || 'N/A'
                                                  })
                                              ]
                                          })
                                      ]
                                  })
                              })
                            : /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                  className: 'text-muted',
                                  children: 'No data available.'
                              })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-footer',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            type: 'button',
                            className: 'btn btn-secondary',
                            'data-bs-dismiss': 'modal',
                            children: 'Close'
                        })
                    })
                ]
            })
        })
    })
}
function EditTelephoneModal({ id, telephone, refreshList }) {
    const { putData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const [users, setUsers] = reactExports.useState([])
    const [telephoneData, setTelephoneData] = reactExports.useState({
        user_id: '',
        number: '',
        cable_code: '',
        location: '',
        description: ''
    })
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    reactExports.useEffect(() => {
        getData('/users', setUsers, () => {}, setError)
    }, [])
    reactExports.useEffect(() => {
        if (telephone) {
            setTelephoneData({
                user_id: telephone?.user?.id || '',
                number: telephone.number || '',
                cable_code: telephone.cable_code || '',
                location: telephone.location || '',
                description: telephone.description || ''
            })
        }
    }, [telephone])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setTelephoneData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setTelephoneData({
            user_id: '',
            number: '',
            cable_code: '',
            location: '',
            description: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        const response = await putData(
            `/telephones/${telephone.id}`,
            telephoneData,
            () => {},
            setLoading,
            setError
        )
        if (response) {
            setIsSubmitted(false)
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList?.()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        tabIndex: '-1',
        ref: modalRef,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title fw-semibold text-uppercase',
                                children: 'Edit Telephone'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal',
                                'aria-label': 'Close'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-3',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                            ref: formRef,
                            className: 'row g-3 needs-validation p-3',
                            noValidate: true,
                            onSubmit: handleSubmit,
                            children: [
                                error &&
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                        className: 'alert alert-danger text-center py-2',
                                        children: error
                                    }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'user',
                                            className: 'form-label',
                                            children: 'User'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            StateManagedSelect$1,
                                            {
                                                inputId: 'user_id',
                                                name: 'user_id',
                                                options: userOptions,
                                                value: userOptions.find(
                                                    (option) =>
                                                        option.value === telephoneData?.user_id ||
                                                        ''
                                                ),
                                                onChange: (selected) =>
                                                    setTelephoneData((prev2) => ({
                                                        ...prev2,
                                                        user_id: selected?.value || ''
                                                    })),
                                                styles: selectStyles(
                                                    !!telephoneData?.user_id || !isSubmitted || ''
                                                ),
                                                classNamePrefix: 'react-select',
                                                isClearable: true,
                                                className: `form-control p-0 border-0 z-3 ${!telephoneData?.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                            }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please select a user.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'telephoneNumber',
                                            className: 'form-label',
                                            children: 'Telephone Number'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'number',
                                            className: 'form-control',
                                            id: 'telephoneNumber',
                                            name: 'number',
                                            value: telephoneData?.number || '',
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter a unique telephone number.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'cableCode',
                                            className: 'form-label',
                                            children: 'Cable Code'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'cableCode',
                                            name: 'cable_code',
                                            value: telephoneData?.cable_code || '',
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter a unique cable code.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'location',
                                            className: 'form-label',
                                            children: 'Location (optional)'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'location',
                                            name: 'location',
                                            value: telephoneData?.location || '',
                                            onChange: handleInputChange
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'description',
                                            className: 'form-label',
                                            children: 'Description (optional)'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                            className: 'form-control',
                                            id: 'description',
                                            name: 'description',
                                            rows: '2',
                                            value: telephoneData?.description || '',
                                            onChange: handleInputChange
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'modal-footer',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'submit',
                                        className: 'btn text-light btn-warning w-100',
                                        disabled: loading,
                                        children: loading
                                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                  jsxRuntimeExports.Fragment,
                                                  {
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'span',
                                                              {
                                                                  className:
                                                                      'spinner-grow spinner-grow-sm me-2',
                                                                  role: 'status'
                                                              }
                                                          ),
                                                          'Saving...'
                                                      ]
                                                  }
                                              )
                                            : 'Update Telephone'
                                    })
                                })
                            ]
                        })
                    })
                ]
            })
        })
    })
}
function TelephoneDirectory() {
    const { getData, deleteData } = useAPI()
    const [telephones, setTelephones] = reactExports.useState([])
    const [selectedTelephone, setSelectedTelephone] = reactExports.useState(null)
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const refreshList = () => {
        getData('/telephones', setTelephones, setLoading, setError)
    }
    reactExports.useEffect(() => {
        refreshList()
    }, [])
    const handleDeleteTelephone = async () => {
        const response = await deleteData(
            `/telephones/${selectedTelephone.id}`,
            setLoading,
            setError
        )
        if (response) {
            refreshList()
        }
    }
    const columns = [
        {
            header: 'User',
            accessorFn: (row) => row.user?.name || '',
            id: 'userName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.name || 'N/A'
        },
        {
            header: 'Department',
            accessorFn: (row) => row.user?.department?.name || '',
            id: 'userDepartment',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.department?.name || 'N/A'
        },
        { header: 'Telephone Number', accessorKey: 'number' },
        { header: 'Cable Code', accessorKey: 'cable_code' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#telephoneDetailsModal',
                                        onClick: () => setSelectedTelephone(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#editTelephoneModal',
                                        onClick: () => setSelectedTelephone(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEdit, {}),
                                            ' Edit'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#deleteTelephoneConfirmModal',
                                        onClick: () => setSelectedTelephone(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaTrash, {}),
                                            ' Delete'
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                        children: 'Telephone Directory'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTelephoneModal,
                                    {
                                        id: 'AddTelephoneModal',
                                        refreshList
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: telephones
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTelephoneDetailsModal, {
                id: 'telephoneDetailsModal',
                telephone: selectedTelephone
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(EditTelephoneModal, {
                id: 'editTelephoneModal',
                telephone: selectedTelephone,
                refreshList
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'deleteTelephoneConfirmModal',
                title: 'Delete Telephone',
                message: `Are you sure you want to Delete Telephone Number ${selectedTelephone?.number}?`,
                confirmLabel: 'Delete',
                confirmClass: 'btn-danger text-light',
                cancelLabel: 'Cancel',
                onConfirm: () => handleDeleteTelephone()
            })
        ]
    })
}
const typeOptions$1 = [
    { value: 'Computer', label: 'Computer' },
    { value: 'Printer', label: 'Printer' },
    { value: 'Server', label: 'Server' },
    { value: 'Router', label: 'Router' },
    { value: 'Other', label: 'Other' }
]
function AddIpAddressModal({ id, refreshList }) {
    const { postData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    const [users, setUsers] = reactExports.useState([])
    const [ipData, setIpData] = reactExports.useState({
        user_id: '',
        ip: '',
        type: '',
        assigned_date: '',
        location: '',
        description: ''
    })
    reactExports.useEffect(() => {
        getData('/users', setUsers, () => {}, setError)
    }, [])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setIpData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setIpData({
            user_id: '',
            ip: '',
            type: '',
            assigned_date: '',
            location: '',
            description: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        const response = await postData('/ipAddress', ipData, () => {}, setLoading, setError)
        if (response) {
            setIsSubmitted(false)
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className: 'btn btn-primary text-nowrap border me-4',
                'data-bs-toggle': 'modal',
                'data-bs-target': `#${id}`,
                children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, {}), ' New IP Address']
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal fade',
                id,
                'data-bs-backdrop': 'static',
                'data-bs-keyboard': 'false',
                tabIndex: '-1',
                ref: modalRef,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                        className: 'modal-title fw-semibold text-uppercase',
                                        children: 'Add New IP Address'
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-body p-3',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                                    ref: formRef,
                                    className: 'row g-3 needs-validation p-3',
                                    noValidate: true,
                                    onSubmit: handleSubmit,
                                    children: [
                                        error &&
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'alert alert-danger text-center py-2',
                                                children: error
                                            }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'user',
                                                    className: 'form-label',
                                                    children: 'User'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    StateManagedSelect$1,
                                                    {
                                                        inputId: 'user_id',
                                                        name: 'user_id',
                                                        options: userOptions,
                                                        value: userOptions.find(
                                                            (option) =>
                                                                option.value === ipData.user_id
                                                        ),
                                                        onChange: (selected) =>
                                                            setIpData((prev2) => ({
                                                                ...prev2,
                                                                user_id: selected?.value || ''
                                                            })),
                                                        styles: selectStyles(
                                                            !!ipData?.user_id || !isSubmitted || ''
                                                        ),
                                                        classNamePrefix: 'react-select',
                                                        isClearable: true,
                                                        className: `form-control p-0 border-0 z-3 ${!ipData?.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                                    }
                                                ),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please select a user.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'ipAddress',
                                                    className: 'form-label',
                                                    children: 'IP Address'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'ipAddress',
                                                    name: 'ip',
                                                    value: ipData.ip,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter a valid IP address.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'type',
                                                    className: 'form-label',
                                                    children: 'Type'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    StateManagedSelect$1,
                                                    {
                                                        inputId: 'type',
                                                        name: 'type',
                                                        options: typeOptions$1,
                                                        value: typeOptions$1.find(
                                                            (option) => option.value === ipData.type
                                                        ),
                                                        onChange: (selected) =>
                                                            setIpData((prev2) => ({
                                                                ...prev2,
                                                                type: selected?.value || ''
                                                            })),
                                                        styles: selectStyles(
                                                            !!ipData.type || !isSubmitted
                                                        ),
                                                        classNamePrefix: 'react-select',
                                                        isClearable: true,
                                                        className: `form-control p-0 border-0 z-2 ${!ipData.type && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                                    }
                                                ),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please select a type.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'assignedDate',
                                                    className: 'form-label',
                                                    children: 'Assigned Date (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                    className: 'input-group',
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            'span',
                                                            {
                                                                className: 'input-group-text',
                                                                children:
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        FaCalendarDay,
                                                                        {}
                                                                    )
                                                            }
                                                        ),
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            'input',
                                                            {
                                                                type: 'date',
                                                                className: 'form-control z-1',
                                                                id: 'assignedDate',
                                                                name: 'assigned_date',
                                                                value: ipData.assigned_date,
                                                                onChange: handleInputChange,
                                                                max: /* @__PURE__ */ new Date()
                                                                    .toISOString()
                                                                    .split('T')[0]
                                                            }
                                                        ),
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            'button',
                                                            {
                                                                type: 'button',
                                                                className: 'btn border z-1',
                                                                onClick: () =>
                                                                    setIpData((prev2) => ({
                                                                        ...prev2,
                                                                        assigned_date:
                                                                            /* @__PURE__ */ new Date()
                                                                                .toISOString()
                                                                                .split('T')[0]
                                                                    })),
                                                                title: 'Set Today',
                                                                children: 'Today'
                                                            }
                                                        ),
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            'button',
                                                            {
                                                                type: 'button',
                                                                className: 'btn border z-1',
                                                                onClick: () =>
                                                                    setIpData((prev2) => ({
                                                                        ...prev2,
                                                                        assigned_date: ''
                                                                    })),
                                                                children:
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        FaTimes,
                                                                        {}
                                                                    )
                                                            }
                                                        )
                                                    ]
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'location',
                                                    className: 'form-label',
                                                    children: 'Location (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'location',
                                                    name: 'location',
                                                    value: ipData.location,
                                                    onChange: handleInputChange
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'description',
                                                    className: 'form-label',
                                                    children: 'Description (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                                    className: 'form-control',
                                                    id: 'description',
                                                    name: 'description',
                                                    rows: '2',
                                                    value: ipData.description,
                                                    onChange: handleInputChange
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'modal-footer',
                                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                'button',
                                                {
                                                    type: 'submit',
                                                    className: 'btn btn-primary w-100',
                                                    disabled: loading,
                                                    children: loading
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              jsxRuntimeExports.Fragment,
                                                              {
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'span',
                                                                          {
                                                                              className:
                                                                                  'spinner-grow spinner-grow-sm me-2',
                                                                              role: 'status'
                                                                          }
                                                                      ),
                                                                      'Submitting...'
                                                                  ]
                                                              }
                                                          )
                                                        : 'Add IP Address'
                                                }
                                            )
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function ViewIpAddressDetailsModal({ id, ipAddress }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        tabIndex: '-1',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title',
                                children: 'IP Address Details'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-4',
                        children: ipAddress
                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                  className: 'text-start p-3',
                                  children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'IP Address:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: ipAddress.ip || 'N/A'
                                              })
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'User:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: ipAddress?.user?.name || 'N/A'
                                              })
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'Department:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children:
                                                      ipAddress?.user?.department?.name || 'N/A'
                                              })
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'Type:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: ipAddress.type || 'N/A'
                                              })
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'Cable Code:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: ipAddress.cable_code || 'N/A'
                                              })
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'Assigned Date:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: ipAddress.assigned_date || 'N/A'
                                              })
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'Location:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: ipAddress.location || 'N/A'
                                              })
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'Description:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: ipAddress.description || 'N/A'
                                              })
                                          ]
                                      })
                                  ]
                              })
                            : /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                  className: 'text-muted text-center',
                                  children: 'No IP address data available.'
                              })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-footer',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            type: 'button',
                            className: 'btn btn-secondary',
                            'data-bs-dismiss': 'modal',
                            children: 'Close'
                        })
                    })
                ]
            })
        })
    })
}
const typeOptions = [
    { value: 'Computer', label: 'Computer' },
    { value: 'Printer', label: 'Printer' },
    { value: 'Server', label: 'Server' },
    { value: 'Router', label: 'Router' },
    { value: 'Other', label: 'Other' }
]
function EditIpAddressModal({ id, ipAddress, refreshList }) {
    const { putData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const [users, setUsers] = reactExports.useState([])
    const [ipData, setIpData] = reactExports.useState({
        user_id: '',
        ip: '',
        type: '',
        assigned_date: '',
        location: '',
        description: ''
    })
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    reactExports.useEffect(() => {
        getData('/users', setUsers, () => {}, setError)
    }, [])
    reactExports.useEffect(() => {
        if (ipAddress) {
            setIpData({
                user_id: ipAddress?.user?.id || '',
                ip: ipAddress.ip || '',
                type: ipAddress.type || '',
                assigned_date: ipAddress.assigned_date || '',
                location: ipAddress.location || '',
                description: ipAddress.description || ''
            })
        }
    }, [ipAddress])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setIpData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setIpData({
            user_id: '',
            ip: '',
            type: '',
            assigned_date: '',
            location: '',
            description: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        console.log(ipAddress.id)
        console.log(ipData)
        const response = await putData(
            `/ipAddress/${ipAddress.id}`,
            ipData,
            () => {},
            setLoading,
            setError
        )
        if (response) {
            setIsSubmitted(false)
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList?.()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        tabIndex: '-1',
        ref: modalRef,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title fw-semibold text-uppercase',
                                children: 'Edit IP Address'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal',
                                'aria-label': 'Close'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-3',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                            ref: formRef,
                            className: 'row g-3 needs-validation p-3',
                            noValidate: true,
                            onSubmit: handleSubmit,
                            children: [
                                error &&
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                        className: 'alert alert-danger text-center py-2',
                                        children: error
                                    }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'user',
                                            className: 'form-label',
                                            children: 'User'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            StateManagedSelect$1,
                                            {
                                                inputId: 'user_id',
                                                name: 'user_id',
                                                options: userOptions,
                                                value: userOptions.find(
                                                    (option) => option.value === ipData.user_id
                                                ),
                                                onChange: (selected) =>
                                                    setIpData((prev2) => ({
                                                        ...prev2,
                                                        user_id: selected?.value || ''
                                                    })),
                                                styles: selectStyles(
                                                    !!ipData.user_id || !isSubmitted
                                                ),
                                                classNamePrefix: 'react-select',
                                                isClearable: true,
                                                className: `form-control p-0 border-0 z-3 ${!ipData.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                            }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please select a user.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'ip',
                                            className: 'form-label',
                                            children: 'IP Address'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'ip',
                                            name: 'ip',
                                            value: ipData.ip,
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter a valid and unique IP address.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'type',
                                            className: 'form-label',
                                            children: 'Type'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            StateManagedSelect$1,
                                            {
                                                inputId: 'type',
                                                name: 'type',
                                                options: typeOptions,
                                                value: typeOptions.find(
                                                    (option) => option.value === ipData.type
                                                ),
                                                onChange: (selected) =>
                                                    setIpData((prev2) => ({
                                                        ...prev2,
                                                        type: selected?.value || ''
                                                    })),
                                                styles: selectStyles(!!ipData.type || !isSubmitted),
                                                classNamePrefix: 'react-select',
                                                isClearable: true,
                                                className: `form-control p-0 border-0 z-2 ${!ipData.type && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                            }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please select a type.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'assignedDate',
                                            className: 'form-label',
                                            children: 'Assigned Date (optional)'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'input-group',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                    className: 'input-group-text',
                                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        FaCalendarDay,
                                                        {}
                                                    )
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'date',
                                                    className: 'form-control z-1',
                                                    id: 'assignedDate',
                                                    name: 'assigned_date',
                                                    value: ipData.assigned_date,
                                                    onChange: handleInputChange,
                                                    max: /* @__PURE__ */ new Date()
                                                        .toISOString()
                                                        .split('T')[0]
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                                    type: 'button',
                                                    className: 'btn border z-1',
                                                    onClick: () =>
                                                        setIpData((prev2) => ({
                                                            ...prev2,
                                                            assigned_date:
                                                                /* @__PURE__ */ new Date()
                                                                    .toISOString()
                                                                    .split('T')[0]
                                                        })),
                                                    title: 'Set Today',
                                                    children: 'Today'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                                    type: 'button',
                                                    className: 'btn border z-1',
                                                    onClick: () =>
                                                        setIpData((prev2) => ({
                                                            ...prev2,
                                                            assigned_date: ''
                                                        })),
                                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        FaTimes,
                                                        {}
                                                    )
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'location',
                                            className: 'form-label',
                                            children: 'Location (optional)'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'location',
                                            name: 'location',
                                            value: ipData.location,
                                            onChange: handleInputChange
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'description',
                                            className: 'form-label',
                                            children: 'Description (optional)'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                            className: 'form-control',
                                            id: 'description',
                                            name: 'description',
                                            rows: '2',
                                            value: ipData.description,
                                            onChange: handleInputChange
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'modal-footer',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'submit',
                                        className: 'btn text-light btn-warning w-100',
                                        disabled: loading,
                                        children: loading
                                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                  jsxRuntimeExports.Fragment,
                                                  {
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'span',
                                                              {
                                                                  className:
                                                                      'spinner-grow spinner-grow-sm me-2',
                                                                  role: 'status'
                                                              }
                                                          ),
                                                          'Saving...'
                                                      ]
                                                  }
                                              )
                                            : 'Update IP Address'
                                    })
                                })
                            ]
                        })
                    })
                ]
            })
        })
    })
}
function IpAddressDirectory() {
    const { getData, deleteData } = useAPI()
    const [ipAddress, setIpaddress] = reactExports.useState([])
    const [selectedIpaddress, setSelectedIpaddress] = reactExports.useState(null)
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const refreshList = () => {
        getData('/ipAddress', setIpaddress, setLoading, setError)
    }
    reactExports.useEffect(() => {
        refreshList()
    }, [])
    const handleDeleteIpaddress = async () => {
        const response = await deleteData(
            `/ipAddress/${selectedIpaddress.id}`,
            setLoading,
            setError
        )
        if (response) {
            refreshList()
        }
    }
    const columns = [
        {
            header: 'User',
            accessorFn: (row) => row.user?.name || '',
            id: 'userName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.name || 'N/A'
        },
        {
            header: 'Department',
            accessorFn: (row) => row.user?.department?.name || '',
            id: 'userDepartment',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.department?.name || 'N/A'
        },
        { header: 'IP Address', accessorKey: 'ip' },
        { header: 'Device Type', accessorKey: 'type' },
        // { header: 'Assigned Date', accessorKey: 'assigned_date' },
        // { header: 'Location', accessorKey: 'location' },
        // { header: 'Description', accessorKey: 'description' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#ipAddressDetailsModal',
                                        onClick: () => setSelectedIpaddress(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#editIpaddressModal',
                                        onClick: () => setSelectedIpaddress(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEdit, {}),
                                            ' Edit'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#deleteIpaddressConfirmModal',
                                        onClick: () => setSelectedIpaddress(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaTrash, {}),
                                            ' Delete'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        onClick: () => {
                                            const ip = row.original?.ip
                                            if (ip) {
                                                window.api.send('open-network-path', ip)
                                            }
                                        },
                                        children: ['Open \\\\', row.original?.ip]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                        children: 'Ip Address Directory'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddIpAddressModal,
                                    {
                                        id: 'AddIpAddressModal',
                                        refreshList
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: ipAddress
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewIpAddressDetailsModal, {
                id: 'ipAddressDetailsModal',
                ipAddress: selectedIpaddress
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(EditIpAddressModal, {
                id: 'editIpaddressModal',
                ipAddress: selectedIpaddress,
                refreshList
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'deleteIpaddressConfirmModal',
                title: 'Delete Ip Address',
                message: `Are you sure you want to Delete Ip Address ${selectedIpaddress?.ip}?`,
                confirmLabel: 'Delete',
                confirmClass: 'btn-danger text-light',
                cancelLabel: 'Cancel',
                onConfirm: () => handleDeleteIpaddress()
            })
        ]
    })
}
function AddAnydeskModal({ id, refreshList }) {
    const { postData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    const [users, setUsers] = reactExports.useState([])
    const [anydeskData, setAnydeskData] = reactExports.useState({
        user_id: '',
        number: '',
        password: '',
        location: '',
        description: ''
    })
    reactExports.useEffect(() => {
        getData('/users', setUsers, () => {}, setError)
    }, [])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setAnydeskData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setAnydeskData({
            user_id: '',
            number: '',
            password: '',
            location: '',
            description: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity() || !anydeskData.user_id) {
            form.classList.add('was-validated')
            return
        }
        const response = await postData('/anydesks', anydeskData, () => {}, setLoading, setError)
        if (response) {
            setIsSubmitted(false)
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className: 'btn btn-primary text-nowrap border me-4',
                'data-bs-toggle': 'modal',
                'data-bs-target': `#${id}`,
                children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, {}), ' New Anydesk']
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal fade',
                id,
                'data-bs-backdrop': 'static',
                'data-bs-keyboard': 'false',
                tabIndex: '-1',
                ref: modalRef,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                        className: 'modal-title fw-semibold text-uppercase',
                                        children: 'Add New Anydesk'
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-body p-3',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                                    ref: formRef,
                                    className: 'row g-3 needs-validation p-3',
                                    noValidate: true,
                                    onSubmit: handleSubmit,
                                    children: [
                                        error &&
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'alert alert-danger text-center py-2',
                                                children: error
                                            }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'user',
                                                    className: 'form-label',
                                                    children: 'User'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    StateManagedSelect$1,
                                                    {
                                                        inputId: 'user_id',
                                                        name: 'user_id',
                                                        options: userOptions,
                                                        value: userOptions.find(
                                                            (option) =>
                                                                option.value === anydeskData.user_id
                                                        ),
                                                        onChange: (selected) =>
                                                            setAnydeskData((prev2) => ({
                                                                ...prev2,
                                                                user_id: selected?.value || ''
                                                            })),
                                                        styles: selectStyles(
                                                            !!anydeskData?.user_id ||
                                                                !isSubmitted ||
                                                                ''
                                                        ),
                                                        classNamePrefix: 'react-select',
                                                        isClearable: true,
                                                        className: `form-control p-0 border-0 z-3 ${!anydeskData?.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                                    }
                                                ),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please select a user.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'anydeskNumber',
                                                    className: 'form-label',
                                                    children: 'Anydesk Number'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'anydeskNumber',
                                                    name: 'number',
                                                    value: anydeskData.number,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children:
                                                        'Please enter a unique Anydesk number.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'password',
                                                    className: 'form-label',
                                                    children: 'Password (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'password',
                                                    name: 'password',
                                                    value: anydeskData.password,
                                                    onChange: handleInputChange
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'location',
                                                    className: 'form-label',
                                                    children: 'Location (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'location',
                                                    name: 'location',
                                                    value: anydeskData.location,
                                                    onChange: handleInputChange
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'description',
                                                    className: 'form-label',
                                                    children: 'Description (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                                    className: 'form-control',
                                                    id: 'description',
                                                    name: 'description',
                                                    rows: '2',
                                                    value: anydeskData.description,
                                                    onChange: handleInputChange
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'modal-footer',
                                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                'button',
                                                {
                                                    type: 'submit',
                                                    className: 'btn btn-primary w-100',
                                                    disabled: loading,
                                                    children: loading
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              jsxRuntimeExports.Fragment,
                                                              {
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'span',
                                                                          {
                                                                              className:
                                                                                  'spinner-grow spinner-grow-sm me-2',
                                                                              role: 'status'
                                                                          }
                                                                      ),
                                                                      'Submitting...'
                                                                  ]
                                                              }
                                                          )
                                                        : 'Add Anydesk'
                                                }
                                            )
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function ViewAnydeskDetailsModal({ id, anydesk }) {
    const [visible, setVisible] = reactExports.useState(false)
    const [copied, setCopied] = reactExports.useState(false)
    const password = anydesk?.password || ''
    const copyToClipboard = () => {
        if (!password) return
        navigator.clipboard.writeText(password).then(() => {
            setCopied(true)
            setTimeout(() => setCopied(false), 1500)
        })
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        tabIndex: '-1',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title',
                                children: 'View Anydesk Details'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-4',
                        children: anydesk
                            ? /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                  className: 'text-center',
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                      className: 'text-start p-3',
                                      children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'User:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: anydesk?.user?.name || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Department:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children:
                                                          anydesk?.user?.department?.name || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Number:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      children: anydesk.number || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Location:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      children: anydesk.location || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Description:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      children: anydesk.description || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                              className: 'input-group mb-3',
                                              children: password
                                                  ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                        jsxRuntimeExports.Fragment,
                                                        {
                                                            children: [
                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                    'span',
                                                                    {
                                                                        className:
                                                                            'input-group-text',
                                                                        id: 'basic-addon1',
                                                                        children:
                                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                'strong',
                                                                                {
                                                                                    className:
                                                                                        'me-2',
                                                                                    children:
                                                                                        'Password:'
                                                                                }
                                                                            )
                                                                    }
                                                                ),
                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                    'input',
                                                                    {
                                                                        type: visible
                                                                            ? 'text'
                                                                            : 'password',
                                                                        className:
                                                                            'form-control border-primary-subtle border-end-0',
                                                                        value: password,
                                                                        readOnly: true,
                                                                        autoComplete: 'off'
                                                                    }
                                                                ),
                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                    'button',
                                                                    {
                                                                        className:
                                                                            'btn border-primary-subtle',
                                                                        type: 'button',
                                                                        onClick: () =>
                                                                            setVisible(!visible),
                                                                        'aria-label': visible
                                                                            ? 'Hide password'
                                                                            : 'Show password',
                                                                        title: visible
                                                                            ? 'Hide password'
                                                                            : 'Show password',
                                                                        children: visible
                                                                            ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                  FaEyeSlash,
                                                                                  {}
                                                                              )
                                                                            : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                  FaEye,
                                                                                  {}
                                                                              )
                                                                    }
                                                                ),
                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                    'button',
                                                                    {
                                                                        className:
                                                                            'btn border-primary-subtle',
                                                                        type: 'button',
                                                                        onClick: copyToClipboard,
                                                                        'aria-label':
                                                                            'Copy password',
                                                                        title: 'Copy password',
                                                                        children: copied
                                                                            ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                  FaClipboardCheck,
                                                                                  {}
                                                                              )
                                                                            : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                                  FaClipboard,
                                                                                  {}
                                                                              )
                                                                    }
                                                                )
                                                            ]
                                                        }
                                                    )
                                                  : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                        jsxRuntimeExports.Fragment,
                                                        {
                                                            children: [
                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                    'strong',
                                                                    {
                                                                        className: 'me-2',
                                                                        children: 'Password:'
                                                                    }
                                                                ),
                                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                    'span',
                                                                    {
                                                                        className: 'text-muted',
                                                                        children: 'N/A'
                                                                    }
                                                                )
                                                            ]
                                                        }
                                                    )
                                          })
                                      ]
                                  })
                              })
                            : /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                  className: 'text-muted',
                                  children: 'No data available.'
                              })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-footer',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            type: 'button',
                            className: 'btn btn-secondary',
                            'data-bs-dismiss': 'modal',
                            children: 'Close'
                        })
                    })
                ]
            })
        })
    })
}
function EditAnydeskModal({ id, anydesk, refreshList }) {
    const { putData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const [users, setUsers] = reactExports.useState([])
    const [visible, setVisible] = reactExports.useState(false)
    const [copied, setCopied] = reactExports.useState(false)
    const [formData, setFormData] = reactExports.useState({
        user_id: '',
        number: '',
        password: '',
        location: '',
        description: ''
    })
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    reactExports.useEffect(() => {
        getData('/users', setUsers, () => {}, setError)
    }, [])
    reactExports.useEffect(() => {
        if (anydesk) {
            setFormData({
                user_id: anydesk?.user?.id || '',
                number: anydesk.number || '',
                password: anydesk.password || '',
                location: anydesk.location || '',
                description: anydesk.description || ''
            })
        }
    }, [anydesk])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setFormData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setFormData({
            user_id: '',
            number: '',
            password: '',
            location: '',
            description: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const copyToClipboard = () => {
        navigator.clipboard.writeText(formData.password || '')
        setCopied(true)
        setTimeout(() => setCopied(false), 2e3)
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        const response = await putData(
            `/anydesks/${anydesk.id}`,
            formData,
            () => {},
            setLoading,
            setError
        )
        if (response) {
            setIsSubmitted(false)
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList?.()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        tabIndex: '-1',
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        ref: modalRef,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title fw-semibold text-uppercase',
                                children: 'Edit Anydesk'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal',
                                'aria-label': 'Close'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-3',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                            ref: formRef,
                            className: 'row g-3 needs-validation p-3',
                            noValidate: true,
                            onSubmit: handleSubmit,
                            children: [
                                error &&
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                        className: 'alert alert-danger text-center py-2',
                                        children: error
                                    }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'user_id',
                                            className: 'form-label',
                                            children: 'User'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            StateManagedSelect$1,
                                            {
                                                inputId: 'user_id',
                                                name: 'user_id',
                                                options: userOptions,
                                                value: userOptions.find(
                                                    (option) => option.value === formData.user_id
                                                ),
                                                onChange: (selected) =>
                                                    setFormData((prev2) => ({
                                                        ...prev2,
                                                        user_id: selected?.value || ''
                                                    })),
                                                styles: selectStyles(
                                                    !!formData.user_id || !isSubmitted
                                                ),
                                                classNamePrefix: 'react-select',
                                                isClearable: true,
                                                className: `form-control p-0 border-0 z-3 ${!formData.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                            }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please select a user.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'number',
                                            className: 'form-label',
                                            children: 'Anydesk Number'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'number',
                                            name: 'number',
                                            value: formData.number,
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter a unique anydesk number.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'password',
                                            className: 'form-label',
                                            children: 'Password'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'input-group',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: visible ? 'text' : 'password',
                                                    className:
                                                        'form-control border-primary-subtle border-end-0',
                                                    id: 'password',
                                                    name: 'password',
                                                    value: formData.password,
                                                    onChange: handleInputChange,
                                                    autoComplete: 'off'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                                    className: 'btn border-primary-subtle',
                                                    type: 'button',
                                                    onClick: () => setVisible(!visible),
                                                    title: visible
                                                        ? 'Hide password'
                                                        : 'Show password',
                                                    children: visible
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              FaEyeSlash,
                                                              {}
                                                          )
                                                        : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              FaEye,
                                                              {}
                                                          )
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                                    className: 'btn border-primary-subtle',
                                                    type: 'button',
                                                    onClick: copyToClipboard,
                                                    title: 'Copy password',
                                                    children: copied
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              FaClipboardCheck,
                                                              {}
                                                          )
                                                        : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              FaClipboard,
                                                              {}
                                                          )
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'location',
                                            className: 'form-label',
                                            children: 'Location (optional)'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'location',
                                            name: 'location',
                                            value: formData.location,
                                            onChange: handleInputChange
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'description',
                                            className: 'form-label',
                                            children: 'Description (optional)'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                            className: 'form-control',
                                            id: 'description',
                                            name: 'description',
                                            rows: '2',
                                            value: formData.description,
                                            onChange: handleInputChange
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'modal-footer',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'submit',
                                        className: 'btn text-light btn-warning w-100',
                                        disabled: loading,
                                        children: loading
                                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                  jsxRuntimeExports.Fragment,
                                                  {
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'span',
                                                              {
                                                                  className:
                                                                      'spinner-grow spinner-grow-sm me-2',
                                                                  role: 'status'
                                                              }
                                                          ),
                                                          'Saving...'
                                                      ]
                                                  }
                                              )
                                            : 'Update Internet'
                                    })
                                })
                            ]
                        })
                    })
                ]
            })
        })
    })
}
function AnydeskDirectory() {
    const { getData, deleteData } = useAPI()
    const [anydesk, setAnydesk] = reactExports.useState([])
    const [selectedAnydesk, setSelectedAnydesk] = reactExports.useState(null)
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const refreshList = () => {
        getData('/anydesks', setAnydesk, setLoading, setError)
    }
    reactExports.useEffect(() => {
        refreshList()
    }, [])
    const handleDeleteAnydesk = async () => {
        const response = await deleteData(`/anydesks/${selectedAnydesk.id}`, setLoading, setError)
        if (response) {
            refreshList()
        }
    }
    const columns = [
        {
            header: 'User',
            accessorFn: (row) => row.user?.name || '',
            id: 'userName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.name || 'N/A'
        },
        {
            header: 'Department',
            accessorFn: (row) => row.user?.department?.name || '',
            id: 'userDepartment',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.department?.name || 'N/A'
        },
        {
            header: 'Anydesk Number',
            accessorKey: 'number',
            cell: ({ row }) => row.original?.number || 'N/A'
        },
        {
            header: 'Anydesk Password',
            accessorKey: 'password',
            cell: ({ row }) => {
                const [visible, setVisible] = reactExports.useState(false)
                const [copied, setCopied] = reactExports.useState(false)
                const password = row.original?.password
                const copyToClipboard = () => {
                    navigator.clipboard.writeText(password).then(() => {
                        setCopied(true)
                        setTimeout(() => setCopied(false), 2e3)
                    })
                }
                if (!password)
                    return /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                        className: 'text-muted',
                        children: 'N/A'
                    })
                return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'input-group',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                            type: visible ? 'text' : 'password',
                            className: 'form-control border-primary-subtle border-end-0',
                            value: password || '',
                            readOnly: true
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'btn border-primary-subtle  ',
                            type: 'button',
                            onClick: () => setVisible(!visible),
                            'aria-label': visible ? 'Hide password' : 'Show password',
                            title: visible ? 'Hide password' : 'Show password',
                            children: visible
                                ? /* @__PURE__ */ jsxRuntimeExports.jsx(FaEyeSlash, {})
                                : /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {})
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'btn border-primary-subtle ',
                            type: 'button',
                            onClick: copyToClipboard,
                            'aria-label': 'Copy password',
                            title: 'Copy password',
                            children: copied
                                ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      jsxRuntimeExports.Fragment,
                                      {
                                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                              FaClipboardCheck,
                                              {}
                                          )
                                      }
                                  )
                                : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                      jsxRuntimeExports.Fragment,
                                      {
                                          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                              FaClipboard,
                                              {}
                                          )
                                      }
                                  )
                        })
                    ]
                })
            }
        },
        // { header: 'Location', accessorKey: 'location' },
        // { header: 'Description', accessorKey: 'description' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#anydeskDetailsModal',
                                        onClick: () => setSelectedAnydesk(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#editAnydeskModal',
                                        onClick: () => setSelectedAnydesk(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEdit, {}),
                                            ' Edit'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#deleteAnydeskConfirmModal',
                                        onClick: () => setSelectedAnydesk(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaTrash, {}),
                                            ' Delete'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        type: 'button',
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        onClick: () => {
                                            setSelectedAnydesk(row.original)
                                            window.open(`anydesk:${row.original?.number}`)
                                        },
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                FaExternalLinkAlt,
                                                { className: 'text-success' }
                                            ),
                                            'Goto Anydesk'
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                        children: 'Anydesk Directory'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddAnydeskModal,
                                    { id: 'AddAnydeskModal', refreshList }
                                ),
                                isloading: loading,
                                columns,
                                data: anydesk
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewAnydeskDetailsModal, {
                id: 'anydeskDetailsModal',
                anydesk: selectedAnydesk
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(EditAnydeskModal, {
                id: 'editAnydeskModal',
                anydesk: selectedAnydesk,
                refreshList
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'deleteAnydeskConfirmModal',
                title: 'Delete Anydesk',
                message: `Are you sure you want to Delete Anydesk ${selectedAnydesk?.number}?`,
                confirmLabel: 'Delete',
                confirmClass: 'btn-danger text-light',
                cancelLabel: 'Cancel',
                onConfirm: () => handleDeleteAnydesk()
            })
        ]
    })
}
function ViewPrinterDetailsModal({ id, printer }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        tabIndex: '-1',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title',
                                children: 'View Printer'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-4',
                        children: printer
                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                  className: 'text-start p-3',
                                  children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'Name:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: printer.name || 'N/A'
                                              })
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'User:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: printer?.user?.name || 'N/A'
                                              })
                                          ]
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                          children: [
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                  className: 'me-2',
                                                  children: 'Inkcode:'
                                              }),
                                              /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                  className: 'text-uppercase',
                                                  children: printer.inkcode || 'N/A'
                                              })
                                          ]
                                      })
                                  ]
                              })
                            : /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                  className: 'text-muted text-center',
                                  children: 'No data available.'
                              })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-footer',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            type: 'button',
                            className: 'btn btn-secondary',
                            'data-bs-dismiss': 'modal',
                            children: 'Close'
                        })
                    })
                ]
            })
        })
    })
}
function EditPrinterModal({ id, printer, refreshList }) {
    const { putData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const [users, setUsers] = reactExports.useState([])
    const [printerData, setPrinterData] = reactExports.useState({
        user_id: '',
        name: '',
        inkcode: ''
    })
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    reactExports.useEffect(() => {
        getData('/users', setUsers, () => {}, setError)
    }, [])
    reactExports.useEffect(() => {
        if (printer) {
            setPrinterData({
                user_id: printer?.user?.id || '',
                name: printer.name || '',
                inkcode: printer.inkcode || ''
            })
        }
    }, [printer])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setPrinterData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setPrinterData({
            user_id: '',
            name: '',
            inkcode: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity() || !printerData.user_id) {
            form.classList.add('was-validated')
            return
        }
        const response = await putData(
            `/printers/${printer.id}`,
            printerData,
            () => {},
            setLoading,
            setError
        )
        if (response) {
            setIsSubmitted(false)
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList?.()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        tabIndex: '-1',
        ref: modalRef,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title fw-semibold text-uppercase',
                                children: 'Edit Printer'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal',
                                'aria-label': 'Close'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-3',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                            ref: formRef,
                            className: 'row g-3 needs-validation p-3',
                            noValidate: true,
                            onSubmit: handleSubmit,
                            children: [
                                error &&
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                        className: 'alert alert-danger text-center py-2',
                                        children: error
                                    }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'user',
                                            className: 'form-label',
                                            children: 'User'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            StateManagedSelect$1,
                                            {
                                                inputId: 'user_id',
                                                name: 'user_id',
                                                options: userOptions,
                                                value: userOptions.find(
                                                    (option) =>
                                                        option.value === printerData?.user_id
                                                ),
                                                onChange: (selected) =>
                                                    setPrinterData((prev2) => ({
                                                        ...prev2,
                                                        user_id: selected?.value || ''
                                                    })),
                                                styles: selectStyles(
                                                    !!printerData?.user_id || !isSubmitted || ''
                                                ),
                                                classNamePrefix: 'react-select',
                                                isClearable: true,
                                                className: `form-control p-0 border-0 z-3 ${!printerData?.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                            }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please select a user.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'name',
                                            className: 'form-label',
                                            children: 'Printer Name'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'name',
                                            name: 'name',
                                            value: printerData?.name,
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter a unique printer name.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'inkcode',
                                            className: 'form-label',
                                            children: 'Ink Code'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'inkcode',
                                            name: 'inkcode',
                                            value: printerData?.inkcode,
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter an ink code.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'modal-footer',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'submit',
                                        className: 'btn text-light btn-warning w-100',
                                        disabled: loading,
                                        children: loading
                                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                  jsxRuntimeExports.Fragment,
                                                  {
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'span',
                                                              {
                                                                  className:
                                                                      'spinner-grow spinner-grow-sm me-2',
                                                                  role: 'status'
                                                              }
                                                          ),
                                                          'Saving...'
                                                      ]
                                                  }
                                              )
                                            : 'Update Printer'
                                    })
                                })
                            ]
                        })
                    })
                ]
            })
        })
    })
}
function AddPrinterModal({ id, refreshList }) {
    const { postData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    const [users, setUsers] = reactExports.useState([])
    const [printerData, setPrinterData] = reactExports.useState({
        user_id: '',
        name: '',
        inkcode: ''
    })
    reactExports.useEffect(() => {
        getData('/users', setUsers, () => {}, setError)
    }, [])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setPrinterData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setPrinterData({
            user_id: '',
            name: '',
            inkcode: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        const response = await postData('/printers', printerData, () => {}, setLoading, setError)
        if (response) {
            setIsSubmitted(false)
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList?.()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className: 'btn btn-primary text-nowrap border me-4',
                'data-bs-toggle': 'modal',
                'data-bs-target': `#${id}`,
                children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, {}), ' New Printer']
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal fade',
                id,
                'data-bs-backdrop': 'static',
                'data-bs-keyboard': 'false',
                tabIndex: '-1',
                ref: modalRef,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                        className: 'modal-title fw-semibold text-uppercase',
                                        children: 'Add New Printer'
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-body p-3',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                                    ref: formRef,
                                    className: 'row g-3 needs-validation p-3',
                                    noValidate: true,
                                    onSubmit: handleSubmit,
                                    children: [
                                        error &&
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'alert alert-danger text-center py-2',
                                                children: error
                                            }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'user_id',
                                                    className: 'form-label',
                                                    children: 'User'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    StateManagedSelect$1,
                                                    {
                                                        inputId: 'user_id',
                                                        name: 'user_id',
                                                        options: userOptions,
                                                        value: userOptions.find(
                                                            (option) =>
                                                                option.value === printerData.user_id
                                                        ),
                                                        onChange: (selected) =>
                                                            setPrinterData((prev2) => ({
                                                                ...prev2,
                                                                user_id: selected?.value || ''
                                                            })),
                                                        styles: selectStyles(
                                                            !!printerData?.user_id ||
                                                                !isSubmitted ||
                                                                ''
                                                        ),
                                                        classNamePrefix: 'react-select',
                                                        isClearable: true,
                                                        className: `form-control p-0 border-0 z-3 ${!printerData?.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                                    }
                                                ),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please select a user.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'name',
                                                    className: 'form-label',
                                                    children: 'Printer Name'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'name',
                                                    name: 'name',
                                                    value: printerData.name,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter a unique printer name.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'inkcode',
                                                    className: 'form-label',
                                                    children: 'Ink Code'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'inkcode',
                                                    name: 'inkcode',
                                                    value: printerData.inkcode,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter an ink code.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'modal-footer',
                                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                'button',
                                                {
                                                    type: 'submit',
                                                    className: 'btn btn-primary w-100',
                                                    disabled: loading,
                                                    children: loading
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              jsxRuntimeExports.Fragment,
                                                              {
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'span',
                                                                          {
                                                                              className:
                                                                                  'spinner-grow spinner-grow-sm me-2',
                                                                              role: 'status'
                                                                          }
                                                                      ),
                                                                      'Submitting...'
                                                                  ]
                                                              }
                                                          )
                                                        : 'Add Printer'
                                                }
                                            )
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function PrinterDirectory() {
    const { getData, deleteData } = useAPI()
    const [printers, setPrinters] = reactExports.useState([])
    const [selectedprinter, setSelectedprinter] = reactExports.useState(null)
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const refreshList = () => {
        getData('/printers', setPrinters, setLoading, setError)
    }
    reactExports.useEffect(() => {
        refreshList()
    }, [])
    const handleDeletePrinter = async () => {
        const response = await deleteData(`/printers/${selectedprinter.id}`, setLoading, setError)
        if (response) {
            refreshList()
        }
    }
    const columns = [
        {
            header: 'User',
            accessorFn: (row) => row.user?.name || '',
            id: 'userName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.name || 'N/A'
        },
        {
            header: 'Department',
            accessorFn: (row) => row.user?.department?.name || '',
            id: 'userDepartment',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.department?.name || 'N/A'
        },
        { header: 'Printer', accessorKey: 'name' },
        {
            header: 'IP Address',
            accessorKey: 'ip',
            cell: ({ row }) => row.original?.user?.ip_address?.ip || 'N/A'
        },
        { header: 'Ink Code', accessorKey: 'inkcode' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#printerDetailsModal',
                                        onClick: () => setSelectedprinter(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#editPrinterModal',
                                        onClick: () => setSelectedprinter(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEdit, {}),
                                            ' Edit'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#deletePrinterConfirmModal',
                                        onClick: () => setSelectedprinter(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaTrash, {}),
                                            ' Delete'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        onClick: () => {
                                            const ip = row.original?.user?.ip_address?.ip
                                            if (ip) {
                                                window.api.send('open-network-path', ip)
                                            }
                                        },
                                        children: ['Open \\\\', row.original?.user?.ip_address?.ip]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                        children: 'Printer Directory'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddPrinterModal,
                                    { id: 'AddPrinterModal', refreshList }
                                ),
                                isloading: loading,
                                columns,
                                data: printers
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewPrinterDetailsModal, {
                id: 'printerDetailsModal',
                printer: selectedprinter
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(EditPrinterModal, {
                id: 'editPrinterModal',
                printer: selectedprinter,
                refreshList
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'deletePrinterConfirmModal',
                title: 'Delete Printer',
                message: `Are you sure you want to delete printer from employee ${selectedprinter?.user?.name}?`,
                confirmLabel: 'Delete',
                confirmClass: 'btn-danger text-light',
                cancelLabel: 'Cancel',
                onConfirm: () => handleDeletePrinter()
            })
        ]
    })
}
function AddInternetModal({ id, refreshList }) {
    const { postData, getData } = useAPI()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    const [users, setUsers] = reactExports.useState([])
    const [internetData, setInternetData] = reactExports.useState({
        user_id: '',
        name: '',
        provider: '',
        gateway: '',
        cable_code: '',
        location: '',
        description: ''
    })
    reactExports.useEffect(() => {
        getData('/users', setUsers, setLoading, setError)
    }, [getData])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setInternetData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setInternetData({
            user_id: '',
            name: '',
            provider: '',
            gateway: '',
            cable_code: '',
            location: '',
            description: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity()) {
            form.classList.add('was-validated')
            return
        }
        const response = await postData('/internet', internetData, () => {}, setLoading, setError)
        if (response) {
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current).hide()
            resetForm()
            refreshList?.()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                className: 'btn btn-primary text-nowrap border me-4',
                'data-bs-toggle': 'modal',
                'data-bs-target': `#${id}`,
                children: [/* @__PURE__ */ jsxRuntimeExports.jsx(FaPlus, {}), ' New Internet Line']
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'modal fade',
                id,
                'data-bs-backdrop': 'static',
                'data-bs-keyboard': 'false',
                tabIndex: '-1',
                ref: modalRef,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'modal-dialog modal-dialog-centered',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-content',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'modal-header',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                        className: 'modal-title fw-semibold text-uppercase',
                                        children: 'Add New Internet Line'
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn-close',
                                        'data-bs-dismiss': 'modal',
                                        'aria-label': 'Close'
                                    })
                                ]
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'modal-body p-3',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                                    ref: formRef,
                                    className: 'row g-3 needs-validation p-3',
                                    noValidate: true,
                                    onSubmit: handleSubmit,
                                    children: [
                                        error &&
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'alert alert-danger text-center py-2',
                                                children: error
                                            }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'user',
                                                    className: 'form-label',
                                                    children: 'User'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    StateManagedSelect$1,
                                                    {
                                                        inputId: 'user',
                                                        name: 'user_id',
                                                        options: userOptions,
                                                        value: userOptions.find(
                                                            (option) =>
                                                                option.value ===
                                                                internetData.user_id
                                                        ),
                                                        onChange: (selected) =>
                                                            setInternetData((prev2) => ({
                                                                ...prev2,
                                                                user_id: selected?.value || ''
                                                            })),
                                                        styles: selectStyles(
                                                            !!internetData.user_id || !isSubmitted
                                                        ),
                                                        classNamePrefix: 'react-select',
                                                        isClearable: true,
                                                        className: `form-control p-0 border-0 z-3 ${!internetData.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                                    }
                                                ),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please select a user.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'name',
                                                    className: 'form-label',
                                                    children: 'Line Name'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'name',
                                                    name: 'name',
                                                    value: internetData.name,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter the internet line name.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'provider',
                                                    className: 'form-label',
                                                    children: 'Provider'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'provider',
                                                    name: 'provider',
                                                    value: internetData.provider,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter the provider name.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'gateway',
                                                    className: 'form-label',
                                                    children: 'Gateway'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'gateway',
                                                    name: 'gateway',
                                                    value: internetData.gateway,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter the gateway address.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'cableCode',
                                                    className: 'form-label',
                                                    children: 'Cable Code'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'cableCode',
                                                    name: 'cable_code',
                                                    value: internetData.cable_code,
                                                    onChange: handleInputChange,
                                                    required: true
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                    className: 'invalid-feedback',
                                                    children: 'Please enter a unique cable code.'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'location',
                                                    className: 'form-label',
                                                    children: 'Location (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                                    type: 'text',
                                                    className: 'form-control',
                                                    id: 'location',
                                                    name: 'location',
                                                    value: internetData.location,
                                                    onChange: handleInputChange
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'col-md-12',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                                    htmlFor: 'description',
                                                    className: 'form-label',
                                                    children: 'Description (optional)'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                                    className: 'form-control',
                                                    id: 'description',
                                                    name: 'description',
                                                    rows: '2',
                                                    value: internetData.description,
                                                    onChange: handleInputChange
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'modal-footer',
                                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                'button',
                                                {
                                                    type: 'submit',
                                                    className: 'btn btn-primary w-100',
                                                    disabled: loading,
                                                    children: loading
                                                        ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                              jsxRuntimeExports.Fragment,
                                                              {
                                                                  children: [
                                                                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                          'span',
                                                                          {
                                                                              className:
                                                                                  'spinner-grow spinner-grow-sm me-2',
                                                                              role: 'status'
                                                                          }
                                                                      ),
                                                                      'Submitting...'
                                                                  ]
                                                              }
                                                          )
                                                        : 'Add Internet Line'
                                                }
                                            )
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                })
            })
        ]
    })
}
function ViewInternetDetailsModal({ id, internet }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        tabIndex: '-1',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title',
                                children: 'View internet'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-4',
                        children: internet
                            ? /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                  className: 'text-center',
                                  children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                      className: 'text-start p-3',
                                      children: [
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Provider:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: internet.provider || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'User:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: internet?.user?.name || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Department:'
                                                  }),
                                                  ' ',
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children:
                                                          internet?.user?.department?.name || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Cable Code:'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: internet.cable_code || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Gateway:'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: internet.gateway || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Location:'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: internet.location || 'N/A'
                                                  })
                                              ]
                                          }),
                                          /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('strong', {
                                                      className: 'me-2',
                                                      children: 'Description:'
                                                  }),
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                      className: 'text-uppercase',
                                                      children: internet.description || 'N/A'
                                                  })
                                              ]
                                          })
                                      ]
                                  })
                              })
                            : /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                  className: 'text-muted',
                                  children: 'No data available.'
                              })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-footer',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            type: 'button',
                            className: 'btn btn-secondary',
                            'data-bs-dismiss': 'modal',
                            children: 'Close'
                        })
                    })
                ]
            })
        })
    })
}
function EditInternetModal({ id, internet, refreshList }) {
    const { putData, getData } = useAPI()
    const { showToast } = useToast()
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [isSubmitted, setIsSubmitted] = reactExports.useState(false)
    const [users, setUsers] = reactExports.useState([])
    const [internetData, setInternetData] = reactExports.useState({
        user_id: '',
        name: '',
        provider: '',
        gateway: '',
        cable_code: '',
        location: '',
        description: ''
    })
    const modalRef = reactExports.useRef(null)
    const formRef = reactExports.useRef(null)
    reactExports.useEffect(() => {
        getData('/users', setUsers, () => {}, setError)
    }, [])
    reactExports.useEffect(() => {
        if (internet) {
            setInternetData({
                user_id: internet?.user?.id || '',
                name: internet.name || '',
                provider: internet.provider || '',
                gateway: internet.gateway || '',
                cable_code: internet.cable_code || '',
                location: internet.location || '',
                description: internet.description || ''
            })
        }
    }, [internet])
    const userOptions = users.map((user) => ({
        value: user.id,
        label: user.name
    }))
    const handleInputChange = (e) => {
        const { name, value } = e.target
        setInternetData((prev2) => ({ ...prev2, [name]: value }))
    }
    const resetForm = () => {
        setInternetData({
            user_id: '',
            name: '',
            provider: '',
            gateway: '',
            cable_code: '',
            location: '',
            description: ''
        })
        setError('')
        formRef.current?.classList.remove('was-validated')
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const form = e.target
        form.classList.remove('was-validated')
        setIsSubmitted(true)
        setError('')
        if (!form.checkValidity() || !internetData.user_id) {
            form.classList.add('was-validated')
            return
        }
        const response = await putData(
            `/internet/${internet.id}`,
            internetData,
            () => {},
            setLoading,
            setError
        )
        if (response) {
            setIsSubmitted(false)
            resetForm()
            bootstrap_bundle_minExports.Modal.getInstance(modalRef.current)?.hide()
            refreshList()
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id,
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        tabIndex: '-1',
        ref: modalRef,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title fw-semibold text-uppercase',
                                children: 'Edit Internet'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal',
                                'aria-label': 'Close'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'modal-body p-3',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                            ref: formRef,
                            className: 'row g-3 needs-validation p-3',
                            noValidate: true,
                            onSubmit: handleSubmit,
                            children: [
                                error &&
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                        className: 'alert alert-danger text-center py-2',
                                        children: error
                                    }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'user',
                                            className: 'form-label',
                                            children: 'User'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            StateManagedSelect$1,
                                            {
                                                inputId: 'user_id',
                                                name: 'user_id',
                                                options: userOptions,
                                                value: userOptions.find(
                                                    (option) =>
                                                        option.value === internetData.user_id
                                                ),
                                                onChange: (selected) =>
                                                    setInternetData((prev2) => ({
                                                        ...prev2,
                                                        user_id: selected?.value || ''
                                                    })),
                                                styles: selectStyles(
                                                    !!internetData.user_id || !isSubmitted
                                                ),
                                                classNamePrefix: 'react-select',
                                                isClearable: true,
                                                className: `form-control p-0 border-0 z-3 ${!internetData.user_id && isSubmitted ? 'is-invalid border border-danger' : ''}`
                                            }
                                        ),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please select a user.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'name',
                                            className: 'form-label',
                                            children: 'Line Name'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'name',
                                            name: 'name',
                                            value: internetData.name,
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter a name.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'provider',
                                            className: 'form-label',
                                            children: 'Provider'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'provider',
                                            name: 'provider',
                                            value: internetData.provider,
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter a provider.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'gateway',
                                            className: 'form-label',
                                            children: 'Gateway'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'gateway',
                                            name: 'gateway',
                                            value: internetData.gateway,
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter a gateway.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'cableCode',
                                            className: 'form-label',
                                            children: 'Cable Code'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'cableCode',
                                            name: 'cable_code',
                                            value: internetData.cable_code,
                                            onChange: handleInputChange,
                                            required: true
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className: 'invalid-feedback',
                                            children: 'Please enter a unique cable code.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'location',
                                            className: 'form-label',
                                            children: 'Location (optional)'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                            type: 'text',
                                            className: 'form-control',
                                            id: 'location',
                                            name: 'location',
                                            value: internetData.location,
                                            onChange: handleInputChange
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-md-12',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'description',
                                            className: 'form-label',
                                            children: 'Description (optional)'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                            className: 'form-control',
                                            id: 'description',
                                            name: 'description',
                                            rows: '2',
                                            value: internetData.description,
                                            onChange: handleInputChange
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'modal-footer',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'submit',
                                        className: 'btn text-light btn-warning w-100',
                                        disabled: loading,
                                        children: loading
                                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                  jsxRuntimeExports.Fragment,
                                                  {
                                                      children: [
                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                              'span',
                                                              {
                                                                  className:
                                                                      'spinner-grow spinner-grow-sm me-2',
                                                                  role: 'status'
                                                              }
                                                          ),
                                                          'Saving...'
                                                      ]
                                                  }
                                              )
                                            : 'Update Internet'
                                    })
                                })
                            ]
                        })
                    })
                ]
            })
        })
    })
}
function InternetDirectory() {
    const { getData, deleteData } = useAPI()
    const [internet, setInternet] = reactExports.useState([])
    const [selectedInternet, setSelectedInternet] = reactExports.useState(null)
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const refreshList = () => {
        getData('/internet', setInternet, setLoading, setError)
    }
    reactExports.useEffect(() => {
        refreshList()
    }, [])
    const handleDeleteInternet = async () => {
        const response = await deleteData(`/internet/${selectedInternet.id}`, setLoading, setError)
        if (response) {
            refreshList()
        }
    }
    const columns = [
        {
            header: 'User',
            accessorFn: (row) => row.user?.name || '',
            id: 'userName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.name || 'N/A'
        },
        {
            header: 'Department',
            accessorFn: (row) => row.user?.department?.name || '',
            id: 'userDepartment',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.department?.name || 'N/A'
        },
        { header: 'Provider', accessorKey: 'provider' },
        { header: 'Gateway', accessorKey: 'gateway' },
        // { header: 'Cable Code', accessorKey: 'cable_code' },
        // { header: 'Location', accessorKey: 'location' },
        // { header: 'Description', accessorKey: 'description' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#internetDetailsModal',
                                        onClick: () => setSelectedInternet(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#editInternetModal',
                                        onClick: () => setSelectedInternet(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEdit, {}),
                                            ' Edit'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#deleteInternetConfirmModal',
                                        onClick: () => setSelectedInternet(row.original),
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaTrash, {}),
                                            ' Delete'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        onClick: () => {
                                            const gateway = row.original?.gateway
                                            if (gateway) {
                                                window.open(`https://${gateway}`, '_blank')
                                            }
                                        },
                                        children: ['Redirect to ', row.original?.gateway]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                        children: 'Internet Directory'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddInternetModal,
                                    {
                                        id: 'AddInternetModal',
                                        refreshList
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: internet
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewInternetDetailsModal, {
                id: 'internetDetailsModal',
                internet: selectedInternet
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(EditInternetModal, {
                id: 'editInternetModal',
                internet: selectedInternet,
                refreshList
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'deleteInternetConfirmModal',
                title: 'Delete Internet Line',
                message: `Are you sure you want to Delete Internet Line with Code ${selectedInternet?.cable_code}?`,
                confirmLabel: 'Delete',
                confirmClass: 'btn-danger text-light',
                cancelLabel: 'Cancel',
                onConfirm: () => handleDeleteInternet()
            })
        ]
    })
}
function NewTickets() {
    const { getData, postData } = useAPI()
    const { showToast } = useToast()
    const [selectedTickets, setSelectedTickets2] = reactExports.useState(null)
    const [selectedUser, setSelectedUser] = reactExports.useState(null)
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const [subordinates, setSubordinates] = reactExports.useState([])
    const [confirmType, setConfirmType] = reactExports.useState('')
    const [remarks, setRemarks] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/tickets?status=new', setTickets, setLoading, setError)
    }, [])
    reactExports.useEffect(() => {
        getData(`/users/subordinates`, setSubordinates, setLoading, setError)
    }, [])
    const handleAssignButton = (ticket, user) => {
        setSelectedTickets2(ticket)
        setSelectedUser(user)
        setConfirmType('assign')
        const modal = new bootstrap_bundle_minExports.Modal(document.getElementById('confirmModal'))
        modal.show()
    }
    const handleRejectButton = (ticket) => {
        setSelectedTickets2(ticket)
        setConfirmType('reject')
        const modal = new bootstrap_bundle_minExports.Modal(document.getElementById('confirmModal'))
        modal.show()
    }
    const handleConfirm = () => {
        if (!selectedTickets) return
        let url, payload
        if (confirmType === 'assign') {
            url = `/tickets/${selectedTickets.id}/assign`
            payload = { assigned_to: selectedUser.id }
        } else {
            url = `/tickets/${selectedTickets.id}/reject`
            payload = { remarks }
        }
        postData(
            url,
            payload,
            () => {
                setRemarks('')
                setSelectedTickets2(null)
                getData('/tickets?status=pending', setTickets, setLoading, setError)
            },
            () => {},
            setError
        )
    }
    const flattenSubordinates = (users) => {
        let flat = []
        users.forEach((user) => {
            flat.push(user)
            if (user.subordinates && user.subordinates.length > 0) {
                flat = flat.concat(flattenSubordinates(user.subordinates))
            }
        })
        return flat
    }
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        { header: 'Title', accessorKey: 'title' },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            'data-bs-auto-close': 'outside',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        'data-bs-toggle': 'modal',
                                        'data-bs-target': '#ticketDetailsModal',
                                        onClick: (e) => {
                                            setSelectedTickets2(row.original)
                                            e.stopPropagation()
                                        },
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {}),
                                            ' View'
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('li', {
                                    className: 'dropdown',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                            className:
                                                'dropdown-item w-100 d-flex align-items-center gap-2 fw-semibold dropdown-toggle',
                                            type: 'button',
                                            'data-bs-toggle': 'dropdown',
                                            'aria-expanded': 'false',
                                            onClick: (e) => e.stopPropagation(),
                                            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                'span',
                                                {
                                                    className: 'me-5',
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            FaUserCheck,
                                                            {}
                                                        ),
                                                        ' Assign'
                                                    ]
                                                }
                                            )
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                                            className: 'dropdown-menu',
                                            children:
                                                subordinates.length > 0
                                                    ? flattenSubordinates(subordinates)
                                                          .filter((user) => !user.request_id)
                                                          .map((user) =>
                                                              /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                  'li',
                                                                  {
                                                                      children:
                                                                          /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                              'button',
                                                                              {
                                                                                  className:
                                                                                      'dropdown-item',
                                                                                  onClick: () =>
                                                                                      handleAssignButton(
                                                                                          row.original,
                                                                                          user
                                                                                      ),
                                                                                  children:
                                                                                      user.name
                                                                              }
                                                                          )
                                                                  },
                                                                  user.id
                                                              )
                                                          )
                                                    : /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                                          className:
                                                              'dropdown-header text-center fw-bold',
                                                          children: 'No Subordinates'
                                                      })
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                        onClick: () => handleRejectButton(row.original),
                                        className:
                                            'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx(FaTimes, {}),
                                            ' Reject'
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'card shadow w-100',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className:
                            'card-header bg-primary text-light text-uppercase fs-4 fw-semibold text-center',
                        children: 'New Tickets'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'card-body',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'col-12 p-4',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                topComponent: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    AddTicketModal,
                                    {
                                        id: 'AddTicketModal',
                                        refreshList: () =>
                                            getData(
                                                '/tickets?status=new',
                                                setTickets,
                                                setLoading,
                                                setError
                                            )
                                    }
                                ),
                                isloading: loading,
                                columns,
                                data: tickets
                            })
                        })
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ViewTicketDetailsModal, {
                id: 'ticketDetailsModal',
                data: selectedTickets
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ConfirmationModal, {
                id: 'confirmModal',
                title: `${confirmType} Ticket`,
                message: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                            className: 'mb-4',
                            children: `Are you sure you want to ${confirmType} ticket #${selectedTickets?.ticket_number}?`
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'mb-3 text-start',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                    htmlFor: 'remarks',
                                    className: 'form-label',
                                    children: 'Remarks'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('textarea', {
                                    className: 'form-control mb-1',
                                    id: 'remarks',
                                    rows: '5',
                                    value: remarks,
                                    onChange: (e) => setRemarks(e.target.value)
                                }),
                                !remarks.trim() &&
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                        className: 'small text-center text-danger',
                                        children: 'Remarks are required.'
                                    })
                            ]
                        })
                    ]
                }),
                confirmLabel: confirmType,
                confirmClass:
                    confirmType === 'assign' ? 'btn-success text-light' : 'btn-danger text-light',
                cancelLabel: 'Cancel',
                onConfirm: handleConfirm,
                disableConfirm: !remarks.trim()
            })
        ]
    })
}
const RADIAN = Math.PI / 180
const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }) => {
    const radius = innerRadius + (outerRadius - innerRadius) * 0.5
    const x2 = cx + radius * Math.cos(-midAngle * RADIAN)
    const y2 = cy + radius * Math.sin(-midAngle * RADIAN)
    return /* @__PURE__ */ jsxRuntimeExports.jsx('text', {
        x: x2,
        y: y2,
        className: 'fw-bold',
        textAnchor: x2 > cx ? 'start' : 'end',
        dominantBaseline: 'central',
        fontSize: 12,
        fill: '#333333',
        children: `${(percent * 100).toFixed(0)}%`
    })
}
function CustomPieChart({ data }) {
    const [activeIndex, setActiveIndex] = reactExports.useState(null)
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, {
        width: '100%',
        height: 200,
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(PieChart, {
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {
                    layout: 'horizontal',
                    verticalAlign: 'bottom',
                    align: 'center',
                    iconType: 'circle',
                    wrapperStyle: { fontSize: '12px', fontWeight: 'bold' }
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Pie, {
                    data,
                    cx: '50%',
                    cy: '45%',
                    outerRadius: '95%',
                    innerRadius: '20%',
                    label: renderCustomizedLabel,
                    dataKey: 'value',
                    stroke: 'white',
                    strokeWidth: 2,
                    onMouseEnter: (_, index2) => setActiveIndex(index2),
                    onMouseLeave: () => setActiveIndex(null),
                    children: data.map((entry, index2) => {
                        const isHovered = index2 === activeIndex
                        const fill = isHovered ? '#00000090' : COLORS[index2 % COLORS.length]
                        return /* @__PURE__ */ jsxRuntimeExports.jsx(
                            Cell,
                            {
                                fill,
                                style: { transition: 'fill 0.3s ease-in-out' }
                            },
                            `cell-${index2}`
                        )
                    })
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {
                    contentStyle: {
                        fontSize: '14px',
                        fontWeight: 'bold',
                        borderRadius: '10px'
                    }
                })
            ]
        })
    })
}
const CustomRadarChart = ({ data }) => {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, {
        width: '100%',
        height: 200,
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(RadarChart, {
            cx: '50%',
            cy: '50%',
            outerRadius: '90%',
            data,
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(PolarGrid, {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx(PolarAngleAxis, {
                    tick: { fontSize: 12, wordBreak: 'break-word' },
                    dataKey: 'priority'
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(PolarRadiusAxis, {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx(Radar, {
                    name: 'Volume',
                    dataKey: 'value',
                    stroke: '#82ca9d',
                    fill: '#82ca9d',
                    fillOpacity: 0.8
                })
            ]
        })
    })
}
function TeamOverview() {
    const { getData } = useAPI()
    const [statistics, setStatisticsStats] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/statistics', setStatisticsStats, setLoading, setError)
    }, [])
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className: 'card bg-light-subtle shadow text-center w-100 mb-5',
        id: 'overview',
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'card-header bg-primary text-light text-uppercase fs-3 fw-semibold',
                children: 'Team Overview'
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'row card-body',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-xl-8 m-0 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className:
                                'card bg-light-subtle h-100 p-0 rounded-4 shadow text-center mb-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'card-header',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('h2', {
                                            children: 'Welcome to the Dashboard'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            children: 'Here’s an Overview of the latest activity.'
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className:
                                        'd-flex row card-body align-items-center justify-content-center m-0 px-3',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                            title: 'Total Tickets',
                                            value: statistics.current?.teamTotalTickets,
                                            delta: statistics.delta?.teamTotalTicketsDelta,
                                            iconClass: 'bi-ticket-perforated',
                                            loading,
                                            redirectTo: '/servicedesk/tickets/all'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                            title: 'Resolved Tickets',
                                            value: statistics.current?.teamResolvedTickets,
                                            delta: statistics.delta?.teamResolvedTicketsDelta,
                                            iconClass: 'bi-clipboard-check',
                                            loading,
                                            redirectTo: '/servicedesk/tickets/resolved'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                            title: 'SLA Compliance',
                                            value: statistics.current?.teamSlaCompliance,
                                            delta: statistics.delta?.teamSlaComplianceDelta,
                                            iconClass: 'bi-shield-check',
                                            unit: '%',
                                            loading
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                            title: 'Avg Resolution Time',
                                            value: statistics.current?.teamAvgResolutionTime,
                                            delta: statistics.delta?.teamAvgResolutionTimeDelta,
                                            iconClass: 'bi-lightning-fill',
                                            isTime: true,
                                            reverseDelta: true,
                                            loading
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                            title: 'Avg Response Time',
                                            value: statistics.current?.teamAvgResponseTime,
                                            delta: statistics.delta?.teamAvgResponseTimeDelta,
                                            iconClass: 'bi-clock-history',
                                            isTime: true,
                                            reverseDelta: true,
                                            loading
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                            title: 'Pending Approvals',
                                            value: statistics.current?.teamPendingApprovals,
                                            delta: statistics.delta?.teamPendingApprovalsDelta,
                                            iconClass: 'bi-hourglass-top',
                                            reverseDelta: true,
                                            loading,
                                            redirectTo: '/servicedesk/tickets/pending'
                                        })
                                    ]
                                })
                            ]
                        })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'row col-xl-4',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'col-xl-12 pb-2 pt-4 px-4',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'card h-100 rounded-4 shadow text-center mb-3',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className:
                                                'card-header text-uppercase fs-3 fw-semibold',
                                            children: 'Ticket Status Data'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className:
                                                'd-flex card-body align-items-center justify-content-center',
                                            children: loading
                                                ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                      Placeholder$2,
                                                      { height: '200px' }
                                                  )
                                                : !statistics?.teamStatusData?.some(
                                                        (e) => e.value > 0
                                                    )
                                                  ? /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                        className: 'text-center text-muted py-4',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-info-circle fs-1 mb-2'
                                                                }
                                                            ),
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'div',
                                                                {
                                                                    className: 'fs-6',
                                                                    children: 'No data available'
                                                                }
                                                            )
                                                        ]
                                                    })
                                                  : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        CustomPieChart,
                                                        { data: statistics.teamStatusData }
                                                    )
                                        })
                                    ]
                                })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className: 'col-xl-12 pt-2 pb-4 px-4',
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'card h-100 rounded-4 shadow text-center mb-3',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className:
                                                'card-header text-uppercase fs-3 fw-semibold d-flex flex-column',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                    className: '',
                                                    children: 'Ticket Volume'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                    style: { fontSize: '0.8rem' },
                                                    children: 'by Priority'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                            className:
                                                'd-flex card-body align-items-center justify-content-center',
                                            children: loading
                                                ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                      Placeholder$2,
                                                      { height: '200px' }
                                                  )
                                                : !statistics?.teamTicketVolume?.some(
                                                        (e) => e.value > 0
                                                    )
                                                  ? /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                        className: 'text-center text-muted py-4',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-info-circle fs-1 mb-2'
                                                                }
                                                            ),
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'div',
                                                                {
                                                                    className: 'fs-6',
                                                                    children: 'No data available'
                                                                }
                                                            )
                                                        ]
                                                    })
                                                  : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                        CustomRadarChart,
                                                        { data: statistics.teamTicketVolume }
                                                    )
                                        })
                                    ]
                                })
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-xl-6 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'card h-100 rounded-4 shadow text-center mb-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'card-header text-uppercase fs-3 fw-semibold',
                                    children: 'Ticket Trends Over Time'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className:
                                        'd-flex card-body align-items-center justify-content-center',
                                    children: loading
                                        ? /* @__PURE__ */ jsxRuntimeExports.jsx(Placeholder$2, {
                                              height: '300px'
                                          })
                                        : !statistics?.teamVolumeTrends?.some((e) => e.Created > 0)
                                          ? /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className: 'text-center text-muted py-4',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                        className: 'bi bi-info-circle fs-1 mb-2'
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'fs-6',
                                                        children: 'No data available'
                                                    })
                                                ]
                                            })
                                          : /* @__PURE__ */ jsxRuntimeExports.jsx(CustomLineChart, {
                                                data: statistics?.teamVolumeTrends,
                                                hasFilter: true
                                            })
                                })
                            ]
                        })
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-xl-6 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'card h-100 rounded-4 shadow text-center mb-3',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'card-header text-uppercase fs-3 fw-semibold',
                                    children: 'Department-Wise Resolution Time'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className:
                                        'd-flex card-body align-items-center justify-content-center',
                                    children: loading
                                        ? /* @__PURE__ */ jsxRuntimeExports.jsx(Placeholder$2, {
                                              height: '300px'
                                          })
                                        : !statistics?.teamDepartmentTimes?.some(
                                                (e) =>
                                                    e.current_resolution_time > 0 &&
                                                    e.previous_resolution_time
                                            )
                                          ? /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className: 'text-center text-muted py-4',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                        className: 'bi bi-info-circle fs-1 mb-2'
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                        className: 'fs-6',
                                                        children: 'No data available'
                                                    })
                                                ]
                                            })
                                          : /* @__PURE__ */ jsxRuntimeExports.jsx(CustomBarChart, {
                                                data: statistics?.teamDepartmentTimes,
                                                datakey: 'resolution_time',
                                                display: 'Average Resolution Time'
                                            })
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    })
}
function TeamActivities() {
    const { getData } = useAPI()
    const [dataLogs, setDataLogs] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    reactExports.useEffect(() => {
        getData('/logs/ticket', setDataLogs, setLoading, setError)
    }, [])
    const columnsLogs = [
        {
            header: 'User',
            accessorFn: (row) => row.user?.name || '',
            id: 'user',
            filterFn: 'includesString'
        },
        {
            header: 'Action',
            accessorKey: 'action'
        },
        {
            header: 'Affected Ticket',
            accessorKey: 'details'
        },
        {
            header: 'Date',
            accessorKey: 'formatted_date'
        },
        {
            header: 'Timestamp',
            accessorKey: 'formatted_time'
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'card bg-light-subtle shadow text-center w-100 mb-5',
            id: 'activities',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-header bg-primary text-light text-uppercase fs-3 fw-semibold',
                    children: 'Team Activities'
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'row card-body',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'col-xl-12 m-0 p-4',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                                className: 'text-start fw-semibold',
                                children: 'Recent Tasks & Assignments'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                isloading: loading,
                                columns: columnsLogs,
                                data: dataLogs
                            })
                        ]
                    })
                })
            ]
        })
    })
}
function TeamReports() {
    const columnsEmployeesPerformance = [
        {
            header: 'Employee',
            accessorKey: 'employee'
        },
        {
            header: 'Tickets Resolved',
            accessorKey: 'ticketsResolved'
        },
        {
            header: 'Avg. Response Time',
            accessorKey: 'avgResponseTime'
        },
        {
            header: 'SLA Compliance',
            accessorKey: 'slaCompliance'
        },
        {
            header: 'Escalations',
            accessorKey: 'escalations'
        },
        {
            header: 'Performance Score',
            accessorKey: 'performanceScore'
        }
    ]
    const dataEmployeesPerformance = [
        {
            employee: 'John Doe',
            ticketsResolved: 42,
            avgResponseTime: '1h 10m',
            slaCompliance: '95%',
            escalations: 1,
            performanceScore: '⭐⭐⭐⭐☆ (4.5/5)'
        },
        {
            employee: 'Jane Smith',
            ticketsResolved: 38,
            avgResponseTime: '1h 30m',
            slaCompliance: '90%',
            escalations: 2,
            performanceScore: '⭐⭐⭐⭐☆ (4.3/5)'
        },
        {
            employee: 'Mark Lee',
            ticketsResolved: 45,
            avgResponseTime: '2h 05m',
            slaCompliance: '85%',
            escalations: 4,
            performanceScore: '⭐⭐⭐☆ (3.8/5)'
        },
        {
            employee: 'Sarah Kim',
            ticketsResolved: 50,
            avgResponseTime: '1h 20m',
            slaCompliance: '98%',
            escalations: 0,
            performanceScore: '⭐⭐⭐⭐⭐ (5/5)'
        },
        {
            employee: 'David Brown',
            ticketsResolved: 30,
            avgResponseTime: '2h 45m',
            slaCompliance: '80%',
            escalations: 3,
            performanceScore: '⭐⭐⭐☆ (3.6/5)'
        },
        {
            employee: 'Emily White',
            ticketsResolved: 55,
            avgResponseTime: '50m',
            slaCompliance: '99%',
            escalations: 0,
            performanceScore: '⭐⭐⭐⭐⭐ (5/5)'
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'card bg-light-subtle shadow text-center w-100 mb-5',
            id: 'reports',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-header bg-primary text-light text-uppercase fs-3 fw-semibold',
                    children: 'Team Performance Reports'
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'row card-body',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-xl-12 m-0 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'row',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                                    className: 'text-start fw-semibold',
                                    children: 'Weekly Performance Report'
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-3 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-header text-uppercase fw-semibold',
                                                children: 'Total Tickets Closed'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className:
                                                    'd-flex flex-column card-body align-items-center justify-content-center',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                                        className:
                                                            'card-text display-3 m-0 fw-bold',
                                                        children: '3'
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                                        className: 'text-success fs-5 fw-bold',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-arrow-up-short'
                                                                }
                                                            ),
                                                            '5',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-ticket-perforated ms-2'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                        style: { fontSize: '0.8rem' },
                                                        className: 'text-muted',
                                                        children: 'vs previews 7 days'
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-3 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-header text-uppercase fw-semibold',
                                                children: 'Avg. Resolution Time'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className:
                                                    'd-flex flex-column card-body align-items-center justify-content-center',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                        className:
                                                            'card-text display-3 m-0 fw-bold',
                                                        children: [
                                                            '10',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'span',
                                                                {
                                                                    className: 'fs-5',
                                                                    children: 'mins'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                                        className: 'text-danger fs-5 fw-bold',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-arrow-down-short'
                                                                }
                                                            ),
                                                            '2 mins',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-lightning-fill ms-2'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                        style: { fontSize: '0.8rem' },
                                                        className: 'text-muted',
                                                        children: 'vs previews 7 days'
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-3 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-header text-uppercase fw-semibold',
                                                children: 'SLA Compliance'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className:
                                                    'd-flex flex-column card-body align-items-center justify-content-center',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                        className:
                                                            'card-text display-3 m-0 fw-bold',
                                                        children: [
                                                            '98',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'span',
                                                                { className: 'fs-5', children: '%' }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                                        className: 'text-success fs-5 fw-bold',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-arrow-up-short'
                                                                }
                                                            ),
                                                            '8%',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-shield-check ms-2'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                        style: { fontSize: '0.8rem' },
                                                        className: 'text-muted',
                                                        children: 'vs previews 7 days'
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-3 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-header text-uppercase fw-semibold',
                                                children: 'Employee Satisfaction'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                                className:
                                                    'd-flex flex-column card-body align-items-center justify-content-center',
                                                children: [
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('p', {
                                                        className:
                                                            'card-text display-3 m-0 fw-bold',
                                                        children: [
                                                            '5.0',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                                'span',
                                                                {
                                                                    className: 'fs-5',
                                                                    children: [
                                                                        '/5.0',
                                                                        /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                            'i',
                                                                            {
                                                                                className:
                                                                                    'bi bi-star-fill text-warning'
                                                                            }
                                                                        )
                                                                    ]
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsxs('span', {
                                                        className: 'text-success fs-5 fw-bold',
                                                        children: [
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-arrow-up-short'
                                                                }
                                                            ),
                                                            '1%',
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                'i',
                                                                {
                                                                    className:
                                                                        'bi bi-emoji-smile-fill ms-2'
                                                                }
                                                            )
                                                        ]
                                                    }),
                                                    /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                                        style: { fontSize: '0.8rem' },
                                                        className: 'text-muted',
                                                        children: 'vs previews 7 days'
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'col-xl-12 p-3',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('h4', {
                                            className: 'text-start fw-semibold',
                                            children: 'Weekly Employee’s Performance'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                                            columns: columnsEmployeesPerformance,
                                            data: dataEmployeesPerformance
                                        })
                                    ]
                                })
                            ]
                        })
                    })
                })
            ]
        })
    })
}
function Login() {
    const { darkMode } = reactExports.useContext(ThemeContext$1)
    const { login, getAuthUser } = useAPI()
    const [username, setUsername] = reactExports.useState('')
    const [password, setPassword] = reactExports.useState('')
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const [rememberMe, setRememberMe] = reactExports.useState(true)
    const navigate = useNavigate()
    reactExports.useEffect(() => {
        const storedUsername = localStorage.getItem('username')
        const storedPassword = localStorage.getItem('password')
        if (storedUsername) setUsername(storedUsername)
        if (storedPassword) setPassword(storedPassword)
    }, [])
    const handleLogin = async (e) => {
        e.preventDefault()
        const response = await login(username, password, setLoading, setError)
        if (response) {
            getAuthUser()
            if (rememberMe) {
                localStorage.setItem('username', username)
                localStorage.setItem('password', password)
            } else {
                localStorage.removeItem('username')
                localStorage.removeItem('password')
            }
            navigate('/dashboard')
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className: 'shadow-lg p-4 rounded-4 border',
        style: { width: '20rem' },
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx('img', {
                src: darkMode ? logoLight : logoDark,
                className: 'img-fluid d-flex mx-auto mb-3',
                width: 80,
                alt: 'Company Logo'
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('h2', {
                className: 'text-center mb-3',
                children: 'LOGIN'
            }),
            error &&
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'alert alert-danger text-center py-2',
                    children: error
                }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                className: 'needs-validation',
                noValidate: true,
                onSubmit: handleLogin,
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'mb-3',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                htmlFor: 'username',
                                className: 'form-label',
                                children: 'Username'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                type: 'text',
                                className: 'form-control',
                                id: 'username',
                                value: username,
                                onChange: (e) => setUsername(e.target.value),
                                required: true,
                                autoComplete: 'username',
                                'aria-label': 'Enter your username'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'mb-3',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                htmlFor: 'password',
                                className: 'form-label',
                                children: 'Password'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                type: 'password',
                                className: 'form-control',
                                id: 'password',
                                required: true,
                                value: password,
                                onChange: (e) => setPassword(e.target.value)
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'mb-3 form-check',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                type: 'checkbox',
                                className: 'form-check-input',
                                id: 'rememberMe',
                                checked: rememberMe,
                                onChange: (e) => setRememberMe(e.target.checked)
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                className: 'form-check-label',
                                htmlFor: 'rememberMe',
                                children: 'Remember me'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                        className: 'btn btn-primary w-100 rounded-4 mb-2',
                        type: 'submit',
                        disabled: loading,
                        children: loading
                            ? /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
                                  children: [
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                          className: 'spinner-grow spinner-grow-sm'
                                      }),
                                      /* @__PURE__ */ jsxRuntimeExports.jsx('span', {
                                          className: 'ms-2',
                                          children: 'Logging in...'
                                      })
                                  ]
                              })
                            : 'Login'
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                className: 'd-flex align-items-center',
                children: /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                    className: 'btn border-0',
                    onClick: () => navigate('/forgot-password'),
                    children: 'Forgot password?'
                })
            })
        ]
    })
}
function ResetTokenModal({ resetToken, setResetToken }) {
    const [copied, setCopied] = reactExports.useState(false)
    const navigate = useNavigate()
    const modalRef = reactExports.useRef(null)
    const handleCopy = () => {
        navigator.clipboard.writeText(resetToken).then(() => {
            setCopied(true)
            setTimeout(() => setCopied(false), 2e3)
        })
    }
    const goToReset = () => {
        setResetToken('')
        navigate('/reset-password')
    }
    reactExports.useEffect(() => {
        if (resetToken && modalRef.current) {
            const modalInstance =
                bootstrap_bundle_minExports.Modal.getInstance(modalRef.current) ||
                new bootstrap_bundle_minExports.Modal(modalRef.current)
            if (!modalRef.current.classList.contains('show')) {
                modalInstance.show()
            }
        }
    }, [resetToken])
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'modal fade',
        id: 'resetTokenModal',
        'data-bs-backdrop': 'static',
        'data-bs-keyboard': 'false',
        tabIndex: '-1',
        'aria-labelledby': 'resetTokenModalLabel',
        ref: modalRef,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
            className: 'modal-dialog modal-dialog-centered',
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                className: 'modal-content shadow-sm rounded-3 border-0',
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-header',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('h5', {
                                className: 'modal-title fw-bold text-uppercase',
                                id: 'resetTokenModalLabel',
                                children: 'Reset Token'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                type: 'button',
                                className: 'btn-close',
                                'data-bs-dismiss': 'modal',
                                'aria-label': 'Close'
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'modal-body p-4 text-center',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('p', {
                                className: 'fw-semibold text-secondary text-uppercase mb-2',
                                children: 'Your Secure Reset Token:'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                className:
                                    'bg-light border rounded px-3 py-2 mb-3 text-break small',
                                children: resetToken
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                className:
                                    'btn btn-outline-secondary btn-sm d-flex align-items-center mx-auto mb-2',
                                onClick: handleCopy,
                                children: copied
                                    ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          jsxRuntimeExports.Fragment,
                                          {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                      FaCheckCircle,
                                                      { className: 'me-2', size: 16 }
                                                  ),
                                                  'Copied!'
                                              ]
                                          }
                                      )
                                    : /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                          jsxRuntimeExports.Fragment,
                                          {
                                              children: [
                                                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                      FaClipboard,
                                                      { className: 'me-2', size: 16 }
                                                  ),
                                                  'Copy to Clipboard'
                                              ]
                                          }
                                      )
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('small', {
                                className: 'd-block text-danger mb-3',
                                children: 'Please save this token for the next step.'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                className:
                                    'btn btn-primary w-100 btn-sm d-flex justify-content-center align-items-center gap-2',
                                onClick: goToReset,
                                'data-bs-dismiss': 'modal',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(FaArrowRight, {}),
                                    'Go to Reset Password'
                                ]
                            })
                        ]
                    })
                ]
            })
        })
    })
}
function ForgotPassword() {
    const { requestPasswordReset } = useAPI()
    const [username, setUsername] = reactExports.useState('')
    const [rfid, setRfid] = reactExports.useState('')
    const [resetToken, setResetToken] = reactExports.useState('')
    const [loading, setLoading] = reactExports.useState(false)
    const [error, setError] = reactExports.useState('')
    const navigate = useNavigate()
    const handleSubmit = async (e) => {
        e.preventDefault()
        const response = await requestPasswordReset({ username, rfid }, setLoading, setError)
        if (response) {
            setError('')
            setResetToken(response.token)
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className: 'shadow-lg p-4 rounded-4 border',
        style: { width: '20rem' },
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx('h2', {
                className: 'text-center mb-3',
                children: 'Forgot Password'
            }),
            error &&
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'alert alert-danger text-center py-2',
                    children: error
                }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                noValidate: true,
                onSubmit: handleSubmit,
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'mb-3',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                htmlFor: 'email',
                                className: 'form-label',
                                children: 'RFID'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                type: 'number',
                                className: 'form-control',
                                id: 'rfid',
                                required: true,
                                value: rfid,
                                onChange: (e) => setRfid(e.target.value)
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'mb-3',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                htmlFor: 'email',
                                className: 'form-label',
                                children: 'Username'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                type: 'text',
                                className: 'form-control',
                                id: 'username',
                                required: true,
                                value: username,
                                onChange: (e) => setUsername(e.target.value)
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                        type: 'submit',
                        className: 'btn btn-primary w-100 mb-2',
                        disabled: loading,
                        children: loading ? 'Generating...' : 'Generate Password Reset Token'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                        type: 'button',
                        className: 'btn btn-outline-secondary w-100 btn-sm',
                        onClick: () => navigate('/'),
                        children: 'Back to Login'
                    })
                ]
            }),
            resetToken &&
                /* @__PURE__ */ jsxRuntimeExports.jsx(ResetTokenModal, {
                    resetToken,
                    setResetToken
                })
        ]
    })
}
function ResetPassword() {
    const { passwordReset } = useAPI()
    const [resetToken, setResetToken] = reactExports.useState('')
    const [password, setPassword] = reactExports.useState('')
    const [passwordConfirm, setPasswordConfirm] = reactExports.useState('')
    const [message, setMessage] = reactExports.useState('')
    const [error, setError] = reactExports.useState('')
    const [loading, setLoading] = reactExports.useState(false)
    const { showToast } = useToast()
    const navigate = useNavigate()
    const handlePaste = async () => {
        try {
            const text2 = await navigator.clipboard.readText()
            setResetToken(text2)
        } catch (err) {
            console.error('Clipboard paste failed:', err)
        }
    }
    const handleSubmit = async (e) => {
        e.preventDefault()
        const response = await passwordReset(
            {
                token: resetToken,
                password,
                password_confirmation: passwordConfirm
            },
            setLoading,
            setError
        )
        if (response) {
            setMessage(response.message)
            navigate('/login')
        }
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
        className: 'shadow-lg p-4 rounded-4 border',
        style: { width: '20rem' },
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx('h2', {
                className: 'text-center mb-3',
                children: 'Reset Password'
            }),
            error &&
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'alert alert-danger text-center py-2',
                    children: error
                }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs('form', {
                onSubmit: handleSubmit,
                noValidate: true,
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'mb-3',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                htmlFor: 'resetToken',
                                className: 'form-label',
                                children: 'Reset Token'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                className: 'input-group',
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                        type: 'text',
                                        className: 'form-control',
                                        id: 'resetToken',
                                        required: true,
                                        value: resetToken,
                                        onChange: (e) => setResetToken(e.target.value)
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                                        type: 'button',
                                        className: 'btn border btn-sm',
                                        title: 'Paste from clipboard',
                                        onClick: handlePaste,
                                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            FaClipboardCheck,
                                            { size: 16 }
                                        )
                                    })
                                ]
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'mb-3',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                htmlFor: 'password',
                                className: 'form-label',
                                children: 'New Password'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                type: 'password',
                                className: 'form-control',
                                id: 'password',
                                required: true,
                                value: password,
                                onChange: (e) => setPassword(e.target.value)
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                        className: 'mb-3',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                htmlFor: 'passwordConfirm',
                                className: 'form-label',
                                children: 'Confirm Password'
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx('input', {
                                type: 'password',
                                className: 'form-control',
                                id: 'passwordConfirm',
                                required: true,
                                value: passwordConfirm,
                                onChange: (e) => setPasswordConfirm(e.target.value)
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                        type: 'submit',
                        className: 'btn btn-primary w-100 mb-2',
                        disabled: loading,
                        children: loading ? 'Resetting...' : 'Reset Password'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                        type: 'button',
                        className: 'btn btn-outline-secondary w-100 btn-sm',
                        onClick: () => navigate('/'),
                        children: 'Back to Login'
                    })
                ]
            })
        ]
    })
}
function TelephoneList() {
    const { getData } = useAPI()
    const [telephones, setTelephones] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const refreshList = () => {
        getData('/telephones', setTelephones, setLoading, setError)
    }
    reactExports.useEffect(() => {
        refreshList()
    }, [])
    const columns = [
        { header: 'Telephone Number', accessorKey: 'number' },
        {
            header: 'User',
            accessorFn: (row) => row.user?.name || '',
            id: 'userName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.name || 'N/A'
        },
        {
            header: 'Department',
            accessorFn: (row) => row.user?.department?.name || '',
            id: 'userDepartment',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.user?.department?.name || 'N/A'
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'card shadow w-100',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className:
                        'card-header bg-primary text-light text-uppercase fs-3 fw-semibold text-center',
                    children: 'Telephone List'
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-body',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-12 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(CustomTable, {
                            isloading: loading,
                            columns,
                            data: telephones
                        })
                    })
                })
            ]
        })
    })
}
function PerformanceTracking() {
    const { getData } = useAPI()
    const [statistics, setStatisticsStats] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const [period, setPeriod] = reactExports.useState('monthly')
    reactExports.useEffect(() => {
        getData('/statistics', setStatisticsStats, setLoading, setError)
    }, [])
    const columnsEmployeesPerformance = [
        {
            header: 'Employee',
            accessorKey: 'employee'
        },
        {
            header: 'Tickets Resolved',
            accessorKey: 'ticketsResolved'
        },
        {
            header: 'Avg. Response Time',
            accessorKey: 'avgResponseTime'
        },
        {
            header: 'SLA Compliance',
            accessorKey: 'slaCompliance'
        },
        {
            header: 'Escalations',
            accessorKey: 'escalations'
        },
        {
            header: 'Performance Score',
            accessorKey: 'performanceScore'
        },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                    className: 'btn btn-sm btn-primary',
                    'data-bs-toggle': 'modal',
                    'data-bs-target': '#',
                    children: 'View Report'
                })
        }
    ]
    const dataEmployeesPerformance = [
        {
            employee: 'John Doe',
            ticketsResolved: 42,
            avgResponseTime: '1h 10m',
            slaCompliance: '95%',
            escalations: 1,
            performanceScore: '⭐⭐⭐⭐☆ (4.5/5)'
        },
        {
            employee: 'Jane Smith',
            ticketsResolved: 38,
            avgResponseTime: '1h 30m',
            slaCompliance: '90%',
            escalations: 2,
            performanceScore: '⭐⭐⭐⭐☆ (4.3/5)'
        },
        {
            employee: 'Mark Lee',
            ticketsResolved: 45,
            avgResponseTime: '2h 05m',
            slaCompliance: '85%',
            escalations: 4,
            performanceScore: '⭐⭐⭐☆ (3.8/5)'
        },
        {
            employee: 'Sarah Kim',
            ticketsResolved: 50,
            avgResponseTime: '1h 20m',
            slaCompliance: '98%',
            escalations: 0,
            performanceScore: '⭐⭐⭐⭐⭐ (5/5)'
        },
        {
            employee: 'David Brown',
            ticketsResolved: 30,
            avgResponseTime: '2h 45m',
            slaCompliance: '80%',
            escalations: 3,
            performanceScore: '⭐⭐⭐☆ (3.6/5)'
        },
        {
            employee: 'Emily White',
            ticketsResolved: 55,
            avgResponseTime: '50m',
            slaCompliance: '99%',
            escalations: 0,
            performanceScore: '⭐⭐⭐⭐⭐ (5/5)'
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'card bg-light-subtle shadow text-center w-100 mb-5',
            id: 'overview',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-header bg-primary text-light text-uppercase fs-3 fw-semibold',
                    children: 'Performance Tracking'
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'row card-body',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-xl-12 m-0 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'row bg-light-subtle border m-0 p-3 rounded-4 shadow',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className:
                                        'd-flex justify-content-between align-items-center p-3',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('h2', {
                                            className: 'fw-bold mb-0',
                                            children: [
                                                'Performance Dashboard ',
                                                /* @__PURE__ */ jsxRuntimeExports.jsx(FaBolt, {
                                                    className: 'text-warning'
                                                })
                                            ]
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'btn-group gap-2',
                                            role: 'group',
                                            'aria-label': 'Export options',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                    type: 'button',
                                                    className: 'btn btn-primary rounded-3',
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                            className:
                                                                'bi bi-file-earmark-pdf-fill me-1'
                                                        }),
                                                        ' Export PDF'
                                                    ]
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                    type: 'button',
                                                    className:
                                                        'btn btn-primary text-light rounded-3',
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                            className:
                                                                'bi bi-file-earmark-excel-fill me-1'
                                                        }),
                                                        ' ',
                                                        'Export Excel'
                                                    ]
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                    type: 'button',
                                                    className: 'btn btn-primary rounded-3',
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                            className: 'bi bi-printer-fill me-1'
                                                        }),
                                                        ' Print'
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'mb-2 d-flex',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'chartFilter',
                                            className: 'form-label me-2 mb-0 align-self-center',
                                            children: 'Filter:'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('select', {
                                            id: 'chartFilter',
                                            className: 'form-select form-select-sm w-auto',
                                            value: period,
                                            onChange: (e) => setPeriod(e.target.value),
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'weekly',
                                                    children: 'Last 7 Days'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'monthly',
                                                    children: 'Last 30 Days'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'quarterly',
                                                    children: 'Last 90 Days'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'yearly',
                                                    children: 'Last Year'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'all',
                                                    children: 'All'
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Total Tickets Resolved',
                                    iconClass: 'bi-ticket-perforated',
                                    loading,
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Avg Performance Score',
                                    iconClass: 'bi-ticket-perforated',
                                    loading,
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'SLA Compliance',
                                    iconClass: 'bi-ticket-perforated',
                                    loading,
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Employee Satisfaction',
                                    iconClass: 'bi-emoji-smile',
                                    unit: '%',
                                    loading,
                                    col: 3
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Avg Resolution Time',
                                    iconClass: 'bi-lightning-fill',
                                    isTime: true,
                                    reverseDelta: true,
                                    loading
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Avg Response Time',
                                    iconClass: 'bi-clock-history',
                                    isTime: true,
                                    reverseDelta: true,
                                    loading
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Tickets Escalated',
                                    iconClass: 'bi-arrow-up-right-circle',
                                    loading
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Top Performers'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamVolumeTrends?.some(
                                                            (e) =>
                                                                e.Created > 0 &&
                                                                e.Failed &&
                                                                e.Reopened &&
                                                                e.Resolved
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomBarChart,
                                                            {
                                                                data: statistics?.teamDepartmentTimes
                                                            }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Low Performers Needing Attention'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamVolumeTrends?.some(
                                                            (e) =>
                                                                e.Created > 0 &&
                                                                e.Failed &&
                                                                e.Reopened &&
                                                                e.Resolved
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomBarChart,
                                                            {
                                                                data: statistics?.teamDepartmentTimes
                                                            }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Department-Wise Performance'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamVolumeTrends?.some(
                                                            (e) =>
                                                                e.Created > 0 &&
                                                                e.Failed &&
                                                                e.Reopened &&
                                                                e.Resolved
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomLineChart,
                                                            { data: statistics?.teamVolumeTrends }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Goal Achievement Rate'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamVolumeTrends?.some(
                                                            (e) =>
                                                                e.Created > 0 &&
                                                                e.Failed &&
                                                                e.Reopened &&
                                                                e.Resolved
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomLineChart,
                                                            { data: statistics?.teamVolumeTrends }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-12 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card shadow w-100',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header bg-light text-uppercase fs-4 fw-semibold text-center',
                                                children: 'Employee’s Performance Records'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-body',
                                                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    'div',
                                                    {
                                                        className: 'col-12 p-4',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                CustomTable,
                                                                {
                                                                    columns:
                                                                        columnsEmployeesPerformance,
                                                                    data: dataEmployeesPerformance
                                                                }
                                                            )
                                                    }
                                                )
                                            })
                                        ]
                                    })
                                })
                            ]
                        })
                    })
                })
            ]
        })
    })
}
function CustomAreaChart({ data }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'w-100',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, {
            width: '100%',
            height: 350,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(AreaChart, {
                width: 500,
                height: 400,
                data,
                margin: {
                    top: 10,
                    right: 30,
                    left: 0,
                    bottom: 0
                },
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, {
                        strokeDasharray: '3 3'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: 'name' }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Area, {
                        type: 'monotone',
                        dataKey: 'uv',
                        stroke: '#8884d8',
                        fill: '#8884d8'
                    })
                ]
            })
        })
    })
}
function CustomStackedBarChart({ data }) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
        className: 'w-100',
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, {
            width: '100%',
            height: 300,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(BarChart, {
                data,
                margin: {
                    top: 20,
                    right: 30,
                    left: 20,
                    bottom: 5
                },
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, {
                        strokeDasharray: '3 3'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: 'name' }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {}),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, {
                        dataKey: 'pv',
                        stackId: 'a',
                        fill: '#8884d8'
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, {
                        dataKey: 'uv',
                        stackId: 'a',
                        fill: '#82ca9d'
                    })
                ]
            })
        })
    })
}
function TicketAnalytics() {
    const { getData } = useAPI()
    const [statistics, setStatisticsStats] = reactExports.useState([])
    const [tickets, setTickets] = reactExports.useState([])
    const [loading, setLoading] = reactExports.useState(true)
    const [ticketLoading, setTicketLoading] = reactExports.useState(true)
    const [error, setError] = reactExports.useState('')
    const [period, setPeriod] = reactExports.useState('monthly')
    reactExports.useEffect(() => {
        getData('/statistics', setStatisticsStats, setLoading, setError)
    }, [])
    reactExports.useEffect(() => {
        getData(`/tickets`, setTickets, setTicketLoading, setError)
    }, [])
    const columns = [
        { header: 'Tickets No.', accessorKey: 'ticket_number' },
        {
            header: 'Priority Level',
            accessorFn: (row) => row.priority?.name || '',
            id: 'priorityName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.priority?.name || 'N/A'
        },
        {
            header: 'From Department',
            accessorFn: (row) => row.origin_department?.name || '',
            id: 'origin_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.origin_department?.name || 'N/A'
        },
        {
            header: 'To Department',
            accessorFn: (row) => row.target_department?.name || '',
            id: 'target_departmentName',
            filterFn: 'includesString',
            cell: ({ row }) => row.original.target_department?.name || 'N/A'
        },
        {
            header: 'Status',
            accessorKey: 'status',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsx(StatusBadge, { status: row.original.status })
        },
        {
            header: 'Title',
            accessorKey: 'title',
            cell: ({ row }) => row.original.title || 'N/A'
        },
        {
            header: 'Updated At',
            accessorKey: 'updated_at',
            cell: ({ row }) => formatDateVerbose(row.original.updated_at)
        },
        {
            header: 'Actions',
            accessorKey: 'actions',
            cell: ({ row }) =>
                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                    className: 'dropdown',
                    children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsx('button', {
                            className: 'action-btn btn border-0',
                            'data-bs-toggle': 'dropdown',
                            'aria-expanded': 'false',
                            'aria-label': 'More actions',
                            title: 'More actions',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                className: 'bi bi-list fs-5'
                            })
                        }),
                        /* @__PURE__ */ jsxRuntimeExports.jsx('ul', {
                            className: 'dropdown-menu dropdown-menu-end shadow-sm rounded-3',
                            children: /* @__PURE__ */ jsxRuntimeExports.jsx('li', {
                                children: /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                    className:
                                        'dropdown-item d-flex align-items-center gap-2 fw-semibold',
                                    'data-bs-toggle': 'modal',
                                    'data-bs-target': '#ticketDetailsModal',
                                    onClick: () => setSelectedTickets(row.original),
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx(FaEye, {
                                            className: 'me-1'
                                        }),
                                        ' View'
                                    ]
                                })
                            })
                        })
                    ]
                })
        }
    ]
    const areaData = [
        {
            name: 'Page A',
            uv: 4e3,
            pv: 2400,
            amt: 2400
        },
        {
            name: 'Page B',
            uv: 3e3,
            pv: 1398,
            amt: 2210
        },
        {
            name: 'Page C',
            uv: 2e3,
            pv: 9800,
            amt: 2290
        },
        {
            name: 'Page D',
            uv: 2780,
            pv: 3908,
            amt: 2e3
        },
        {
            name: 'Page E',
            uv: 1890,
            pv: 4800,
            amt: 2181
        },
        {
            name: 'Page F',
            uv: 2390,
            pv: 3800,
            amt: 2500
        },
        {
            name: 'Page G',
            uv: 3490,
            pv: 4300,
            amt: 2100
        }
    ]
    const stackedBarChartData = [
        {
            name: 'Page A',
            uv: 4e3,
            pv: 2400,
            amt: 2400
        },
        {
            name: 'Page B',
            uv: 3e3,
            pv: 1398,
            amt: 2210
        },
        {
            name: 'Page C',
            uv: 2e3,
            pv: 9800,
            amt: 2290
        },
        {
            name: 'Page D',
            uv: 2780,
            pv: 3908,
            amt: 2e3
        },
        {
            name: 'Page E',
            uv: 1890,
            pv: 4800,
            amt: 2181
        },
        {
            name: 'Page F',
            uv: 2390,
            pv: 3800,
            amt: 2500
        },
        {
            name: 'Page G',
            uv: 3490,
            pv: 4300,
            amt: 2100
        }
    ]
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
            className: 'card bg-light-subtle shadow text-center w-100 mb-5',
            id: 'overview',
            children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'card-header bg-primary text-light text-uppercase fs-3 fw-semibold',
                    children: 'Ticket Analytics'
                }),
                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                    className: 'row card-body',
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                        className: 'col-xl-12 m-0 p-4',
                        children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                            className: 'row bg-light-subtle border m-0 p-3 rounded-4 shadow',
                            children: [
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className:
                                        'd-flex justify-content-between align-items-center p-3',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('h2', {
                                            className: 'fw-bold mb-0',
                                            children: 'Overview Metrics'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                            className: 'btn-group gap-2',
                                            role: 'group',
                                            'aria-label': 'Export options',
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                    type: 'button',
                                                    className: 'btn btn-primary rounded-3',
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                            className:
                                                                'bi bi-file-earmark-pdf-fill me-1'
                                                        }),
                                                        ' Export PDF'
                                                    ]
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                    type: 'button',
                                                    className:
                                                        'btn btn-primary text-light rounded-3',
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                            className:
                                                                'bi bi-file-earmark-excel-fill me-1'
                                                        }),
                                                        ' ',
                                                        'Export Excel'
                                                    ]
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsxs('button', {
                                                    type: 'button',
                                                    className: 'btn btn-primary rounded-3',
                                                    children: [
                                                        /* @__PURE__ */ jsxRuntimeExports.jsx('i', {
                                                            className: 'bi bi-printer-fill me-1'
                                                        }),
                                                        ' Print'
                                                    ]
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                    className: 'mb-2 d-flex',
                                    children: [
                                        /* @__PURE__ */ jsxRuntimeExports.jsx('label', {
                                            htmlFor: 'chartFilter',
                                            className: 'form-label me-2 mb-0 align-self-center',
                                            children: 'Filter:'
                                        }),
                                        /* @__PURE__ */ jsxRuntimeExports.jsxs('select', {
                                            id: 'chartFilter',
                                            className: 'form-select form-select-sm w-auto',
                                            value: period,
                                            onChange: (e) => setPeriod(e.target.value),
                                            children: [
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'weekly',
                                                    children: 'Last 7 Days'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'monthly',
                                                    children: 'Last 30 Days'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'quarterly',
                                                    children: 'Last 90 Days'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'yearly',
                                                    children: 'Last Year'
                                                }),
                                                /* @__PURE__ */ jsxRuntimeExports.jsx('option', {
                                                    value: 'all',
                                                    children: 'All'
                                                })
                                            ]
                                        })
                                    ]
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'All Tickets',
                                    iconClass: 'bi-ticket-perforated',
                                    loading
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Pending Tickets',
                                    iconClass: 'bi-ticket-perforated',
                                    loading
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'New Tickets',
                                    iconClass: 'bi-ticket-perforated',
                                    loading
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Open Tickets',
                                    iconClass: 'bi-emoji-smile',
                                    unit: '%',
                                    loading,
                                    col: 2
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'In Progress Tickets',
                                    iconClass: 'bi-lightning-fill',
                                    isTime: true,
                                    reverseDelta: true,
                                    loading,
                                    col: 2
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Resolved Tickets',
                                    iconClass: 'bi-clock-history',
                                    isTime: true,
                                    reverseDelta: true,
                                    loading,
                                    col: 2
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Closed Tickets',
                                    iconClass: 'bi-arrow-up-right-circle',
                                    loading,
                                    col: 2
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Failed Tickets',
                                    iconClass: 'bi-arrow-up-right-circle',
                                    loading,
                                    col: 2
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx(StatisticsCard, {
                                    title: 'Rejected Tickets',
                                    iconClass: 'bi-arrow-up-right-circle',
                                    loading,
                                    col: 2
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Tickets Over Time'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamVolumeTrends?.some(
                                                            (e) =>
                                                                e.Created > 0 &&
                                                                e.Failed &&
                                                                e.Reopened &&
                                                                e.Resolved
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomLineChart,
                                                            { data: statistics?.teamVolumeTrends }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Resolution Time Trend'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamVolumeTrends?.some(
                                                            (e) =>
                                                                e.Created > 0 &&
                                                                e.Failed &&
                                                                e.Reopened &&
                                                                e.Resolved
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomLineChart,
                                                            { data: statistics?.teamVolumeTrends }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Volume by Day of Week'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamVolumeTrends?.some(
                                                            (e) => e.Created > 0
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomBarChart,
                                                            {
                                                                data: statistics?.teamDepartmentTimes
                                                            }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Spike Detection'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamVolumeTrends?.some(
                                                            (e) =>
                                                                e.Created > 0 &&
                                                                e.Failed &&
                                                                e.Reopened &&
                                                                e.Resolved
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomAreaChart,
                                                            { data: areaData }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-6 p-4',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card h-100 rounded-4 shadow text-center mb-3',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header text-uppercase fs-3 fw-semibold',
                                                children: 'Volume by Category'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'd-flex card-body align-items-center justify-content-center',
                                                children: loading
                                                    ? /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                          Placeholder$2,
                                                          { height: '300px' }
                                                      )
                                                    : !statistics?.teamVolumeTrends?.some(
                                                            (e) =>
                                                                e.Created > 0 &&
                                                                e.Failed &&
                                                                e.Reopened &&
                                                                e.Resolved
                                                        )
                                                      ? /* @__PURE__ */ jsxRuntimeExports.jsxs(
                                                            'div',
                                                            {
                                                                className:
                                                                    'text-center text-muted py-4',
                                                                children: [
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'i',
                                                                        {
                                                                            className:
                                                                                'bi bi-info-circle fs-1 mb-2'
                                                                        }
                                                                    ),
                                                                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                        'div',
                                                                        {
                                                                            className: 'fs-6',
                                                                            children:
                                                                                'No data available'
                                                                        }
                                                                    )
                                                                ]
                                                            }
                                                        )
                                                      : /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                            CustomStackedBarChart,
                                                            { data: stackedBarChartData }
                                                        )
                                            })
                                        ]
                                    })
                                }),
                                /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                    className: 'col-xl-12 p-3',
                                    children: /* @__PURE__ */ jsxRuntimeExports.jsxs('div', {
                                        className: 'card rounded-4 shadow w-100',
                                        children: [
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className:
                                                    'card-header rounded-top-4 bg-light text-uppercase fs-4 fw-semibold text-center',
                                                children: 'All Tickets'
                                            }),
                                            /* @__PURE__ */ jsxRuntimeExports.jsx('div', {
                                                className: 'card-body',
                                                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                    'div',
                                                    {
                                                        className: 'col-12 p-4',
                                                        children:
                                                            /* @__PURE__ */ jsxRuntimeExports.jsx(
                                                                CustomTable,
                                                                {
                                                                    hasExportOptions: true,
                                                                    hasFilterByHeader: true,
                                                                    hasSearch: false,
                                                                    isloading: ticketLoading,
                                                                    columns,
                                                                    data: tickets
                                                                }
                                                            )
                                                    }
                                                )
                                            })
                                        ]
                                    })
                                })
                            ]
                        })
                    })
                })
            ]
        })
    })
}
const PrivateRoute = ({ element, allowedRoles, isAuth, authUser }) => {
    if (!isAuth) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: '/login', replace: true })
    }
    return element
}
function App() {
    const { authUser } = useAPI()
    const isAuth = !!sessionStorage.getItem('token')
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, {
        children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                path: '/',
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, {
                    to: isAuth ? '/dashboard' : '/login'
                })
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(AuthLayout, {}),
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                        path: '/login',
                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(Login, {})
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                        path: '/forgot-password',
                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(ForgotPassword, {})
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                        path: '/reset-password',
                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(ResetPassword, {})
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(PrivateRoute, {
                    element: /* @__PURE__ */ jsxRuntimeExports.jsx(MainLayout, {}),
                    isAuth,
                    authUser
                }),
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                        path: '/dashboard',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                index: true,
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, {
                                    to: 'overview',
                                    replace: true
                                })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'overview',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(TeamOverview, {})
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'activities',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(TeamActivities, {})
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'reports',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(TeamReports, {})
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                        path: '/servicedesk',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                index: true,
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, {
                                    to: 'overview',
                                    replace: true
                                })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'overview',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(MyOverview, {})
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'reports',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(MyReports, {})
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                                path: 'tickets',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    ServiceDeskTicketLayout,
                                    {}
                                ),
                                children: [
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        index: true,
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, {
                                            to: 'all',
                                            replace: true
                                        })
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        path: 'all',
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            AllTickets,
                                            {}
                                        )
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        path: 'pending',
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            PendingTickets,
                                            {}
                                        )
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        path: 'closed',
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            ClosedTickets,
                                            {}
                                        )
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        path: 'new',
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            NewTickets,
                                            {}
                                        )
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        path: 'open',
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            OpenTickets,
                                            {}
                                        )
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        path: 'inprogress',
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            InProgressTickets,
                                            {}
                                        )
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        path: 'resolved',
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            ResolvedTickets,
                                            {}
                                        )
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        path: 'failed',
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            FailedTickets,
                                            {}
                                        )
                                    }),
                                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                        path: 'rejected',
                                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                            RejectedTickets,
                                            {}
                                        )
                                    })
                                ]
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                        path: '/employees',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                index: true,
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, {
                                    to: 'all',
                                    replace: true
                                })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'all',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(AllEmployees, {})
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'departments',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Department, {})
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'roles',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(RolesPermissions, {})
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'logs',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(ActivityLog, {})
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                        path: '/directory',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                index: true,
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, {
                                    to: 'telephones',
                                    replace: true
                                })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'telephoneList',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(TelephoneList, {})
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                        path: '/itdirectory',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                index: true,
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, {
                                    to: 'internet',
                                    replace: true
                                })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'telephones',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    TelephoneDirectory,
                                    {}
                                )
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'internet',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    InternetDirectory,
                                    {}
                                )
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'ipAddress',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    IpAddressDirectory,
                                    {}
                                )
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'anydesks',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(AnydeskDirectory, {})
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'printers',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(PrinterDirectory, {})
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                        path: '/reports',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                index: true,
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, {
                                    to: 'performance',
                                    replace: true
                                })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'analytics',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(TicketAnalytics, {})
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'performance',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(
                                    PerformanceTracking,
                                    {}
                                )
                            })
                        ]
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                        path: '/settings',
                        children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                index: true,
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, {
                                    to: 'telephones',
                                    replace: true
                                })
                            }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                                path: 'telephoneList',
                                element: /* @__PURE__ */ jsxRuntimeExports.jsx(TelephoneList, {})
                            })
                        ]
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, {
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(PrivateRoute, {
                    element: /* @__PURE__ */ jsxRuntimeExports.jsx(ProfileLayout, {})
                }),
                children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                        path: '/profile',
                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(Profile, {})
                    }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                        path: '/settings',
                        element: /* @__PURE__ */ jsxRuntimeExports.jsx(Settings, {})
                    })
                ]
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                path: '/403',
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorPage, { errorCode: 403 })
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                path: '/404',
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorPage, { errorCode: 404 })
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                path: '/500',
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(ErrorPage, { errorCode: 500 })
            }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, {
                path: '*',
                element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: '/404' })
            })
        ]
    })
}
ReactDOM.createRoot(document.getElementById('root')).render(
    /* @__PURE__ */ jsxRuntimeExports.jsx(React.StrictMode, {
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(HashRouter, {
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(ToastProvider, {
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider, {
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(APIProvider, {
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {})
                    })
                })
            })
        })
    })
)
